// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018
// Date        : Wed Dec 28 11:48:11 2022
// Host        : Lenovo running 64-bit major release  (build 9200)
// Command     : write_verilog -mode funcsim -nolib -force -file
//               C:/arty_sv_sampler.xpr/arty_sv_sampler/arty_sv_sampler.sim/sim_1/impl/func/xsim/mouse_xyz_tb_func_impl.v
// Design      : mcs_top_heat_arty_a7
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7vx485tffg1761-2
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

module baud_gen
   (\r_reg_reg[3]_0 ,
    out,
    \r_reg_reg[10]_0 ,
    Q);
  output \r_reg_reg[3]_0 ;
  input out;
  input \r_reg_reg[10]_0 ;
  input [10:0]Q;

  (* DONT_TOUCH *) wire [10:0]Q;
  wire load;
  (* DONT_TOUCH *) wire out;
  wire [9:1]r_next;
  wire r_next1_carry_i_1_n_0;
  wire r_next1_carry_i_2_n_0;
  wire r_next1_carry_i_3_n_0;
  wire r_next1_carry_i_4_n_0;
  wire \r_reg[0]_i_1_n_0 ;
  wire \r_reg[10]_i_1_n_0 ;
  wire \r_reg[10]_i_2_n_0 ;
  wire \r_reg[5]_i_2_n_0 ;
  wire \r_reg[6]_i_2_n_0 ;
  (* DONT_TOUCH *) wire \r_reg_reg[10]_0 ;
  (* DONT_TOUCH *) wire \r_reg_reg[3]_0 ;
  wire [10:0]r_reg_reg__0;
  wire tick_inferred_i_2_n_0;
  wire [2:0]NLW_r_next1_carry_CO_UNCONNECTED;
  wire [3:0]NLW_r_next1_carry_O_UNCONNECTED;

  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 r_next1_carry
       (.CI(1'b0),
        .CO({load,NLW_r_next1_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_r_next1_carry_O_UNCONNECTED[3:0]),
        .S({r_next1_carry_i_1_n_0,r_next1_carry_i_2_n_0,r_next1_carry_i_3_n_0,r_next1_carry_i_4_n_0}));
  LUT4 #(
    .INIT(16'h9009)) 
    r_next1_carry_i_1
       (.I0(r_reg_reg__0[10]),
        .I1(Q[10]),
        .I2(r_reg_reg__0[9]),
        .I3(Q[9]),
        .O(r_next1_carry_i_1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    r_next1_carry_i_2
       (.I0(Q[8]),
        .I1(r_reg_reg__0[8]),
        .I2(Q[7]),
        .I3(r_reg_reg__0[7]),
        .I4(r_reg_reg__0[6]),
        .I5(Q[6]),
        .O(r_next1_carry_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    r_next1_carry_i_3
       (.I0(Q[5]),
        .I1(r_reg_reg__0[5]),
        .I2(Q[4]),
        .I3(r_reg_reg__0[4]),
        .I4(r_reg_reg__0[3]),
        .I5(Q[3]),
        .O(r_next1_carry_i_3_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    r_next1_carry_i_4
       (.I0(Q[2]),
        .I1(r_reg_reg__0[2]),
        .I2(Q[1]),
        .I3(r_reg_reg__0[1]),
        .I4(r_reg_reg__0[0]),
        .I5(Q[0]),
        .O(r_next1_carry_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \r_reg[0]_i_1 
       (.I0(load),
        .I1(r_reg_reg__0[0]),
        .O(\r_reg[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000006AAAAAAA)) 
    \r_reg[10]_i_1 
       (.I0(r_reg_reg__0[10]),
        .I1(r_reg_reg__0[7]),
        .I2(r_reg_reg__0[8]),
        .I3(r_reg_reg__0[9]),
        .I4(\r_reg[10]_i_2_n_0 ),
        .I5(load),
        .O(\r_reg[10]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \r_reg[10]_i_2 
       (.I0(\r_reg[6]_i_2_n_0 ),
        .I1(r_reg_reg__0[6]),
        .O(\r_reg[10]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'h06)) 
    \r_reg[1]_i_1 
       (.I0(r_reg_reg__0[1]),
        .I1(r_reg_reg__0[0]),
        .I2(load),
        .O(r_next[1]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h006A)) 
    \r_reg[2]_i_1 
       (.I0(r_reg_reg__0[2]),
        .I1(r_reg_reg__0[0]),
        .I2(r_reg_reg__0[1]),
        .I3(load),
        .O(r_next[2]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT5 #(
    .INIT(32'h00006AAA)) 
    \r_reg[3]_i_1 
       (.I0(r_reg_reg__0[3]),
        .I1(r_reg_reg__0[1]),
        .I2(r_reg_reg__0[0]),
        .I3(r_reg_reg__0[2]),
        .I4(load),
        .O(r_next[3]));
  LUT6 #(
    .INIT(64'h000000006AAAAAAA)) 
    \r_reg[4]_i_1 
       (.I0(r_reg_reg__0[4]),
        .I1(r_reg_reg__0[2]),
        .I2(r_reg_reg__0[0]),
        .I3(r_reg_reg__0[1]),
        .I4(r_reg_reg__0[3]),
        .I5(load),
        .O(r_next[4]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'h06)) 
    \r_reg[5]_i_1 
       (.I0(r_reg_reg__0[5]),
        .I1(\r_reg[5]_i_2_n_0 ),
        .I2(load),
        .O(r_next[5]));
  LUT5 #(
    .INIT(32'h80000000)) 
    \r_reg[5]_i_2 
       (.I0(r_reg_reg__0[3]),
        .I1(r_reg_reg__0[1]),
        .I2(r_reg_reg__0[0]),
        .I3(r_reg_reg__0[2]),
        .I4(r_reg_reg__0[4]),
        .O(\r_reg[5]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h06)) 
    \r_reg[6]_i_1 
       (.I0(r_reg_reg__0[6]),
        .I1(\r_reg[6]_i_2_n_0 ),
        .I2(load),
        .O(r_next[6]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \r_reg[6]_i_2 
       (.I0(r_reg_reg__0[4]),
        .I1(r_reg_reg__0[2]),
        .I2(r_reg_reg__0[0]),
        .I3(r_reg_reg__0[1]),
        .I4(r_reg_reg__0[3]),
        .I5(r_reg_reg__0[5]),
        .O(\r_reg[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'h06)) 
    \r_reg[7]_i_1 
       (.I0(r_reg_reg__0[7]),
        .I1(\r_reg[10]_i_2_n_0 ),
        .I2(load),
        .O(r_next[7]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'h006A)) 
    \r_reg[8]_i_1 
       (.I0(r_reg_reg__0[8]),
        .I1(\r_reg[10]_i_2_n_0 ),
        .I2(r_reg_reg__0[7]),
        .I3(load),
        .O(r_next[8]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT5 #(
    .INIT(32'h00006AAA)) 
    \r_reg[9]_i_1 
       (.I0(r_reg_reg__0[9]),
        .I1(r_reg_reg__0[8]),
        .I2(r_reg_reg__0[7]),
        .I3(\r_reg[10]_i_2_n_0 ),
        .I4(load),
        .O(r_next[9]));
  FDCE #(
    .INIT(1'b0)) 
    \r_reg_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_reg_reg[10]_0 ),
        .D(\r_reg[0]_i_1_n_0 ),
        .Q(r_reg_reg__0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \r_reg_reg[10] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_reg_reg[10]_0 ),
        .D(\r_reg[10]_i_1_n_0 ),
        .Q(r_reg_reg__0[10]));
  FDCE #(
    .INIT(1'b0)) 
    \r_reg_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_reg_reg[10]_0 ),
        .D(r_next[1]),
        .Q(r_reg_reg__0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \r_reg_reg[2] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_reg_reg[10]_0 ),
        .D(r_next[2]),
        .Q(r_reg_reg__0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \r_reg_reg[3] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_reg_reg[10]_0 ),
        .D(r_next[3]),
        .Q(r_reg_reg__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \r_reg_reg[4] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_reg_reg[10]_0 ),
        .D(r_next[4]),
        .Q(r_reg_reg__0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \r_reg_reg[5] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_reg_reg[10]_0 ),
        .D(r_next[5]),
        .Q(r_reg_reg__0[5]));
  FDCE #(
    .INIT(1'b0)) 
    \r_reg_reg[6] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_reg_reg[10]_0 ),
        .D(r_next[6]),
        .Q(r_reg_reg__0[6]));
  FDCE #(
    .INIT(1'b0)) 
    \r_reg_reg[7] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_reg_reg[10]_0 ),
        .D(r_next[7]),
        .Q(r_reg_reg__0[7]));
  FDCE #(
    .INIT(1'b0)) 
    \r_reg_reg[8] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_reg_reg[10]_0 ),
        .D(r_next[8]),
        .Q(r_reg_reg__0[8]));
  FDCE #(
    .INIT(1'b0)) 
    \r_reg_reg[9] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_reg_reg[10]_0 ),
        .D(r_next[9]),
        .Q(r_reg_reg__0[9]));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    tick_inferred_i_1
       (.I0(r_reg_reg__0[3]),
        .I1(r_reg_reg__0[4]),
        .I2(r_reg_reg__0[2]),
        .I3(r_reg_reg__0[1]),
        .I4(r_reg_reg__0[0]),
        .I5(tick_inferred_i_2_n_0),
        .O(\r_reg_reg[3]_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    tick_inferred_i_2
       (.I0(r_reg_reg__0[7]),
        .I1(r_reg_reg__0[8]),
        .I2(r_reg_reg__0[5]),
        .I3(r_reg_reg__0[6]),
        .I4(r_reg_reg__0[10]),
        .I5(r_reg_reg__0[9]),
        .O(tick_inferred_i_2_n_0));
endmodule

(* W_SIZE = "6" *) 
module chu_ps2_core
   (clk,
    reset,
    cs,
    read,
    write,
    addr,
    wr_data,
    rd_data,
    ps2d,
    ps2c);
  (* dont_touch = "true" *) input clk;
  (* dont_touch = "true" *) input reset;
  (* dont_touch = "true" *) input cs;
  (* dont_touch = "true" *) input read;
  (* dont_touch = "true" *) input write;
  (* dont_touch = "true" *) input [4:0]addr;
  (* dont_touch = "true" *) input [31:0]wr_data;
  (* dont_touch = "true" *) output [31:0]rd_data;
  inout ps2d;
  inout ps2c;

  (* DONT_TOUCH *) wire [4:0]addr;
  (* DONT_TOUCH *) wire clk;
  (* DONT_TOUCH *) wire cs;
  wire ps2c;
  wire ps2d;
  (* DONT_TOUCH *) wire [31:0]rd_data;
  wire rd_fifo;
  (* DONT_TOUCH *) wire read;
  (* DONT_TOUCH *) wire reset;
  (* DONT_TOUCH *) wire [31:0]wr_data;
  wire wr_ps2;
  (* DONT_TOUCH *) wire write;

  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(rd_data[31]));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(rd_data[30]));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(rd_data[21]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(rd_data[20]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(rd_data[19]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(rd_data[18]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(rd_data[17]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(rd_data[16]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(rd_data[15]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(rd_data[14]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(rd_data[13]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(rd_data[12]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(rd_data[29]));
  LUT1 #(
    .INIT(2'h2)) 
    i_20
       (.I0(1'b0),
        .O(rd_data[11]));
  LUT1 #(
    .INIT(2'h2)) 
    i_21
       (.I0(1'b0),
        .O(rd_data[10]));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(rd_data[28]));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(rd_data[27]));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(rd_data[26]));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(rd_data[25]));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(rd_data[24]));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(rd_data[23]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(rd_data[22]));
  (* W_SIZE = "6" *) 
  ps2_top ps2_unit
       (.clk(clk),
        .ps2_rx_buf_empty(rd_data[8]),
        .ps2_rx_data(rd_data[7:0]),
        .ps2_tx_data(wr_data[7:0]),
        .ps2_tx_idle(rd_data[9]),
        .ps2c(ps2c),
        .ps2d(ps2d),
        .rd_ps2_packet(rd_fifo),
        .reset(reset),
        .wr_ps2(wr_ps2));
  LUT4 #(
    .INIT(16'h0080)) 
    ps2_unit_i_1
       (.I0(cs),
        .I1(write),
        .I2(addr[1]),
        .I3(addr[0]),
        .O(wr_ps2));
  LUT4 #(
    .INIT(16'h8000)) 
    ps2_unit_i_2
       (.I0(cs),
        .I1(read),
        .I2(addr[0]),
        .I3(addr[1]),
        .O(rd_fifo));
endmodule

module chu_timer
   (Q,
    in0,
    out,
    \count_reg_reg[0]_0 ,
    \count_reg_reg[0]_1 ,
    ctrl_reg_reg_0,
    ctrl_reg_reg_1,
    \dvsr_reg_reg[10] ,
    rd_data,
    mmio_rd_data_inferred_i_17_0,
    \count_reg_reg[0]_2 ,
    ctrl_reg_reg_2);
  output [15:0]Q;
  output [15:0]in0;
  input out;
  input \count_reg_reg[0]_0 ;
  input [1:0]\count_reg_reg[0]_1 ;
  input [7:0]ctrl_reg_reg_0;
  input ctrl_reg_reg_1;
  input \dvsr_reg_reg[10] ;
  input [15:0]rd_data;
  input [15:0]mmio_rd_data_inferred_i_17_0;
  input \count_reg_reg[0]_2 ;
  input ctrl_reg_reg_2;

  wire [15:0]Q;
  wire [47:0]count_reg;
  wire [47:1]count_reg0;
  wire count_reg0_carry__0_n_0;
  wire count_reg0_carry__1_n_0;
  wire count_reg0_carry__2_n_0;
  wire count_reg0_carry__3_n_0;
  wire count_reg0_carry__4_n_0;
  wire count_reg0_carry__5_n_0;
  wire count_reg0_carry__6_n_0;
  wire count_reg0_carry__7_n_0;
  wire count_reg0_carry__8_n_0;
  wire count_reg0_carry__9_n_0;
  wire count_reg0_carry_n_0;
  wire \count_reg[47]_i_1_n_0 ;
  wire \count_reg[47]_i_3_n_0 ;
  wire \count_reg[47]_i_4_n_0 ;
  wire \count_reg_reg[0]_0 ;
  wire [1:0]\count_reg_reg[0]_1 ;
  wire \count_reg_reg[0]_2 ;
  wire ctrl_reg;
  wire ctrl_reg_i_1_n_0;
  wire [7:0]ctrl_reg_reg_0;
  wire ctrl_reg_reg_1;
  wire ctrl_reg_reg_2;
  wire \dvsr_reg_reg[10] ;
  wire [15:0]in0;
  wire [15:0]mmio_rd_data_inferred_i_17_0;
  wire mmio_rd_data_inferred_i_49_n_0;
  wire mmio_rd_data_inferred_i_50_n_0;
  wire mmio_rd_data_inferred_i_51_n_0;
  wire mmio_rd_data_inferred_i_52_n_0;
  wire mmio_rd_data_inferred_i_53_n_0;
  wire mmio_rd_data_inferred_i_54_n_0;
  wire mmio_rd_data_inferred_i_55_n_0;
  wire mmio_rd_data_inferred_i_56_n_0;
  wire mmio_rd_data_inferred_i_57_n_0;
  wire mmio_rd_data_inferred_i_58_n_0;
  wire mmio_rd_data_inferred_i_59_n_0;
  wire mmio_rd_data_inferred_i_60_n_0;
  wire mmio_rd_data_inferred_i_61_n_0;
  wire mmio_rd_data_inferred_i_62_n_0;
  wire mmio_rd_data_inferred_i_63_n_0;
  wire mmio_rd_data_inferred_i_64_n_0;
  wire out;
  wire p_0_in1_in;
  wire [47:0]p_1_in;
  wire [15:0]rd_data;
  wire [2:0]NLW_count_reg0_carry_CO_UNCONNECTED;
  wire [2:0]NLW_count_reg0_carry__0_CO_UNCONNECTED;
  wire [2:0]NLW_count_reg0_carry__1_CO_UNCONNECTED;
  wire [3:0]NLW_count_reg0_carry__10_CO_UNCONNECTED;
  wire [3:3]NLW_count_reg0_carry__10_O_UNCONNECTED;
  wire [2:0]NLW_count_reg0_carry__2_CO_UNCONNECTED;
  wire [2:0]NLW_count_reg0_carry__3_CO_UNCONNECTED;
  wire [2:0]NLW_count_reg0_carry__4_CO_UNCONNECTED;
  wire [2:0]NLW_count_reg0_carry__5_CO_UNCONNECTED;
  wire [2:0]NLW_count_reg0_carry__6_CO_UNCONNECTED;
  wire [2:0]NLW_count_reg0_carry__7_CO_UNCONNECTED;
  wire [2:0]NLW_count_reg0_carry__8_CO_UNCONNECTED;
  wire [2:0]NLW_count_reg0_carry__9_CO_UNCONNECTED;

  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 count_reg0_carry
       (.CI(1'b0),
        .CO({count_reg0_carry_n_0,NLW_count_reg0_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(count_reg[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(count_reg0[4:1]),
        .S(count_reg[4:1]));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 count_reg0_carry__0
       (.CI(count_reg0_carry_n_0),
        .CO({count_reg0_carry__0_n_0,NLW_count_reg0_carry__0_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(count_reg0[8:5]),
        .S(count_reg[8:5]));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 count_reg0_carry__1
       (.CI(count_reg0_carry__0_n_0),
        .CO({count_reg0_carry__1_n_0,NLW_count_reg0_carry__1_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(count_reg0[12:9]),
        .S(count_reg[12:9]));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 count_reg0_carry__10
       (.CI(count_reg0_carry__9_n_0),
        .CO(NLW_count_reg0_carry__10_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_count_reg0_carry__10_O_UNCONNECTED[3],count_reg0[47:45]}),
        .S({1'b0,count_reg[47:45]}));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 count_reg0_carry__2
       (.CI(count_reg0_carry__1_n_0),
        .CO({count_reg0_carry__2_n_0,NLW_count_reg0_carry__2_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(count_reg0[16:13]),
        .S({Q[0],count_reg[15:13]}));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 count_reg0_carry__3
       (.CI(count_reg0_carry__2_n_0),
        .CO({count_reg0_carry__3_n_0,NLW_count_reg0_carry__3_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(count_reg0[20:17]),
        .S(Q[4:1]));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 count_reg0_carry__4
       (.CI(count_reg0_carry__3_n_0),
        .CO({count_reg0_carry__4_n_0,NLW_count_reg0_carry__4_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(count_reg0[24:21]),
        .S(Q[8:5]));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 count_reg0_carry__5
       (.CI(count_reg0_carry__4_n_0),
        .CO({count_reg0_carry__5_n_0,NLW_count_reg0_carry__5_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(count_reg0[28:25]),
        .S(Q[12:9]));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 count_reg0_carry__6
       (.CI(count_reg0_carry__5_n_0),
        .CO({count_reg0_carry__6_n_0,NLW_count_reg0_carry__6_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(count_reg0[32:29]),
        .S({count_reg[32],Q[15:13]}));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 count_reg0_carry__7
       (.CI(count_reg0_carry__6_n_0),
        .CO({count_reg0_carry__7_n_0,NLW_count_reg0_carry__7_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(count_reg0[36:33]),
        .S(count_reg[36:33]));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 count_reg0_carry__8
       (.CI(count_reg0_carry__7_n_0),
        .CO({count_reg0_carry__8_n_0,NLW_count_reg0_carry__8_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(count_reg0[40:37]),
        .S(count_reg[40:37]));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 count_reg0_carry__9
       (.CI(count_reg0_carry__8_n_0),
        .CO({count_reg0_carry__9_n_0,NLW_count_reg0_carry__9_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(count_reg0[44:41]),
        .S(count_reg[44:41]));
  LUT6 #(
    .INIT(64'h00000000DFFFFFFF)) 
    \count_reg[0]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg[0]),
        .O(p_1_in[0]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[10]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[10]),
        .O(p_1_in[10]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[11]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[11]),
        .O(p_1_in[11]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[12]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[12]),
        .O(p_1_in[12]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[13]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[13]),
        .O(p_1_in[13]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[14]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[14]),
        .O(p_1_in[14]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[15]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[15]),
        .O(p_1_in[15]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[16]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[16]),
        .O(p_1_in[16]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[17]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[17]),
        .O(p_1_in[17]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[18]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[18]),
        .O(p_1_in[18]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[19]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[19]),
        .O(p_1_in[19]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[1]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[1]),
        .O(p_1_in[1]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[20]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[20]),
        .O(p_1_in[20]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[21]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[21]),
        .O(p_1_in[21]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[22]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[22]),
        .O(p_1_in[22]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[23]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[23]),
        .O(p_1_in[23]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[24]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[24]),
        .O(p_1_in[24]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[25]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[25]),
        .O(p_1_in[25]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[26]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[26]),
        .O(p_1_in[26]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[27]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[27]),
        .O(p_1_in[27]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[28]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[28]),
        .O(p_1_in[28]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[29]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[29]),
        .O(p_1_in[29]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[2]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[2]),
        .O(p_1_in[2]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[30]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[30]),
        .O(p_1_in[30]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[31]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[31]),
        .O(p_1_in[31]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[32]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[32]),
        .O(p_1_in[32]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[33]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[33]),
        .O(p_1_in[33]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[34]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[34]),
        .O(p_1_in[34]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[35]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[35]),
        .O(p_1_in[35]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[36]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[36]),
        .O(p_1_in[36]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[37]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[37]),
        .O(p_1_in[37]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[38]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[38]),
        .O(p_1_in[38]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[39]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[39]),
        .O(p_1_in[39]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[3]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[3]),
        .O(p_1_in[3]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[40]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[40]),
        .O(p_1_in[40]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[41]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[41]),
        .O(p_1_in[41]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[42]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[42]),
        .O(p_1_in[42]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[43]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[43]),
        .O(p_1_in[43]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[44]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[44]),
        .O(p_1_in[44]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[45]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[45]),
        .O(p_1_in[45]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[46]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[46]),
        .O(p_1_in[46]));
  LUT6 #(
    .INIT(64'hFFFFFFFF20000000)) 
    \count_reg[47]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(ctrl_reg),
        .O(\count_reg[47]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[47]_i_2 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[47]),
        .O(p_1_in[47]));
  LUT3 #(
    .INIT(8'hFE)) 
    \count_reg[47]_i_3 
       (.I0(ctrl_reg_reg_0[0]),
        .I1(ctrl_reg_reg_0[3]),
        .I2(ctrl_reg_reg_0[2]),
        .O(\count_reg[47]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00000100)) 
    \count_reg[47]_i_4 
       (.I0(ctrl_reg_reg_0[5]),
        .I1(ctrl_reg_reg_0[6]),
        .I2(ctrl_reg_reg_0[4]),
        .I3(ctrl_reg_reg_2),
        .I4(ctrl_reg_reg_0[7]),
        .O(\count_reg[47]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[4]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[4]),
        .O(p_1_in[4]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[5]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[5]),
        .O(p_1_in[5]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[6]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[6]),
        .O(p_1_in[6]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[7]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[7]),
        .O(p_1_in[7]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[8]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[8]),
        .O(p_1_in[8]));
  LUT6 #(
    .INIT(64'hDFFFFFFF00000000)) 
    \count_reg[9]_i_1 
       (.I0(\count_reg_reg[0]_1 [1]),
        .I1(\count_reg[47]_i_3_n_0 ),
        .I2(ctrl_reg_reg_0[1]),
        .I3(\count_reg_reg[0]_2 ),
        .I4(\count_reg[47]_i_4_n_0 ),
        .I5(count_reg0[9]),
        .O(p_1_in[9]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[0] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[0]),
        .Q(count_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[10] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[10]),
        .Q(count_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[11] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[11]),
        .Q(count_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[12] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[12]),
        .Q(count_reg[12]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[13] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[13]),
        .Q(count_reg[13]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[14] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[14]),
        .Q(count_reg[14]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[15] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[15]),
        .Q(count_reg[15]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[16] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[16]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[17] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[17]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[18] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[18]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[19] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[19]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[1] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[1]),
        .Q(count_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[20] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[20]),
        .Q(Q[4]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[21] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[21]),
        .Q(Q[5]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[22] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[22]),
        .Q(Q[6]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[23] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[23]),
        .Q(Q[7]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[24] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[24]),
        .Q(Q[8]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[25] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[25]),
        .Q(Q[9]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[26] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[26]),
        .Q(Q[10]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[27] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[27]),
        .Q(Q[11]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[28] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[28]),
        .Q(Q[12]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[29] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[29]),
        .Q(Q[13]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[2] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[2]),
        .Q(count_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[30] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[30]),
        .Q(Q[14]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[31] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[31]),
        .Q(Q[15]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[32] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[32]),
        .Q(count_reg[32]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[33] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[33]),
        .Q(count_reg[33]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[34] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[34]),
        .Q(count_reg[34]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[35] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[35]),
        .Q(count_reg[35]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[36] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[36]),
        .Q(count_reg[36]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[37] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[37]),
        .Q(count_reg[37]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[38] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[38]),
        .Q(count_reg[38]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[39] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[39]),
        .Q(count_reg[39]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[3] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[3]),
        .Q(count_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[40] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[40]),
        .Q(count_reg[40]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[41] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[41]),
        .Q(count_reg[41]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[42] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[42]),
        .Q(count_reg[42]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[43] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[43]),
        .Q(count_reg[43]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[44] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[44]),
        .Q(count_reg[44]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[45] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[45]),
        .Q(count_reg[45]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[46] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[46]),
        .Q(count_reg[46]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[47] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[47]),
        .Q(count_reg[47]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[4] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[4]),
        .Q(count_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[5] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[5]),
        .Q(count_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[6] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[6]),
        .Q(count_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[7] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[7]),
        .Q(count_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[8] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[8]),
        .Q(count_reg[8]));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg_reg[9] 
       (.C(out),
        .CE(\count_reg[47]_i_1_n_0 ),
        .CLR(\count_reg_reg[0]_0 ),
        .D(p_1_in[9]),
        .Q(count_reg[9]));
  LUT3 #(
    .INIT(8'hB8)) 
    ctrl_reg_i_1
       (.I0(\count_reg_reg[0]_1 [0]),
        .I1(p_0_in1_in),
        .I2(ctrl_reg),
        .O(ctrl_reg_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    ctrl_reg_i_2
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_2),
        .I2(ctrl_reg_reg_1),
        .I3(\count_reg_reg[0]_2 ),
        .I4(ctrl_reg_reg_0[1]),
        .I5(\count_reg[47]_i_3_n_0 ),
        .O(p_0_in1_in));
  FDCE #(
    .INIT(1'b0)) 
    ctrl_reg_reg
       (.C(out),
        .CE(1'b1),
        .CLR(\count_reg_reg[0]_0 ),
        .D(ctrl_reg_i_1_n_0),
        .Q(ctrl_reg));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_17
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_49_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[15]),
        .O(in0[15]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_18
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_50_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[14]),
        .O(in0[14]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_19
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_51_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[13]),
        .O(in0[13]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_20
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_52_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[12]),
        .O(in0[12]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_21
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_53_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[11]),
        .O(in0[11]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_22
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_54_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[10]),
        .O(in0[10]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_23
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_55_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[9]),
        .O(in0[9]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_24
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_56_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[8]),
        .O(in0[8]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_25
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_57_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[7]),
        .O(in0[7]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_26
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_58_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[6]),
        .O(in0[6]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_27
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_59_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[5]),
        .O(in0[5]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_28
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_60_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[4]),
        .O(in0[4]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_29
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_61_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[3]),
        .O(in0[3]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_30
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_62_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[2]),
        .O(in0[2]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_31
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_63_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[1]),
        .O(in0[1]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_32
       (.I0(ctrl_reg_reg_0[7]),
        .I1(ctrl_reg_reg_1),
        .I2(mmio_rd_data_inferred_i_64_n_0),
        .I3(\dvsr_reg_reg[10] ),
        .I4(rd_data[0]),
        .O(in0[0]));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_49
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[15]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[47]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[15]),
        .O(mmio_rd_data_inferred_i_49_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_50
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[14]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[46]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[14]),
        .O(mmio_rd_data_inferred_i_50_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_51
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[13]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[45]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[13]),
        .O(mmio_rd_data_inferred_i_51_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_52
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[12]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[44]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[12]),
        .O(mmio_rd_data_inferred_i_52_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_53
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[11]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[43]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[11]),
        .O(mmio_rd_data_inferred_i_53_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_54
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[10]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[42]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[10]),
        .O(mmio_rd_data_inferred_i_54_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_55
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[9]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[41]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[9]),
        .O(mmio_rd_data_inferred_i_55_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_56
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[8]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[40]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[8]),
        .O(mmio_rd_data_inferred_i_56_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_57
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[7]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[39]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[7]),
        .O(mmio_rd_data_inferred_i_57_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_58
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[6]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[38]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[6]),
        .O(mmio_rd_data_inferred_i_58_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_59
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[5]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[37]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[5]),
        .O(mmio_rd_data_inferred_i_59_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_60
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[4]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[36]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[4]),
        .O(mmio_rd_data_inferred_i_60_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_61
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[3]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[35]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[3]),
        .O(mmio_rd_data_inferred_i_61_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_62
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[2]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[34]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[2]),
        .O(mmio_rd_data_inferred_i_62_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_63
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[1]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[33]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[1]),
        .O(mmio_rd_data_inferred_i_63_n_0));
  LUT6 #(
    .INIT(64'hAAAAABFBFFFFABFB)) 
    mmio_rd_data_inferred_i_64
       (.I0(ctrl_reg_reg_0[3]),
        .I1(count_reg[0]),
        .I2(ctrl_reg_reg_0[0]),
        .I3(count_reg[32]),
        .I4(ctrl_reg_reg_0[2]),
        .I5(mmio_rd_data_inferred_i_17_0[0]),
        .O(mmio_rd_data_inferred_i_64_n_0));
endmodule

module chu_uart
   (out,
    tx,
    in0,
    \bbstub_IO_address[10] ,
    \n_reg_reg[2] ,
    \n_reg_reg[0] ,
    \dvsr_reg_reg[10]_0 ,
    \dvsr_reg_reg[0]_0 ,
    \b_reg_reg[7] ,
    UNCONN_IN,
    UNCONN_IN_0,
    rd_data,
    \dvsr_reg_reg[10]_1 ,
    Q,
    \dvsr_reg_reg[0]_1 );
  output [15:0]out;
  output tx;
  output [15:0]in0;
  output \bbstub_IO_address[10] ;
  input \n_reg_reg[2] ;
  input \n_reg_reg[0] ;
  input [10:0]\dvsr_reg_reg[10]_0 ;
  input \dvsr_reg_reg[0]_0 ;
  input \b_reg_reg[7] ;
  input [31:0]UNCONN_IN;
  input UNCONN_IN_0;
  input [15:0]rd_data;
  input \dvsr_reg_reg[10]_1 ;
  input [15:0]Q;
  input \dvsr_reg_reg[0]_1 ;

  wire [15:0]Q;
  (* DONT_TOUCH *) wire [31:0]UNCONN_IN;
  (* DONT_TOUCH *) wire UNCONN_IN_0;
  (* DONT_TOUCH *) wire \b_reg_reg[7] ;
  wire \bbstub_IO_address[10] ;
  wire [10:0]dvsr_reg;
  (* DONT_TOUCH *) wire \dvsr_reg_reg[0]_0 ;
  wire \dvsr_reg_reg[0]_1 ;
  wire [10:0]\dvsr_reg_reg[10]_0 ;
  wire \dvsr_reg_reg[10]_1 ;
  wire [15:0]in0;
  wire mmio_rd_data_inferred_i_33_n_0;
  wire mmio_rd_data_inferred_i_34_n_0;
  wire mmio_rd_data_inferred_i_35_n_0;
  wire mmio_rd_data_inferred_i_36_n_0;
  wire mmio_rd_data_inferred_i_37_n_0;
  wire mmio_rd_data_inferred_i_38_n_0;
  wire mmio_rd_data_inferred_i_39_n_0;
  wire mmio_rd_data_inferred_i_40_n_0;
  wire mmio_rd_data_inferred_i_41_n_0;
  wire mmio_rd_data_inferred_i_42_n_0;
  wire mmio_rd_data_inferred_i_43_n_0;
  wire mmio_rd_data_inferred_i_44_n_0;
  wire mmio_rd_data_inferred_i_45_n_0;
  wire mmio_rd_data_inferred_i_46_n_0;
  wire mmio_rd_data_inferred_i_47_n_0;
  wire mmio_rd_data_inferred_i_48_n_0;
  (* DONT_TOUCH *) wire \n_reg_reg[0] ;
  (* DONT_TOUCH *) wire \n_reg_reg[2] ;
  (* DONT_TOUCH *) wire [15:0]out;
  (* DONT_TOUCH *) wire p_0_in2_in;
  wire [15:0]rd_data;
  (* DONT_TOUCH *) wire [31:16]\rd_data_array[1]_0 ;
  wire rd_uart__0;
  (* DONT_TOUCH *) wire tx;
  wire wr_dvsr__0;
  wire wr_uart__0;

  LUT5 #(
    .INIT(32'h00004000)) 
    cs_inferred_i_1
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(\dvsr_reg_reg[0]_1 ),
        .I2(\bbstub_IO_address[10] ),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(\dvsr_reg_reg[10]_0 [6]),
        .O(p_0_in2_in));
  LUT3 #(
    .INIT(8'h01)) 
    cs_inferred_i_2
       (.I0(\dvsr_reg_reg[10]_0 [7]),
        .I1(\dvsr_reg_reg[10]_0 [9]),
        .I2(\dvsr_reg_reg[10]_0 [8]),
        .O(\bbstub_IO_address[10] ));
  FDCE #(
    .INIT(1'b0)) 
    \dvsr_reg_reg[0] 
       (.C(\n_reg_reg[2] ),
        .CE(wr_dvsr__0),
        .CLR(\n_reg_reg[0] ),
        .D(UNCONN_IN[0]),
        .Q(dvsr_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \dvsr_reg_reg[10] 
       (.C(\n_reg_reg[2] ),
        .CE(wr_dvsr__0),
        .CLR(\n_reg_reg[0] ),
        .D(UNCONN_IN[10]),
        .Q(dvsr_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \dvsr_reg_reg[1] 
       (.C(\n_reg_reg[2] ),
        .CE(wr_dvsr__0),
        .CLR(\n_reg_reg[0] ),
        .D(UNCONN_IN[1]),
        .Q(dvsr_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \dvsr_reg_reg[2] 
       (.C(\n_reg_reg[2] ),
        .CE(wr_dvsr__0),
        .CLR(\n_reg_reg[0] ),
        .D(UNCONN_IN[2]),
        .Q(dvsr_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \dvsr_reg_reg[3] 
       (.C(\n_reg_reg[2] ),
        .CE(wr_dvsr__0),
        .CLR(\n_reg_reg[0] ),
        .D(UNCONN_IN[3]),
        .Q(dvsr_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \dvsr_reg_reg[4] 
       (.C(\n_reg_reg[2] ),
        .CE(wr_dvsr__0),
        .CLR(\n_reg_reg[0] ),
        .D(UNCONN_IN[4]),
        .Q(dvsr_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \dvsr_reg_reg[5] 
       (.C(\n_reg_reg[2] ),
        .CE(wr_dvsr__0),
        .CLR(\n_reg_reg[0] ),
        .D(UNCONN_IN[5]),
        .Q(dvsr_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \dvsr_reg_reg[6] 
       (.C(\n_reg_reg[2] ),
        .CE(wr_dvsr__0),
        .CLR(\n_reg_reg[0] ),
        .D(UNCONN_IN[6]),
        .Q(dvsr_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \dvsr_reg_reg[7] 
       (.C(\n_reg_reg[2] ),
        .CE(wr_dvsr__0),
        .CLR(\n_reg_reg[0] ),
        .D(UNCONN_IN[7]),
        .Q(dvsr_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \dvsr_reg_reg[8] 
       (.C(\n_reg_reg[2] ),
        .CE(wr_dvsr__0),
        .CLR(\n_reg_reg[0] ),
        .D(UNCONN_IN[8]),
        .Q(dvsr_reg[8]));
  FDCE #(
    .INIT(1'b0)) 
    \dvsr_reg_reg[9] 
       (.C(\n_reg_reg[2] ),
        .CE(wr_dvsr__0),
        .CLR(\n_reg_reg[0] ),
        .D(UNCONN_IN[9]),
        .Q(dvsr_reg[9]));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [31]));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [30]));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [21]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [20]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [19]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [18]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [17]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [16]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(out[15]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(out[14]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(out[13]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(out[12]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [29]));
  LUT1 #(
    .INIT(2'h2)) 
    i_20
       (.I0(1'b0),
        .O(out[11]));
  LUT1 #(
    .INIT(2'h2)) 
    i_21
       (.I0(1'b0),
        .O(out[10]));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [28]));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [27]));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [26]));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [25]));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [24]));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [23]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(\rd_data_array[1]_0 [22]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_1
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[15]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_33_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[15]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_10
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[6]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_42_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[6]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_11
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[5]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_43_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[5]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_12
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[4]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_44_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[4]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_13
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[3]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_45_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[3]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_14
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[2]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_46_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[2]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_15
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[1]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_47_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[1]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_16
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[0]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_48_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[0]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_2
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[14]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_34_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[14]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_3
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[13]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_35_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[13]));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_33
       (.I0(\rd_data_array[1]_0 [31]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[15]),
        .O(mmio_rd_data_inferred_i_33_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_34
       (.I0(\rd_data_array[1]_0 [30]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[14]),
        .O(mmio_rd_data_inferred_i_34_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_35
       (.I0(\rd_data_array[1]_0 [29]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[13]),
        .O(mmio_rd_data_inferred_i_35_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_36
       (.I0(\rd_data_array[1]_0 [28]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[12]),
        .O(mmio_rd_data_inferred_i_36_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_37
       (.I0(\rd_data_array[1]_0 [27]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[11]),
        .O(mmio_rd_data_inferred_i_37_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_38
       (.I0(\rd_data_array[1]_0 [26]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[10]),
        .O(mmio_rd_data_inferred_i_38_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_39
       (.I0(\rd_data_array[1]_0 [25]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[9]),
        .O(mmio_rd_data_inferred_i_39_n_0));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_4
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[12]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_36_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[12]));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_40
       (.I0(\rd_data_array[1]_0 [24]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[8]),
        .O(mmio_rd_data_inferred_i_40_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_41
       (.I0(\rd_data_array[1]_0 [23]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[7]),
        .O(mmio_rd_data_inferred_i_41_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_42
       (.I0(\rd_data_array[1]_0 [22]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[6]),
        .O(mmio_rd_data_inferred_i_42_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_43
       (.I0(\rd_data_array[1]_0 [21]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[5]),
        .O(mmio_rd_data_inferred_i_43_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_44
       (.I0(\rd_data_array[1]_0 [20]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[4]),
        .O(mmio_rd_data_inferred_i_44_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_45
       (.I0(\rd_data_array[1]_0 [19]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[3]),
        .O(mmio_rd_data_inferred_i_45_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_46
       (.I0(\rd_data_array[1]_0 [18]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[2]),
        .O(mmio_rd_data_inferred_i_46_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_47
       (.I0(\rd_data_array[1]_0 [17]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[1]),
        .O(mmio_rd_data_inferred_i_47_n_0));
  LUT5 #(
    .INIT(32'hF5FCF5FF)) 
    mmio_rd_data_inferred_i_48
       (.I0(\rd_data_array[1]_0 [16]),
        .I1(\dvsr_reg_reg[10]_0 [0]),
        .I2(\dvsr_reg_reg[10]_0 [6]),
        .I3(\dvsr_reg_reg[10]_0 [5]),
        .I4(Q[0]),
        .O(mmio_rd_data_inferred_i_48_n_0));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_5
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[11]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_37_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[11]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_6
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[10]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_38_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[10]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_7
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[9]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_39_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[9]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_8
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[8]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_40_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[8]));
  LUT5 #(
    .INIT(32'h04550404)) 
    mmio_rd_data_inferred_i_9
       (.I0(\dvsr_reg_reg[10]_0 [10]),
        .I1(rd_data[7]),
        .I2(\dvsr_reg_reg[10]_1 ),
        .I3(mmio_rd_data_inferred_i_41_n_0),
        .I4(\bbstub_IO_address[10] ),
        .O(in0[7]));
  LUT4 #(
    .INIT(16'h8000)) 
    rd_uart
       (.I0(p_0_in2_in),
        .I1(\dvsr_reg_reg[0]_0 ),
        .I2(\dvsr_reg_reg[10]_0 [1]),
        .I3(\dvsr_reg_reg[10]_0 [0]),
        .O(rd_uart__0));
  uart uart_unit
       (.D(UNCONN_IN[7:0]),
        .Q(dvsr_reg),
        .\b_reg_reg[7] (\b_reg_reg[7] ),
        .in0(out[9:0]),
        .\n_reg_reg[0] (\n_reg_reg[0] ),
        .out(\n_reg_reg[2] ),
        .tx(tx),
        .\w_ptr_logic_reg[0] (rd_uart__0),
        .\w_ptr_logic_reg[0]_0 (wr_uart__0));
  LUT4 #(
    .INIT(16'h0800)) 
    wr_dvsr
       (.I0(p_0_in2_in),
        .I1(\dvsr_reg_reg[0]_0 ),
        .I2(\dvsr_reg_reg[10]_0 [1]),
        .I3(\dvsr_reg_reg[10]_0 [0]),
        .O(wr_dvsr__0));
  LUT4 #(
    .INIT(16'h0800)) 
    wr_uart
       (.I0(p_0_in2_in),
        .I1(\dvsr_reg_reg[0]_0 ),
        .I2(\dvsr_reg_reg[10]_0 [0]),
        .I3(\dvsr_reg_reg[10]_0 [1]),
        .O(wr_uart__0));
endmodule

(* CHECK_LICENSE_TYPE = "cpu,bd_3914,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "bd_3914,Vivado 2018.3" *) 
module cpu
   (Clk,
    Reset,
    TRACE_data_access,
    TRACE_data_address,
    TRACE_data_byte_enable,
    TRACE_data_read,
    TRACE_data_write,
    TRACE_data_write_value,
    TRACE_dcache_hit,
    TRACE_dcache_rdy,
    TRACE_dcache_read,
    TRACE_dcache_req,
    TRACE_delay_slot,
    TRACE_ex_piperun,
    TRACE_exception_kind,
    TRACE_exception_taken,
    TRACE_icache_hit,
    TRACE_icache_rdy,
    TRACE_icache_req,
    TRACE_instruction,
    TRACE_jump_hit,
    TRACE_jump_taken,
    TRACE_mb_halted,
    TRACE_mem_piperun,
    TRACE_msr_reg,
    TRACE_new_reg_value,
    TRACE_of_piperun,
    TRACE_pc,
    TRACE_pid_reg,
    TRACE_reg_addr,
    TRACE_reg_write,
    TRACE_valid_instr,
    IO_addr_strobe,
    IO_address,
    IO_byte_enable,
    IO_read_data,
    IO_read_strobe,
    IO_ready,
    IO_write_data,
    IO_write_strobe,
    UART_rxd,
    UART_txd);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.Clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.Clk, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0, ASSOCIATED_ASYNC_RESET Reset, BOARD.ASSOCIATED_PARAM CLK_BOARD_INTERFACE" *) input Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.Reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.Reset, POLARITY ACTIVE_HIGH, INSERT_VIP 0, BOARD.ASSOCIATED_PARAM RESET_BOARD_INTERFACE" *) input Reset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_ACCESS" *) output TRACE_data_access;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_ADDRESS" *) output [0:31]TRACE_data_address;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_BYTE_ENABLE" *) output [0:3]TRACE_data_byte_enable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_READ" *) output TRACE_data_read;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_WRITE" *) output TRACE_data_write;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_WRITE_VALUE" *) output [0:31]TRACE_data_write_value;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DCACHE_HIT" *) output TRACE_dcache_hit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DCACHE_RDY" *) output TRACE_dcache_rdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DCACHE_READ" *) output TRACE_dcache_read;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DCACHE_REQ" *) output TRACE_dcache_req;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DELAY_SLOT" *) output TRACE_delay_slot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE EX_PIPERUN" *) output TRACE_ex_piperun;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE EXCEPTION_KIND" *) output [0:4]TRACE_exception_kind;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE EXCEPTION_TAKEN" *) output TRACE_exception_taken;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE ICACHE_HIT" *) output TRACE_icache_hit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE ICACHE_RDY" *) output TRACE_icache_rdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE ICACHE_REQ" *) output TRACE_icache_req;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE INSTRUCTION" *) output [0:31]TRACE_instruction;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE JUMP_HIT" *) output TRACE_jump_hit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE JUMP_TAKEN" *) output TRACE_jump_taken;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE MB_HALTED" *) output TRACE_mb_halted;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE MEM_PIPERUN" *) output TRACE_mem_piperun;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE MSR_REG" *) output [0:14]TRACE_msr_reg;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE NEW_REG_VALUE" *) output [0:31]TRACE_new_reg_value;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE OF_PIPERUN" *) output TRACE_of_piperun;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE PC" *) output [0:31]TRACE_pc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE PID_REG" *) output [0:7]TRACE_pid_reg;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE REG_ADDR" *) output [0:4]TRACE_reg_addr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE REG_WRITE" *) output TRACE_reg_write;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE VALID_INSTR" *) output TRACE_valid_instr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO ADDR_STROBE" *) output IO_addr_strobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO ADDRESS" *) output [31:0]IO_address;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO BYTE_ENABLE" *) output [3:0]IO_byte_enable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO READ_DATA" *) input [31:0]IO_read_data;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO READ_STROBE" *) output IO_read_strobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO READY" *) input IO_ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO WRITE_DATA" *) output [31:0]IO_write_data;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO WRITE_STROBE" *) output IO_write_strobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:uart:1.0 UART RxD" *) input UART_rxd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:uart:1.0 UART TxD" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME UART, BOARD.ASSOCIATED_PARAM UART_BOARD_INTERFACE" *) output UART_txd;

  wire Clk;
  wire [31:0]IO_address;
  wire [31:0]IO_read_data;
  wire IO_read_strobe;
  wire [31:0]IO_write_data;
  wire IO_write_strobe;
  wire Reset;
  wire NLW_inst_IO_addr_strobe_UNCONNECTED;
  wire NLW_inst_IO_ready_UNCONNECTED;
  wire NLW_inst_TRACE_data_access_UNCONNECTED;
  wire NLW_inst_TRACE_data_read_UNCONNECTED;
  wire NLW_inst_TRACE_data_write_UNCONNECTED;
  wire NLW_inst_TRACE_dcache_hit_UNCONNECTED;
  wire NLW_inst_TRACE_dcache_rdy_UNCONNECTED;
  wire NLW_inst_TRACE_dcache_read_UNCONNECTED;
  wire NLW_inst_TRACE_dcache_req_UNCONNECTED;
  wire NLW_inst_TRACE_delay_slot_UNCONNECTED;
  wire NLW_inst_TRACE_ex_piperun_UNCONNECTED;
  wire NLW_inst_TRACE_exception_taken_UNCONNECTED;
  wire NLW_inst_TRACE_icache_hit_UNCONNECTED;
  wire NLW_inst_TRACE_icache_rdy_UNCONNECTED;
  wire NLW_inst_TRACE_icache_req_UNCONNECTED;
  wire NLW_inst_TRACE_jump_hit_UNCONNECTED;
  wire NLW_inst_TRACE_jump_taken_UNCONNECTED;
  wire NLW_inst_TRACE_mb_halted_UNCONNECTED;
  wire NLW_inst_TRACE_mem_piperun_UNCONNECTED;
  wire NLW_inst_TRACE_of_piperun_UNCONNECTED;
  wire NLW_inst_TRACE_reg_write_UNCONNECTED;
  wire NLW_inst_TRACE_valid_instr_UNCONNECTED;
  wire NLW_inst_UART_rxd_UNCONNECTED;
  wire NLW_inst_UART_txd_UNCONNECTED;
  wire [22:0]NLW_inst_IO_address_UNCONNECTED;
  wire [3:0]NLW_inst_IO_byte_enable_UNCONNECTED;
  wire [31:11]NLW_inst_IO_write_data_UNCONNECTED;
  wire [0:31]NLW_inst_TRACE_data_address_UNCONNECTED;
  wire [0:3]NLW_inst_TRACE_data_byte_enable_UNCONNECTED;
  wire [0:31]NLW_inst_TRACE_data_write_value_UNCONNECTED;
  wire [0:4]NLW_inst_TRACE_exception_kind_UNCONNECTED;
  wire [0:31]NLW_inst_TRACE_instruction_UNCONNECTED;
  wire [0:14]NLW_inst_TRACE_msr_reg_UNCONNECTED;
  wire [0:31]NLW_inst_TRACE_new_reg_value_UNCONNECTED;
  wire [0:31]NLW_inst_TRACE_pc_UNCONNECTED;
  wire [0:7]NLW_inst_TRACE_pid_reg_UNCONNECTED;
  wire [0:4]NLW_inst_TRACE_reg_addr_UNCONNECTED;

  (* HW_HANDOFF = "cpu.hwdef" *) 
  cpu_bd_3914 inst
       (.Clk(Clk),
        .IO_addr_strobe(NLW_inst_IO_addr_strobe_UNCONNECTED),
        .IO_address({IO_address[31:23],NLW_inst_IO_address_UNCONNECTED[22:13],IO_address[12:7],NLW_inst_IO_address_UNCONNECTED[6:4],IO_address[3:2],NLW_inst_IO_address_UNCONNECTED[1:0]}),
        .IO_byte_enable(NLW_inst_IO_byte_enable_UNCONNECTED[3:0]),
        .IO_read_data(IO_read_data),
        .IO_read_strobe(IO_read_strobe),
        .IO_ready(NLW_inst_IO_ready_UNCONNECTED),
        .IO_write_data({NLW_inst_IO_write_data_UNCONNECTED[31:11],IO_write_data[10:0]}),
        .IO_write_strobe(IO_write_strobe),
        .Reset(Reset),
        .TRACE_data_access(NLW_inst_TRACE_data_access_UNCONNECTED),
        .TRACE_data_address(NLW_inst_TRACE_data_address_UNCONNECTED[0:31]),
        .TRACE_data_byte_enable(NLW_inst_TRACE_data_byte_enable_UNCONNECTED[0:3]),
        .TRACE_data_read(NLW_inst_TRACE_data_read_UNCONNECTED),
        .TRACE_data_write(NLW_inst_TRACE_data_write_UNCONNECTED),
        .TRACE_data_write_value(NLW_inst_TRACE_data_write_value_UNCONNECTED[0:31]),
        .TRACE_dcache_hit(NLW_inst_TRACE_dcache_hit_UNCONNECTED),
        .TRACE_dcache_rdy(NLW_inst_TRACE_dcache_rdy_UNCONNECTED),
        .TRACE_dcache_read(NLW_inst_TRACE_dcache_read_UNCONNECTED),
        .TRACE_dcache_req(NLW_inst_TRACE_dcache_req_UNCONNECTED),
        .TRACE_delay_slot(NLW_inst_TRACE_delay_slot_UNCONNECTED),
        .TRACE_ex_piperun(NLW_inst_TRACE_ex_piperun_UNCONNECTED),
        .TRACE_exception_kind(NLW_inst_TRACE_exception_kind_UNCONNECTED[0:4]),
        .TRACE_exception_taken(NLW_inst_TRACE_exception_taken_UNCONNECTED),
        .TRACE_icache_hit(NLW_inst_TRACE_icache_hit_UNCONNECTED),
        .TRACE_icache_rdy(NLW_inst_TRACE_icache_rdy_UNCONNECTED),
        .TRACE_icache_req(NLW_inst_TRACE_icache_req_UNCONNECTED),
        .TRACE_instruction(NLW_inst_TRACE_instruction_UNCONNECTED[0:31]),
        .TRACE_jump_hit(NLW_inst_TRACE_jump_hit_UNCONNECTED),
        .TRACE_jump_taken(NLW_inst_TRACE_jump_taken_UNCONNECTED),
        .TRACE_mb_halted(NLW_inst_TRACE_mb_halted_UNCONNECTED),
        .TRACE_mem_piperun(NLW_inst_TRACE_mem_piperun_UNCONNECTED),
        .TRACE_msr_reg(NLW_inst_TRACE_msr_reg_UNCONNECTED[0:14]),
        .TRACE_new_reg_value(NLW_inst_TRACE_new_reg_value_UNCONNECTED[0:31]),
        .TRACE_of_piperun(NLW_inst_TRACE_of_piperun_UNCONNECTED),
        .TRACE_pc(NLW_inst_TRACE_pc_UNCONNECTED[0:31]),
        .TRACE_pid_reg(NLW_inst_TRACE_pid_reg_UNCONNECTED[0:7]),
        .TRACE_reg_addr(NLW_inst_TRACE_reg_addr_UNCONNECTED[0:4]),
        .TRACE_reg_write(NLW_inst_TRACE_reg_write_UNCONNECTED),
        .TRACE_valid_instr(NLW_inst_TRACE_valid_instr_UNCONNECTED),
        .UART_rxd(NLW_inst_UART_rxd_UNCONNECTED),
        .UART_txd(NLW_inst_UART_txd_UNCONNECTED));
endmodule

(* ORIG_REF_NAME = "Divide_part" *) 
module cpu_Divide_part
   (Clk_En_I_2,
    Clk);
  output Clk_En_I_2;
  input Clk;

  wire Clk;
  wire Clk_En_I_2;

  cpu_XIL_SRL16E_885 \One_SRL16.SRL16E_I 
       (.Clk(Clk),
        .Clk_En_I_2(Clk_En_I_2));
endmodule

(* ORIG_REF_NAME = "Divide_part" *) 
module cpu_Divide_part__parameterized0
   (Clk_En_I_1,
    Clk_En_I_2,
    Clk);
  output Clk_En_I_1;
  input Clk_En_I_2;
  input Clk;

  wire Clk;
  wire Clk_En_I_1;
  wire Clk_En_I_2;
  wire Out1;
  wire loop_Bit;

  cpu_XIL_SRL16E_884 \One_SRL16.SRL16E_I 
       (.Clk(Clk),
        .Clk_En_I_2(Clk_En_I_2),
        .loop_Bit(loop_Bit));
  FDRE #(
    .INIT(1'b0)) 
    \not_First.Clk_En_Out_i_reg 
       (.C(Clk),
        .CE(Out1),
        .D(Clk_En_I_2),
        .Q(Clk_En_I_1),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \not_First.Out1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(loop_Bit),
        .Q(Out1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "Divide_part" *) 
module cpu_Divide_part__parameterized1
   (en_16x_baud,
    Clk_En_I_1,
    Clk);
  output en_16x_baud;
  input Clk_En_I_1;
  input Clk;

  wire Clk;
  wire Clk_En_I_1;
  wire en_16x_baud;
  wire loop_Bit;
  wire \not_First.Clk_En_Out_i_i_1_n_0 ;
  wire \not_First.Out1_reg_n_0 ;
  wire \NLW_Two_SRL16.SRL16E_2_shift_UNCONNECTED ;

  cpu_XIL_SRL16E__parameterized1_883 \Two_SRL16.SRL16E_2 
       (.Clk(Clk),
        .Clk_En_I_1(Clk_En_I_1),
        .loop_Bit(loop_Bit),
        .lopt(loop_Bit),
        .shift(\NLW_Two_SRL16.SRL16E_2_shift_UNCONNECTED ));
  LUT3 #(
    .INIT(8'hB8)) 
    \not_First.Clk_En_Out_i_i_1 
       (.I0(Clk_En_I_1),
        .I1(\not_First.Out1_reg_n_0 ),
        .I2(en_16x_baud),
        .O(\not_First.Clk_En_Out_i_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \not_First.Clk_En_Out_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\not_First.Clk_En_Out_i_i_1_n_0 ),
        .Q(en_16x_baud),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \not_First.Out1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(loop_Bit),
        .Q(\not_First.Out1_reg_n_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "FIT_Module" *) 
module cpu_FIT_Module
   (en_16x_baud,
    Clk);
  output en_16x_baud;
  input Clk;

  wire Clk;
  wire Clk_En_I_1;
  wire Clk_En_I_2;
  wire en_16x_baud;

  cpu_Divide_part \Implement_FIT.Using_SRL16s.SRL16s[1].Divide_I 
       (.Clk(Clk),
        .Clk_En_I_2(Clk_En_I_2));
  cpu_Divide_part__parameterized0 \Implement_FIT.Using_SRL16s.SRL16s[2].Divide_I 
       (.Clk(Clk),
        .Clk_En_I_1(Clk_En_I_1),
        .Clk_En_I_2(Clk_En_I_2));
  cpu_Divide_part__parameterized1 \Implement_FIT.Using_SRL16s.SRL16s[3].Divide_I 
       (.Clk(Clk),
        .Clk_En_I_1(Clk_En_I_1),
        .en_16x_baud(en_16x_baud));
endmodule

(* ORIG_REF_NAME = "Iomodule_core" *) 
module cpu_Iomodule_core
   (UART_Tx,
    UART_Interrupt,
    Sl_DBus,
    Clk,
    Rst,
    UART_Rx,
    E,
    lmb_reg_read,
    Q,
    D,
    io_bus_read_data);
  output UART_Tx;
  output UART_Interrupt;
  output [7:0]Sl_DBus;
  input Clk;
  input Rst;
  input UART_Rx;
  input [0:0]E;
  input lmb_reg_read;
  input [4:0]Q;
  input [7:0]D;
  input [7:0]io_bus_read_data;

  wire Clk;
  wire [0:0]E;
  wire [4:0]Q;
  wire [6:0]RX_Data;
  wire Rst;
  wire [7:0]Sl_DBus;
  wire UART_Status_Read;
  wire \Using_UART_RX.UART_RX_I1_n_3 ;
  wire \Using_UART_RX.UART_RX_I1_n_4 ;
  wire en_16x_baud;
  wire frame_error;
  wire [7:0]io_bus_read_data;
  wire lmb_reg_read;
  wire overrun_error;
  wire [3:3]p_0_out;
  wire rx_data_exists;
  wire \NLW_Using_UART.Uart_Control_Status_I1_TMR_No.error_interrupt_reg_0_UNCONNECTED ;
  wire \NLW_Using_UART.Uart_Control_Status_I1_UART_Interrupt_UNCONNECTED ;
  wire \NLW_Using_UART.Uart_Control_Status_I1_out_UNCONNECTED ;
  wire \NLW_Using_UART.Uart_Control_Status_I1_tx_data_transmitted_UNCONNECTED ;
  wire \NLW_Using_UART_RX.UART_RX_I1_UART_Rx_UNCONNECTED ;
  wire \NLW_Using_UART_RX.UART_RX_I1_not_First.Clk_En_Out_i_reg_UNCONNECTED ;
  wire \NLW_Using_UART_RX.UART_RX_I1_out_UNCONNECTED ;
  wire \NLW_Using_UART_TX.UART_TX_I1_UART_Tx_UNCONNECTED ;
  wire \NLW_Using_UART_TX.UART_TX_I1_tx_data_transmitted_UNCONNECTED ;
  wire [7:0]\NLW_Using_UART_TX.UART_TX_I1_D_UNCONNECTED ;

  cpu_FIT_Module \Using_UART.No_Dynamic_BaudRate.UART_FIT_I 
       (.Clk(Clk),
        .en_16x_baud(en_16x_baud));
  cpu_Uart_Control_Status \Using_UART.Uart_Control_Status_I1 
       (.Clk(Clk),
        .D({frame_error,overrun_error}),
        .\LMB_ReadDBus[25]_INST_0 ({RX_Data[6:5],RX_Data[3],RX_Data[0]}),
        .Q(Q),
        .Rst(Rst),
        .Sl_DBus({Sl_DBus[6:5],Sl_DBus[3],Sl_DBus[0]}),
        .\TMR_No.error_interrupt_reg_0 (\NLW_Using_UART.Uart_Control_Status_I1_TMR_No.error_interrupt_reg_0_UNCONNECTED ),
        .\TMR_No.frame_error_reg_0 (\Using_UART_RX.UART_RX_I1_n_4 ),
        .\TMR_No.overrun_error_reg_0 (\Using_UART_RX.UART_RX_I1_n_3 ),
        .UART_Interrupt(\NLW_Using_UART.Uart_Control_Status_I1_UART_Interrupt_UNCONNECTED ),
        .UART_Status_Read(UART_Status_Read),
        .\UART_Status_reg[3]_0 ({p_0_out,rx_data_exists}),
        .io_bus_read_data({io_bus_read_data[6:5],io_bus_read_data[3],io_bus_read_data[0]}),
        .lmb_reg_read(lmb_reg_read),
        .out(\NLW_Using_UART.Uart_Control_Status_I1_out_UNCONNECTED ),
        .tx_data_transmitted(\NLW_Using_UART.Uart_Control_Status_I1_tx_data_transmitted_UNCONNECTED ));
  cpu_UART_Receive \Using_UART_RX.UART_RX_I1 
       (.Clk(Clk),
        .D({frame_error,overrun_error}),
        .Q(Q),
        .Rst(Rst),
        .Sl_DBus({Sl_DBus[7],Sl_DBus[4],Sl_DBus[2:1]}),
        .\TMR_No.RX_Data_reg[6]_0 ({RX_Data[6:5],RX_Data[3],RX_Data[0]}),
        .\TMR_No.frame_error_reg (\Using_UART_RX.UART_RX_I1_n_4 ),
        .\TMR_No.rx_data_exists_i_reg_0 (rx_data_exists),
        .\TMR_No.rx_data_exists_i_reg_1 (\Using_UART_RX.UART_RX_I1_n_3 ),
        .UART_Rx(\NLW_Using_UART_RX.UART_RX_I1_UART_Rx_UNCONNECTED ),
        .UART_Status_Read(UART_Status_Read),
        .en_16x_baud(en_16x_baud),
        .io_bus_read_data({io_bus_read_data[7],io_bus_read_data[4],io_bus_read_data[2:1]}),
        .lmb_reg_read(lmb_reg_read),
        .\not_First.Clk_En_Out_i_reg (\NLW_Using_UART_RX.UART_RX_I1_not_First.Clk_En_Out_i_reg_UNCONNECTED ),
        .out(\NLW_Using_UART_RX.UART_RX_I1_out_UNCONNECTED ));
  cpu_UART_Transmit \Using_UART_TX.UART_TX_I1 
       (.Clk(Clk),
        .D(\NLW_Using_UART_TX.UART_TX_I1_D_UNCONNECTED [7:0]),
        .E(E),
        .Rst(Rst),
        .\TMR_No.tx_buffer_empty_i_reg_0 (p_0_out),
        .UART_Tx(\NLW_Using_UART_TX.UART_TX_I1_UART_Tx_UNCONNECTED ),
        .en_16x_baud(en_16x_baud),
        .tx_data_transmitted(\NLW_Using_UART_TX.UART_TX_I1_tx_data_transmitted_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "JTAG_CONTROL" *) 
module cpu_JTAG_CONTROL
   (Q,
    data_Exists_I_reg,
    RX_Data,
    data_Exists_I_reg_0,
    out,
    Ext_NM_BRK,
    AR,
    Debug_SYS_Rst,
    Dbg_Rst_0,
    Ext_BRK,
    Dbg_Reg_En_0,
    p_35_out__0,
    \Using_FPGA.Native ,
    E,
    tdo,
    tx_Buffer_Full,
    RX_Buffer_Full,
    \Use_Serial_Unified_Completion.sample_1_reg[15]_0 ,
    \Use_Serial_Unified_Completion.count_reg[5]_0 ,
    tx_Buffer_Empty,
    Interrupt,
    CLK,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    S_AXI_ACLK,
    \Using_FPGA.Native_2 ,
    S_AXI_WDATA,
    sel_n_reg_0,
    \Using_FPGA.Native_3 ,
    Scan_En,
    Scan_Reset,
    Scan_Reset_Sel,
    \Use_UART.fifo_Din_reg[7]_0 ,
    \command_1_reg[7]_0 ,
    SEL,
    sel_n_reg_1,
    Dbg_TDO_0,
    FIFO_Write,
    Bus_RNW_reg,
    \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ,
    bus2ip_rdce,
    Q_0,
    enable_interrupts,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ,
    Ext_JTAG_TDI,
    \Use_UART.tdo_reg_reg[7]_0 ,
    \Use_Serial_Unified_Completion.completion_status_reg[10]_0 ,
    \Use_Serial_Unified_Completion.completion_status_reg[15]_0 ,
    \Use_Serial_Unified_Completion.count_reg[5]_1 ,
    D,
    \shift_Count_reg[0]_0 );
  output [0:0]Q;
  output data_Exists_I_reg;
  output [0:7]RX_Data;
  output data_Exists_I_reg_0;
  output out;
  output Ext_NM_BRK;
  output [0:0]AR;
  output Debug_SYS_Rst;
  output Dbg_Rst_0;
  output Ext_BRK;
  output [0:7]Dbg_Reg_En_0;
  output p_35_out__0;
  output \Using_FPGA.Native ;
  output [0:0]E;
  output tdo;
  output tx_Buffer_Full;
  output RX_Buffer_Full;
  output [0:0]\Use_Serial_Unified_Completion.sample_1_reg[15]_0 ;
  output [0:0]\Use_Serial_Unified_Completion.count_reg[5]_0 ;
  output tx_Buffer_Empty;
  output Interrupt;
  input CLK;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input S_AXI_ACLK;
  input \Using_FPGA.Native_2 ;
  input [7:0]S_AXI_WDATA;
  input sel_n_reg_0;
  input \Using_FPGA.Native_3 ;
  input Scan_En;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input \Use_UART.fifo_Din_reg[7]_0 ;
  input [3:0]\command_1_reg[7]_0 ;
  input SEL;
  input sel_n_reg_1;
  input Dbg_TDO_0;
  input FIFO_Write;
  input Bus_RNW_reg;
  input \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  input [0:0]bus2ip_rdce;
  input Q_0;
  input enable_interrupts;
  input \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  input Ext_JTAG_TDI;
  input [0:0]\Use_UART.tdo_reg_reg[7]_0 ;
  input [0:0]\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ;
  input [0:0]\Use_Serial_Unified_Completion.completion_status_reg[15]_0 ;
  input [0:0]\Use_Serial_Unified_Completion.count_reg[5]_1 ;
  input [0:0]D;
  input [0:0]\shift_Count_reg[0]_0 ;

  wire A1;
  wire A2;
  wire A3;
  wire [0:0]\^AR ;
  wire Bus_RNW_reg;
  wire CE;
  wire CLK;
  wire [0:0]D;
  wire D_2;
  wire [4:5]Data_Out;
  wire [0:7]Dbg_Reg_En_0;
  wire Dbg_Rst_0;
  wire Dbg_Shift_31_INST_0_i_1_n_0;
  wire Dbg_Shift_31_INST_0_i_3_n_0;
  wire Dbg_TDO_0;
  wire Debug_Rst_i0;
  wire Debug_SYS_Rst;
  wire [0:0]E;
  wire Ext_JTAG_TDI;
  wire FIFO_Write;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  wire [0:0]Q;
  wire Q0_out;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire SEL;
  wire S_AXI_ACLK;
  wire [7:0]S_AXI_WDATA;
  wire \Use_BSCAN.FDC_I_n_11 ;
  wire \Use_BSCAN.FDC_I_n_12 ;
  wire \Use_BSCAN.FDC_I_n_17 ;
  wire \Use_BSCAN.FDC_I_n_19 ;
  wire \Use_BSCAN.FDC_I_n_20 ;
  wire \Use_BSCAN.FDC_I_n_21 ;
  wire \Use_BSCAN.FDC_I_n_22 ;
  wire \Use_BSCAN.FDC_I_n_23 ;
  wire \Use_BSCAN.FDC_I_n_24 ;
  wire \Use_BSCAN.FDC_I_n_25 ;
  wire \Use_BSCAN.FDC_I_n_26 ;
  wire \Use_BSCAN.FDC_I_n_27 ;
  wire \Use_BSCAN.FDC_I_n_28 ;
  wire \Use_BSCAN.FDC_I_n_29 ;
  wire \Use_BSCAN.FDC_I_n_30 ;
  wire \Use_BSCAN.FDC_I_n_31 ;
  wire \Use_BSCAN.FDC_I_n_33 ;
  wire \Use_BSCAN.FDC_I_n_34 ;
  wire \Use_BSCAN.FDC_I_n_35 ;
  wire \Use_BSCAN.FDC_I_n_36 ;
  wire \Use_BSCAN.FDC_I_n_37 ;
  wire \Use_BSCAN.FDC_I_n_38 ;
  wire \Use_BSCAN.SYNC_FDRE_n_1 ;
  wire \Use_BSCAN.SYNC_FDRE_n_2 ;
  wire \Use_BSCAN.command[0]_i_1_n_0 ;
  wire \Use_Config_SRL16E.SRL16E_1_n_0 ;
  wire \Use_E2.BSCANE2_I_i_3_n_0 ;
  wire \Use_E2.BSCANE2_I_i_4_n_0 ;
  wire \Use_E2.BSCANE2_I_i_6_n_0 ;
  wire \Use_E2.BSCANE2_I_i_7_n_0 ;
  wire \Use_E2.BSCANE2_I_i_9_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_block_i_3_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_block_i_4_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_block_reg_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[10]_i_1_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[11]_i_1_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[12]_i_1_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[13]_i_1_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[14]_i_1_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[3]_i_2_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[4]_i_2_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[5]_i_2_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[7]_i_2_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[9]_i_4_n_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.completion_status_reg[15]_0 ;
  wire \Use_Serial_Unified_Completion.count[0]__0_i_4_n_0 ;
  wire \Use_Serial_Unified_Completion.count[0]_i_1_n_0 ;
  wire \Use_Serial_Unified_Completion.count[1]_i_1_n_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.count_reg[5]_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.count_reg[5]_1 ;
  wire [0:4]\Use_Serial_Unified_Completion.count_reg__0__0 ;
  wire \Use_Serial_Unified_Completion.count_reg_n_0_[0] ;
  wire \Use_Serial_Unified_Completion.count_reg_n_0_[1] ;
  wire \Use_Serial_Unified_Completion.mb_data_overrun_i_2_n_0 ;
  wire \Use_Serial_Unified_Completion.mb_data_overrun_i_3_n_0 ;
  wire \Use_Serial_Unified_Completion.mb_data_overrun_reg_n_0 ;
  wire \Use_Serial_Unified_Completion.mb_instr_error_reg_n_0 ;
  wire \Use_Serial_Unified_Completion.sample_1[15]_i_3_n_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.sample_1_reg[15]_0 ;
  wire \Use_Serial_Unified_Completion.sample_1_reg_n_0_[10] ;
  wire \Use_Serial_Unified_Completion.sample_1_reg_n_0_[11] ;
  wire \Use_Serial_Unified_Completion.sample_1_reg_n_0_[12] ;
  wire \Use_Serial_Unified_Completion.sample_1_reg_n_0_[13] ;
  wire \Use_Serial_Unified_Completion.sample_1_reg_n_0_[14] ;
  wire \Use_UART.RX_FIFO_I_n_10 ;
  wire \Use_UART.RX_FIFO_I_n_9 ;
  wire \Use_UART.TX_FIFO_I_n_3 ;
  wire \Use_UART.TX_FIFO_I_n_4 ;
  wire \Use_UART.TX_FIFO_I_n_5 ;
  wire \Use_UART.TX_FIFO_I_n_6 ;
  wire \Use_UART.TX_FIFO_I_n_7 ;
  wire \Use_UART.TX_FIFO_I_n_8 ;
  wire \Use_UART.execute_i_3_n_0 ;
  wire \Use_UART.fifo_Din_reg[7]_0 ;
  wire \Use_UART.fifo_Read_i_1_n_0 ;
  wire \Use_UART.fifo_Read_reg_n_0 ;
  wire \Use_UART.fifo_Write_i_1_n_0 ;
  wire \Use_UART.fifo_Write_i_2_n_0 ;
  wire \Use_UART.fifo_Write_reg_n_0 ;
  wire \Use_UART.tdo_reg[0]_i_3_n_0 ;
  wire \Use_UART.tdo_reg[0]_i_4_n_0 ;
  wire \Use_UART.tdo_reg[4]_i_2_n_0 ;
  wire [0:0]\Use_UART.tdo_reg_reg[7]_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]bus2ip_rdce;
  wire [0:7]command;
  wire [0:7]command_1;
  wire command_10;
  wire [3:0]\command_1_reg[7]_0 ;
  wire completion_ctrl;
  wire [15:0]completion_status;
  wire config_TDO_2;
  wire data_Exists_I_reg;
  wire data_Exists_I_reg_0;
  wire data_cmd_reset6_out;
  wire execute;
  (* async_reg = "true" *) wire execute_1;
  (* async_reg = "true" *) wire execute_2;
  wire execute_3;
  wire [0:7]fifo_Din;
  wire mb_instr_overrun;
  wire [5:1]p_0_in;
  wire p_0_in_3;
  wire [4:1]p_0_in__0;
  wire p_1_in;
  wire p_2_out;
  wire p_35_out__0;
  wire p_3_out__10;
  (* async_reg = "true" *) wire [15:13]sample;
  wire sample_1;
  wire sel_n;
  wire sel_n0;
  wire sel_n_reg_0;
  wire sel_n_reg_1;
  wire sel_with_scan_reset24_out;
  wire [0:0]\shift_Count_reg[0]_0 ;
  wire [4:4]shift_Count_reg__0;
  wire shifting_Data1__0;
  wire sync;
  wire tdi_shifter0;
  wire \tdi_shifter_reg_n_0_[1] ;
  wire \tdi_shifter_reg_n_0_[2] ;
  wire \tdi_shifter_reg_n_0_[4] ;
  wire \tdi_shifter_reg_n_0_[5] ;
  wire \tdi_shifter_reg_n_0_[6] ;
  wire \tdi_shifter_reg_n_0_[7] ;
  wire tdo;
  wire [0:7]tdo_reg;
  wire tx_Buffer_Full;
  wire tx_buffered;
  (* async_reg = "true" *) wire tx_buffered_1;
  (* async_reg = "true" *) wire tx_buffered_2;
  wire \NLW_Use_BSCAN.FDC_I_Scan_En_UNCONNECTED ;
  wire \NLW_Use_BSCAN.FDC_I_Scan_Reset_UNCONNECTED ;
  wire \NLW_Use_BSCAN.FDC_I_Scan_Reset_Sel_UNCONNECTED ;
  wire \NLW_Use_UART.TX_FIFO_I_Interrupt_UNCONNECTED ;
  wire \NLW_Use_UART.TX_FIFO_I_Interrupt_INST_0_0_UNCONNECTED ;
  wire \NLW_Use_UART.TX_FIFO_I_Q_0_UNCONNECTED ;
  wire \NLW_Use_UART.TX_FIFO_I_enable_interrupts_UNCONNECTED ;
  wire \NLW_Use_UART.TX_FIFO_I_tx_Buffer_Empty_UNCONNECTED ;

  assign out = tx_buffered_2;
  LUT3 #(
    .INIT(8'hFD)) 
    Dbg_Shift_31_INST_0_i_1
       (.I0(command[5]),
        .I1(command[7]),
        .I2(command[4]),
        .O(Dbg_Shift_31_INST_0_i_1_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    Dbg_Shift_31_INST_0_i_3
       (.I0(command[0]),
        .I1(command[1]),
        .I2(command[3]),
        .I3(command[2]),
        .O(Dbg_Shift_31_INST_0_i_3_n_0));
  FDCE #(
    .INIT(1'b0)) 
    Debug_Rst_i_reg
       (.C(CLK),
        .CE(Debug_Rst_i0),
        .CLR(\^AR ),
        .D(p_1_in),
        .Q(Dbg_Rst_0));
  FDCE #(
    .INIT(1'b0)) 
    Debug_SYS_Rst_i_reg
       (.C(CLK),
        .CE(Debug_Rst_i0),
        .CLR(\^AR ),
        .D(\tdi_shifter_reg_n_0_[1] ),
        .Q(Debug_SYS_Rst));
  (* OPT_MODIFIED = "PROPCONST " *) 
  GND GND_1
       (.G(\^AR ));
  cpu_MB_FDC_1 \Use_BSCAN.FDC_I 
       (.CE(CE),
        .CLK(CLK),
        .D({\Use_BSCAN.FDC_I_n_19 ,\Use_BSCAN.FDC_I_n_20 ,\Use_BSCAN.FDC_I_n_21 ,\Use_BSCAN.FDC_I_n_22 ,\Use_BSCAN.FDC_I_n_23 ,\Use_BSCAN.FDC_I_n_24 ,\Use_BSCAN.FDC_I_n_25 ,\Use_BSCAN.FDC_I_n_26 ,\Use_BSCAN.FDC_I_n_27 ,\Use_BSCAN.FDC_I_n_28 }),
        .D_2(D_2),
        .Dbg_Reg_En_0(Dbg_Reg_En_0),
        .Dbg_TDO_0(Dbg_TDO_0),
        .Debug_Rst_i0(Debug_Rst_i0),
        .E(\Use_BSCAN.FDC_I_n_12 ),
        .Q({command[0],command[1],command[2],command[3],command[4],command[5],command[6],command[7]}),
        .SEL(SEL),
        .Scan_En(\NLW_Use_BSCAN.FDC_I_Scan_En_UNCONNECTED ),
        .Scan_Reset(\NLW_Use_BSCAN.FDC_I_Scan_Reset_UNCONNECTED ),
        .Scan_Reset_Sel(\NLW_Use_BSCAN.FDC_I_Scan_Reset_Sel_UNCONNECTED ),
        .\Use_BSCAN.PORT_Selector_reg[2] (command_10),
        .\Use_BSCAN.command_reg[6] (\Use_BSCAN.FDC_I_n_17 ),
        .\Use_BSCAN.command_reg[6]_0 (sample_1),
        .\Use_Serial_Unified_Completion.completion_block_reg (\Use_Serial_Unified_Completion.completion_block_reg_n_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[0] (\Use_UART.fifo_Din_reg[7]_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[3] (\Use_Serial_Unified_Completion.completion_status[3]_i_2_n_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[4] (\Use_Serial_Unified_Completion.completion_status[4]_i_2_n_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[5] (\Use_Serial_Unified_Completion.completion_status[5]_i_2_n_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[6] (\Use_Serial_Unified_Completion.completion_status[7]_i_2_n_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[8] (\Use_Serial_Unified_Completion.completion_status[9]_i_4_n_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[9] (completion_status[10:0]),
        .\Use_Serial_Unified_Completion.mb_data_overrun_reg (\Use_BSCAN.FDC_I_n_35 ),
        .\Use_Serial_Unified_Completion.mb_data_overrun_reg_0 (\Use_Serial_Unified_Completion.mb_data_overrun_i_2_n_0 ),
        .\Use_Serial_Unified_Completion.mb_instr_error_reg (\Use_BSCAN.FDC_I_n_34 ),
        .\Use_Serial_Unified_Completion.mb_instr_error_reg_0 (\Use_BSCAN.SYNC_FDRE_n_1 ),
        .\Use_Serial_Unified_Completion.mb_instr_overrun_reg (\Use_BSCAN.FDC_I_n_33 ),
        .\Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 (sel_n_reg_0),
        .\Use_Serial_Unified_Completion.mb_instr_overrun_reg_1 (\Use_BSCAN.SYNC_FDRE_n_2 ),
        .\Use_Serial_Unified_Completion.sample_1_reg[10] (\Use_Serial_Unified_Completion.sample_1[15]_i_3_n_0 ),
        .\Use_Serial_Unified_Completion.sample_reg[15] ({\Use_BSCAN.FDC_I_n_29 ,\Use_BSCAN.FDC_I_n_30 ,\Use_BSCAN.FDC_I_n_31 }),
        .\Use_Serial_Unified_Completion.sample_reg[15]_0 ({sample,\Use_Serial_Unified_Completion.mb_data_overrun_reg_n_0 ,\Use_Serial_Unified_Completion.mb_instr_error_reg_n_0 ,mb_instr_overrun}),
        .\Use_UART.tx_buffered_reg (Dbg_Shift_31_INST_0_i_3_n_0),
        .\Use_UART.tx_buffered_reg_0 ({p_1_in,\tdi_shifter_reg_n_0_[1] ,\tdi_shifter_reg_n_0_[2] ,p_0_in_3,\tdi_shifter_reg_n_0_[4] ,\tdi_shifter_reg_n_0_[5] ,\tdi_shifter_reg_n_0_[6] ,\tdi_shifter_reg_n_0_[7] }),
        .\Using_FPGA.Native_0 (\Use_BSCAN.FDC_I_n_11 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\command_1_reg[7] (\command_1_reg[7]_0 ),
        .completion_ctrl(completion_ctrl),
        .\completion_ctrl_reg[0] (\Use_BSCAN.FDC_I_n_36 ),
        .data_cmd_reset6_out(data_cmd_reset6_out),
        .in0(tx_buffered),
        .p_35_out__0(p_35_out__0),
        .p_3_out__10(p_3_out__10),
        .sel_n(sel_n),
        .shifting_Data1__0(shifting_Data1__0),
        .\tdi_shifter_reg[0] (\Use_BSCAN.FDC_I_n_37 ),
        .\tdi_shifter_reg[0]_0 (\Use_BSCAN.FDC_I_n_38 ));
  cpu_MB_FDRE_1 \Use_BSCAN.SYNC_FDRE 
       (.CE(CE),
        .D_2(D_2),
        .E(E),
        .Q(command[6]),
        .\Use_Serial_Unified_Completion.count_reg[1] (\Use_BSCAN.SYNC_FDRE_n_1 ),
        .\Use_Serial_Unified_Completion.count_reg[1]_0 (\Use_BSCAN.SYNC_FDRE_n_2 ),
        .\Use_Serial_Unified_Completion.mb_instr_error_reg (\Use_Serial_Unified_Completion.count_reg_n_0_[1] ),
        .\Use_Serial_Unified_Completion.mb_instr_error_reg_0 (\Use_Serial_Unified_Completion.count_reg_n_0_[0] ),
        .\Use_Serial_Unified_Completion.mb_instr_error_reg_1 (\Use_BSCAN.FDC_I_n_17 ),
        .\Use_UART.fifo_Din_reg[7] (Dbg_Shift_31_INST_0_i_3_n_0),
        .\Use_UART.fifo_Din_reg[7]_0 (\Use_UART.fifo_Din_reg[7]_0 ),
        .\Use_UART.fifo_Din_reg[7]_1 (Dbg_Shift_31_INST_0_i_1_n_0),
        .\Use_UART.fifo_Din_reg[7]_2 (\Use_BSCAN.FDC_I_n_11 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .sync(sync));
  LUT5 #(
    .INIT(32'h00000008)) 
    \Use_BSCAN.command[0]_i_1 
       (.I0(SEL),
        .I1(\command_1_reg[7]_0 [0]),
        .I2(\command_1_reg[7]_0 [1]),
        .I3(\command_1_reg[7]_0 [3]),
        .I4(\command_1_reg[7]_0 [2]),
        .O(\Use_BSCAN.command[0]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[0] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(\^AR ),
        .D(command_1[0]),
        .Q(command[0]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[1] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(\^AR ),
        .D(command_1[1]),
        .Q(command[1]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[2] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(\^AR ),
        .D(command_1[2]),
        .Q(command[2]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[3] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(\^AR ),
        .D(command_1[3]),
        .Q(command[3]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[4] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(\^AR ),
        .D(command_1[4]),
        .Q(command[4]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[5] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(\^AR ),
        .D(command_1[5]),
        .Q(command[5]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[6] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(\^AR ),
        .D(command_1[6]),
        .Q(command[6]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[7] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(\^AR ),
        .D(command_1[7]),
        .Q(command[7]));
  cpu_mdm_v3_2_15_MB_SRL16E \Use_Config_SRL16E.SRL16E_1 
       (.Q({A3,A2,A1,Q}),
        .\Use_E2.BSCANE2_I_i_8 (\Using_FPGA.Native_0 ),
        .\shift_Count_reg[0] (\Use_Config_SRL16E.SRL16E_1_n_0 ));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized0 \Use_Config_SRL16E.SRL16E_2 
       (.Q({A3,A2,A1,Q}),
        .\Use_E2.BSCANE2_I_i_8 (\Using_FPGA.Native_0 ),
        .config_TDO_2(config_TDO_2));
  LUT3 #(
    .INIT(8'hF8)) 
    \Use_E2.BSCANE2_I_i_3 
       (.I0(command[0]),
        .I1(Dbg_TDO_0),
        .I2(\command_1_reg[7]_0 [1]),
        .O(\Use_E2.BSCANE2_I_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hC000C00000008080)) 
    \Use_E2.BSCANE2_I_i_4 
       (.I0(\Use_E2.BSCANE2_I_i_6_n_0 ),
        .I1(command[6]),
        .I2(\Use_E2.BSCANE2_I_i_7_n_0 ),
        .I3(Dbg_TDO_0),
        .I4(command[1]),
        .I5(command[5]),
        .O(\Use_E2.BSCANE2_I_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hF0CA00CA)) 
    \Use_E2.BSCANE2_I_i_6 
       (.I0(Dbg_TDO_0),
        .I1(tdo_reg[7]),
        .I2(command[4]),
        .I3(command[2]),
        .I4(completion_status[0]),
        .O(\Use_E2.BSCANE2_I_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h00001104AAAEBFBF)) 
    \Use_E2.BSCANE2_I_i_7 
       (.I0(command[5]),
        .I1(command[2]),
        .I2(command[1]),
        .I3(command[4]),
        .I4(command[3]),
        .I5(command[7]),
        .O(\Use_E2.BSCANE2_I_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF6)) 
    \Use_E2.BSCANE2_I_i_9 
       (.I0(command[5]),
        .I1(command[4]),
        .I2(command[3]),
        .I3(command[1]),
        .I4(command[7]),
        .I5(command[2]),
        .O(\Use_E2.BSCANE2_I_i_9_n_0 ));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized1 \Use_ID_SRL16E.SRL16E_ID_1 
       (.Q({A3,A2,A1,Q}),
        .Q0_out(Q0_out),
        .\Use_E2.BSCANE2_I_i_8 (\Using_FPGA.Native_0 ));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized2 \Use_ID_SRL16E.SRL16E_ID_2 
       (.Dbg_TDO_0(Dbg_TDO_0),
        .Q({shift_Count_reg__0,A3,A2,A1,Q}),
        .Q0_out(Q0_out),
        .\Use_E2.BSCANE2_I_i_1_0 (\Use_E2.BSCANE2_I_i_7_n_0 ),
        .\Use_E2.BSCANE2_I_i_1_1 (\Use_E2.BSCANE2_I_i_9_n_0 ),
        .\Use_E2.BSCANE2_I_i_5_0 (\Use_Config_SRL16E.SRL16E_1_n_0 ),
        .\Use_E2.BSCANE2_I_i_8_0 (\Using_FPGA.Native_0 ),
        .config_TDO_2(config_TDO_2),
        .sel_n_reg(sel_n_reg_1),
        .sel_n_reg_0(\command_1_reg[7]_0 [0]),
        .sel_n_reg_1(\Use_E2.BSCANE2_I_i_3_n_0 ),
        .sel_n_reg_2({command[0],command[5],command[6]}),
        .sel_n_reg_3(\Use_E2.BSCANE2_I_i_4_n_0 ),
        .tdo(tdo));
  LUT6 #(
    .INIT(64'hFFFFFFFFBAFFBABA)) 
    \Use_Serial_Unified_Completion.completion_block_i_2 
       (.I0(\Use_Serial_Unified_Completion.completion_block_i_3_n_0 ),
        .I1(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[13] ),
        .I2(sample[13]),
        .I3(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[14] ),
        .I4(sample[14]),
        .I5(\Use_Serial_Unified_Completion.completion_block_i_4_n_0 ),
        .O(p_3_out__10));
  LUT4 #(
    .INIT(16'h4F44)) 
    \Use_Serial_Unified_Completion.completion_block_i_3 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg[15]_0 ),
        .I1(sample[15]),
        .I2(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[10] ),
        .I3(mb_instr_overrun),
        .O(\Use_Serial_Unified_Completion.completion_block_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h4F44)) 
    \Use_Serial_Unified_Completion.completion_block_i_4 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[11] ),
        .I1(\Use_Serial_Unified_Completion.mb_instr_error_reg_n_0 ),
        .I2(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[12] ),
        .I3(\Use_Serial_Unified_Completion.mb_data_overrun_reg_n_0 ),
        .O(\Use_Serial_Unified_Completion.completion_block_i_4_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_block_reg 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_36 ),
        .Q(\Use_Serial_Unified_Completion.completion_block_reg_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_Serial_Unified_Completion.completion_status[10]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[10] ),
        .I1(sel_n_reg_0),
        .I2(completion_status[11]),
        .O(\Use_Serial_Unified_Completion.completion_status[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_Serial_Unified_Completion.completion_status[11]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[11] ),
        .I1(sel_n_reg_0),
        .I2(completion_status[12]),
        .O(\Use_Serial_Unified_Completion.completion_status[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_Serial_Unified_Completion.completion_status[12]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[12] ),
        .I1(sel_n_reg_0),
        .I2(completion_status[13]),
        .O(\Use_Serial_Unified_Completion.completion_status[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_Serial_Unified_Completion.completion_status[13]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[13] ),
        .I1(sel_n_reg_0),
        .I2(completion_status[14]),
        .O(\Use_Serial_Unified_Completion.completion_status[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_Serial_Unified_Completion.completion_status[14]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[14] ),
        .I1(sel_n_reg_0),
        .I2(completion_status[15]),
        .O(\Use_Serial_Unified_Completion.completion_status[14]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \Use_Serial_Unified_Completion.completion_status[3]_i_2 
       (.I0(completion_status[2]),
        .I1(completion_status[0]),
        .I2(completion_status[1]),
        .O(\Use_Serial_Unified_Completion.completion_status[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \Use_Serial_Unified_Completion.completion_status[4]_i_2 
       (.I0(completion_status[3]),
        .I1(completion_status[1]),
        .I2(completion_status[0]),
        .I3(completion_status[2]),
        .O(\Use_Serial_Unified_Completion.completion_status[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \Use_Serial_Unified_Completion.completion_status[5]_i_2 
       (.I0(completion_status[4]),
        .I1(completion_status[2]),
        .I2(completion_status[0]),
        .I3(completion_status[1]),
        .I4(completion_status[3]),
        .O(\Use_Serial_Unified_Completion.completion_status[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \Use_Serial_Unified_Completion.completion_status[7]_i_2 
       (.I0(completion_status[5]),
        .I1(completion_status[3]),
        .I2(completion_status[1]),
        .I3(completion_status[0]),
        .I4(completion_status[2]),
        .I5(completion_status[4]),
        .O(\Use_Serial_Unified_Completion.completion_status[7]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \Use_Serial_Unified_Completion.completion_status[9]_i_4 
       (.I0(completion_status[7]),
        .I1(\Use_Serial_Unified_Completion.completion_status[7]_i_2_n_0 ),
        .I2(completion_status[6]),
        .O(\Use_Serial_Unified_Completion.completion_status[9]_i_4_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[0] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_28 ),
        .Q(completion_status[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[10] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ),
        .CLR(\^AR ),
        .D(\Use_Serial_Unified_Completion.completion_status[10]_i_1_n_0 ),
        .Q(completion_status[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[11] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ),
        .CLR(\^AR ),
        .D(\Use_Serial_Unified_Completion.completion_status[11]_i_1_n_0 ),
        .Q(completion_status[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[12] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ),
        .CLR(\^AR ),
        .D(\Use_Serial_Unified_Completion.completion_status[12]_i_1_n_0 ),
        .Q(completion_status[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[13] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ),
        .CLR(\^AR ),
        .D(\Use_Serial_Unified_Completion.completion_status[13]_i_1_n_0 ),
        .Q(completion_status[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[14] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ),
        .CLR(\^AR ),
        .D(\Use_Serial_Unified_Completion.completion_status[14]_i_1_n_0 ),
        .Q(completion_status[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[15] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ),
        .CLR(\^AR ),
        .D(\Use_Serial_Unified_Completion.completion_status_reg[15]_0 ),
        .Q(completion_status[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[1] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_27 ),
        .Q(completion_status[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[2] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_26 ),
        .Q(completion_status[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[3] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_25 ),
        .Q(completion_status[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[4] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_24 ),
        .Q(completion_status[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[5] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_23 ),
        .Q(completion_status[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[6] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_22 ),
        .Q(completion_status[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[7] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_21 ),
        .Q(completion_status[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[8] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_20 ),
        .Q(completion_status[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[9] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_19 ),
        .Q(completion_status[9]));
  LUT4 #(
    .INIT(16'h0078)) 
    \Use_Serial_Unified_Completion.count[0]__0_i_2 
       (.I0(\Use_Serial_Unified_Completion.count_reg__0__0 [1]),
        .I1(\Use_Serial_Unified_Completion.count[0]__0_i_4_n_0 ),
        .I2(\Use_Serial_Unified_Completion.count_reg__0__0 [0]),
        .I3(sel_n_reg_0),
        .O(p_0_in[5]));
  LUT4 #(
    .INIT(16'h8000)) 
    \Use_Serial_Unified_Completion.count[0]__0_i_4 
       (.I0(\Use_Serial_Unified_Completion.count_reg__0__0 [2]),
        .I1(\Use_Serial_Unified_Completion.count_reg__0__0 [4]),
        .I2(\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .I3(\Use_Serial_Unified_Completion.count_reg__0__0 [3]),
        .O(\Use_Serial_Unified_Completion.count[0]__0_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000FF80FF00FF00)) 
    \Use_Serial_Unified_Completion.count[0]_i_1 
       (.I0(\Use_Serial_Unified_Completion.count_reg_n_0_[1] ),
        .I1(\Use_UART.fifo_Din_reg[7]_0 ),
        .I2(sync),
        .I3(\Use_Serial_Unified_Completion.count_reg_n_0_[0] ),
        .I4(sel_n_reg_0),
        .I5(shifting_Data1__0),
        .O(\Use_Serial_Unified_Completion.count[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000007FFF8000)) 
    \Use_Serial_Unified_Completion.count[1]__0_i_1 
       (.I0(\Use_Serial_Unified_Completion.count_reg__0__0 [2]),
        .I1(\Use_Serial_Unified_Completion.count_reg__0__0 [4]),
        .I2(\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .I3(\Use_Serial_Unified_Completion.count_reg__0__0 [3]),
        .I4(\Use_Serial_Unified_Completion.count_reg__0__0 [1]),
        .I5(sel_n_reg_0),
        .O(p_0_in[4]));
  LUT6 #(
    .INIT(64'h00F7FFFF00080000)) 
    \Use_Serial_Unified_Completion.count[1]_i_1 
       (.I0(\Use_UART.fifo_Din_reg[7]_0 ),
        .I1(sync),
        .I2(\Use_Serial_Unified_Completion.count_reg_n_0_[0] ),
        .I3(sel_n_reg_0),
        .I4(shifting_Data1__0),
        .I5(\Use_Serial_Unified_Completion.count_reg_n_0_[1] ),
        .O(\Use_Serial_Unified_Completion.count[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00007F80)) 
    \Use_Serial_Unified_Completion.count[2]_i_1 
       (.I0(\Use_Serial_Unified_Completion.count_reg__0__0 [3]),
        .I1(\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .I2(\Use_Serial_Unified_Completion.count_reg__0__0 [4]),
        .I3(\Use_Serial_Unified_Completion.count_reg__0__0 [2]),
        .I4(sel_n_reg_0),
        .O(p_0_in[3]));
  LUT4 #(
    .INIT(16'h0078)) 
    \Use_Serial_Unified_Completion.count[3]_i_1 
       (.I0(\Use_Serial_Unified_Completion.count_reg__0__0 [4]),
        .I1(\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .I2(\Use_Serial_Unified_Completion.count_reg__0__0 [3]),
        .I3(sel_n_reg_0),
        .O(p_0_in[2]));
  LUT3 #(
    .INIT(8'h06)) 
    \Use_Serial_Unified_Completion.count[4]_i_1 
       (.I0(\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .I1(\Use_Serial_Unified_Completion.count_reg__0__0 [4]),
        .I2(sel_n_reg_0),
        .O(p_0_in[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[0] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(\Use_Serial_Unified_Completion.count[0]_i_1_n_0 ),
        .Q(\Use_Serial_Unified_Completion.count_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[0]__0 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.count_reg[5]_1 ),
        .CLR(\^AR ),
        .D(p_0_in[5]),
        .Q(\Use_Serial_Unified_Completion.count_reg__0__0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[1] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(\Use_Serial_Unified_Completion.count[1]_i_1_n_0 ),
        .Q(\Use_Serial_Unified_Completion.count_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[1]__0 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.count_reg[5]_1 ),
        .CLR(\^AR ),
        .D(p_0_in[4]),
        .Q(\Use_Serial_Unified_Completion.count_reg__0__0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[2] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.count_reg[5]_1 ),
        .CLR(\^AR ),
        .D(p_0_in[3]),
        .Q(\Use_Serial_Unified_Completion.count_reg__0__0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[3] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.count_reg[5]_1 ),
        .CLR(\^AR ),
        .D(p_0_in[2]),
        .Q(\Use_Serial_Unified_Completion.count_reg__0__0 [3]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[4] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.count_reg[5]_1 ),
        .CLR(\^AR ),
        .D(p_0_in[1]),
        .Q(\Use_Serial_Unified_Completion.count_reg__0__0 [4]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[5] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.count_reg[5]_1 ),
        .CLR(\^AR ),
        .D(D),
        .Q(\Use_Serial_Unified_Completion.count_reg[5]_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \Use_Serial_Unified_Completion.mb_data_overrun_i_2 
       (.I0(\Use_Serial_Unified_Completion.mb_data_overrun_i_3_n_0 ),
        .I1(\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .I2(\Use_Serial_Unified_Completion.count_reg__0__0 [4]),
        .I3(\Use_Serial_Unified_Completion.count_reg__0__0 [3]),
        .O(\Use_Serial_Unified_Completion.mb_data_overrun_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0008)) 
    \Use_Serial_Unified_Completion.mb_data_overrun_i_3 
       (.I0(\Use_UART.fifo_Din_reg[7]_0 ),
        .I1(\Use_Serial_Unified_Completion.count_reg__0__0 [0]),
        .I2(\Use_Serial_Unified_Completion.count_reg__0__0 [1]),
        .I3(\Use_Serial_Unified_Completion.count_reg__0__0 [2]),
        .O(\Use_Serial_Unified_Completion.mb_data_overrun_i_3_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.mb_data_overrun_reg 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_35 ),
        .Q(\Use_Serial_Unified_Completion.mb_data_overrun_reg_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.mb_instr_error_reg 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_34 ),
        .Q(\Use_Serial_Unified_Completion.mb_instr_error_reg_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.mb_instr_overrun_reg 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_33 ),
        .Q(mb_instr_overrun));
  LUT5 #(
    .INIT(32'h00000008)) 
    \Use_Serial_Unified_Completion.sample_1[15]_i_3 
       (.I0(command[2]),
        .I1(command[4]),
        .I2(command[0]),
        .I3(command[1]),
        .I4(command[3]),
        .O(\Use_Serial_Unified_Completion.sample_1[15]_i_3_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.sample_1_reg[10] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(sample_1),
        .CLR(\^AR ),
        .D(mb_instr_overrun),
        .Q(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[10] ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.sample_1_reg[11] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(sample_1),
        .CLR(\^AR ),
        .D(\Use_Serial_Unified_Completion.mb_instr_error_reg_n_0 ),
        .Q(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[11] ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.sample_1_reg[12] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(sample_1),
        .CLR(\^AR ),
        .D(\Use_Serial_Unified_Completion.mb_data_overrun_reg_n_0 ),
        .Q(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[12] ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.sample_1_reg[13] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(sample_1),
        .CLR(\^AR ),
        .D(sample[13]),
        .Q(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[13] ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.sample_1_reg[14] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(sample_1),
        .CLR(\^AR ),
        .D(sample[14]),
        .Q(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[14] ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.sample_1_reg[15] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(sample_1),
        .CLR(\^AR ),
        .D(sample[15]),
        .Q(\Use_Serial_Unified_Completion.sample_1_reg[15]_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.sample_reg[13] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_31 ),
        .Q(sample[13]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.sample_reg[14] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_30 ),
        .Q(sample[14]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.sample_reg[15] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_29 ),
        .Q(sample[15]));
  cpu_mdm_v3_2_15_SRL_FIFO \Use_UART.RX_FIFO_I 
       (.Bus_RNW_reg(Bus_RNW_reg),
        .D({\Use_UART.RX_FIFO_I_n_9 ,\Use_UART.RX_FIFO_I_n_10 }),
        .Data_Out({Data_Out[4],Data_Out[5]}),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg (\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .Q({fifo_Din[0],fifo_Din[1],fifo_Din[2],fifo_Din[3],fifo_Din[4],fifo_Din[5],fifo_Din[6],fifo_Din[7]}),
        .RX_Buffer_Full(RX_Buffer_Full),
        .RX_Data(RX_Data),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Use_UART.tdo_reg_reg[4] ({tdo_reg[3],tdo_reg[4]}),
        .\Use_UART.tdo_reg_reg[4]_0 (sel_n_reg_0),
        .\Use_UART.tdo_reg_reg[4]_1 (\Use_UART.tdo_reg[4]_i_2_n_0 ),
        .\Use_UART.tdo_reg_reg[4]_2 (\Use_UART.tdo_reg[0]_i_3_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .bus2ip_rdce(bus2ip_rdce),
        .data_Exists_I_reg_0(data_Exists_I_reg),
        .data_Exists_I_reg_1(\Use_UART.fifo_Write_reg_n_0 ));
  cpu_mdm_v3_2_15_SRL_FIFO_841 \Use_UART.TX_FIFO_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ({Data_Out[4],Data_Out[5]}),
        .Bus_RNW_reg(Bus_RNW_reg),
        .D({\Use_UART.TX_FIFO_I_n_3 ,\Use_UART.TX_FIFO_I_n_4 ,\Use_UART.TX_FIFO_I_n_5 ,\Use_UART.TX_FIFO_I_n_6 ,\Use_UART.TX_FIFO_I_n_7 ,\Use_UART.TX_FIFO_I_n_8 }),
        .FIFO_Write(FIFO_Write),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .Interrupt(\NLW_Use_UART.TX_FIFO_I_Interrupt_UNCONNECTED ),
        .Interrupt_INST_0_0(\NLW_Use_UART.TX_FIFO_I_Interrupt_INST_0_0_UNCONNECTED ),
        .Q({tdo_reg[0],tdo_reg[1],tdo_reg[2],tdo_reg[5],tdo_reg[6]}),
        .Q_0(\NLW_Use_UART.TX_FIFO_I_Q_0_UNCONNECTED ),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA),
        .\Use_UART.tdo_reg_reg[7] (sel_n_reg_0),
        .\Use_UART.tdo_reg_reg[7]_0 (\Use_UART.tdo_reg[4]_i_2_n_0 ),
        .\Use_UART.tdo_reg_reg[7]_1 (\Use_UART.tdo_reg[0]_i_3_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .data_Exists_I_reg_0(data_Exists_I_reg_0),
        .data_Exists_I_reg_1(\Use_UART.fifo_Read_reg_n_0 ),
        .enable_interrupts(\NLW_Use_UART.TX_FIFO_I_enable_interrupts_UNCONNECTED ),
        .out(tx_buffered_2),
        .tx_Buffer_Empty(\NLW_Use_UART.TX_FIFO_I_tx_Buffer_Empty_UNCONNECTED ),
        .tx_Buffer_Full(tx_Buffer_Full));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.execute_1_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(execute),
        .Q(execute_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.execute_2_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(execute_1),
        .Q(execute_2),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.execute_3_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(execute_2),
        .Q(execute_3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \Use_UART.execute_i_1 
       (.I0(command[7]),
        .I1(\Use_UART.execute_i_3_n_0 ),
        .I2(command[0]),
        .I3(command[1]),
        .I4(command[3]),
        .I5(command[2]),
        .O(p_2_out));
  LUT2 #(
    .INIT(4'hB)) 
    \Use_UART.execute_i_3 
       (.I0(command[5]),
        .I1(command[4]),
        .O(\Use_UART.execute_i_3_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.execute_reg 
       (.C(CLK),
        .CE(1'b1),
        .CLR(data_cmd_reset6_out),
        .D(p_2_out),
        .Q(execute));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.fifo_Din_reg[0] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(\^AR ),
        .D(Ext_JTAG_TDI),
        .Q(fifo_Din[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.fifo_Din_reg[1] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(\^AR ),
        .D(fifo_Din[0]),
        .Q(fifo_Din[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.fifo_Din_reg[2] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(\^AR ),
        .D(fifo_Din[1]),
        .Q(fifo_Din[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.fifo_Din_reg[3] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(\^AR ),
        .D(fifo_Din[2]),
        .Q(fifo_Din[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.fifo_Din_reg[4] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(\^AR ),
        .D(fifo_Din[3]),
        .Q(fifo_Din[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.fifo_Din_reg[5] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(\^AR ),
        .D(fifo_Din[4]),
        .Q(fifo_Din[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.fifo_Din_reg[6] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(\^AR ),
        .D(fifo_Din[5]),
        .Q(fifo_Din[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.fifo_Din_reg[7] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(\^AR ),
        .D(fifo_Din[6]),
        .Q(fifo_Din[7]));
  LUT6 #(
    .INIT(64'h0000000010000000)) 
    \Use_UART.fifo_Read_i_1 
       (.I0(\Use_UART.execute_i_3_n_0 ),
        .I1(execute_3),
        .I2(execute_2),
        .I3(command[6]),
        .I4(command[7]),
        .I5(\Use_UART.fifo_Write_i_2_n_0 ),
        .O(\Use_UART.fifo_Read_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.fifo_Read_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\Use_UART.fifo_Read_i_1_n_0 ),
        .Q(\Use_UART.fifo_Read_reg_n_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    \Use_UART.fifo_Write_i_1 
       (.I0(\Use_UART.execute_i_3_n_0 ),
        .I1(execute_3),
        .I2(execute_2),
        .I3(command[6]),
        .I4(command[7]),
        .I5(\Use_UART.fifo_Write_i_2_n_0 ),
        .O(\Use_UART.fifo_Write_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Use_UART.fifo_Write_i_2 
       (.I0(command[0]),
        .I1(command[2]),
        .I2(command[3]),
        .I3(command[1]),
        .O(\Use_UART.fifo_Write_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.fifo_Write_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\Use_UART.fifo_Write_i_1_n_0 ),
        .Q(\Use_UART.fifo_Write_reg_n_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFEF00000000)) 
    \Use_UART.tdo_reg[0]_i_3 
       (.I0(command[0]),
        .I1(\Use_UART.execute_i_3_n_0 ),
        .I2(command[6]),
        .I3(command[2]),
        .I4(\Use_UART.tdo_reg[0]_i_4_n_0 ),
        .I5(sel_n_reg_0),
        .O(\Use_UART.tdo_reg[0]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \Use_UART.tdo_reg[0]_i_4 
       (.I0(command[3]),
        .I1(command[1]),
        .I2(command[7]),
        .O(\Use_UART.tdo_reg[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000200)) 
    \Use_UART.tdo_reg[4]_i_2 
       (.I0(sel_n_reg_0),
        .I1(command[0]),
        .I2(\Use_UART.execute_i_3_n_0 ),
        .I3(command[6]),
        .I4(command[2]),
        .I5(\Use_UART.tdo_reg[0]_i_4_n_0 ),
        .O(\Use_UART.tdo_reg[4]_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[0] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(\^AR ),
        .D(\Use_UART.TX_FIFO_I_n_3 ),
        .Q(tdo_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[1] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(\^AR ),
        .D(\Use_UART.TX_FIFO_I_n_4 ),
        .Q(tdo_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[2] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(\^AR ),
        .D(\Use_UART.TX_FIFO_I_n_5 ),
        .Q(tdo_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[3] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(\^AR ),
        .D(\Use_UART.TX_FIFO_I_n_6 ),
        .Q(tdo_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[4] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(\^AR ),
        .D(\Use_UART.RX_FIFO_I_n_9 ),
        .Q(tdo_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[5] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(\^AR ),
        .D(\Use_UART.RX_FIFO_I_n_10 ),
        .Q(tdo_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[6] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(\^AR ),
        .D(\Use_UART.TX_FIFO_I_n_7 ),
        .Q(tdo_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[7] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(\^AR ),
        .D(\Use_UART.TX_FIFO_I_n_8 ),
        .Q(tdo_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.tx_buffered_1_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(tx_buffered),
        .Q(tx_buffered_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.tx_buffered_2_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(tx_buffered_1),
        .Q(tx_buffered_2),
        .R(1'b0));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tx_buffered_reg 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_37 ),
        .Q(tx_buffered));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[0] 
       (.C(CLK),
        .CE(command_10),
        .CLR(\^AR ),
        .D(p_1_in),
        .Q(command_1[0]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[1] 
       (.C(CLK),
        .CE(command_10),
        .CLR(\^AR ),
        .D(\tdi_shifter_reg_n_0_[1] ),
        .Q(command_1[1]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[2] 
       (.C(CLK),
        .CE(command_10),
        .CLR(\^AR ),
        .D(\tdi_shifter_reg_n_0_[2] ),
        .Q(command_1[2]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[3] 
       (.C(CLK),
        .CE(command_10),
        .CLR(\^AR ),
        .D(p_0_in_3),
        .Q(command_1[3]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[4] 
       (.C(CLK),
        .CE(command_10),
        .CLR(\^AR ),
        .D(\tdi_shifter_reg_n_0_[4] ),
        .Q(command_1[4]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[5] 
       (.C(CLK),
        .CE(command_10),
        .CLR(\^AR ),
        .D(\tdi_shifter_reg_n_0_[5] ),
        .Q(command_1[5]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[6] 
       (.C(CLK),
        .CE(command_10),
        .CLR(\^AR ),
        .D(\tdi_shifter_reg_n_0_[6] ),
        .Q(command_1[6]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[7] 
       (.C(CLK),
        .CE(command_10),
        .CLR(\^AR ),
        .D(\tdi_shifter_reg_n_0_[7] ),
        .Q(command_1[7]));
  FDCE #(
    .INIT(1'b0)) 
    \completion_ctrl_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(\Use_BSCAN.FDC_I_n_38 ),
        .Q(completion_ctrl));
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    sel_n_i_1
       (.I0(\command_1_reg[7]_0 [2]),
        .I1(\command_1_reg[7]_0 [3]),
        .I2(\command_1_reg[7]_0 [1]),
        .I3(\command_1_reg[7]_0 [0]),
        .I4(SEL),
        .O(sel_n0));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    sel_n_i_2
       (.I0(\Use_BSCAN.command[0]_i_1_n_0 ),
        .I1(CLK),
        .O(sel_with_scan_reset24_out));
  FDPE #(
    .INIT(1'b1)) 
    sel_n_reg
       (.C(\Using_FPGA.Native_0 ),
        .CE(sel_n_reg_0),
        .D(sel_n0),
        .PRE(sel_with_scan_reset24_out),
        .Q(sel_n));
  LUT3 #(
    .INIT(8'h48)) 
    \shift_Count[1]_i_1 
       (.I0(Q),
        .I1(\Use_UART.fifo_Din_reg[7]_0 ),
        .I2(A1),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \shift_Count[2]_i_1 
       (.I0(A1),
        .I1(Q),
        .I2(\Use_UART.fifo_Din_reg[7]_0 ),
        .I3(A2),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \shift_Count[3]_i_1 
       (.I0(A2),
        .I1(Q),
        .I2(A1),
        .I3(\Use_UART.fifo_Din_reg[7]_0 ),
        .I4(A3),
        .O(p_0_in__0[3]));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \shift_Count[4]_i_1 
       (.I0(A3),
        .I1(A1),
        .I2(Q),
        .I3(A2),
        .I4(\Use_UART.fifo_Din_reg[7]_0 ),
        .I5(shift_Count_reg__0),
        .O(p_0_in__0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_Count_reg[0] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(\shift_Count_reg[0]_0 ),
        .Q(Q));
  FDCE #(
    .INIT(1'b0)) 
    \shift_Count_reg[1] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(p_0_in__0[1]),
        .Q(A1));
  FDCE #(
    .INIT(1'b0)) 
    \shift_Count_reg[2] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(p_0_in__0[2]),
        .Q(A2));
  FDCE #(
    .INIT(1'b0)) 
    \shift_Count_reg[3] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(p_0_in__0[3]),
        .Q(A3));
  FDCE #(
    .INIT(1'b0)) 
    \shift_Count_reg[4] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(\^AR ),
        .D(p_0_in__0[4]),
        .Q(shift_Count_reg__0));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \tdi_shifter[0]_i_1 
       (.I0(\command_1_reg[7]_0 [2]),
        .I1(\command_1_reg[7]_0 [3]),
        .I2(\command_1_reg[7]_0 [1]),
        .I3(\command_1_reg[7]_0 [0]),
        .I4(SEL),
        .I5(\Use_UART.fifo_Din_reg[7]_0 ),
        .O(tdi_shifter0));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[0] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(\^AR ),
        .D(Ext_JTAG_TDI),
        .Q(p_1_in));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[1] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(\^AR ),
        .D(p_1_in),
        .Q(\tdi_shifter_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[2] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(\^AR ),
        .D(\tdi_shifter_reg_n_0_[1] ),
        .Q(\tdi_shifter_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[3] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(\^AR ),
        .D(\tdi_shifter_reg_n_0_[2] ),
        .Q(p_0_in_3));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[4] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(\^AR ),
        .D(p_0_in_3),
        .Q(\tdi_shifter_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[5] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(\^AR ),
        .D(\tdi_shifter_reg_n_0_[4] ),
        .Q(\tdi_shifter_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[6] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(\^AR ),
        .D(\tdi_shifter_reg_n_0_[5] ),
        .Q(\tdi_shifter_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[7] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(\^AR ),
        .D(\tdi_shifter_reg_n_0_[6] ),
        .Q(\tdi_shifter_reg_n_0_[7] ));
endmodule

(* ORIG_REF_NAME = "MB_BSCANE2" *) 
module cpu_MB_BSCANE2
   (\Use_BSCAN.PORT_Selector_reg[0] ,
    DRCK,
    Ext_JTAG_RESET,
    SEL,
    \Use_BSCAN.PORT_Selector_reg[0]_0 ,
    Ext_JTAG_TDI,
    Ext_JTAG_UPDATE,
    AR,
    shift_n_reset1_out,
    \Use_BSCAN.command_reg[5] ,
    \Using_FPGA.Native ,
    \Use_E2.BSCANE2_I_0 ,
    D,
    \shift_Count_reg[0] ,
    \Use_Serial_Unified_Completion.sample_1_reg[15] ,
    tdo,
    Scan_Reset,
    Scan_En,
    Scan_Reset_Sel,
    p_35_out__0,
    p_58_out__0,
    \Use_Serial_Unified_Completion.count_reg[5] ,
    Q,
    \Use_Serial_Unified_Completion.completion_status_reg[15] );
  output \Use_BSCAN.PORT_Selector_reg[0] ;
  output DRCK;
  output Ext_JTAG_RESET;
  output SEL;
  output \Use_BSCAN.PORT_Selector_reg[0]_0 ;
  output Ext_JTAG_TDI;
  output Ext_JTAG_UPDATE;
  output [0:0]AR;
  output shift_n_reset1_out;
  output [0:0]\Use_BSCAN.command_reg[5] ;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]\Use_E2.BSCANE2_I_0 ;
  output [0:0]D;
  output [0:0]\shift_Count_reg[0] ;
  output [0:0]\Use_Serial_Unified_Completion.sample_1_reg[15] ;
  input tdo;
  input Scan_Reset;
  input Scan_En;
  input Scan_Reset_Sel;
  input p_35_out__0;
  input p_58_out__0;
  input [0:0]\Use_Serial_Unified_Completion.count_reg[5] ;
  input [0:0]Q;
  input [0:0]\Use_Serial_Unified_Completion.completion_status_reg[15] ;

  wire [0:0]AR;
  wire [0:0]D;
  wire DRCK;
  wire Ext_JTAG_TDI;
  wire Ext_JTAG_UPDATE;
  wire [0:0]Q;
  wire SEL;
  wire \Use_BSCAN.PORT_Selector_reg[0] ;
  wire \Use_BSCAN.PORT_Selector_reg[0]_0 ;
  wire [0:0]\Use_BSCAN.command_reg[5] ;
  wire [0:0]\Use_E2.BSCANE2_I_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.completion_status_reg[15] ;
  wire [0:0]\Use_Serial_Unified_Completion.count_reg[5] ;
  wire [0:0]\Use_Serial_Unified_Completion.sample_1_reg[15] ;
  wire [0:0]\Using_FPGA.Native ;
  wire p_35_out__0;
  wire p_58_out__0;
  wire [0:0]\shift_Count_reg[0] ;
  wire shift_n_reset1_out;
  wire tdo;
  wire \NLW_Use_E2.BSCANE2_I_RESET_UNCONNECTED ;
  wire \NLW_Use_E2.BSCANE2_I_RUNTEST_UNCONNECTED ;
  wire \NLW_Use_E2.BSCANE2_I_TCK_UNCONNECTED ;
  wire \NLW_Use_E2.BSCANE2_I_TMS_UNCONNECTED ;

  (* OPT_MODIFIED = "RETARGET " *) 
  LUT1 #(
    .INIT(2'h1)) 
    \Use_BSCAN.Config_Reg[30]_i_1 
       (.I0(\Use_BSCAN.PORT_Selector_reg[0]_0 ),
        .O(shift_n_reset1_out));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT1 #(
    .INIT(2'h1)) 
    \Use_BSCAN.TDI_Shifter[3]_i_2 
       (.I0(SEL),
        .O(AR));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  BSCANE2 #(
    .DISABLE_JTAG("FALSE"),
    .JTAG_CHAIN(1)) 
    \Use_E2.BSCANE2_I 
       (.CAPTURE(\Use_BSCAN.PORT_Selector_reg[0] ),
        .DRCK(DRCK),
        .RESET(\NLW_Use_E2.BSCANE2_I_RESET_UNCONNECTED ),
        .RUNTEST(\NLW_Use_E2.BSCANE2_I_RUNTEST_UNCONNECTED ),
        .SEL(SEL),
        .SHIFT(\Use_BSCAN.PORT_Selector_reg[0]_0 ),
        .TCK(\NLW_Use_E2.BSCANE2_I_TCK_UNCONNECTED ),
        .TDI(Ext_JTAG_TDI),
        .TDO(tdo),
        .TMS(\NLW_Use_E2.BSCANE2_I_TMS_UNCONNECTED ),
        .UPDATE(Ext_JTAG_UPDATE));
  LUT3 #(
    .INIT(8'hE0)) 
    \Use_Serial_Unified_Completion.completion_status[15]_i_1 
       (.I0(\Use_BSCAN.PORT_Selector_reg[0]_0 ),
        .I1(\Use_BSCAN.PORT_Selector_reg[0] ),
        .I2(p_58_out__0),
        .O(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Use_Serial_Unified_Completion.completion_status[15]_i_2 
       (.I0(\Use_BSCAN.PORT_Selector_reg[0] ),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[15] ),
        .O(\Use_Serial_Unified_Completion.sample_1_reg[15] ));
  LUT3 #(
    .INIT(8'hA8)) 
    \Use_Serial_Unified_Completion.count[0]__0_i_1 
       (.I0(p_35_out__0),
        .I1(\Use_BSCAN.PORT_Selector_reg[0]_0 ),
        .I2(\Use_BSCAN.PORT_Selector_reg[0] ),
        .O(\Use_BSCAN.command_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Use_Serial_Unified_Completion.count[5]_i_1 
       (.I0(\Use_BSCAN.PORT_Selector_reg[0] ),
        .I1(\Use_Serial_Unified_Completion.count_reg[5] ),
        .O(D));
  LUT2 #(
    .INIT(4'hE)) 
    \Use_UART.tdo_reg[0]_i_1 
       (.I0(\Use_BSCAN.PORT_Selector_reg[0] ),
        .I1(\Use_BSCAN.PORT_Selector_reg[0]_0 ),
        .O(\Use_E2.BSCANE2_I_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \shift_Count[0]_i_1 
       (.I0(\Use_BSCAN.PORT_Selector_reg[0]_0 ),
        .I1(Q),
        .O(\shift_Count_reg[0] ));
endmodule

(* ORIG_REF_NAME = "MB_BUFG" *) 
module cpu_MB_BUFG
   (Ext_JTAG_DRCK,
    DRCK);
  output Ext_JTAG_DRCK;
  input DRCK;

  wire DRCK;
  wire Ext_JTAG_DRCK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG \Using_FPGA.Native 
       (.I(DRCK),
        .O(Ext_JTAG_DRCK));
endmodule

(* ORIG_REF_NAME = "MB_FDC_1" *) 
module cpu_MB_FDC_1
   (D_2,
    data_cmd_reset6_out,
    Dbg_Reg_En_0,
    p_35_out__0,
    \Using_FPGA.Native_0 ,
    E,
    \Using_FPGA.Native_1 ,
    CE,
    Debug_Rst_i0,
    shifting_Data1__0,
    \Use_BSCAN.command_reg[6] ,
    \Use_BSCAN.PORT_Selector_reg[2] ,
    D,
    \Use_Serial_Unified_Completion.sample_reg[15] ,
    \Use_BSCAN.command_reg[6]_0 ,
    \Use_Serial_Unified_Completion.mb_instr_overrun_reg ,
    \Use_Serial_Unified_Completion.mb_instr_error_reg ,
    \Use_Serial_Unified_Completion.mb_data_overrun_reg ,
    \completion_ctrl_reg[0] ,
    \tdi_shifter_reg[0] ,
    \tdi_shifter_reg[0]_0 ,
    CLK,
    sel_n,
    \Use_Serial_Unified_Completion.completion_block_reg ,
    Scan_En,
    Scan_Reset,
    Scan_Reset_Sel,
    Q,
    \Use_UART.tx_buffered_reg ,
    \Use_Serial_Unified_Completion.completion_status_reg[0] ,
    \Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ,
    \Use_UART.tx_buffered_reg_0 ,
    \command_1_reg[7] ,
    SEL,
    \Use_Serial_Unified_Completion.completion_status_reg[9] ,
    \Use_Serial_Unified_Completion.completion_status_reg[3] ,
    \Use_Serial_Unified_Completion.completion_status_reg[4] ,
    \Use_Serial_Unified_Completion.completion_status_reg[5] ,
    \Use_Serial_Unified_Completion.completion_status_reg[6] ,
    \Use_Serial_Unified_Completion.completion_status_reg[8] ,
    \Use_Serial_Unified_Completion.sample_reg[15]_0 ,
    \Use_Serial_Unified_Completion.sample_1_reg[10] ,
    Dbg_TDO_0,
    \Use_Serial_Unified_Completion.mb_instr_overrun_reg_1 ,
    \Use_Serial_Unified_Completion.mb_instr_error_reg_0 ,
    \Use_Serial_Unified_Completion.mb_data_overrun_reg_0 ,
    p_3_out__10,
    completion_ctrl,
    in0);
  output D_2;
  output data_cmd_reset6_out;
  output [0:7]Dbg_Reg_En_0;
  output p_35_out__0;
  output \Using_FPGA.Native_0 ;
  output [0:0]E;
  output \Using_FPGA.Native_1 ;
  output CE;
  output Debug_Rst_i0;
  output shifting_Data1__0;
  output \Use_BSCAN.command_reg[6] ;
  output [0:0]\Use_BSCAN.PORT_Selector_reg[2] ;
  output [9:0]D;
  output [2:0]\Use_Serial_Unified_Completion.sample_reg[15] ;
  output [0:0]\Use_BSCAN.command_reg[6]_0 ;
  output \Use_Serial_Unified_Completion.mb_instr_overrun_reg ;
  output \Use_Serial_Unified_Completion.mb_instr_error_reg ;
  output \Use_Serial_Unified_Completion.mb_data_overrun_reg ;
  output \completion_ctrl_reg[0] ;
  output \tdi_shifter_reg[0] ;
  output \tdi_shifter_reg[0]_0 ;
  input CLK;
  input sel_n;
  input \Use_Serial_Unified_Completion.completion_block_reg ;
  input Scan_En;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input [7:0]Q;
  input \Use_UART.tx_buffered_reg ;
  input \Use_Serial_Unified_Completion.completion_status_reg[0] ;
  input \Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ;
  input [7:0]\Use_UART.tx_buffered_reg_0 ;
  input [3:0]\command_1_reg[7] ;
  input SEL;
  input [10:0]\Use_Serial_Unified_Completion.completion_status_reg[9] ;
  input \Use_Serial_Unified_Completion.completion_status_reg[3] ;
  input \Use_Serial_Unified_Completion.completion_status_reg[4] ;
  input \Use_Serial_Unified_Completion.completion_status_reg[5] ;
  input \Use_Serial_Unified_Completion.completion_status_reg[6] ;
  input \Use_Serial_Unified_Completion.completion_status_reg[8] ;
  input [5:0]\Use_Serial_Unified_Completion.sample_reg[15]_0 ;
  input \Use_Serial_Unified_Completion.sample_1_reg[10] ;
  input Dbg_TDO_0;
  input \Use_Serial_Unified_Completion.mb_instr_overrun_reg_1 ;
  input \Use_Serial_Unified_Completion.mb_instr_error_reg_0 ;
  input \Use_Serial_Unified_Completion.mb_data_overrun_reg_0 ;
  input p_3_out__10;
  input completion_ctrl;
  input in0;

  wire CE;
  wire CLK;
  wire [9:0]D;
  wire D_2;
  wire [0:7]Dbg_Reg_En_0;
  wire Dbg_TDO_0;
  wire Debug_Rst_i0;
  wire [0:0]E;
  wire [7:0]Q;
  wire Q_1;
  wire SEL;
  wire [0:0]\Use_BSCAN.PORT_Selector_reg[2] ;
  wire \Use_BSCAN.command_reg[6] ;
  wire [0:0]\Use_BSCAN.command_reg[6]_0 ;
  wire \Use_Serial_Unified_Completion.completion_block_reg ;
  wire \Use_Serial_Unified_Completion.completion_status_reg[0] ;
  wire \Use_Serial_Unified_Completion.completion_status_reg[3] ;
  wire \Use_Serial_Unified_Completion.completion_status_reg[4] ;
  wire \Use_Serial_Unified_Completion.completion_status_reg[5] ;
  wire \Use_Serial_Unified_Completion.completion_status_reg[6] ;
  wire \Use_Serial_Unified_Completion.completion_status_reg[8] ;
  wire [10:0]\Use_Serial_Unified_Completion.completion_status_reg[9] ;
  wire \Use_Serial_Unified_Completion.mb_data_overrun_reg ;
  wire \Use_Serial_Unified_Completion.mb_data_overrun_reg_0 ;
  wire \Use_Serial_Unified_Completion.mb_instr_error_reg ;
  wire \Use_Serial_Unified_Completion.mb_instr_error_reg_0 ;
  wire \Use_Serial_Unified_Completion.mb_instr_overrun_reg ;
  wire \Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ;
  wire \Use_Serial_Unified_Completion.mb_instr_overrun_reg_1 ;
  wire \Use_Serial_Unified_Completion.sample_1_reg[10] ;
  wire [2:0]\Use_Serial_Unified_Completion.sample_reg[15] ;
  wire [5:0]\Use_Serial_Unified_Completion.sample_reg[15]_0 ;
  wire \Use_UART.tx_buffered_i_2_n_0 ;
  wire \Use_UART.tx_buffered_reg ;
  wire [7:0]\Use_UART.tx_buffered_reg_0 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_2_n_0 ;
  wire [3:0]\command_1_reg[7] ;
  wire completion_ctrl;
  wire completion_ctrl0;
  wire \completion_ctrl_reg[0] ;
  wire data_cmd_reset6_out;
  wire in0;
  wire p_35_out__0;
  wire p_3_out__10;
  wire sel_n;
  wire shifting_Data1__0;
  wire \tdi_shifter_reg[0] ;
  wire \tdi_shifter_reg[0]_0 ;

  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[0]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[7]),
        .O(Dbg_Reg_En_0[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[1]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[6]),
        .O(Dbg_Reg_En_0[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[2]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[5]),
        .O(Dbg_Reg_En_0[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[3]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[4]),
        .O(Dbg_Reg_En_0[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[4]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[3]),
        .O(Dbg_Reg_En_0[4]));
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[5]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[2]),
        .O(Dbg_Reg_En_0[5]));
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[6]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[1]),
        .O(Dbg_Reg_En_0[6]));
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[7]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[0]),
        .O(Dbg_Reg_En_0[7]));
  LUT2 #(
    .INIT(4'h2)) 
    Dbg_Shift_31_INST_0_i_2
       (.I0(Q_1),
        .I1(\Use_Serial_Unified_Completion.completion_block_reg ),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    Ext_NM_BRK_i_i_1
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(Q[3]),
        .I5(\Use_UART.tx_buffered_reg ),
        .O(Debug_Rst_i0));
  LUT6 #(
    .INIT(64'hDFDFDFDF03000000)) 
    \Use_Serial_Unified_Completion.completion_block_i_1 
       (.I0(\Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(completion_ctrl0),
        .I3(p_3_out__10),
        .I4(completion_ctrl),
        .I5(\Use_Serial_Unified_Completion.completion_block_reg ),
        .O(\completion_ctrl_reg[0] ));
  (* OPT_MODIFIED = "RETARGET " *) 
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT4 #(
    .INIT(16'h8F88)) 
    \Use_Serial_Unified_Completion.completion_status[0]_i_1 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[9] [1]),
        .I2(\Use_Serial_Unified_Completion.completion_status_reg[9] [0]),
        .I3(\Use_BSCAN.command_reg[6]_0 ),
        .O(D[0]));
  LUT5 #(
    .INIT(32'h00200000)) 
    \Use_Serial_Unified_Completion.completion_status[15]_i_3 
       (.I0(Q_1),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(\Use_Serial_Unified_Completion.sample_1_reg[10] ),
        .O(\Using_FPGA.Native_1 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT5 #(
    .INIT(32'hFF606060)) 
    \Use_Serial_Unified_Completion.completion_status[1]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [1]),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[9] [0]),
        .I2(\Use_BSCAN.command_reg[6]_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[9] [2]),
        .O(D[1]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT6 #(
    .INIT(64'hFFFF6A006A006A00)) 
    \Use_Serial_Unified_Completion.completion_status[2]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [2]),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[9] [1]),
        .I2(\Use_Serial_Unified_Completion.completion_status_reg[9] [0]),
        .I3(\Use_BSCAN.command_reg[6]_0 ),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Use_Serial_Unified_Completion.completion_status_reg[9] [3]),
        .O(D[2]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hFF606060)) 
    \Use_Serial_Unified_Completion.completion_status[3]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [3]),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[3] ),
        .I2(\Use_BSCAN.command_reg[6]_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[9] [4]),
        .O(D[3]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hFF606060)) 
    \Use_Serial_Unified_Completion.completion_status[4]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [4]),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[4] ),
        .I2(\Use_BSCAN.command_reg[6]_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[9] [5]),
        .O(D[4]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hFF606060)) 
    \Use_Serial_Unified_Completion.completion_status[5]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [5]),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[5] ),
        .I2(\Use_BSCAN.command_reg[6]_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[9] [6]),
        .O(D[5]));
  (* OPT_MODIFIED = "RETARGET " *) 
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'hFF484848)) 
    \Use_Serial_Unified_Completion.completion_status[6]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [6]),
        .I1(\Use_BSCAN.command_reg[6]_0 ),
        .I2(\Use_Serial_Unified_Completion.completion_status_reg[6] ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[9] [7]),
        .O(D[6]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT6 #(
    .INIT(64'hFFFF488848884888)) 
    \Use_Serial_Unified_Completion.completion_status[7]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [7]),
        .I1(\Use_BSCAN.command_reg[6]_0 ),
        .I2(\Use_Serial_Unified_Completion.completion_status_reg[6] ),
        .I3(\Use_Serial_Unified_Completion.completion_status_reg[9] [6]),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Use_Serial_Unified_Completion.completion_status_reg[9] [8]),
        .O(D[7]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hFF484848)) 
    \Use_Serial_Unified_Completion.completion_status[8]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [8]),
        .I1(\Use_BSCAN.command_reg[6]_0 ),
        .I2(\Use_Serial_Unified_Completion.completion_status_reg[8] ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[9] [9]),
        .O(D[8]));
  LUT6 #(
    .INIT(64'h00F100F1FF000000)) 
    \Use_Serial_Unified_Completion.completion_status[9]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(completion_ctrl0),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[0] ),
        .I5(\Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ),
        .O(E));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT6 #(
    .INIT(64'hFFFF488848884888)) 
    \Use_Serial_Unified_Completion.completion_status[9]_i_2 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [9]),
        .I1(\Use_BSCAN.command_reg[6]_0 ),
        .I2(\Use_Serial_Unified_Completion.completion_status_reg[8] ),
        .I3(\Use_Serial_Unified_Completion.completion_status_reg[9] [8]),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Use_Serial_Unified_Completion.completion_status_reg[9] [10]),
        .O(D[9]));
  LUT5 #(
    .INIT(32'h00800000)) 
    \Use_Serial_Unified_Completion.completion_status[9]_i_3 
       (.I0(Q[2]),
        .I1(Q_1),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(\Use_Serial_Unified_Completion.sample_1_reg[10] ),
        .O(completion_ctrl0));
  LUT6 #(
    .INIT(64'h0200000000000000)) 
    \Use_Serial_Unified_Completion.count[0]__0_i_3 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(\Using_FPGA.Native_0 ),
        .I4(Q[1]),
        .I5(\Use_UART.tx_buffered_reg ),
        .O(p_35_out__0));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    \Use_Serial_Unified_Completion.count[0]_i_2 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(\Using_FPGA.Native_0 ),
        .I4(Q[1]),
        .I5(\Use_UART.tx_buffered_reg ),
        .O(shifting_Data1__0));
  LUT6 #(
    .INIT(64'h053F0F3F05000000)) 
    \Use_Serial_Unified_Completion.mb_data_overrun_i_1 
       (.I0(Dbg_TDO_0),
        .I1(completion_ctrl0),
        .I2(\Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ),
        .I3(p_35_out__0),
        .I4(\Use_Serial_Unified_Completion.mb_data_overrun_reg_0 ),
        .I5(\Use_Serial_Unified_Completion.sample_reg[15]_0 [2]),
        .O(\Use_Serial_Unified_Completion.mb_data_overrun_reg ));
  LUT6 #(
    .INIT(64'h00BB033300880000)) 
    \Use_Serial_Unified_Completion.mb_instr_error_i_1 
       (.I0(Dbg_TDO_0),
        .I1(\Use_Serial_Unified_Completion.mb_instr_error_reg_0 ),
        .I2(completion_ctrl0),
        .I3(\Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ),
        .I4(shifting_Data1__0),
        .I5(\Use_Serial_Unified_Completion.sample_reg[15]_0 [1]),
        .O(\Use_Serial_Unified_Completion.mb_instr_error_reg ));
  LUT6 #(
    .INIT(64'h00BB033300880000)) 
    \Use_Serial_Unified_Completion.mb_instr_overrun_i_1 
       (.I0(Dbg_TDO_0),
        .I1(\Use_Serial_Unified_Completion.mb_instr_overrun_reg_1 ),
        .I2(completion_ctrl0),
        .I3(\Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ),
        .I4(shifting_Data1__0),
        .I5(\Use_Serial_Unified_Completion.sample_reg[15]_0 [0]),
        .O(\Use_Serial_Unified_Completion.mb_instr_overrun_reg ));
  LUT6 #(
    .INIT(64'h0000000400000000)) 
    \Use_Serial_Unified_Completion.mb_instr_overrun_i_3 
       (.I0(Q[1]),
        .I1(Q_1),
        .I2(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I3(Q[3]),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\Use_BSCAN.command_reg[6] ));
  (* OPT_MODIFIED = "RETARGET " *) 
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Use_Serial_Unified_Completion.sample[13]_i_1 
       (.I0(\Use_BSCAN.command_reg[6]_0 ),
        .I1(\Use_Serial_Unified_Completion.sample_reg[15]_0 [3]),
        .O(\Use_Serial_Unified_Completion.sample_reg[15] [0]));
  (* OPT_MODIFIED = "RETARGET " *) 
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Use_Serial_Unified_Completion.sample[14]_i_1 
       (.I0(\Use_BSCAN.command_reg[6]_0 ),
        .I1(\Use_Serial_Unified_Completion.sample_reg[15]_0 [4]),
        .O(\Use_Serial_Unified_Completion.sample_reg[15] [1]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Use_Serial_Unified_Completion.sample[15]_i_1 
       (.I0(\Use_BSCAN.command_reg[6]_0 ),
        .I1(\Use_Serial_Unified_Completion.sample_reg[15]_0 [5]),
        .O(\Use_Serial_Unified_Completion.sample_reg[15] [2]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hDFFFF7FF)) 
    \Use_Serial_Unified_Completion.sample_1[15]_i_2 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg[10] ),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q_1),
        .I4(Q[2]),
        .O(\Use_BSCAN.command_reg[6]_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'hD)) 
    \Use_UART.execute_i_2 
       (.I0(Q_1),
        .I1(\Use_Serial_Unified_Completion.completion_block_reg ),
        .O(data_cmd_reset6_out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Use_UART.tx_buffered_i_1 
       (.I0(\Use_UART.tx_buffered_reg_0 [7]),
        .I1(\Use_UART.tx_buffered_i_2_n_0 ),
        .I2(\Use_UART.tx_buffered_reg ),
        .I3(in0),
        .O(\tdi_shifter_reg[0] ));
  LUT6 #(
    .INIT(64'h0000000020000000)) 
    \Use_UART.tx_buffered_i_2 
       (.I0(Q_1),
        .I1(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[2]),
        .I5(Q[0]),
        .O(\Use_UART.tx_buffered_i_2_n_0 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDC_1" *) 
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Using_FPGA.Native 
       (.C(CLK),
        .CE(1'b1),
        .CLR(sel_n),
        .D(D_2),
        .Q(Q_1));
  LUT5 #(
    .INIT(32'h00000800)) 
    \Using_FPGA.Native_i_1 
       (.I0(\Using_FPGA.Native_i_2_n_0 ),
        .I1(\Use_UART.tx_buffered_reg_0 [3]),
        .I2(\Use_UART.tx_buffered_reg_0 [2]),
        .I3(\Use_UART.tx_buffered_reg_0 [0]),
        .I4(\Use_UART.tx_buffered_reg_0 [1]),
        .O(CE));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__3 
       (.I0(Q_1),
        .O(D_2));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \Using_FPGA.Native_i_2 
       (.I0(\Use_UART.tx_buffered_reg_0 [5]),
        .I1(\Use_UART.tx_buffered_reg_0 [4]),
        .I2(\Use_UART.tx_buffered_reg_0 [6]),
        .I3(\Use_UART.tx_buffered_reg_0 [7]),
        .I4(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I5(Q_1),
        .O(\Using_FPGA.Native_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000001000000)) 
    \command_1[0]_i_1 
       (.I0(\command_1_reg[7] [2]),
        .I1(\command_1_reg[7] [3]),
        .I2(\command_1_reg[7] [1]),
        .I3(\command_1_reg[7] [0]),
        .I4(SEL),
        .I5(\Using_FPGA.Native_0 ),
        .O(\Use_BSCAN.PORT_Selector_reg[2] ));
  LUT3 #(
    .INIT(8'hB8)) 
    \completion_ctrl[0]_i_1 
       (.I0(\Use_UART.tx_buffered_reg_0 [7]),
        .I1(completion_ctrl0),
        .I2(completion_ctrl),
        .O(\tdi_shifter_reg[0]_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE_1" *) 
module cpu_MB_FDRE_1
   (sync,
    \Use_Serial_Unified_Completion.count_reg[1] ,
    \Use_Serial_Unified_Completion.count_reg[1]_0 ,
    E,
    D_2,
    CE,
    \Using_FPGA.Native_0 ,
    \Use_Serial_Unified_Completion.mb_instr_error_reg ,
    \Use_Serial_Unified_Completion.mb_instr_error_reg_0 ,
    \Use_Serial_Unified_Completion.mb_instr_error_reg_1 ,
    \Use_UART.fifo_Din_reg[7] ,
    \Use_UART.fifo_Din_reg[7]_0 ,
    \Use_UART.fifo_Din_reg[7]_1 ,
    \Use_UART.fifo_Din_reg[7]_2 ,
    Q);
  output sync;
  output \Use_Serial_Unified_Completion.count_reg[1] ;
  output \Use_Serial_Unified_Completion.count_reg[1]_0 ;
  output [0:0]E;
  input D_2;
  input CE;
  input \Using_FPGA.Native_0 ;
  input \Use_Serial_Unified_Completion.mb_instr_error_reg ;
  input \Use_Serial_Unified_Completion.mb_instr_error_reg_0 ;
  input \Use_Serial_Unified_Completion.mb_instr_error_reg_1 ;
  input \Use_UART.fifo_Din_reg[7] ;
  input \Use_UART.fifo_Din_reg[7]_0 ;
  input \Use_UART.fifo_Din_reg[7]_1 ;
  input \Use_UART.fifo_Din_reg[7]_2 ;
  input [0:0]Q;

  wire CE;
  wire D_2;
  wire [0:0]E;
  wire [0:0]Q;
  wire \Use_Serial_Unified_Completion.count_reg[1] ;
  wire \Use_Serial_Unified_Completion.count_reg[1]_0 ;
  wire \Use_Serial_Unified_Completion.mb_instr_error_reg ;
  wire \Use_Serial_Unified_Completion.mb_instr_error_reg_0 ;
  wire \Use_Serial_Unified_Completion.mb_instr_error_reg_1 ;
  wire \Use_UART.fifo_Din_reg[7] ;
  wire \Use_UART.fifo_Din_reg[7]_0 ;
  wire \Use_UART.fifo_Din_reg[7]_1 ;
  wire \Use_UART.fifo_Din_reg[7]_2 ;
  wire \Using_FPGA.Native_0 ;
  wire sync;

  LUT6 #(
    .INIT(64'hFFEFFFFF00000000)) 
    Dbg_Shift_31_INST_0
       (.I0(sync),
        .I1(\Use_UART.fifo_Din_reg[7]_1 ),
        .I2(\Use_UART.fifo_Din_reg[7]_2 ),
        .I3(Q),
        .I4(\Use_UART.fifo_Din_reg[7] ),
        .I5(\Use_UART.fifo_Din_reg[7]_0 ),
        .O(E));
  LUT6 #(
    .INIT(64'h2000000000000000)) 
    \Use_Serial_Unified_Completion.mb_instr_error_i_2 
       (.I0(\Use_Serial_Unified_Completion.mb_instr_error_reg ),
        .I1(\Use_Serial_Unified_Completion.mb_instr_error_reg_0 ),
        .I2(sync),
        .I3(\Use_Serial_Unified_Completion.mb_instr_error_reg_1 ),
        .I4(\Use_UART.fifo_Din_reg[7] ),
        .I5(\Use_UART.fifo_Din_reg[7]_0 ),
        .O(\Use_Serial_Unified_Completion.count_reg[1] ));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    \Use_Serial_Unified_Completion.mb_instr_overrun_i_2 
       (.I0(\Use_Serial_Unified_Completion.mb_instr_error_reg ),
        .I1(\Use_Serial_Unified_Completion.mb_instr_error_reg_0 ),
        .I2(sync),
        .I3(\Use_Serial_Unified_Completion.mb_instr_error_reg_1 ),
        .I4(\Use_UART.fifo_Din_reg[7] ),
        .I5(\Use_UART.fifo_Din_reg[7]_0 ),
        .O(\Use_Serial_Unified_Completion.count_reg[1]_0 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDRE_1" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Using_FPGA.Native 
       (.C(\Using_FPGA.Native_0 ),
        .CE(CE),
        .D(1'b1),
        .Q(sync),
        .R(D_2));
endmodule

(* C_ADDR_SIZE = "32" *) (* C_AVOID_PRIMITIVES = "0" *) (* C_BSCANID = "76547328" *) 
(* C_DATA_SIZE = "32" *) (* C_DBG_MEM_ACCESS = "0" *) (* C_DBG_REG_ACCESS = "0" *) 
(* C_DEBUG_INTERFACE = "0" *) (* C_EXT_TRIG_RESET_VALUE = "20'b11110001001000110100" *) (* C_FAMILY = "virtex7" *) 
(* C_INTERCONNECT = "2" *) (* C_JTAG_CHAIN = "1" *) (* C_MB_DBG_PORTS = "1" *) 
(* C_M_AXIS_DATA_WIDTH = "32" *) (* C_M_AXIS_ID_WIDTH = "7" *) (* C_M_AXI_ADDR_WIDTH = "32" *) 
(* C_M_AXI_DATA_WIDTH = "32" *) (* C_M_AXI_THREAD_ID_WIDTH = "1" *) (* C_S_AXI_ACLK_FREQ_HZ = "100000000" *) 
(* C_S_AXI_ADDR_WIDTH = "4" *) (* C_S_AXI_DATA_WIDTH = "32" *) (* C_TRACE_ASYNC_RESET = "0" *) 
(* C_TRACE_CLK_FREQ_HZ = "200000000" *) (* C_TRACE_CLK_OUT_PHASE = "90" *) (* C_TRACE_DATA_WIDTH = "32" *) 
(* C_TRACE_ID = "110" *) (* C_TRACE_OUTPUT = "0" *) (* C_TRACE_PROTOCOL = "1" *) 
(* C_USE_BSCAN = "0" *) (* C_USE_CONFIG_RESET = "0" *) (* C_USE_CROSS_TRIGGER = "0" *) 
(* C_USE_UART = "1" *) (* ORIG_REF_NAME = "MDM" *) 
module cpu_MDM
   (Config_Reset,
    Scan_Reset_Sel,
    Scan_Reset,
    Scan_En,
    S_AXI_ACLK,
    S_AXI_ARESETN,
    M_AXI_ACLK,
    M_AXI_ARESETN,
    M_AXIS_ACLK,
    M_AXIS_ARESETN,
    Interrupt,
    Ext_BRK,
    Ext_NM_BRK,
    Debug_SYS_Rst,
    Trig_In_0,
    Trig_Ack_In_0,
    Trig_Out_0,
    Trig_Ack_Out_0,
    Trig_In_1,
    Trig_Ack_In_1,
    Trig_Out_1,
    Trig_Ack_Out_1,
    Trig_In_2,
    Trig_Ack_In_2,
    Trig_Out_2,
    Trig_Ack_Out_2,
    Trig_In_3,
    Trig_Ack_In_3,
    Trig_Out_3,
    Trig_Ack_Out_3,
    S_AXI_AWADDR,
    S_AXI_AWVALID,
    S_AXI_AWREADY,
    S_AXI_WDATA,
    S_AXI_WSTRB,
    S_AXI_WVALID,
    S_AXI_WREADY,
    S_AXI_BRESP,
    S_AXI_BVALID,
    S_AXI_BREADY,
    S_AXI_ARADDR,
    S_AXI_ARVALID,
    S_AXI_ARREADY,
    S_AXI_RDATA,
    S_AXI_RRESP,
    S_AXI_RVALID,
    S_AXI_RREADY,
    M_AXI_AWID,
    M_AXI_AWADDR,
    M_AXI_AWLEN,
    M_AXI_AWSIZE,
    M_AXI_AWBURST,
    M_AXI_AWLOCK,
    M_AXI_AWCACHE,
    M_AXI_AWPROT,
    M_AXI_AWQOS,
    M_AXI_AWVALID,
    M_AXI_AWREADY,
    M_AXI_WDATA,
    M_AXI_WSTRB,
    M_AXI_WLAST,
    M_AXI_WVALID,
    M_AXI_WREADY,
    M_AXI_BRESP,
    M_AXI_BID,
    M_AXI_BVALID,
    M_AXI_BREADY,
    M_AXI_ARID,
    M_AXI_ARADDR,
    M_AXI_ARLEN,
    M_AXI_ARSIZE,
    M_AXI_ARBURST,
    M_AXI_ARLOCK,
    M_AXI_ARCACHE,
    M_AXI_ARPROT,
    M_AXI_ARQOS,
    M_AXI_ARVALID,
    M_AXI_ARREADY,
    M_AXI_RID,
    M_AXI_RDATA,
    M_AXI_RRESP,
    M_AXI_RLAST,
    M_AXI_RVALID,
    M_AXI_RREADY,
    LMB_Data_Addr_0,
    LMB_Data_Read_0,
    LMB_Data_Write_0,
    LMB_Addr_Strobe_0,
    LMB_Read_Strobe_0,
    LMB_Write_Strobe_0,
    LMB_Ready_0,
    LMB_Wait_0,
    LMB_CE_0,
    LMB_UE_0,
    LMB_Byte_Enable_0,
    LMB_Data_Addr_1,
    LMB_Data_Read_1,
    LMB_Data_Write_1,
    LMB_Addr_Strobe_1,
    LMB_Read_Strobe_1,
    LMB_Write_Strobe_1,
    LMB_Ready_1,
    LMB_Wait_1,
    LMB_CE_1,
    LMB_UE_1,
    LMB_Byte_Enable_1,
    LMB_Data_Addr_2,
    LMB_Data_Read_2,
    LMB_Data_Write_2,
    LMB_Addr_Strobe_2,
    LMB_Read_Strobe_2,
    LMB_Write_Strobe_2,
    LMB_Ready_2,
    LMB_Wait_2,
    LMB_CE_2,
    LMB_UE_2,
    LMB_Byte_Enable_2,
    LMB_Data_Addr_3,
    LMB_Data_Read_3,
    LMB_Data_Write_3,
    LMB_Addr_Strobe_3,
    LMB_Read_Strobe_3,
    LMB_Write_Strobe_3,
    LMB_Ready_3,
    LMB_Wait_3,
    LMB_CE_3,
    LMB_UE_3,
    LMB_Byte_Enable_3,
    LMB_Data_Addr_4,
    LMB_Data_Read_4,
    LMB_Data_Write_4,
    LMB_Addr_Strobe_4,
    LMB_Read_Strobe_4,
    LMB_Write_Strobe_4,
    LMB_Ready_4,
    LMB_Wait_4,
    LMB_CE_4,
    LMB_UE_4,
    LMB_Byte_Enable_4,
    LMB_Data_Addr_5,
    LMB_Data_Read_5,
    LMB_Data_Write_5,
    LMB_Addr_Strobe_5,
    LMB_Read_Strobe_5,
    LMB_Write_Strobe_5,
    LMB_Ready_5,
    LMB_Wait_5,
    LMB_CE_5,
    LMB_UE_5,
    LMB_Byte_Enable_5,
    LMB_Data_Addr_6,
    LMB_Data_Read_6,
    LMB_Data_Write_6,
    LMB_Addr_Strobe_6,
    LMB_Read_Strobe_6,
    LMB_Write_Strobe_6,
    LMB_Ready_6,
    LMB_Wait_6,
    LMB_CE_6,
    LMB_UE_6,
    LMB_Byte_Enable_6,
    LMB_Data_Addr_7,
    LMB_Data_Read_7,
    LMB_Data_Write_7,
    LMB_Addr_Strobe_7,
    LMB_Read_Strobe_7,
    LMB_Write_Strobe_7,
    LMB_Ready_7,
    LMB_Wait_7,
    LMB_CE_7,
    LMB_UE_7,
    LMB_Byte_Enable_7,
    LMB_Data_Addr_8,
    LMB_Data_Read_8,
    LMB_Data_Write_8,
    LMB_Addr_Strobe_8,
    LMB_Read_Strobe_8,
    LMB_Write_Strobe_8,
    LMB_Ready_8,
    LMB_Wait_8,
    LMB_CE_8,
    LMB_UE_8,
    LMB_Byte_Enable_8,
    LMB_Data_Addr_9,
    LMB_Data_Read_9,
    LMB_Data_Write_9,
    LMB_Addr_Strobe_9,
    LMB_Read_Strobe_9,
    LMB_Write_Strobe_9,
    LMB_Ready_9,
    LMB_Wait_9,
    LMB_CE_9,
    LMB_UE_9,
    LMB_Byte_Enable_9,
    LMB_Data_Addr_10,
    LMB_Data_Read_10,
    LMB_Data_Write_10,
    LMB_Addr_Strobe_10,
    LMB_Read_Strobe_10,
    LMB_Write_Strobe_10,
    LMB_Ready_10,
    LMB_Wait_10,
    LMB_CE_10,
    LMB_UE_10,
    LMB_Byte_Enable_10,
    LMB_Data_Addr_11,
    LMB_Data_Read_11,
    LMB_Data_Write_11,
    LMB_Addr_Strobe_11,
    LMB_Read_Strobe_11,
    LMB_Write_Strobe_11,
    LMB_Ready_11,
    LMB_Wait_11,
    LMB_CE_11,
    LMB_UE_11,
    LMB_Byte_Enable_11,
    LMB_Data_Addr_12,
    LMB_Data_Read_12,
    LMB_Data_Write_12,
    LMB_Addr_Strobe_12,
    LMB_Read_Strobe_12,
    LMB_Write_Strobe_12,
    LMB_Ready_12,
    LMB_Wait_12,
    LMB_CE_12,
    LMB_UE_12,
    LMB_Byte_Enable_12,
    LMB_Data_Addr_13,
    LMB_Data_Read_13,
    LMB_Data_Write_13,
    LMB_Addr_Strobe_13,
    LMB_Read_Strobe_13,
    LMB_Write_Strobe_13,
    LMB_Ready_13,
    LMB_Wait_13,
    LMB_CE_13,
    LMB_UE_13,
    LMB_Byte_Enable_13,
    LMB_Data_Addr_14,
    LMB_Data_Read_14,
    LMB_Data_Write_14,
    LMB_Addr_Strobe_14,
    LMB_Read_Strobe_14,
    LMB_Write_Strobe_14,
    LMB_Ready_14,
    LMB_Wait_14,
    LMB_CE_14,
    LMB_UE_14,
    LMB_Byte_Enable_14,
    LMB_Data_Addr_15,
    LMB_Data_Read_15,
    LMB_Data_Write_15,
    LMB_Addr_Strobe_15,
    LMB_Read_Strobe_15,
    LMB_Write_Strobe_15,
    LMB_Ready_15,
    LMB_Wait_15,
    LMB_CE_15,
    LMB_UE_15,
    LMB_Byte_Enable_15,
    LMB_Data_Addr_16,
    LMB_Data_Read_16,
    LMB_Data_Write_16,
    LMB_Addr_Strobe_16,
    LMB_Read_Strobe_16,
    LMB_Write_Strobe_16,
    LMB_Ready_16,
    LMB_Wait_16,
    LMB_CE_16,
    LMB_UE_16,
    LMB_Byte_Enable_16,
    LMB_Data_Addr_17,
    LMB_Data_Read_17,
    LMB_Data_Write_17,
    LMB_Addr_Strobe_17,
    LMB_Read_Strobe_17,
    LMB_Write_Strobe_17,
    LMB_Ready_17,
    LMB_Wait_17,
    LMB_CE_17,
    LMB_UE_17,
    LMB_Byte_Enable_17,
    LMB_Data_Addr_18,
    LMB_Data_Read_18,
    LMB_Data_Write_18,
    LMB_Addr_Strobe_18,
    LMB_Read_Strobe_18,
    LMB_Write_Strobe_18,
    LMB_Ready_18,
    LMB_Wait_18,
    LMB_CE_18,
    LMB_UE_18,
    LMB_Byte_Enable_18,
    LMB_Data_Addr_19,
    LMB_Data_Read_19,
    LMB_Data_Write_19,
    LMB_Addr_Strobe_19,
    LMB_Read_Strobe_19,
    LMB_Write_Strobe_19,
    LMB_Ready_19,
    LMB_Wait_19,
    LMB_CE_19,
    LMB_UE_19,
    LMB_Byte_Enable_19,
    LMB_Data_Addr_20,
    LMB_Data_Read_20,
    LMB_Data_Write_20,
    LMB_Addr_Strobe_20,
    LMB_Read_Strobe_20,
    LMB_Write_Strobe_20,
    LMB_Ready_20,
    LMB_Wait_20,
    LMB_CE_20,
    LMB_UE_20,
    LMB_Byte_Enable_20,
    LMB_Data_Addr_21,
    LMB_Data_Read_21,
    LMB_Data_Write_21,
    LMB_Addr_Strobe_21,
    LMB_Read_Strobe_21,
    LMB_Write_Strobe_21,
    LMB_Ready_21,
    LMB_Wait_21,
    LMB_CE_21,
    LMB_UE_21,
    LMB_Byte_Enable_21,
    LMB_Data_Addr_22,
    LMB_Data_Read_22,
    LMB_Data_Write_22,
    LMB_Addr_Strobe_22,
    LMB_Read_Strobe_22,
    LMB_Write_Strobe_22,
    LMB_Ready_22,
    LMB_Wait_22,
    LMB_CE_22,
    LMB_UE_22,
    LMB_Byte_Enable_22,
    LMB_Data_Addr_23,
    LMB_Data_Read_23,
    LMB_Data_Write_23,
    LMB_Addr_Strobe_23,
    LMB_Read_Strobe_23,
    LMB_Write_Strobe_23,
    LMB_Ready_23,
    LMB_Wait_23,
    LMB_CE_23,
    LMB_UE_23,
    LMB_Byte_Enable_23,
    LMB_Data_Addr_24,
    LMB_Data_Read_24,
    LMB_Data_Write_24,
    LMB_Addr_Strobe_24,
    LMB_Read_Strobe_24,
    LMB_Write_Strobe_24,
    LMB_Ready_24,
    LMB_Wait_24,
    LMB_CE_24,
    LMB_UE_24,
    LMB_Byte_Enable_24,
    LMB_Data_Addr_25,
    LMB_Data_Read_25,
    LMB_Data_Write_25,
    LMB_Addr_Strobe_25,
    LMB_Read_Strobe_25,
    LMB_Write_Strobe_25,
    LMB_Ready_25,
    LMB_Wait_25,
    LMB_CE_25,
    LMB_UE_25,
    LMB_Byte_Enable_25,
    LMB_Data_Addr_26,
    LMB_Data_Read_26,
    LMB_Data_Write_26,
    LMB_Addr_Strobe_26,
    LMB_Read_Strobe_26,
    LMB_Write_Strobe_26,
    LMB_Ready_26,
    LMB_Wait_26,
    LMB_CE_26,
    LMB_UE_26,
    LMB_Byte_Enable_26,
    LMB_Data_Addr_27,
    LMB_Data_Read_27,
    LMB_Data_Write_27,
    LMB_Addr_Strobe_27,
    LMB_Read_Strobe_27,
    LMB_Write_Strobe_27,
    LMB_Ready_27,
    LMB_Wait_27,
    LMB_CE_27,
    LMB_UE_27,
    LMB_Byte_Enable_27,
    LMB_Data_Addr_28,
    LMB_Data_Read_28,
    LMB_Data_Write_28,
    LMB_Addr_Strobe_28,
    LMB_Read_Strobe_28,
    LMB_Write_Strobe_28,
    LMB_Ready_28,
    LMB_Wait_28,
    LMB_CE_28,
    LMB_UE_28,
    LMB_Byte_Enable_28,
    LMB_Data_Addr_29,
    LMB_Data_Read_29,
    LMB_Data_Write_29,
    LMB_Addr_Strobe_29,
    LMB_Read_Strobe_29,
    LMB_Write_Strobe_29,
    LMB_Ready_29,
    LMB_Wait_29,
    LMB_CE_29,
    LMB_UE_29,
    LMB_Byte_Enable_29,
    LMB_Data_Addr_30,
    LMB_Data_Read_30,
    LMB_Data_Write_30,
    LMB_Addr_Strobe_30,
    LMB_Read_Strobe_30,
    LMB_Write_Strobe_30,
    LMB_Ready_30,
    LMB_Wait_30,
    LMB_CE_30,
    LMB_UE_30,
    LMB_Byte_Enable_30,
    LMB_Data_Addr_31,
    LMB_Data_Read_31,
    LMB_Data_Write_31,
    LMB_Addr_Strobe_31,
    LMB_Read_Strobe_31,
    LMB_Write_Strobe_31,
    LMB_Ready_31,
    LMB_Wait_31,
    LMB_CE_31,
    LMB_UE_31,
    LMB_Byte_Enable_31,
    M_AXIS_TDATA,
    M_AXIS_TID,
    M_AXIS_TREADY,
    M_AXIS_TVALID,
    TRACE_CLK_OUT,
    TRACE_CLK,
    TRACE_CTL,
    TRACE_DATA,
    Dbg_Disable_0,
    Dbg_Clk_0,
    Dbg_TDI_0,
    Dbg_TDO_0,
    Dbg_Reg_En_0,
    Dbg_Capture_0,
    Dbg_Shift_0,
    Dbg_Update_0,
    Dbg_Rst_0,
    Dbg_Trig_In_0,
    Dbg_Trig_Ack_In_0,
    Dbg_Trig_Out_0,
    Dbg_Trig_Ack_Out_0,
    Dbg_TrClk_0,
    Dbg_TrData_0,
    Dbg_TrReady_0,
    Dbg_TrValid_0,
    Dbg_AWADDR_0,
    Dbg_AWVALID_0,
    Dbg_AWREADY_0,
    Dbg_WDATA_0,
    Dbg_WVALID_0,
    Dbg_WREADY_0,
    Dbg_BRESP_0,
    Dbg_BVALID_0,
    Dbg_BREADY_0,
    Dbg_ARADDR_0,
    Dbg_ARVALID_0,
    Dbg_ARREADY_0,
    Dbg_RDATA_0,
    Dbg_RRESP_0,
    Dbg_RVALID_0,
    Dbg_RREADY_0,
    Dbg_Disable_1,
    Dbg_Clk_1,
    Dbg_TDI_1,
    Dbg_TDO_1,
    Dbg_Reg_En_1,
    Dbg_Capture_1,
    Dbg_Shift_1,
    Dbg_Update_1,
    Dbg_Rst_1,
    Dbg_Trig_In_1,
    Dbg_Trig_Ack_In_1,
    Dbg_Trig_Out_1,
    Dbg_Trig_Ack_Out_1,
    Dbg_TrClk_1,
    Dbg_TrData_1,
    Dbg_TrReady_1,
    Dbg_TrValid_1,
    Dbg_AWADDR_1,
    Dbg_AWVALID_1,
    Dbg_AWREADY_1,
    Dbg_WDATA_1,
    Dbg_WVALID_1,
    Dbg_WREADY_1,
    Dbg_BRESP_1,
    Dbg_BVALID_1,
    Dbg_BREADY_1,
    Dbg_ARADDR_1,
    Dbg_ARVALID_1,
    Dbg_ARREADY_1,
    Dbg_RDATA_1,
    Dbg_RRESP_1,
    Dbg_RVALID_1,
    Dbg_RREADY_1,
    Dbg_Disable_2,
    Dbg_Clk_2,
    Dbg_TDI_2,
    Dbg_TDO_2,
    Dbg_Reg_En_2,
    Dbg_Capture_2,
    Dbg_Shift_2,
    Dbg_Update_2,
    Dbg_Rst_2,
    Dbg_Trig_In_2,
    Dbg_Trig_Ack_In_2,
    Dbg_Trig_Out_2,
    Dbg_Trig_Ack_Out_2,
    Dbg_TrClk_2,
    Dbg_TrData_2,
    Dbg_TrReady_2,
    Dbg_TrValid_2,
    Dbg_AWADDR_2,
    Dbg_AWVALID_2,
    Dbg_AWREADY_2,
    Dbg_WDATA_2,
    Dbg_WVALID_2,
    Dbg_WREADY_2,
    Dbg_BRESP_2,
    Dbg_BVALID_2,
    Dbg_BREADY_2,
    Dbg_ARADDR_2,
    Dbg_ARVALID_2,
    Dbg_ARREADY_2,
    Dbg_RDATA_2,
    Dbg_RRESP_2,
    Dbg_RVALID_2,
    Dbg_RREADY_2,
    Dbg_Disable_3,
    Dbg_Clk_3,
    Dbg_TDI_3,
    Dbg_TDO_3,
    Dbg_Reg_En_3,
    Dbg_Capture_3,
    Dbg_Shift_3,
    Dbg_Update_3,
    Dbg_Rst_3,
    Dbg_Trig_In_3,
    Dbg_Trig_Ack_In_3,
    Dbg_Trig_Out_3,
    Dbg_Trig_Ack_Out_3,
    Dbg_TrClk_3,
    Dbg_TrData_3,
    Dbg_TrReady_3,
    Dbg_TrValid_3,
    Dbg_AWADDR_3,
    Dbg_AWVALID_3,
    Dbg_AWREADY_3,
    Dbg_WDATA_3,
    Dbg_WVALID_3,
    Dbg_WREADY_3,
    Dbg_BRESP_3,
    Dbg_BVALID_3,
    Dbg_BREADY_3,
    Dbg_ARADDR_3,
    Dbg_ARVALID_3,
    Dbg_ARREADY_3,
    Dbg_RDATA_3,
    Dbg_RRESP_3,
    Dbg_RVALID_3,
    Dbg_RREADY_3,
    Dbg_Disable_4,
    Dbg_Clk_4,
    Dbg_TDI_4,
    Dbg_TDO_4,
    Dbg_Reg_En_4,
    Dbg_Capture_4,
    Dbg_Shift_4,
    Dbg_Update_4,
    Dbg_Rst_4,
    Dbg_Trig_In_4,
    Dbg_Trig_Ack_In_4,
    Dbg_Trig_Out_4,
    Dbg_Trig_Ack_Out_4,
    Dbg_TrClk_4,
    Dbg_TrData_4,
    Dbg_TrReady_4,
    Dbg_TrValid_4,
    Dbg_AWADDR_4,
    Dbg_AWVALID_4,
    Dbg_AWREADY_4,
    Dbg_WDATA_4,
    Dbg_WVALID_4,
    Dbg_WREADY_4,
    Dbg_BRESP_4,
    Dbg_BVALID_4,
    Dbg_BREADY_4,
    Dbg_ARADDR_4,
    Dbg_ARVALID_4,
    Dbg_ARREADY_4,
    Dbg_RDATA_4,
    Dbg_RRESP_4,
    Dbg_RVALID_4,
    Dbg_RREADY_4,
    Dbg_Disable_5,
    Dbg_Clk_5,
    Dbg_TDI_5,
    Dbg_TDO_5,
    Dbg_Reg_En_5,
    Dbg_Capture_5,
    Dbg_Shift_5,
    Dbg_Update_5,
    Dbg_Rst_5,
    Dbg_Trig_In_5,
    Dbg_Trig_Ack_In_5,
    Dbg_Trig_Out_5,
    Dbg_Trig_Ack_Out_5,
    Dbg_TrClk_5,
    Dbg_TrData_5,
    Dbg_TrReady_5,
    Dbg_TrValid_5,
    Dbg_AWADDR_5,
    Dbg_AWVALID_5,
    Dbg_AWREADY_5,
    Dbg_WDATA_5,
    Dbg_WVALID_5,
    Dbg_WREADY_5,
    Dbg_BRESP_5,
    Dbg_BVALID_5,
    Dbg_BREADY_5,
    Dbg_ARADDR_5,
    Dbg_ARVALID_5,
    Dbg_ARREADY_5,
    Dbg_RDATA_5,
    Dbg_RRESP_5,
    Dbg_RVALID_5,
    Dbg_RREADY_5,
    Dbg_Disable_6,
    Dbg_Clk_6,
    Dbg_TDI_6,
    Dbg_TDO_6,
    Dbg_Reg_En_6,
    Dbg_Capture_6,
    Dbg_Shift_6,
    Dbg_Update_6,
    Dbg_Rst_6,
    Dbg_Trig_In_6,
    Dbg_Trig_Ack_In_6,
    Dbg_Trig_Out_6,
    Dbg_Trig_Ack_Out_6,
    Dbg_TrClk_6,
    Dbg_TrData_6,
    Dbg_TrReady_6,
    Dbg_TrValid_6,
    Dbg_AWADDR_6,
    Dbg_AWVALID_6,
    Dbg_AWREADY_6,
    Dbg_WDATA_6,
    Dbg_WVALID_6,
    Dbg_WREADY_6,
    Dbg_BRESP_6,
    Dbg_BVALID_6,
    Dbg_BREADY_6,
    Dbg_ARADDR_6,
    Dbg_ARVALID_6,
    Dbg_ARREADY_6,
    Dbg_RDATA_6,
    Dbg_RRESP_6,
    Dbg_RVALID_6,
    Dbg_RREADY_6,
    Dbg_Disable_7,
    Dbg_Clk_7,
    Dbg_TDI_7,
    Dbg_TDO_7,
    Dbg_Reg_En_7,
    Dbg_Capture_7,
    Dbg_Shift_7,
    Dbg_Update_7,
    Dbg_Rst_7,
    Dbg_Trig_In_7,
    Dbg_Trig_Ack_In_7,
    Dbg_Trig_Out_7,
    Dbg_Trig_Ack_Out_7,
    Dbg_TrClk_7,
    Dbg_TrData_7,
    Dbg_TrReady_7,
    Dbg_TrValid_7,
    Dbg_AWADDR_7,
    Dbg_AWVALID_7,
    Dbg_AWREADY_7,
    Dbg_WDATA_7,
    Dbg_WVALID_7,
    Dbg_WREADY_7,
    Dbg_BRESP_7,
    Dbg_BVALID_7,
    Dbg_BREADY_7,
    Dbg_ARADDR_7,
    Dbg_ARVALID_7,
    Dbg_ARREADY_7,
    Dbg_RDATA_7,
    Dbg_RRESP_7,
    Dbg_RVALID_7,
    Dbg_RREADY_7,
    Dbg_Disable_8,
    Dbg_Clk_8,
    Dbg_TDI_8,
    Dbg_TDO_8,
    Dbg_Reg_En_8,
    Dbg_Capture_8,
    Dbg_Shift_8,
    Dbg_Update_8,
    Dbg_Rst_8,
    Dbg_Trig_In_8,
    Dbg_Trig_Ack_In_8,
    Dbg_Trig_Out_8,
    Dbg_Trig_Ack_Out_8,
    Dbg_TrClk_8,
    Dbg_TrData_8,
    Dbg_TrReady_8,
    Dbg_TrValid_8,
    Dbg_AWADDR_8,
    Dbg_AWVALID_8,
    Dbg_AWREADY_8,
    Dbg_WDATA_8,
    Dbg_WVALID_8,
    Dbg_WREADY_8,
    Dbg_BRESP_8,
    Dbg_BVALID_8,
    Dbg_BREADY_8,
    Dbg_ARADDR_8,
    Dbg_ARVALID_8,
    Dbg_ARREADY_8,
    Dbg_RDATA_8,
    Dbg_RRESP_8,
    Dbg_RVALID_8,
    Dbg_RREADY_8,
    Dbg_Disable_9,
    Dbg_Clk_9,
    Dbg_TDI_9,
    Dbg_TDO_9,
    Dbg_Reg_En_9,
    Dbg_Capture_9,
    Dbg_Shift_9,
    Dbg_Update_9,
    Dbg_Rst_9,
    Dbg_Trig_In_9,
    Dbg_Trig_Ack_In_9,
    Dbg_Trig_Out_9,
    Dbg_Trig_Ack_Out_9,
    Dbg_TrClk_9,
    Dbg_TrData_9,
    Dbg_TrReady_9,
    Dbg_TrValid_9,
    Dbg_AWADDR_9,
    Dbg_AWVALID_9,
    Dbg_AWREADY_9,
    Dbg_WDATA_9,
    Dbg_WVALID_9,
    Dbg_WREADY_9,
    Dbg_BRESP_9,
    Dbg_BVALID_9,
    Dbg_BREADY_9,
    Dbg_ARADDR_9,
    Dbg_ARVALID_9,
    Dbg_ARREADY_9,
    Dbg_RDATA_9,
    Dbg_RRESP_9,
    Dbg_RVALID_9,
    Dbg_RREADY_9,
    Dbg_Disable_10,
    Dbg_Clk_10,
    Dbg_TDI_10,
    Dbg_TDO_10,
    Dbg_Reg_En_10,
    Dbg_Capture_10,
    Dbg_Shift_10,
    Dbg_Update_10,
    Dbg_Rst_10,
    Dbg_Trig_In_10,
    Dbg_Trig_Ack_In_10,
    Dbg_Trig_Out_10,
    Dbg_Trig_Ack_Out_10,
    Dbg_TrClk_10,
    Dbg_TrData_10,
    Dbg_TrReady_10,
    Dbg_TrValid_10,
    Dbg_AWADDR_10,
    Dbg_AWVALID_10,
    Dbg_AWREADY_10,
    Dbg_WDATA_10,
    Dbg_WVALID_10,
    Dbg_WREADY_10,
    Dbg_BRESP_10,
    Dbg_BVALID_10,
    Dbg_BREADY_10,
    Dbg_ARADDR_10,
    Dbg_ARVALID_10,
    Dbg_ARREADY_10,
    Dbg_RDATA_10,
    Dbg_RRESP_10,
    Dbg_RVALID_10,
    Dbg_RREADY_10,
    Dbg_Disable_11,
    Dbg_Clk_11,
    Dbg_TDI_11,
    Dbg_TDO_11,
    Dbg_Reg_En_11,
    Dbg_Capture_11,
    Dbg_Shift_11,
    Dbg_Update_11,
    Dbg_Rst_11,
    Dbg_Trig_In_11,
    Dbg_Trig_Ack_In_11,
    Dbg_Trig_Out_11,
    Dbg_Trig_Ack_Out_11,
    Dbg_TrClk_11,
    Dbg_TrData_11,
    Dbg_TrReady_11,
    Dbg_TrValid_11,
    Dbg_AWADDR_11,
    Dbg_AWVALID_11,
    Dbg_AWREADY_11,
    Dbg_WDATA_11,
    Dbg_WVALID_11,
    Dbg_WREADY_11,
    Dbg_BRESP_11,
    Dbg_BVALID_11,
    Dbg_BREADY_11,
    Dbg_ARADDR_11,
    Dbg_ARVALID_11,
    Dbg_ARREADY_11,
    Dbg_RDATA_11,
    Dbg_RRESP_11,
    Dbg_RVALID_11,
    Dbg_RREADY_11,
    Dbg_Disable_12,
    Dbg_Clk_12,
    Dbg_TDI_12,
    Dbg_TDO_12,
    Dbg_Reg_En_12,
    Dbg_Capture_12,
    Dbg_Shift_12,
    Dbg_Update_12,
    Dbg_Rst_12,
    Dbg_Trig_In_12,
    Dbg_Trig_Ack_In_12,
    Dbg_Trig_Out_12,
    Dbg_Trig_Ack_Out_12,
    Dbg_TrClk_12,
    Dbg_TrData_12,
    Dbg_TrReady_12,
    Dbg_TrValid_12,
    Dbg_AWADDR_12,
    Dbg_AWVALID_12,
    Dbg_AWREADY_12,
    Dbg_WDATA_12,
    Dbg_WVALID_12,
    Dbg_WREADY_12,
    Dbg_BRESP_12,
    Dbg_BVALID_12,
    Dbg_BREADY_12,
    Dbg_ARADDR_12,
    Dbg_ARVALID_12,
    Dbg_ARREADY_12,
    Dbg_RDATA_12,
    Dbg_RRESP_12,
    Dbg_RVALID_12,
    Dbg_RREADY_12,
    Dbg_Disable_13,
    Dbg_Clk_13,
    Dbg_TDI_13,
    Dbg_TDO_13,
    Dbg_Reg_En_13,
    Dbg_Capture_13,
    Dbg_Shift_13,
    Dbg_Update_13,
    Dbg_Rst_13,
    Dbg_Trig_In_13,
    Dbg_Trig_Ack_In_13,
    Dbg_Trig_Out_13,
    Dbg_Trig_Ack_Out_13,
    Dbg_TrClk_13,
    Dbg_TrData_13,
    Dbg_TrReady_13,
    Dbg_TrValid_13,
    Dbg_AWADDR_13,
    Dbg_AWVALID_13,
    Dbg_AWREADY_13,
    Dbg_WDATA_13,
    Dbg_WVALID_13,
    Dbg_WREADY_13,
    Dbg_BRESP_13,
    Dbg_BVALID_13,
    Dbg_BREADY_13,
    Dbg_ARADDR_13,
    Dbg_ARVALID_13,
    Dbg_ARREADY_13,
    Dbg_RDATA_13,
    Dbg_RRESP_13,
    Dbg_RVALID_13,
    Dbg_RREADY_13,
    Dbg_Disable_14,
    Dbg_Clk_14,
    Dbg_TDI_14,
    Dbg_TDO_14,
    Dbg_Reg_En_14,
    Dbg_Capture_14,
    Dbg_Shift_14,
    Dbg_Update_14,
    Dbg_Rst_14,
    Dbg_Trig_In_14,
    Dbg_Trig_Ack_In_14,
    Dbg_Trig_Out_14,
    Dbg_Trig_Ack_Out_14,
    Dbg_TrClk_14,
    Dbg_TrData_14,
    Dbg_TrReady_14,
    Dbg_TrValid_14,
    Dbg_AWADDR_14,
    Dbg_AWVALID_14,
    Dbg_AWREADY_14,
    Dbg_WDATA_14,
    Dbg_WVALID_14,
    Dbg_WREADY_14,
    Dbg_BRESP_14,
    Dbg_BVALID_14,
    Dbg_BREADY_14,
    Dbg_ARADDR_14,
    Dbg_ARVALID_14,
    Dbg_ARREADY_14,
    Dbg_RDATA_14,
    Dbg_RRESP_14,
    Dbg_RVALID_14,
    Dbg_RREADY_14,
    Dbg_Disable_15,
    Dbg_Clk_15,
    Dbg_TDI_15,
    Dbg_TDO_15,
    Dbg_Reg_En_15,
    Dbg_Capture_15,
    Dbg_Shift_15,
    Dbg_Update_15,
    Dbg_Rst_15,
    Dbg_Trig_In_15,
    Dbg_Trig_Ack_In_15,
    Dbg_Trig_Out_15,
    Dbg_Trig_Ack_Out_15,
    Dbg_TrClk_15,
    Dbg_TrData_15,
    Dbg_TrReady_15,
    Dbg_TrValid_15,
    Dbg_AWADDR_15,
    Dbg_AWVALID_15,
    Dbg_AWREADY_15,
    Dbg_WDATA_15,
    Dbg_WVALID_15,
    Dbg_WREADY_15,
    Dbg_BRESP_15,
    Dbg_BVALID_15,
    Dbg_BREADY_15,
    Dbg_ARADDR_15,
    Dbg_ARVALID_15,
    Dbg_ARREADY_15,
    Dbg_RDATA_15,
    Dbg_RRESP_15,
    Dbg_RVALID_15,
    Dbg_RREADY_15,
    Dbg_Disable_16,
    Dbg_Clk_16,
    Dbg_TDI_16,
    Dbg_TDO_16,
    Dbg_Reg_En_16,
    Dbg_Capture_16,
    Dbg_Shift_16,
    Dbg_Update_16,
    Dbg_Rst_16,
    Dbg_Trig_In_16,
    Dbg_Trig_Ack_In_16,
    Dbg_Trig_Out_16,
    Dbg_Trig_Ack_Out_16,
    Dbg_TrClk_16,
    Dbg_TrData_16,
    Dbg_TrReady_16,
    Dbg_TrValid_16,
    Dbg_AWADDR_16,
    Dbg_AWVALID_16,
    Dbg_AWREADY_16,
    Dbg_WDATA_16,
    Dbg_WVALID_16,
    Dbg_WREADY_16,
    Dbg_BRESP_16,
    Dbg_BVALID_16,
    Dbg_BREADY_16,
    Dbg_ARADDR_16,
    Dbg_ARVALID_16,
    Dbg_ARREADY_16,
    Dbg_RDATA_16,
    Dbg_RRESP_16,
    Dbg_RVALID_16,
    Dbg_RREADY_16,
    Dbg_Disable_17,
    Dbg_Clk_17,
    Dbg_TDI_17,
    Dbg_TDO_17,
    Dbg_Reg_En_17,
    Dbg_Capture_17,
    Dbg_Shift_17,
    Dbg_Update_17,
    Dbg_Rst_17,
    Dbg_Trig_In_17,
    Dbg_Trig_Ack_In_17,
    Dbg_Trig_Out_17,
    Dbg_Trig_Ack_Out_17,
    Dbg_TrClk_17,
    Dbg_TrData_17,
    Dbg_TrReady_17,
    Dbg_TrValid_17,
    Dbg_AWADDR_17,
    Dbg_AWVALID_17,
    Dbg_AWREADY_17,
    Dbg_WDATA_17,
    Dbg_WVALID_17,
    Dbg_WREADY_17,
    Dbg_BRESP_17,
    Dbg_BVALID_17,
    Dbg_BREADY_17,
    Dbg_ARADDR_17,
    Dbg_ARVALID_17,
    Dbg_ARREADY_17,
    Dbg_RDATA_17,
    Dbg_RRESP_17,
    Dbg_RVALID_17,
    Dbg_RREADY_17,
    Dbg_Disable_18,
    Dbg_Clk_18,
    Dbg_TDI_18,
    Dbg_TDO_18,
    Dbg_Reg_En_18,
    Dbg_Capture_18,
    Dbg_Shift_18,
    Dbg_Update_18,
    Dbg_Rst_18,
    Dbg_Trig_In_18,
    Dbg_Trig_Ack_In_18,
    Dbg_Trig_Out_18,
    Dbg_Trig_Ack_Out_18,
    Dbg_TrClk_18,
    Dbg_TrData_18,
    Dbg_TrReady_18,
    Dbg_TrValid_18,
    Dbg_AWADDR_18,
    Dbg_AWVALID_18,
    Dbg_AWREADY_18,
    Dbg_WDATA_18,
    Dbg_WVALID_18,
    Dbg_WREADY_18,
    Dbg_BRESP_18,
    Dbg_BVALID_18,
    Dbg_BREADY_18,
    Dbg_ARADDR_18,
    Dbg_ARVALID_18,
    Dbg_ARREADY_18,
    Dbg_RDATA_18,
    Dbg_RRESP_18,
    Dbg_RVALID_18,
    Dbg_RREADY_18,
    Dbg_Disable_19,
    Dbg_Clk_19,
    Dbg_TDI_19,
    Dbg_TDO_19,
    Dbg_Reg_En_19,
    Dbg_Capture_19,
    Dbg_Shift_19,
    Dbg_Update_19,
    Dbg_Rst_19,
    Dbg_Trig_In_19,
    Dbg_Trig_Ack_In_19,
    Dbg_Trig_Out_19,
    Dbg_Trig_Ack_Out_19,
    Dbg_TrClk_19,
    Dbg_TrData_19,
    Dbg_TrReady_19,
    Dbg_TrValid_19,
    Dbg_AWADDR_19,
    Dbg_AWVALID_19,
    Dbg_AWREADY_19,
    Dbg_WDATA_19,
    Dbg_WVALID_19,
    Dbg_WREADY_19,
    Dbg_BRESP_19,
    Dbg_BVALID_19,
    Dbg_BREADY_19,
    Dbg_ARADDR_19,
    Dbg_ARVALID_19,
    Dbg_ARREADY_19,
    Dbg_RDATA_19,
    Dbg_RRESP_19,
    Dbg_RVALID_19,
    Dbg_RREADY_19,
    Dbg_Disable_20,
    Dbg_Clk_20,
    Dbg_TDI_20,
    Dbg_TDO_20,
    Dbg_Reg_En_20,
    Dbg_Capture_20,
    Dbg_Shift_20,
    Dbg_Update_20,
    Dbg_Rst_20,
    Dbg_Trig_In_20,
    Dbg_Trig_Ack_In_20,
    Dbg_Trig_Out_20,
    Dbg_Trig_Ack_Out_20,
    Dbg_TrClk_20,
    Dbg_TrData_20,
    Dbg_TrReady_20,
    Dbg_TrValid_20,
    Dbg_AWADDR_20,
    Dbg_AWVALID_20,
    Dbg_AWREADY_20,
    Dbg_WDATA_20,
    Dbg_WVALID_20,
    Dbg_WREADY_20,
    Dbg_BRESP_20,
    Dbg_BVALID_20,
    Dbg_BREADY_20,
    Dbg_ARADDR_20,
    Dbg_ARVALID_20,
    Dbg_ARREADY_20,
    Dbg_RDATA_20,
    Dbg_RRESP_20,
    Dbg_RVALID_20,
    Dbg_RREADY_20,
    Dbg_Disable_21,
    Dbg_Clk_21,
    Dbg_TDI_21,
    Dbg_TDO_21,
    Dbg_Reg_En_21,
    Dbg_Capture_21,
    Dbg_Shift_21,
    Dbg_Update_21,
    Dbg_Rst_21,
    Dbg_Trig_In_21,
    Dbg_Trig_Ack_In_21,
    Dbg_Trig_Out_21,
    Dbg_Trig_Ack_Out_21,
    Dbg_TrClk_21,
    Dbg_TrData_21,
    Dbg_TrReady_21,
    Dbg_TrValid_21,
    Dbg_AWADDR_21,
    Dbg_AWVALID_21,
    Dbg_AWREADY_21,
    Dbg_WDATA_21,
    Dbg_WVALID_21,
    Dbg_WREADY_21,
    Dbg_BRESP_21,
    Dbg_BVALID_21,
    Dbg_BREADY_21,
    Dbg_ARADDR_21,
    Dbg_ARVALID_21,
    Dbg_ARREADY_21,
    Dbg_RDATA_21,
    Dbg_RRESP_21,
    Dbg_RVALID_21,
    Dbg_RREADY_21,
    Dbg_Disable_22,
    Dbg_Clk_22,
    Dbg_TDI_22,
    Dbg_TDO_22,
    Dbg_Reg_En_22,
    Dbg_Capture_22,
    Dbg_Shift_22,
    Dbg_Update_22,
    Dbg_Rst_22,
    Dbg_Trig_In_22,
    Dbg_Trig_Ack_In_22,
    Dbg_Trig_Out_22,
    Dbg_Trig_Ack_Out_22,
    Dbg_TrClk_22,
    Dbg_TrData_22,
    Dbg_TrReady_22,
    Dbg_TrValid_22,
    Dbg_AWADDR_22,
    Dbg_AWVALID_22,
    Dbg_AWREADY_22,
    Dbg_WDATA_22,
    Dbg_WVALID_22,
    Dbg_WREADY_22,
    Dbg_BRESP_22,
    Dbg_BVALID_22,
    Dbg_BREADY_22,
    Dbg_ARADDR_22,
    Dbg_ARVALID_22,
    Dbg_ARREADY_22,
    Dbg_RDATA_22,
    Dbg_RRESP_22,
    Dbg_RVALID_22,
    Dbg_RREADY_22,
    Dbg_Disable_23,
    Dbg_Clk_23,
    Dbg_TDI_23,
    Dbg_TDO_23,
    Dbg_Reg_En_23,
    Dbg_Capture_23,
    Dbg_Shift_23,
    Dbg_Update_23,
    Dbg_Rst_23,
    Dbg_Trig_In_23,
    Dbg_Trig_Ack_In_23,
    Dbg_Trig_Out_23,
    Dbg_Trig_Ack_Out_23,
    Dbg_TrClk_23,
    Dbg_TrData_23,
    Dbg_TrReady_23,
    Dbg_TrValid_23,
    Dbg_AWADDR_23,
    Dbg_AWVALID_23,
    Dbg_AWREADY_23,
    Dbg_WDATA_23,
    Dbg_WVALID_23,
    Dbg_WREADY_23,
    Dbg_BRESP_23,
    Dbg_BVALID_23,
    Dbg_BREADY_23,
    Dbg_ARADDR_23,
    Dbg_ARVALID_23,
    Dbg_ARREADY_23,
    Dbg_RDATA_23,
    Dbg_RRESP_23,
    Dbg_RVALID_23,
    Dbg_RREADY_23,
    Dbg_Disable_24,
    Dbg_Clk_24,
    Dbg_TDI_24,
    Dbg_TDO_24,
    Dbg_Reg_En_24,
    Dbg_Capture_24,
    Dbg_Shift_24,
    Dbg_Update_24,
    Dbg_Rst_24,
    Dbg_Trig_In_24,
    Dbg_Trig_Ack_In_24,
    Dbg_Trig_Out_24,
    Dbg_Trig_Ack_Out_24,
    Dbg_TrClk_24,
    Dbg_TrData_24,
    Dbg_TrReady_24,
    Dbg_TrValid_24,
    Dbg_AWADDR_24,
    Dbg_AWVALID_24,
    Dbg_AWREADY_24,
    Dbg_WDATA_24,
    Dbg_WVALID_24,
    Dbg_WREADY_24,
    Dbg_BRESP_24,
    Dbg_BVALID_24,
    Dbg_BREADY_24,
    Dbg_ARADDR_24,
    Dbg_ARVALID_24,
    Dbg_ARREADY_24,
    Dbg_RDATA_24,
    Dbg_RRESP_24,
    Dbg_RVALID_24,
    Dbg_RREADY_24,
    Dbg_Disable_25,
    Dbg_Clk_25,
    Dbg_TDI_25,
    Dbg_TDO_25,
    Dbg_Reg_En_25,
    Dbg_Capture_25,
    Dbg_Shift_25,
    Dbg_Update_25,
    Dbg_Rst_25,
    Dbg_Trig_In_25,
    Dbg_Trig_Ack_In_25,
    Dbg_Trig_Out_25,
    Dbg_Trig_Ack_Out_25,
    Dbg_TrClk_25,
    Dbg_TrData_25,
    Dbg_TrReady_25,
    Dbg_TrValid_25,
    Dbg_AWADDR_25,
    Dbg_AWVALID_25,
    Dbg_AWREADY_25,
    Dbg_WDATA_25,
    Dbg_WVALID_25,
    Dbg_WREADY_25,
    Dbg_BRESP_25,
    Dbg_BVALID_25,
    Dbg_BREADY_25,
    Dbg_ARADDR_25,
    Dbg_ARVALID_25,
    Dbg_ARREADY_25,
    Dbg_RDATA_25,
    Dbg_RRESP_25,
    Dbg_RVALID_25,
    Dbg_RREADY_25,
    Dbg_Disable_26,
    Dbg_Clk_26,
    Dbg_TDI_26,
    Dbg_TDO_26,
    Dbg_Reg_En_26,
    Dbg_Capture_26,
    Dbg_Shift_26,
    Dbg_Update_26,
    Dbg_Rst_26,
    Dbg_Trig_In_26,
    Dbg_Trig_Ack_In_26,
    Dbg_Trig_Out_26,
    Dbg_Trig_Ack_Out_26,
    Dbg_TrClk_26,
    Dbg_TrData_26,
    Dbg_TrReady_26,
    Dbg_TrValid_26,
    Dbg_AWADDR_26,
    Dbg_AWVALID_26,
    Dbg_AWREADY_26,
    Dbg_WDATA_26,
    Dbg_WVALID_26,
    Dbg_WREADY_26,
    Dbg_BRESP_26,
    Dbg_BVALID_26,
    Dbg_BREADY_26,
    Dbg_ARADDR_26,
    Dbg_ARVALID_26,
    Dbg_ARREADY_26,
    Dbg_RDATA_26,
    Dbg_RRESP_26,
    Dbg_RVALID_26,
    Dbg_RREADY_26,
    Dbg_Disable_27,
    Dbg_Clk_27,
    Dbg_TDI_27,
    Dbg_TDO_27,
    Dbg_Reg_En_27,
    Dbg_Capture_27,
    Dbg_Shift_27,
    Dbg_Update_27,
    Dbg_Rst_27,
    Dbg_Trig_In_27,
    Dbg_Trig_Ack_In_27,
    Dbg_Trig_Out_27,
    Dbg_Trig_Ack_Out_27,
    Dbg_TrClk_27,
    Dbg_TrData_27,
    Dbg_TrReady_27,
    Dbg_TrValid_27,
    Dbg_AWADDR_27,
    Dbg_AWVALID_27,
    Dbg_AWREADY_27,
    Dbg_WDATA_27,
    Dbg_WVALID_27,
    Dbg_WREADY_27,
    Dbg_BRESP_27,
    Dbg_BVALID_27,
    Dbg_BREADY_27,
    Dbg_ARADDR_27,
    Dbg_ARVALID_27,
    Dbg_ARREADY_27,
    Dbg_RDATA_27,
    Dbg_RRESP_27,
    Dbg_RVALID_27,
    Dbg_RREADY_27,
    Dbg_Disable_28,
    Dbg_Clk_28,
    Dbg_TDI_28,
    Dbg_TDO_28,
    Dbg_Reg_En_28,
    Dbg_Capture_28,
    Dbg_Shift_28,
    Dbg_Update_28,
    Dbg_Rst_28,
    Dbg_Trig_In_28,
    Dbg_Trig_Ack_In_28,
    Dbg_Trig_Out_28,
    Dbg_Trig_Ack_Out_28,
    Dbg_TrClk_28,
    Dbg_TrData_28,
    Dbg_TrReady_28,
    Dbg_TrValid_28,
    Dbg_AWADDR_28,
    Dbg_AWVALID_28,
    Dbg_AWREADY_28,
    Dbg_WDATA_28,
    Dbg_WVALID_28,
    Dbg_WREADY_28,
    Dbg_BRESP_28,
    Dbg_BVALID_28,
    Dbg_BREADY_28,
    Dbg_ARADDR_28,
    Dbg_ARVALID_28,
    Dbg_ARREADY_28,
    Dbg_RDATA_28,
    Dbg_RRESP_28,
    Dbg_RVALID_28,
    Dbg_RREADY_28,
    Dbg_Disable_29,
    Dbg_Clk_29,
    Dbg_TDI_29,
    Dbg_TDO_29,
    Dbg_Reg_En_29,
    Dbg_Capture_29,
    Dbg_Shift_29,
    Dbg_Update_29,
    Dbg_Rst_29,
    Dbg_Trig_In_29,
    Dbg_Trig_Ack_In_29,
    Dbg_Trig_Out_29,
    Dbg_Trig_Ack_Out_29,
    Dbg_TrClk_29,
    Dbg_TrData_29,
    Dbg_TrReady_29,
    Dbg_TrValid_29,
    Dbg_AWADDR_29,
    Dbg_AWVALID_29,
    Dbg_AWREADY_29,
    Dbg_WDATA_29,
    Dbg_WVALID_29,
    Dbg_WREADY_29,
    Dbg_BRESP_29,
    Dbg_BVALID_29,
    Dbg_BREADY_29,
    Dbg_ARADDR_29,
    Dbg_ARVALID_29,
    Dbg_ARREADY_29,
    Dbg_RDATA_29,
    Dbg_RRESP_29,
    Dbg_RVALID_29,
    Dbg_RREADY_29,
    Dbg_Disable_30,
    Dbg_Clk_30,
    Dbg_TDI_30,
    Dbg_TDO_30,
    Dbg_Reg_En_30,
    Dbg_Capture_30,
    Dbg_Shift_30,
    Dbg_Update_30,
    Dbg_Rst_30,
    Dbg_Trig_In_30,
    Dbg_Trig_Ack_In_30,
    Dbg_Trig_Out_30,
    Dbg_Trig_Ack_Out_30,
    Dbg_TrClk_30,
    Dbg_TrData_30,
    Dbg_TrReady_30,
    Dbg_TrValid_30,
    Dbg_AWADDR_30,
    Dbg_AWVALID_30,
    Dbg_AWREADY_30,
    Dbg_WDATA_30,
    Dbg_WVALID_30,
    Dbg_WREADY_30,
    Dbg_BRESP_30,
    Dbg_BVALID_30,
    Dbg_BREADY_30,
    Dbg_ARADDR_30,
    Dbg_ARVALID_30,
    Dbg_ARREADY_30,
    Dbg_RDATA_30,
    Dbg_RRESP_30,
    Dbg_RVALID_30,
    Dbg_RREADY_30,
    Dbg_Disable_31,
    Dbg_Clk_31,
    Dbg_TDI_31,
    Dbg_TDO_31,
    Dbg_Reg_En_31,
    Dbg_Capture_31,
    Dbg_Shift_31,
    Dbg_Update_31,
    Dbg_Rst_31,
    Dbg_Trig_In_31,
    Dbg_Trig_Ack_In_31,
    Dbg_Trig_Out_31,
    Dbg_Trig_Ack_Out_31,
    Dbg_TrClk_31,
    Dbg_TrData_31,
    Dbg_TrReady_31,
    Dbg_TrValid_31,
    Dbg_AWADDR_31,
    Dbg_AWVALID_31,
    Dbg_AWREADY_31,
    Dbg_WDATA_31,
    Dbg_WVALID_31,
    Dbg_WREADY_31,
    Dbg_BRESP_31,
    Dbg_BVALID_31,
    Dbg_BREADY_31,
    Dbg_ARADDR_31,
    Dbg_ARVALID_31,
    Dbg_ARREADY_31,
    Dbg_RDATA_31,
    Dbg_RRESP_31,
    Dbg_RVALID_31,
    Dbg_RREADY_31,
    bscan_ext_tdi,
    bscan_ext_reset,
    bscan_ext_shift,
    bscan_ext_update,
    bscan_ext_capture,
    bscan_ext_sel,
    bscan_ext_drck,
    bscan_ext_tdo,
    bscan_ext_tck,
    bscan_ext_bscanid_en,
    Ext_JTAG_DRCK,
    Ext_JTAG_RESET,
    Ext_JTAG_SEL,
    Ext_JTAG_CAPTURE,
    Ext_JTAG_SHIFT,
    Ext_JTAG_UPDATE,
    Ext_JTAG_TDI,
    Ext_JTAG_TDO);
  input Config_Reset;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input Scan_En;
  input S_AXI_ACLK;
  input S_AXI_ARESETN;
  input M_AXI_ACLK;
  input M_AXI_ARESETN;
  input M_AXIS_ACLK;
  input M_AXIS_ARESETN;
  output Interrupt;
  output Ext_BRK;
  output Ext_NM_BRK;
  output Debug_SYS_Rst;
  input Trig_In_0;
  output Trig_Ack_In_0;
  output Trig_Out_0;
  input Trig_Ack_Out_0;
  input Trig_In_1;
  output Trig_Ack_In_1;
  output Trig_Out_1;
  input Trig_Ack_Out_1;
  input Trig_In_2;
  output Trig_Ack_In_2;
  output Trig_Out_2;
  input Trig_Ack_Out_2;
  input Trig_In_3;
  output Trig_Ack_In_3;
  output Trig_Out_3;
  input Trig_Ack_Out_3;
  input [3:0]S_AXI_AWADDR;
  input S_AXI_AWVALID;
  output S_AXI_AWREADY;
  input [31:0]S_AXI_WDATA;
  input [3:0]S_AXI_WSTRB;
  input S_AXI_WVALID;
  output S_AXI_WREADY;
  output [1:0]S_AXI_BRESP;
  output S_AXI_BVALID;
  input S_AXI_BREADY;
  input [3:0]S_AXI_ARADDR;
  input S_AXI_ARVALID;
  output S_AXI_ARREADY;
  output [31:0]S_AXI_RDATA;
  output [1:0]S_AXI_RRESP;
  output S_AXI_RVALID;
  input S_AXI_RREADY;
  output [0:0]M_AXI_AWID;
  output [31:0]M_AXI_AWADDR;
  output [7:0]M_AXI_AWLEN;
  output [2:0]M_AXI_AWSIZE;
  output [1:0]M_AXI_AWBURST;
  output M_AXI_AWLOCK;
  output [3:0]M_AXI_AWCACHE;
  output [2:0]M_AXI_AWPROT;
  output [3:0]M_AXI_AWQOS;
  output M_AXI_AWVALID;
  input M_AXI_AWREADY;
  output [31:0]M_AXI_WDATA;
  output [3:0]M_AXI_WSTRB;
  output M_AXI_WLAST;
  output M_AXI_WVALID;
  input M_AXI_WREADY;
  input [1:0]M_AXI_BRESP;
  input [0:0]M_AXI_BID;
  input M_AXI_BVALID;
  output M_AXI_BREADY;
  output [0:0]M_AXI_ARID;
  output [31:0]M_AXI_ARADDR;
  output [7:0]M_AXI_ARLEN;
  output [2:0]M_AXI_ARSIZE;
  output [1:0]M_AXI_ARBURST;
  output M_AXI_ARLOCK;
  output [3:0]M_AXI_ARCACHE;
  output [2:0]M_AXI_ARPROT;
  output [3:0]M_AXI_ARQOS;
  output M_AXI_ARVALID;
  input M_AXI_ARREADY;
  input [0:0]M_AXI_RID;
  input [31:0]M_AXI_RDATA;
  input [1:0]M_AXI_RRESP;
  input M_AXI_RLAST;
  input M_AXI_RVALID;
  output M_AXI_RREADY;
  output [0:31]LMB_Data_Addr_0;
  input [0:31]LMB_Data_Read_0;
  output [0:31]LMB_Data_Write_0;
  output LMB_Addr_Strobe_0;
  output LMB_Read_Strobe_0;
  output LMB_Write_Strobe_0;
  input LMB_Ready_0;
  input LMB_Wait_0;
  input LMB_CE_0;
  input LMB_UE_0;
  output [0:3]LMB_Byte_Enable_0;
  output [0:31]LMB_Data_Addr_1;
  input [0:31]LMB_Data_Read_1;
  output [0:31]LMB_Data_Write_1;
  output LMB_Addr_Strobe_1;
  output LMB_Read_Strobe_1;
  output LMB_Write_Strobe_1;
  input LMB_Ready_1;
  input LMB_Wait_1;
  input LMB_CE_1;
  input LMB_UE_1;
  output [0:3]LMB_Byte_Enable_1;
  output [0:31]LMB_Data_Addr_2;
  input [0:31]LMB_Data_Read_2;
  output [0:31]LMB_Data_Write_2;
  output LMB_Addr_Strobe_2;
  output LMB_Read_Strobe_2;
  output LMB_Write_Strobe_2;
  input LMB_Ready_2;
  input LMB_Wait_2;
  input LMB_CE_2;
  input LMB_UE_2;
  output [0:3]LMB_Byte_Enable_2;
  output [0:31]LMB_Data_Addr_3;
  input [0:31]LMB_Data_Read_3;
  output [0:31]LMB_Data_Write_3;
  output LMB_Addr_Strobe_3;
  output LMB_Read_Strobe_3;
  output LMB_Write_Strobe_3;
  input LMB_Ready_3;
  input LMB_Wait_3;
  input LMB_CE_3;
  input LMB_UE_3;
  output [0:3]LMB_Byte_Enable_3;
  output [0:31]LMB_Data_Addr_4;
  input [0:31]LMB_Data_Read_4;
  output [0:31]LMB_Data_Write_4;
  output LMB_Addr_Strobe_4;
  output LMB_Read_Strobe_4;
  output LMB_Write_Strobe_4;
  input LMB_Ready_4;
  input LMB_Wait_4;
  input LMB_CE_4;
  input LMB_UE_4;
  output [0:3]LMB_Byte_Enable_4;
  output [0:31]LMB_Data_Addr_5;
  input [0:31]LMB_Data_Read_5;
  output [0:31]LMB_Data_Write_5;
  output LMB_Addr_Strobe_5;
  output LMB_Read_Strobe_5;
  output LMB_Write_Strobe_5;
  input LMB_Ready_5;
  input LMB_Wait_5;
  input LMB_CE_5;
  input LMB_UE_5;
  output [0:3]LMB_Byte_Enable_5;
  output [0:31]LMB_Data_Addr_6;
  input [0:31]LMB_Data_Read_6;
  output [0:31]LMB_Data_Write_6;
  output LMB_Addr_Strobe_6;
  output LMB_Read_Strobe_6;
  output LMB_Write_Strobe_6;
  input LMB_Ready_6;
  input LMB_Wait_6;
  input LMB_CE_6;
  input LMB_UE_6;
  output [0:3]LMB_Byte_Enable_6;
  output [0:31]LMB_Data_Addr_7;
  input [0:31]LMB_Data_Read_7;
  output [0:31]LMB_Data_Write_7;
  output LMB_Addr_Strobe_7;
  output LMB_Read_Strobe_7;
  output LMB_Write_Strobe_7;
  input LMB_Ready_7;
  input LMB_Wait_7;
  input LMB_CE_7;
  input LMB_UE_7;
  output [0:3]LMB_Byte_Enable_7;
  output [0:31]LMB_Data_Addr_8;
  input [0:31]LMB_Data_Read_8;
  output [0:31]LMB_Data_Write_8;
  output LMB_Addr_Strobe_8;
  output LMB_Read_Strobe_8;
  output LMB_Write_Strobe_8;
  input LMB_Ready_8;
  input LMB_Wait_8;
  input LMB_CE_8;
  input LMB_UE_8;
  output [0:3]LMB_Byte_Enable_8;
  output [0:31]LMB_Data_Addr_9;
  input [0:31]LMB_Data_Read_9;
  output [0:31]LMB_Data_Write_9;
  output LMB_Addr_Strobe_9;
  output LMB_Read_Strobe_9;
  output LMB_Write_Strobe_9;
  input LMB_Ready_9;
  input LMB_Wait_9;
  input LMB_CE_9;
  input LMB_UE_9;
  output [0:3]LMB_Byte_Enable_9;
  output [0:31]LMB_Data_Addr_10;
  input [0:31]LMB_Data_Read_10;
  output [0:31]LMB_Data_Write_10;
  output LMB_Addr_Strobe_10;
  output LMB_Read_Strobe_10;
  output LMB_Write_Strobe_10;
  input LMB_Ready_10;
  input LMB_Wait_10;
  input LMB_CE_10;
  input LMB_UE_10;
  output [0:3]LMB_Byte_Enable_10;
  output [0:31]LMB_Data_Addr_11;
  input [0:31]LMB_Data_Read_11;
  output [0:31]LMB_Data_Write_11;
  output LMB_Addr_Strobe_11;
  output LMB_Read_Strobe_11;
  output LMB_Write_Strobe_11;
  input LMB_Ready_11;
  input LMB_Wait_11;
  input LMB_CE_11;
  input LMB_UE_11;
  output [0:3]LMB_Byte_Enable_11;
  output [0:31]LMB_Data_Addr_12;
  input [0:31]LMB_Data_Read_12;
  output [0:31]LMB_Data_Write_12;
  output LMB_Addr_Strobe_12;
  output LMB_Read_Strobe_12;
  output LMB_Write_Strobe_12;
  input LMB_Ready_12;
  input LMB_Wait_12;
  input LMB_CE_12;
  input LMB_UE_12;
  output [0:3]LMB_Byte_Enable_12;
  output [0:31]LMB_Data_Addr_13;
  input [0:31]LMB_Data_Read_13;
  output [0:31]LMB_Data_Write_13;
  output LMB_Addr_Strobe_13;
  output LMB_Read_Strobe_13;
  output LMB_Write_Strobe_13;
  input LMB_Ready_13;
  input LMB_Wait_13;
  input LMB_CE_13;
  input LMB_UE_13;
  output [0:3]LMB_Byte_Enable_13;
  output [0:31]LMB_Data_Addr_14;
  input [0:31]LMB_Data_Read_14;
  output [0:31]LMB_Data_Write_14;
  output LMB_Addr_Strobe_14;
  output LMB_Read_Strobe_14;
  output LMB_Write_Strobe_14;
  input LMB_Ready_14;
  input LMB_Wait_14;
  input LMB_CE_14;
  input LMB_UE_14;
  output [0:3]LMB_Byte_Enable_14;
  output [0:31]LMB_Data_Addr_15;
  input [0:31]LMB_Data_Read_15;
  output [0:31]LMB_Data_Write_15;
  output LMB_Addr_Strobe_15;
  output LMB_Read_Strobe_15;
  output LMB_Write_Strobe_15;
  input LMB_Ready_15;
  input LMB_Wait_15;
  input LMB_CE_15;
  input LMB_UE_15;
  output [0:3]LMB_Byte_Enable_15;
  output [0:31]LMB_Data_Addr_16;
  input [0:31]LMB_Data_Read_16;
  output [0:31]LMB_Data_Write_16;
  output LMB_Addr_Strobe_16;
  output LMB_Read_Strobe_16;
  output LMB_Write_Strobe_16;
  input LMB_Ready_16;
  input LMB_Wait_16;
  input LMB_CE_16;
  input LMB_UE_16;
  output [0:3]LMB_Byte_Enable_16;
  output [0:31]LMB_Data_Addr_17;
  input [0:31]LMB_Data_Read_17;
  output [0:31]LMB_Data_Write_17;
  output LMB_Addr_Strobe_17;
  output LMB_Read_Strobe_17;
  output LMB_Write_Strobe_17;
  input LMB_Ready_17;
  input LMB_Wait_17;
  input LMB_CE_17;
  input LMB_UE_17;
  output [0:3]LMB_Byte_Enable_17;
  output [0:31]LMB_Data_Addr_18;
  input [0:31]LMB_Data_Read_18;
  output [0:31]LMB_Data_Write_18;
  output LMB_Addr_Strobe_18;
  output LMB_Read_Strobe_18;
  output LMB_Write_Strobe_18;
  input LMB_Ready_18;
  input LMB_Wait_18;
  input LMB_CE_18;
  input LMB_UE_18;
  output [0:3]LMB_Byte_Enable_18;
  output [0:31]LMB_Data_Addr_19;
  input [0:31]LMB_Data_Read_19;
  output [0:31]LMB_Data_Write_19;
  output LMB_Addr_Strobe_19;
  output LMB_Read_Strobe_19;
  output LMB_Write_Strobe_19;
  input LMB_Ready_19;
  input LMB_Wait_19;
  input LMB_CE_19;
  input LMB_UE_19;
  output [0:3]LMB_Byte_Enable_19;
  output [0:31]LMB_Data_Addr_20;
  input [0:31]LMB_Data_Read_20;
  output [0:31]LMB_Data_Write_20;
  output LMB_Addr_Strobe_20;
  output LMB_Read_Strobe_20;
  output LMB_Write_Strobe_20;
  input LMB_Ready_20;
  input LMB_Wait_20;
  input LMB_CE_20;
  input LMB_UE_20;
  output [0:3]LMB_Byte_Enable_20;
  output [0:31]LMB_Data_Addr_21;
  input [0:31]LMB_Data_Read_21;
  output [0:31]LMB_Data_Write_21;
  output LMB_Addr_Strobe_21;
  output LMB_Read_Strobe_21;
  output LMB_Write_Strobe_21;
  input LMB_Ready_21;
  input LMB_Wait_21;
  input LMB_CE_21;
  input LMB_UE_21;
  output [0:3]LMB_Byte_Enable_21;
  output [0:31]LMB_Data_Addr_22;
  input [0:31]LMB_Data_Read_22;
  output [0:31]LMB_Data_Write_22;
  output LMB_Addr_Strobe_22;
  output LMB_Read_Strobe_22;
  output LMB_Write_Strobe_22;
  input LMB_Ready_22;
  input LMB_Wait_22;
  input LMB_CE_22;
  input LMB_UE_22;
  output [0:3]LMB_Byte_Enable_22;
  output [0:31]LMB_Data_Addr_23;
  input [0:31]LMB_Data_Read_23;
  output [0:31]LMB_Data_Write_23;
  output LMB_Addr_Strobe_23;
  output LMB_Read_Strobe_23;
  output LMB_Write_Strobe_23;
  input LMB_Ready_23;
  input LMB_Wait_23;
  input LMB_CE_23;
  input LMB_UE_23;
  output [0:3]LMB_Byte_Enable_23;
  output [0:31]LMB_Data_Addr_24;
  input [0:31]LMB_Data_Read_24;
  output [0:31]LMB_Data_Write_24;
  output LMB_Addr_Strobe_24;
  output LMB_Read_Strobe_24;
  output LMB_Write_Strobe_24;
  input LMB_Ready_24;
  input LMB_Wait_24;
  input LMB_CE_24;
  input LMB_UE_24;
  output [0:3]LMB_Byte_Enable_24;
  output [0:31]LMB_Data_Addr_25;
  input [0:31]LMB_Data_Read_25;
  output [0:31]LMB_Data_Write_25;
  output LMB_Addr_Strobe_25;
  output LMB_Read_Strobe_25;
  output LMB_Write_Strobe_25;
  input LMB_Ready_25;
  input LMB_Wait_25;
  input LMB_CE_25;
  input LMB_UE_25;
  output [0:3]LMB_Byte_Enable_25;
  output [0:31]LMB_Data_Addr_26;
  input [0:31]LMB_Data_Read_26;
  output [0:31]LMB_Data_Write_26;
  output LMB_Addr_Strobe_26;
  output LMB_Read_Strobe_26;
  output LMB_Write_Strobe_26;
  input LMB_Ready_26;
  input LMB_Wait_26;
  input LMB_CE_26;
  input LMB_UE_26;
  output [0:3]LMB_Byte_Enable_26;
  output [0:31]LMB_Data_Addr_27;
  input [0:31]LMB_Data_Read_27;
  output [0:31]LMB_Data_Write_27;
  output LMB_Addr_Strobe_27;
  output LMB_Read_Strobe_27;
  output LMB_Write_Strobe_27;
  input LMB_Ready_27;
  input LMB_Wait_27;
  input LMB_CE_27;
  input LMB_UE_27;
  output [0:3]LMB_Byte_Enable_27;
  output [0:31]LMB_Data_Addr_28;
  input [0:31]LMB_Data_Read_28;
  output [0:31]LMB_Data_Write_28;
  output LMB_Addr_Strobe_28;
  output LMB_Read_Strobe_28;
  output LMB_Write_Strobe_28;
  input LMB_Ready_28;
  input LMB_Wait_28;
  input LMB_CE_28;
  input LMB_UE_28;
  output [0:3]LMB_Byte_Enable_28;
  output [0:31]LMB_Data_Addr_29;
  input [0:31]LMB_Data_Read_29;
  output [0:31]LMB_Data_Write_29;
  output LMB_Addr_Strobe_29;
  output LMB_Read_Strobe_29;
  output LMB_Write_Strobe_29;
  input LMB_Ready_29;
  input LMB_Wait_29;
  input LMB_CE_29;
  input LMB_UE_29;
  output [0:3]LMB_Byte_Enable_29;
  output [0:31]LMB_Data_Addr_30;
  input [0:31]LMB_Data_Read_30;
  output [0:31]LMB_Data_Write_30;
  output LMB_Addr_Strobe_30;
  output LMB_Read_Strobe_30;
  output LMB_Write_Strobe_30;
  input LMB_Ready_30;
  input LMB_Wait_30;
  input LMB_CE_30;
  input LMB_UE_30;
  output [0:3]LMB_Byte_Enable_30;
  output [0:31]LMB_Data_Addr_31;
  input [0:31]LMB_Data_Read_31;
  output [0:31]LMB_Data_Write_31;
  output LMB_Addr_Strobe_31;
  output LMB_Read_Strobe_31;
  output LMB_Write_Strobe_31;
  input LMB_Ready_31;
  input LMB_Wait_31;
  input LMB_CE_31;
  input LMB_UE_31;
  output [0:3]LMB_Byte_Enable_31;
  output [31:0]M_AXIS_TDATA;
  output [6:0]M_AXIS_TID;
  input M_AXIS_TREADY;
  output M_AXIS_TVALID;
  output TRACE_CLK_OUT;
  input TRACE_CLK;
  output TRACE_CTL;
  output [31:0]TRACE_DATA;
  output Dbg_Disable_0;
  output Dbg_Clk_0;
  output Dbg_TDI_0;
  input Dbg_TDO_0;
  output [0:7]Dbg_Reg_En_0;
  output Dbg_Capture_0;
  output Dbg_Shift_0;
  output Dbg_Update_0;
  output Dbg_Rst_0;
  input [0:7]Dbg_Trig_In_0;
  output [0:7]Dbg_Trig_Ack_In_0;
  output [0:7]Dbg_Trig_Out_0;
  input [0:7]Dbg_Trig_Ack_Out_0;
  output Dbg_TrClk_0;
  input [0:35]Dbg_TrData_0;
  output Dbg_TrReady_0;
  input Dbg_TrValid_0;
  output [14:2]Dbg_AWADDR_0;
  output Dbg_AWVALID_0;
  input Dbg_AWREADY_0;
  output [31:0]Dbg_WDATA_0;
  output Dbg_WVALID_0;
  input Dbg_WREADY_0;
  input [1:0]Dbg_BRESP_0;
  input Dbg_BVALID_0;
  output Dbg_BREADY_0;
  output [14:2]Dbg_ARADDR_0;
  output Dbg_ARVALID_0;
  input Dbg_ARREADY_0;
  input [31:0]Dbg_RDATA_0;
  input [1:0]Dbg_RRESP_0;
  input Dbg_RVALID_0;
  output Dbg_RREADY_0;
  output Dbg_Disable_1;
  output Dbg_Clk_1;
  output Dbg_TDI_1;
  input Dbg_TDO_1;
  output [0:7]Dbg_Reg_En_1;
  output Dbg_Capture_1;
  output Dbg_Shift_1;
  output Dbg_Update_1;
  output Dbg_Rst_1;
  input [0:7]Dbg_Trig_In_1;
  output [0:7]Dbg_Trig_Ack_In_1;
  output [0:7]Dbg_Trig_Out_1;
  input [0:7]Dbg_Trig_Ack_Out_1;
  output Dbg_TrClk_1;
  input [0:35]Dbg_TrData_1;
  output Dbg_TrReady_1;
  input Dbg_TrValid_1;
  output [14:2]Dbg_AWADDR_1;
  output Dbg_AWVALID_1;
  input Dbg_AWREADY_1;
  output [31:0]Dbg_WDATA_1;
  output Dbg_WVALID_1;
  input Dbg_WREADY_1;
  input [1:0]Dbg_BRESP_1;
  input Dbg_BVALID_1;
  output Dbg_BREADY_1;
  output [14:2]Dbg_ARADDR_1;
  output Dbg_ARVALID_1;
  input Dbg_ARREADY_1;
  input [31:0]Dbg_RDATA_1;
  input [1:0]Dbg_RRESP_1;
  input Dbg_RVALID_1;
  output Dbg_RREADY_1;
  output Dbg_Disable_2;
  output Dbg_Clk_2;
  output Dbg_TDI_2;
  input Dbg_TDO_2;
  output [0:7]Dbg_Reg_En_2;
  output Dbg_Capture_2;
  output Dbg_Shift_2;
  output Dbg_Update_2;
  output Dbg_Rst_2;
  input [0:7]Dbg_Trig_In_2;
  output [0:7]Dbg_Trig_Ack_In_2;
  output [0:7]Dbg_Trig_Out_2;
  input [0:7]Dbg_Trig_Ack_Out_2;
  output Dbg_TrClk_2;
  input [0:35]Dbg_TrData_2;
  output Dbg_TrReady_2;
  input Dbg_TrValid_2;
  output [14:2]Dbg_AWADDR_2;
  output Dbg_AWVALID_2;
  input Dbg_AWREADY_2;
  output [31:0]Dbg_WDATA_2;
  output Dbg_WVALID_2;
  input Dbg_WREADY_2;
  input [1:0]Dbg_BRESP_2;
  input Dbg_BVALID_2;
  output Dbg_BREADY_2;
  output [14:2]Dbg_ARADDR_2;
  output Dbg_ARVALID_2;
  input Dbg_ARREADY_2;
  input [31:0]Dbg_RDATA_2;
  input [1:0]Dbg_RRESP_2;
  input Dbg_RVALID_2;
  output Dbg_RREADY_2;
  output Dbg_Disable_3;
  output Dbg_Clk_3;
  output Dbg_TDI_3;
  input Dbg_TDO_3;
  output [0:7]Dbg_Reg_En_3;
  output Dbg_Capture_3;
  output Dbg_Shift_3;
  output Dbg_Update_3;
  output Dbg_Rst_3;
  input [0:7]Dbg_Trig_In_3;
  output [0:7]Dbg_Trig_Ack_In_3;
  output [0:7]Dbg_Trig_Out_3;
  input [0:7]Dbg_Trig_Ack_Out_3;
  output Dbg_TrClk_3;
  input [0:35]Dbg_TrData_3;
  output Dbg_TrReady_3;
  input Dbg_TrValid_3;
  output [14:2]Dbg_AWADDR_3;
  output Dbg_AWVALID_3;
  input Dbg_AWREADY_3;
  output [31:0]Dbg_WDATA_3;
  output Dbg_WVALID_3;
  input Dbg_WREADY_3;
  input [1:0]Dbg_BRESP_3;
  input Dbg_BVALID_3;
  output Dbg_BREADY_3;
  output [14:2]Dbg_ARADDR_3;
  output Dbg_ARVALID_3;
  input Dbg_ARREADY_3;
  input [31:0]Dbg_RDATA_3;
  input [1:0]Dbg_RRESP_3;
  input Dbg_RVALID_3;
  output Dbg_RREADY_3;
  output Dbg_Disable_4;
  output Dbg_Clk_4;
  output Dbg_TDI_4;
  input Dbg_TDO_4;
  output [0:7]Dbg_Reg_En_4;
  output Dbg_Capture_4;
  output Dbg_Shift_4;
  output Dbg_Update_4;
  output Dbg_Rst_4;
  input [0:7]Dbg_Trig_In_4;
  output [0:7]Dbg_Trig_Ack_In_4;
  output [0:7]Dbg_Trig_Out_4;
  input [0:7]Dbg_Trig_Ack_Out_4;
  output Dbg_TrClk_4;
  input [0:35]Dbg_TrData_4;
  output Dbg_TrReady_4;
  input Dbg_TrValid_4;
  output [14:2]Dbg_AWADDR_4;
  output Dbg_AWVALID_4;
  input Dbg_AWREADY_4;
  output [31:0]Dbg_WDATA_4;
  output Dbg_WVALID_4;
  input Dbg_WREADY_4;
  input [1:0]Dbg_BRESP_4;
  input Dbg_BVALID_4;
  output Dbg_BREADY_4;
  output [14:2]Dbg_ARADDR_4;
  output Dbg_ARVALID_4;
  input Dbg_ARREADY_4;
  input [31:0]Dbg_RDATA_4;
  input [1:0]Dbg_RRESP_4;
  input Dbg_RVALID_4;
  output Dbg_RREADY_4;
  output Dbg_Disable_5;
  output Dbg_Clk_5;
  output Dbg_TDI_5;
  input Dbg_TDO_5;
  output [0:7]Dbg_Reg_En_5;
  output Dbg_Capture_5;
  output Dbg_Shift_5;
  output Dbg_Update_5;
  output Dbg_Rst_5;
  input [0:7]Dbg_Trig_In_5;
  output [0:7]Dbg_Trig_Ack_In_5;
  output [0:7]Dbg_Trig_Out_5;
  input [0:7]Dbg_Trig_Ack_Out_5;
  output Dbg_TrClk_5;
  input [0:35]Dbg_TrData_5;
  output Dbg_TrReady_5;
  input Dbg_TrValid_5;
  output [14:2]Dbg_AWADDR_5;
  output Dbg_AWVALID_5;
  input Dbg_AWREADY_5;
  output [31:0]Dbg_WDATA_5;
  output Dbg_WVALID_5;
  input Dbg_WREADY_5;
  input [1:0]Dbg_BRESP_5;
  input Dbg_BVALID_5;
  output Dbg_BREADY_5;
  output [14:2]Dbg_ARADDR_5;
  output Dbg_ARVALID_5;
  input Dbg_ARREADY_5;
  input [31:0]Dbg_RDATA_5;
  input [1:0]Dbg_RRESP_5;
  input Dbg_RVALID_5;
  output Dbg_RREADY_5;
  output Dbg_Disable_6;
  output Dbg_Clk_6;
  output Dbg_TDI_6;
  input Dbg_TDO_6;
  output [0:7]Dbg_Reg_En_6;
  output Dbg_Capture_6;
  output Dbg_Shift_6;
  output Dbg_Update_6;
  output Dbg_Rst_6;
  input [0:7]Dbg_Trig_In_6;
  output [0:7]Dbg_Trig_Ack_In_6;
  output [0:7]Dbg_Trig_Out_6;
  input [0:7]Dbg_Trig_Ack_Out_6;
  output Dbg_TrClk_6;
  input [0:35]Dbg_TrData_6;
  output Dbg_TrReady_6;
  input Dbg_TrValid_6;
  output [14:2]Dbg_AWADDR_6;
  output Dbg_AWVALID_6;
  input Dbg_AWREADY_6;
  output [31:0]Dbg_WDATA_6;
  output Dbg_WVALID_6;
  input Dbg_WREADY_6;
  input [1:0]Dbg_BRESP_6;
  input Dbg_BVALID_6;
  output Dbg_BREADY_6;
  output [14:2]Dbg_ARADDR_6;
  output Dbg_ARVALID_6;
  input Dbg_ARREADY_6;
  input [31:0]Dbg_RDATA_6;
  input [1:0]Dbg_RRESP_6;
  input Dbg_RVALID_6;
  output Dbg_RREADY_6;
  output Dbg_Disable_7;
  output Dbg_Clk_7;
  output Dbg_TDI_7;
  input Dbg_TDO_7;
  output [0:7]Dbg_Reg_En_7;
  output Dbg_Capture_7;
  output Dbg_Shift_7;
  output Dbg_Update_7;
  output Dbg_Rst_7;
  input [0:7]Dbg_Trig_In_7;
  output [0:7]Dbg_Trig_Ack_In_7;
  output [0:7]Dbg_Trig_Out_7;
  input [0:7]Dbg_Trig_Ack_Out_7;
  output Dbg_TrClk_7;
  input [0:35]Dbg_TrData_7;
  output Dbg_TrReady_7;
  input Dbg_TrValid_7;
  output [14:2]Dbg_AWADDR_7;
  output Dbg_AWVALID_7;
  input Dbg_AWREADY_7;
  output [31:0]Dbg_WDATA_7;
  output Dbg_WVALID_7;
  input Dbg_WREADY_7;
  input [1:0]Dbg_BRESP_7;
  input Dbg_BVALID_7;
  output Dbg_BREADY_7;
  output [14:2]Dbg_ARADDR_7;
  output Dbg_ARVALID_7;
  input Dbg_ARREADY_7;
  input [31:0]Dbg_RDATA_7;
  input [1:0]Dbg_RRESP_7;
  input Dbg_RVALID_7;
  output Dbg_RREADY_7;
  output Dbg_Disable_8;
  output Dbg_Clk_8;
  output Dbg_TDI_8;
  input Dbg_TDO_8;
  output [0:7]Dbg_Reg_En_8;
  output Dbg_Capture_8;
  output Dbg_Shift_8;
  output Dbg_Update_8;
  output Dbg_Rst_8;
  input [0:7]Dbg_Trig_In_8;
  output [0:7]Dbg_Trig_Ack_In_8;
  output [0:7]Dbg_Trig_Out_8;
  input [0:7]Dbg_Trig_Ack_Out_8;
  output Dbg_TrClk_8;
  input [0:35]Dbg_TrData_8;
  output Dbg_TrReady_8;
  input Dbg_TrValid_8;
  output [14:2]Dbg_AWADDR_8;
  output Dbg_AWVALID_8;
  input Dbg_AWREADY_8;
  output [31:0]Dbg_WDATA_8;
  output Dbg_WVALID_8;
  input Dbg_WREADY_8;
  input [1:0]Dbg_BRESP_8;
  input Dbg_BVALID_8;
  output Dbg_BREADY_8;
  output [14:2]Dbg_ARADDR_8;
  output Dbg_ARVALID_8;
  input Dbg_ARREADY_8;
  input [31:0]Dbg_RDATA_8;
  input [1:0]Dbg_RRESP_8;
  input Dbg_RVALID_8;
  output Dbg_RREADY_8;
  output Dbg_Disable_9;
  output Dbg_Clk_9;
  output Dbg_TDI_9;
  input Dbg_TDO_9;
  output [0:7]Dbg_Reg_En_9;
  output Dbg_Capture_9;
  output Dbg_Shift_9;
  output Dbg_Update_9;
  output Dbg_Rst_9;
  input [0:7]Dbg_Trig_In_9;
  output [0:7]Dbg_Trig_Ack_In_9;
  output [0:7]Dbg_Trig_Out_9;
  input [0:7]Dbg_Trig_Ack_Out_9;
  output Dbg_TrClk_9;
  input [0:35]Dbg_TrData_9;
  output Dbg_TrReady_9;
  input Dbg_TrValid_9;
  output [14:2]Dbg_AWADDR_9;
  output Dbg_AWVALID_9;
  input Dbg_AWREADY_9;
  output [31:0]Dbg_WDATA_9;
  output Dbg_WVALID_9;
  input Dbg_WREADY_9;
  input [1:0]Dbg_BRESP_9;
  input Dbg_BVALID_9;
  output Dbg_BREADY_9;
  output [14:2]Dbg_ARADDR_9;
  output Dbg_ARVALID_9;
  input Dbg_ARREADY_9;
  input [31:0]Dbg_RDATA_9;
  input [1:0]Dbg_RRESP_9;
  input Dbg_RVALID_9;
  output Dbg_RREADY_9;
  output Dbg_Disable_10;
  output Dbg_Clk_10;
  output Dbg_TDI_10;
  input Dbg_TDO_10;
  output [0:7]Dbg_Reg_En_10;
  output Dbg_Capture_10;
  output Dbg_Shift_10;
  output Dbg_Update_10;
  output Dbg_Rst_10;
  input [0:7]Dbg_Trig_In_10;
  output [0:7]Dbg_Trig_Ack_In_10;
  output [0:7]Dbg_Trig_Out_10;
  input [0:7]Dbg_Trig_Ack_Out_10;
  output Dbg_TrClk_10;
  input [0:35]Dbg_TrData_10;
  output Dbg_TrReady_10;
  input Dbg_TrValid_10;
  output [14:2]Dbg_AWADDR_10;
  output Dbg_AWVALID_10;
  input Dbg_AWREADY_10;
  output [31:0]Dbg_WDATA_10;
  output Dbg_WVALID_10;
  input Dbg_WREADY_10;
  input [1:0]Dbg_BRESP_10;
  input Dbg_BVALID_10;
  output Dbg_BREADY_10;
  output [14:2]Dbg_ARADDR_10;
  output Dbg_ARVALID_10;
  input Dbg_ARREADY_10;
  input [31:0]Dbg_RDATA_10;
  input [1:0]Dbg_RRESP_10;
  input Dbg_RVALID_10;
  output Dbg_RREADY_10;
  output Dbg_Disable_11;
  output Dbg_Clk_11;
  output Dbg_TDI_11;
  input Dbg_TDO_11;
  output [0:7]Dbg_Reg_En_11;
  output Dbg_Capture_11;
  output Dbg_Shift_11;
  output Dbg_Update_11;
  output Dbg_Rst_11;
  input [0:7]Dbg_Trig_In_11;
  output [0:7]Dbg_Trig_Ack_In_11;
  output [0:7]Dbg_Trig_Out_11;
  input [0:7]Dbg_Trig_Ack_Out_11;
  output Dbg_TrClk_11;
  input [0:35]Dbg_TrData_11;
  output Dbg_TrReady_11;
  input Dbg_TrValid_11;
  output [14:2]Dbg_AWADDR_11;
  output Dbg_AWVALID_11;
  input Dbg_AWREADY_11;
  output [31:0]Dbg_WDATA_11;
  output Dbg_WVALID_11;
  input Dbg_WREADY_11;
  input [1:0]Dbg_BRESP_11;
  input Dbg_BVALID_11;
  output Dbg_BREADY_11;
  output [14:2]Dbg_ARADDR_11;
  output Dbg_ARVALID_11;
  input Dbg_ARREADY_11;
  input [31:0]Dbg_RDATA_11;
  input [1:0]Dbg_RRESP_11;
  input Dbg_RVALID_11;
  output Dbg_RREADY_11;
  output Dbg_Disable_12;
  output Dbg_Clk_12;
  output Dbg_TDI_12;
  input Dbg_TDO_12;
  output [0:7]Dbg_Reg_En_12;
  output Dbg_Capture_12;
  output Dbg_Shift_12;
  output Dbg_Update_12;
  output Dbg_Rst_12;
  input [0:7]Dbg_Trig_In_12;
  output [0:7]Dbg_Trig_Ack_In_12;
  output [0:7]Dbg_Trig_Out_12;
  input [0:7]Dbg_Trig_Ack_Out_12;
  output Dbg_TrClk_12;
  input [0:35]Dbg_TrData_12;
  output Dbg_TrReady_12;
  input Dbg_TrValid_12;
  output [14:2]Dbg_AWADDR_12;
  output Dbg_AWVALID_12;
  input Dbg_AWREADY_12;
  output [31:0]Dbg_WDATA_12;
  output Dbg_WVALID_12;
  input Dbg_WREADY_12;
  input [1:0]Dbg_BRESP_12;
  input Dbg_BVALID_12;
  output Dbg_BREADY_12;
  output [14:2]Dbg_ARADDR_12;
  output Dbg_ARVALID_12;
  input Dbg_ARREADY_12;
  input [31:0]Dbg_RDATA_12;
  input [1:0]Dbg_RRESP_12;
  input Dbg_RVALID_12;
  output Dbg_RREADY_12;
  output Dbg_Disable_13;
  output Dbg_Clk_13;
  output Dbg_TDI_13;
  input Dbg_TDO_13;
  output [0:7]Dbg_Reg_En_13;
  output Dbg_Capture_13;
  output Dbg_Shift_13;
  output Dbg_Update_13;
  output Dbg_Rst_13;
  input [0:7]Dbg_Trig_In_13;
  output [0:7]Dbg_Trig_Ack_In_13;
  output [0:7]Dbg_Trig_Out_13;
  input [0:7]Dbg_Trig_Ack_Out_13;
  output Dbg_TrClk_13;
  input [0:35]Dbg_TrData_13;
  output Dbg_TrReady_13;
  input Dbg_TrValid_13;
  output [14:2]Dbg_AWADDR_13;
  output Dbg_AWVALID_13;
  input Dbg_AWREADY_13;
  output [31:0]Dbg_WDATA_13;
  output Dbg_WVALID_13;
  input Dbg_WREADY_13;
  input [1:0]Dbg_BRESP_13;
  input Dbg_BVALID_13;
  output Dbg_BREADY_13;
  output [14:2]Dbg_ARADDR_13;
  output Dbg_ARVALID_13;
  input Dbg_ARREADY_13;
  input [31:0]Dbg_RDATA_13;
  input [1:0]Dbg_RRESP_13;
  input Dbg_RVALID_13;
  output Dbg_RREADY_13;
  output Dbg_Disable_14;
  output Dbg_Clk_14;
  output Dbg_TDI_14;
  input Dbg_TDO_14;
  output [0:7]Dbg_Reg_En_14;
  output Dbg_Capture_14;
  output Dbg_Shift_14;
  output Dbg_Update_14;
  output Dbg_Rst_14;
  input [0:7]Dbg_Trig_In_14;
  output [0:7]Dbg_Trig_Ack_In_14;
  output [0:7]Dbg_Trig_Out_14;
  input [0:7]Dbg_Trig_Ack_Out_14;
  output Dbg_TrClk_14;
  input [0:35]Dbg_TrData_14;
  output Dbg_TrReady_14;
  input Dbg_TrValid_14;
  output [14:2]Dbg_AWADDR_14;
  output Dbg_AWVALID_14;
  input Dbg_AWREADY_14;
  output [31:0]Dbg_WDATA_14;
  output Dbg_WVALID_14;
  input Dbg_WREADY_14;
  input [1:0]Dbg_BRESP_14;
  input Dbg_BVALID_14;
  output Dbg_BREADY_14;
  output [14:2]Dbg_ARADDR_14;
  output Dbg_ARVALID_14;
  input Dbg_ARREADY_14;
  input [31:0]Dbg_RDATA_14;
  input [1:0]Dbg_RRESP_14;
  input Dbg_RVALID_14;
  output Dbg_RREADY_14;
  output Dbg_Disable_15;
  output Dbg_Clk_15;
  output Dbg_TDI_15;
  input Dbg_TDO_15;
  output [0:7]Dbg_Reg_En_15;
  output Dbg_Capture_15;
  output Dbg_Shift_15;
  output Dbg_Update_15;
  output Dbg_Rst_15;
  input [0:7]Dbg_Trig_In_15;
  output [0:7]Dbg_Trig_Ack_In_15;
  output [0:7]Dbg_Trig_Out_15;
  input [0:7]Dbg_Trig_Ack_Out_15;
  output Dbg_TrClk_15;
  input [0:35]Dbg_TrData_15;
  output Dbg_TrReady_15;
  input Dbg_TrValid_15;
  output [14:2]Dbg_AWADDR_15;
  output Dbg_AWVALID_15;
  input Dbg_AWREADY_15;
  output [31:0]Dbg_WDATA_15;
  output Dbg_WVALID_15;
  input Dbg_WREADY_15;
  input [1:0]Dbg_BRESP_15;
  input Dbg_BVALID_15;
  output Dbg_BREADY_15;
  output [14:2]Dbg_ARADDR_15;
  output Dbg_ARVALID_15;
  input Dbg_ARREADY_15;
  input [31:0]Dbg_RDATA_15;
  input [1:0]Dbg_RRESP_15;
  input Dbg_RVALID_15;
  output Dbg_RREADY_15;
  output Dbg_Disable_16;
  output Dbg_Clk_16;
  output Dbg_TDI_16;
  input Dbg_TDO_16;
  output [0:7]Dbg_Reg_En_16;
  output Dbg_Capture_16;
  output Dbg_Shift_16;
  output Dbg_Update_16;
  output Dbg_Rst_16;
  input [0:7]Dbg_Trig_In_16;
  output [0:7]Dbg_Trig_Ack_In_16;
  output [0:7]Dbg_Trig_Out_16;
  input [0:7]Dbg_Trig_Ack_Out_16;
  output Dbg_TrClk_16;
  input [0:35]Dbg_TrData_16;
  output Dbg_TrReady_16;
  input Dbg_TrValid_16;
  output [14:2]Dbg_AWADDR_16;
  output Dbg_AWVALID_16;
  input Dbg_AWREADY_16;
  output [31:0]Dbg_WDATA_16;
  output Dbg_WVALID_16;
  input Dbg_WREADY_16;
  input [1:0]Dbg_BRESP_16;
  input Dbg_BVALID_16;
  output Dbg_BREADY_16;
  output [14:2]Dbg_ARADDR_16;
  output Dbg_ARVALID_16;
  input Dbg_ARREADY_16;
  input [31:0]Dbg_RDATA_16;
  input [1:0]Dbg_RRESP_16;
  input Dbg_RVALID_16;
  output Dbg_RREADY_16;
  output Dbg_Disable_17;
  output Dbg_Clk_17;
  output Dbg_TDI_17;
  input Dbg_TDO_17;
  output [0:7]Dbg_Reg_En_17;
  output Dbg_Capture_17;
  output Dbg_Shift_17;
  output Dbg_Update_17;
  output Dbg_Rst_17;
  input [0:7]Dbg_Trig_In_17;
  output [0:7]Dbg_Trig_Ack_In_17;
  output [0:7]Dbg_Trig_Out_17;
  input [0:7]Dbg_Trig_Ack_Out_17;
  output Dbg_TrClk_17;
  input [0:35]Dbg_TrData_17;
  output Dbg_TrReady_17;
  input Dbg_TrValid_17;
  output [14:2]Dbg_AWADDR_17;
  output Dbg_AWVALID_17;
  input Dbg_AWREADY_17;
  output [31:0]Dbg_WDATA_17;
  output Dbg_WVALID_17;
  input Dbg_WREADY_17;
  input [1:0]Dbg_BRESP_17;
  input Dbg_BVALID_17;
  output Dbg_BREADY_17;
  output [14:2]Dbg_ARADDR_17;
  output Dbg_ARVALID_17;
  input Dbg_ARREADY_17;
  input [31:0]Dbg_RDATA_17;
  input [1:0]Dbg_RRESP_17;
  input Dbg_RVALID_17;
  output Dbg_RREADY_17;
  output Dbg_Disable_18;
  output Dbg_Clk_18;
  output Dbg_TDI_18;
  input Dbg_TDO_18;
  output [0:7]Dbg_Reg_En_18;
  output Dbg_Capture_18;
  output Dbg_Shift_18;
  output Dbg_Update_18;
  output Dbg_Rst_18;
  input [0:7]Dbg_Trig_In_18;
  output [0:7]Dbg_Trig_Ack_In_18;
  output [0:7]Dbg_Trig_Out_18;
  input [0:7]Dbg_Trig_Ack_Out_18;
  output Dbg_TrClk_18;
  input [0:35]Dbg_TrData_18;
  output Dbg_TrReady_18;
  input Dbg_TrValid_18;
  output [14:2]Dbg_AWADDR_18;
  output Dbg_AWVALID_18;
  input Dbg_AWREADY_18;
  output [31:0]Dbg_WDATA_18;
  output Dbg_WVALID_18;
  input Dbg_WREADY_18;
  input [1:0]Dbg_BRESP_18;
  input Dbg_BVALID_18;
  output Dbg_BREADY_18;
  output [14:2]Dbg_ARADDR_18;
  output Dbg_ARVALID_18;
  input Dbg_ARREADY_18;
  input [31:0]Dbg_RDATA_18;
  input [1:0]Dbg_RRESP_18;
  input Dbg_RVALID_18;
  output Dbg_RREADY_18;
  output Dbg_Disable_19;
  output Dbg_Clk_19;
  output Dbg_TDI_19;
  input Dbg_TDO_19;
  output [0:7]Dbg_Reg_En_19;
  output Dbg_Capture_19;
  output Dbg_Shift_19;
  output Dbg_Update_19;
  output Dbg_Rst_19;
  input [0:7]Dbg_Trig_In_19;
  output [0:7]Dbg_Trig_Ack_In_19;
  output [0:7]Dbg_Trig_Out_19;
  input [0:7]Dbg_Trig_Ack_Out_19;
  output Dbg_TrClk_19;
  input [0:35]Dbg_TrData_19;
  output Dbg_TrReady_19;
  input Dbg_TrValid_19;
  output [14:2]Dbg_AWADDR_19;
  output Dbg_AWVALID_19;
  input Dbg_AWREADY_19;
  output [31:0]Dbg_WDATA_19;
  output Dbg_WVALID_19;
  input Dbg_WREADY_19;
  input [1:0]Dbg_BRESP_19;
  input Dbg_BVALID_19;
  output Dbg_BREADY_19;
  output [14:2]Dbg_ARADDR_19;
  output Dbg_ARVALID_19;
  input Dbg_ARREADY_19;
  input [31:0]Dbg_RDATA_19;
  input [1:0]Dbg_RRESP_19;
  input Dbg_RVALID_19;
  output Dbg_RREADY_19;
  output Dbg_Disable_20;
  output Dbg_Clk_20;
  output Dbg_TDI_20;
  input Dbg_TDO_20;
  output [0:7]Dbg_Reg_En_20;
  output Dbg_Capture_20;
  output Dbg_Shift_20;
  output Dbg_Update_20;
  output Dbg_Rst_20;
  input [0:7]Dbg_Trig_In_20;
  output [0:7]Dbg_Trig_Ack_In_20;
  output [0:7]Dbg_Trig_Out_20;
  input [0:7]Dbg_Trig_Ack_Out_20;
  output Dbg_TrClk_20;
  input [0:35]Dbg_TrData_20;
  output Dbg_TrReady_20;
  input Dbg_TrValid_20;
  output [14:2]Dbg_AWADDR_20;
  output Dbg_AWVALID_20;
  input Dbg_AWREADY_20;
  output [31:0]Dbg_WDATA_20;
  output Dbg_WVALID_20;
  input Dbg_WREADY_20;
  input [1:0]Dbg_BRESP_20;
  input Dbg_BVALID_20;
  output Dbg_BREADY_20;
  output [14:2]Dbg_ARADDR_20;
  output Dbg_ARVALID_20;
  input Dbg_ARREADY_20;
  input [31:0]Dbg_RDATA_20;
  input [1:0]Dbg_RRESP_20;
  input Dbg_RVALID_20;
  output Dbg_RREADY_20;
  output Dbg_Disable_21;
  output Dbg_Clk_21;
  output Dbg_TDI_21;
  input Dbg_TDO_21;
  output [0:7]Dbg_Reg_En_21;
  output Dbg_Capture_21;
  output Dbg_Shift_21;
  output Dbg_Update_21;
  output Dbg_Rst_21;
  input [0:7]Dbg_Trig_In_21;
  output [0:7]Dbg_Trig_Ack_In_21;
  output [0:7]Dbg_Trig_Out_21;
  input [0:7]Dbg_Trig_Ack_Out_21;
  output Dbg_TrClk_21;
  input [0:35]Dbg_TrData_21;
  output Dbg_TrReady_21;
  input Dbg_TrValid_21;
  output [14:2]Dbg_AWADDR_21;
  output Dbg_AWVALID_21;
  input Dbg_AWREADY_21;
  output [31:0]Dbg_WDATA_21;
  output Dbg_WVALID_21;
  input Dbg_WREADY_21;
  input [1:0]Dbg_BRESP_21;
  input Dbg_BVALID_21;
  output Dbg_BREADY_21;
  output [14:2]Dbg_ARADDR_21;
  output Dbg_ARVALID_21;
  input Dbg_ARREADY_21;
  input [31:0]Dbg_RDATA_21;
  input [1:0]Dbg_RRESP_21;
  input Dbg_RVALID_21;
  output Dbg_RREADY_21;
  output Dbg_Disable_22;
  output Dbg_Clk_22;
  output Dbg_TDI_22;
  input Dbg_TDO_22;
  output [0:7]Dbg_Reg_En_22;
  output Dbg_Capture_22;
  output Dbg_Shift_22;
  output Dbg_Update_22;
  output Dbg_Rst_22;
  input [0:7]Dbg_Trig_In_22;
  output [0:7]Dbg_Trig_Ack_In_22;
  output [0:7]Dbg_Trig_Out_22;
  input [0:7]Dbg_Trig_Ack_Out_22;
  output Dbg_TrClk_22;
  input [0:35]Dbg_TrData_22;
  output Dbg_TrReady_22;
  input Dbg_TrValid_22;
  output [14:2]Dbg_AWADDR_22;
  output Dbg_AWVALID_22;
  input Dbg_AWREADY_22;
  output [31:0]Dbg_WDATA_22;
  output Dbg_WVALID_22;
  input Dbg_WREADY_22;
  input [1:0]Dbg_BRESP_22;
  input Dbg_BVALID_22;
  output Dbg_BREADY_22;
  output [14:2]Dbg_ARADDR_22;
  output Dbg_ARVALID_22;
  input Dbg_ARREADY_22;
  input [31:0]Dbg_RDATA_22;
  input [1:0]Dbg_RRESP_22;
  input Dbg_RVALID_22;
  output Dbg_RREADY_22;
  output Dbg_Disable_23;
  output Dbg_Clk_23;
  output Dbg_TDI_23;
  input Dbg_TDO_23;
  output [0:7]Dbg_Reg_En_23;
  output Dbg_Capture_23;
  output Dbg_Shift_23;
  output Dbg_Update_23;
  output Dbg_Rst_23;
  input [0:7]Dbg_Trig_In_23;
  output [0:7]Dbg_Trig_Ack_In_23;
  output [0:7]Dbg_Trig_Out_23;
  input [0:7]Dbg_Trig_Ack_Out_23;
  output Dbg_TrClk_23;
  input [0:35]Dbg_TrData_23;
  output Dbg_TrReady_23;
  input Dbg_TrValid_23;
  output [14:2]Dbg_AWADDR_23;
  output Dbg_AWVALID_23;
  input Dbg_AWREADY_23;
  output [31:0]Dbg_WDATA_23;
  output Dbg_WVALID_23;
  input Dbg_WREADY_23;
  input [1:0]Dbg_BRESP_23;
  input Dbg_BVALID_23;
  output Dbg_BREADY_23;
  output [14:2]Dbg_ARADDR_23;
  output Dbg_ARVALID_23;
  input Dbg_ARREADY_23;
  input [31:0]Dbg_RDATA_23;
  input [1:0]Dbg_RRESP_23;
  input Dbg_RVALID_23;
  output Dbg_RREADY_23;
  output Dbg_Disable_24;
  output Dbg_Clk_24;
  output Dbg_TDI_24;
  input Dbg_TDO_24;
  output [0:7]Dbg_Reg_En_24;
  output Dbg_Capture_24;
  output Dbg_Shift_24;
  output Dbg_Update_24;
  output Dbg_Rst_24;
  input [0:7]Dbg_Trig_In_24;
  output [0:7]Dbg_Trig_Ack_In_24;
  output [0:7]Dbg_Trig_Out_24;
  input [0:7]Dbg_Trig_Ack_Out_24;
  output Dbg_TrClk_24;
  input [0:35]Dbg_TrData_24;
  output Dbg_TrReady_24;
  input Dbg_TrValid_24;
  output [14:2]Dbg_AWADDR_24;
  output Dbg_AWVALID_24;
  input Dbg_AWREADY_24;
  output [31:0]Dbg_WDATA_24;
  output Dbg_WVALID_24;
  input Dbg_WREADY_24;
  input [1:0]Dbg_BRESP_24;
  input Dbg_BVALID_24;
  output Dbg_BREADY_24;
  output [14:2]Dbg_ARADDR_24;
  output Dbg_ARVALID_24;
  input Dbg_ARREADY_24;
  input [31:0]Dbg_RDATA_24;
  input [1:0]Dbg_RRESP_24;
  input Dbg_RVALID_24;
  output Dbg_RREADY_24;
  output Dbg_Disable_25;
  output Dbg_Clk_25;
  output Dbg_TDI_25;
  input Dbg_TDO_25;
  output [0:7]Dbg_Reg_En_25;
  output Dbg_Capture_25;
  output Dbg_Shift_25;
  output Dbg_Update_25;
  output Dbg_Rst_25;
  input [0:7]Dbg_Trig_In_25;
  output [0:7]Dbg_Trig_Ack_In_25;
  output [0:7]Dbg_Trig_Out_25;
  input [0:7]Dbg_Trig_Ack_Out_25;
  output Dbg_TrClk_25;
  input [0:35]Dbg_TrData_25;
  output Dbg_TrReady_25;
  input Dbg_TrValid_25;
  output [14:2]Dbg_AWADDR_25;
  output Dbg_AWVALID_25;
  input Dbg_AWREADY_25;
  output [31:0]Dbg_WDATA_25;
  output Dbg_WVALID_25;
  input Dbg_WREADY_25;
  input [1:0]Dbg_BRESP_25;
  input Dbg_BVALID_25;
  output Dbg_BREADY_25;
  output [14:2]Dbg_ARADDR_25;
  output Dbg_ARVALID_25;
  input Dbg_ARREADY_25;
  input [31:0]Dbg_RDATA_25;
  input [1:0]Dbg_RRESP_25;
  input Dbg_RVALID_25;
  output Dbg_RREADY_25;
  output Dbg_Disable_26;
  output Dbg_Clk_26;
  output Dbg_TDI_26;
  input Dbg_TDO_26;
  output [0:7]Dbg_Reg_En_26;
  output Dbg_Capture_26;
  output Dbg_Shift_26;
  output Dbg_Update_26;
  output Dbg_Rst_26;
  input [0:7]Dbg_Trig_In_26;
  output [0:7]Dbg_Trig_Ack_In_26;
  output [0:7]Dbg_Trig_Out_26;
  input [0:7]Dbg_Trig_Ack_Out_26;
  output Dbg_TrClk_26;
  input [0:35]Dbg_TrData_26;
  output Dbg_TrReady_26;
  input Dbg_TrValid_26;
  output [14:2]Dbg_AWADDR_26;
  output Dbg_AWVALID_26;
  input Dbg_AWREADY_26;
  output [31:0]Dbg_WDATA_26;
  output Dbg_WVALID_26;
  input Dbg_WREADY_26;
  input [1:0]Dbg_BRESP_26;
  input Dbg_BVALID_26;
  output Dbg_BREADY_26;
  output [14:2]Dbg_ARADDR_26;
  output Dbg_ARVALID_26;
  input Dbg_ARREADY_26;
  input [31:0]Dbg_RDATA_26;
  input [1:0]Dbg_RRESP_26;
  input Dbg_RVALID_26;
  output Dbg_RREADY_26;
  output Dbg_Disable_27;
  output Dbg_Clk_27;
  output Dbg_TDI_27;
  input Dbg_TDO_27;
  output [0:7]Dbg_Reg_En_27;
  output Dbg_Capture_27;
  output Dbg_Shift_27;
  output Dbg_Update_27;
  output Dbg_Rst_27;
  input [0:7]Dbg_Trig_In_27;
  output [0:7]Dbg_Trig_Ack_In_27;
  output [0:7]Dbg_Trig_Out_27;
  input [0:7]Dbg_Trig_Ack_Out_27;
  output Dbg_TrClk_27;
  input [0:35]Dbg_TrData_27;
  output Dbg_TrReady_27;
  input Dbg_TrValid_27;
  output [14:2]Dbg_AWADDR_27;
  output Dbg_AWVALID_27;
  input Dbg_AWREADY_27;
  output [31:0]Dbg_WDATA_27;
  output Dbg_WVALID_27;
  input Dbg_WREADY_27;
  input [1:0]Dbg_BRESP_27;
  input Dbg_BVALID_27;
  output Dbg_BREADY_27;
  output [14:2]Dbg_ARADDR_27;
  output Dbg_ARVALID_27;
  input Dbg_ARREADY_27;
  input [31:0]Dbg_RDATA_27;
  input [1:0]Dbg_RRESP_27;
  input Dbg_RVALID_27;
  output Dbg_RREADY_27;
  output Dbg_Disable_28;
  output Dbg_Clk_28;
  output Dbg_TDI_28;
  input Dbg_TDO_28;
  output [0:7]Dbg_Reg_En_28;
  output Dbg_Capture_28;
  output Dbg_Shift_28;
  output Dbg_Update_28;
  output Dbg_Rst_28;
  input [0:7]Dbg_Trig_In_28;
  output [0:7]Dbg_Trig_Ack_In_28;
  output [0:7]Dbg_Trig_Out_28;
  input [0:7]Dbg_Trig_Ack_Out_28;
  output Dbg_TrClk_28;
  input [0:35]Dbg_TrData_28;
  output Dbg_TrReady_28;
  input Dbg_TrValid_28;
  output [14:2]Dbg_AWADDR_28;
  output Dbg_AWVALID_28;
  input Dbg_AWREADY_28;
  output [31:0]Dbg_WDATA_28;
  output Dbg_WVALID_28;
  input Dbg_WREADY_28;
  input [1:0]Dbg_BRESP_28;
  input Dbg_BVALID_28;
  output Dbg_BREADY_28;
  output [14:2]Dbg_ARADDR_28;
  output Dbg_ARVALID_28;
  input Dbg_ARREADY_28;
  input [31:0]Dbg_RDATA_28;
  input [1:0]Dbg_RRESP_28;
  input Dbg_RVALID_28;
  output Dbg_RREADY_28;
  output Dbg_Disable_29;
  output Dbg_Clk_29;
  output Dbg_TDI_29;
  input Dbg_TDO_29;
  output [0:7]Dbg_Reg_En_29;
  output Dbg_Capture_29;
  output Dbg_Shift_29;
  output Dbg_Update_29;
  output Dbg_Rst_29;
  input [0:7]Dbg_Trig_In_29;
  output [0:7]Dbg_Trig_Ack_In_29;
  output [0:7]Dbg_Trig_Out_29;
  input [0:7]Dbg_Trig_Ack_Out_29;
  output Dbg_TrClk_29;
  input [0:35]Dbg_TrData_29;
  output Dbg_TrReady_29;
  input Dbg_TrValid_29;
  output [14:2]Dbg_AWADDR_29;
  output Dbg_AWVALID_29;
  input Dbg_AWREADY_29;
  output [31:0]Dbg_WDATA_29;
  output Dbg_WVALID_29;
  input Dbg_WREADY_29;
  input [1:0]Dbg_BRESP_29;
  input Dbg_BVALID_29;
  output Dbg_BREADY_29;
  output [14:2]Dbg_ARADDR_29;
  output Dbg_ARVALID_29;
  input Dbg_ARREADY_29;
  input [31:0]Dbg_RDATA_29;
  input [1:0]Dbg_RRESP_29;
  input Dbg_RVALID_29;
  output Dbg_RREADY_29;
  output Dbg_Disable_30;
  output Dbg_Clk_30;
  output Dbg_TDI_30;
  input Dbg_TDO_30;
  output [0:7]Dbg_Reg_En_30;
  output Dbg_Capture_30;
  output Dbg_Shift_30;
  output Dbg_Update_30;
  output Dbg_Rst_30;
  input [0:7]Dbg_Trig_In_30;
  output [0:7]Dbg_Trig_Ack_In_30;
  output [0:7]Dbg_Trig_Out_30;
  input [0:7]Dbg_Trig_Ack_Out_30;
  output Dbg_TrClk_30;
  input [0:35]Dbg_TrData_30;
  output Dbg_TrReady_30;
  input Dbg_TrValid_30;
  output [14:2]Dbg_AWADDR_30;
  output Dbg_AWVALID_30;
  input Dbg_AWREADY_30;
  output [31:0]Dbg_WDATA_30;
  output Dbg_WVALID_30;
  input Dbg_WREADY_30;
  input [1:0]Dbg_BRESP_30;
  input Dbg_BVALID_30;
  output Dbg_BREADY_30;
  output [14:2]Dbg_ARADDR_30;
  output Dbg_ARVALID_30;
  input Dbg_ARREADY_30;
  input [31:0]Dbg_RDATA_30;
  input [1:0]Dbg_RRESP_30;
  input Dbg_RVALID_30;
  output Dbg_RREADY_30;
  output Dbg_Disable_31;
  output Dbg_Clk_31;
  output Dbg_TDI_31;
  input Dbg_TDO_31;
  output [0:7]Dbg_Reg_En_31;
  output Dbg_Capture_31;
  output Dbg_Shift_31;
  output Dbg_Update_31;
  output Dbg_Rst_31;
  input [0:7]Dbg_Trig_In_31;
  output [0:7]Dbg_Trig_Ack_In_31;
  output [0:7]Dbg_Trig_Out_31;
  input [0:7]Dbg_Trig_Ack_Out_31;
  output Dbg_TrClk_31;
  input [0:35]Dbg_TrData_31;
  output Dbg_TrReady_31;
  input Dbg_TrValid_31;
  output [14:2]Dbg_AWADDR_31;
  output Dbg_AWVALID_31;
  input Dbg_AWREADY_31;
  output [31:0]Dbg_WDATA_31;
  output Dbg_WVALID_31;
  input Dbg_WREADY_31;
  input [1:0]Dbg_BRESP_31;
  input Dbg_BVALID_31;
  output Dbg_BREADY_31;
  output [14:2]Dbg_ARADDR_31;
  output Dbg_ARVALID_31;
  input Dbg_ARREADY_31;
  input [31:0]Dbg_RDATA_31;
  input [1:0]Dbg_RRESP_31;
  input Dbg_RVALID_31;
  output Dbg_RREADY_31;
  input bscan_ext_tdi;
  input bscan_ext_reset;
  input bscan_ext_shift;
  input bscan_ext_update;
  input bscan_ext_capture;
  input bscan_ext_sel;
  input bscan_ext_drck;
  output bscan_ext_tdo;
  input bscan_ext_tck;
  input bscan_ext_bscanid_en;
  output Ext_JTAG_DRCK;
  output Ext_JTAG_RESET;
  output Ext_JTAG_SEL;
  output Ext_JTAG_CAPTURE;
  output Ext_JTAG_SHIFT;
  output Ext_JTAG_UPDATE;
  output Ext_JTAG_TDI;
  input Ext_JTAG_TDO;

  wire DRCK;
  wire Dbg_Capture_0;
  wire [0:7]Dbg_Reg_En_0;
  wire Dbg_Rst_0;
  wire Dbg_Shift_0;
  wire Dbg_TDO_0;
  wire Debug_SYS_Rst;
  wire \^Ext_JTAG_DRCK ;
  wire \^Ext_JTAG_SHIFT ;
  wire \^Ext_JTAG_TDI ;
  wire \^Ext_JTAG_UPDATE ;
  wire \I_SLAVE_ATTACHMENT/I_DECODER/Bus_RNW_reg ;
  wire \I_SLAVE_ATTACHMENT/I_DECODER/GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  wire \I_SLAVE_ATTACHMENT/I_DECODER/GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  wire \JTAG_CONTROL_I/FIFO_Write ;
  wire [5:5]\JTAG_CONTROL_I/Use_Serial_Unified_Completion.count_reg__0 ;
  wire \JTAG_CONTROL_I/fifo_Data_Present ;
  wire \JTAG_CONTROL_I/p_0_in32_in ;
  wire \JTAG_CONTROL_I/p_35_out__0 ;
  wire \JTAG_CONTROL_I/p_58_out__0 ;
  wire \JTAG_CONTROL_I/sel ;
  wire MDM_Core_I1_n_0;
  wire MDM_Core_I1_n_12;
  wire MDM_Core_I1_n_34;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire SEL;
  wire S_AXI_ACLK;
  wire [3:0]S_AXI_ARADDR;
  wire S_AXI_ARESETN;
  wire S_AXI_ARREADY;
  wire S_AXI_ARVALID;
  wire S_AXI_AWVALID;
  wire S_AXI_BVALID;
  wire [31:0]S_AXI_RDATA;
  wire S_AXI_RVALID;
  wire [31:0]S_AXI_WDATA;
  wire S_AXI_WREADY;
  wire S_AXI_WVALID;
  wire \Use_AXI_IPIF.AXI_LITE_IPIF_I_n_15 ;
  wire \Use_E2.BSCAN_I_n_10 ;
  wire \Use_E2.BSCAN_I_n_11 ;
  wire \Use_E2.BSCAN_I_n_14 ;
  wire [3:3]bus2ip_rdce;
  wire enable_interrupts;
  wire [0:0]p_0_in;
  wire [0:0]p_0_in__0;
  wire reset_RX_FIFO;
  wire reset_TX_FIFO;
  wire rx_Data_Present;
  wire sel_n_reset3_out;
  wire shift_n_reset1_out;
  wire tdo;
  wire tx_Buffer_Full;
  wire NLW_MDM_Core_I1_Dbg_Disable_0_UNCONNECTED;
  wire NLW_MDM_Core_I1_Ext_BRK_UNCONNECTED;
  wire NLW_MDM_Core_I1_Ext_JTAG_SEL_UNCONNECTED;
  wire NLW_MDM_Core_I1_Ext_JTAG_TDO_UNCONNECTED;
  wire NLW_MDM_Core_I1_Ext_NM_BRK_UNCONNECTED;
  wire NLW_MDM_Core_I1_Interrupt_UNCONNECTED;
  wire NLW_MDM_Core_I1_Scan_En_UNCONNECTED;
  wire NLW_MDM_Core_I1_Scan_Reset_UNCONNECTED;
  wire NLW_MDM_Core_I1_Scan_Reset_Sel_UNCONNECTED;
  wire NLW_MDM_Core_I1_clear_Ext_BRK_UNCONNECTED;
  wire [0:0]NLW_MDM_Core_I1_bus2ip_wrce_UNCONNECTED;
  wire \NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_S_AXI_BREADY_UNCONNECTED ;
  wire \NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_S_AXI_RREADY_UNCONNECTED ;
  wire \NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_clear_Ext_BRK_UNCONNECTED ;
  wire [1:0]\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_S_AXI_AWADDR_UNCONNECTED ;
  wire [0:0]\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_S_AXI_BRESP_UNCONNECTED ;
  wire [0:0]\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_S_AXI_RRESP_UNCONNECTED ;
  wire [2:2]\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_S_AXI_WDATA_UNCONNECTED ;
  wire [0:0]\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_bus2ip_wrce_UNCONNECTED ;
  wire \NLW_Use_E2.BSCAN_I_Ext_JTAG_RESET_UNCONNECTED ;
  wire \NLW_Use_E2.BSCAN_I_Scan_En_UNCONNECTED ;
  wire \NLW_Use_E2.BSCAN_I_Scan_Reset_UNCONNECTED ;
  wire \NLW_Use_E2.BSCAN_I_Scan_Reset_Sel_UNCONNECTED ;

  assign Dbg_Clk_0 = \^Ext_JTAG_DRCK ;
  assign Dbg_TDI_0 = \^Ext_JTAG_TDI ;
  assign Dbg_Update_0 = \^Ext_JTAG_UPDATE ;
  assign S_AXI_AWREADY = S_AXI_WREADY;
  cpu_MDM_Core MDM_Core_I1
       (.\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N (MDM_Core_I1_n_12),
        .AR(sel_n_reset3_out),
        .Bus_RNW_reg(\I_SLAVE_ATTACHMENT/I_DECODER/Bus_RNW_reg ),
        .CLK(\^Ext_JTAG_UPDATE ),
        .D(p_0_in),
        .Dbg_Disable_0(NLW_MDM_Core_I1_Dbg_Disable_0_UNCONNECTED),
        .Dbg_Reg_En_0(Dbg_Reg_En_0),
        .Dbg_Rst_0(Dbg_Rst_0),
        .Dbg_TDO_0(Dbg_TDO_0),
        .Debug_SYS_Rst(Debug_SYS_Rst),
        .E(Dbg_Shift_0),
        .Ext_BRK(NLW_MDM_Core_I1_Ext_BRK_UNCONNECTED),
        .Ext_JTAG_SEL(NLW_MDM_Core_I1_Ext_JTAG_SEL_UNCONNECTED),
        .Ext_JTAG_TDI(\^Ext_JTAG_TDI ),
        .Ext_JTAG_TDO(NLW_MDM_Core_I1_Ext_JTAG_TDO_UNCONNECTED),
        .Ext_NM_BRK(NLW_MDM_Core_I1_Ext_NM_BRK_UNCONNECTED),
        .FIFO_Write(\JTAG_CONTROL_I/FIFO_Write ),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg (\I_SLAVE_ATTACHMENT/I_DECODER/GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg (\I_SLAVE_ATTACHMENT/I_DECODER/GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .Interrupt(NLW_MDM_Core_I1_Interrupt_UNCONNECTED),
        .Q(MDM_Core_I1_n_0),
        .RX_Buffer_Full(RX_Buffer_Full),
        .RX_Data(RX_Data),
        .SEL(SEL),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_ARESETN(S_AXI_ARESETN),
        .S_AXI_WDATA(S_AXI_WDATA[7:0]),
        .Scan_En(NLW_MDM_Core_I1_Scan_En_UNCONNECTED),
        .Scan_Reset(NLW_MDM_Core_I1_Scan_Reset_UNCONNECTED),
        .Scan_Reset_Sel(NLW_MDM_Core_I1_Scan_Reset_Sel_UNCONNECTED),
        .\Use_Serial_Unified_Completion.completion_status_reg[10] (\Use_E2.BSCAN_I_n_10 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[15] (\Use_E2.BSCAN_I_n_14 ),
        .\Use_Serial_Unified_Completion.count_reg[5] (\JTAG_CONTROL_I/Use_Serial_Unified_Completion.count_reg__0 ),
        .\Use_Serial_Unified_Completion.count_reg[5]_0 (\JTAG_CONTROL_I/sel ),
        .\Use_Serial_Unified_Completion.sample_1_reg[15] (MDM_Core_I1_n_34),
        .\Use_UART.fifo_Din_reg[7] (\^Ext_JTAG_SHIFT ),
        .\Use_UART.tdo_reg_reg[7] (\Use_E2.BSCAN_I_n_11 ),
        .\Use_Uart.enable_interrupts_reg_0 (\Use_AXI_IPIF.AXI_LITE_IPIF_I_n_15 ),
        .\Using_FPGA.Native (\^Ext_JTAG_DRCK ),
        .bus2ip_rdce(bus2ip_rdce),
        .bus2ip_wrce(NLW_MDM_Core_I1_bus2ip_wrce_UNCONNECTED[0]),
        .clear_Ext_BRK(NLW_MDM_Core_I1_clear_Ext_BRK_UNCONNECTED),
        .enable_interrupts(enable_interrupts),
        .fifo_Data_Present(\JTAG_CONTROL_I/fifo_Data_Present ),
        .out(\JTAG_CONTROL_I/p_0_in32_in ),
        .p_35_out__0(\JTAG_CONTROL_I/p_35_out__0 ),
        .p_58_out__0(\JTAG_CONTROL_I/p_58_out__0 ),
        .reset_RX_FIFO(reset_RX_FIFO),
        .reset_TX_FIFO(reset_TX_FIFO),
        .rx_Data_Present(rx_Data_Present),
        .sel_n_reg(Dbg_Capture_0),
        .\shift_Count_reg[0] (p_0_in__0),
        .shift_n_reset1_out(shift_n_reset1_out),
        .tdo(tdo),
        .tx_Buffer_Full(tx_Buffer_Full));
  cpu_MB_BUFG \No_Dbg_Reg_Access.BUFG_DRCK 
       (.DRCK(DRCK),
        .Ext_JTAG_DRCK(\^Ext_JTAG_DRCK ));
  cpu_axi_lite_ipif \Use_AXI_IPIF.AXI_LITE_IPIF_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] (\Use_AXI_IPIF.AXI_LITE_IPIF_I_n_15 ),
        .Bus_RNW_reg(\I_SLAVE_ATTACHMENT/I_DECODER/Bus_RNW_reg ),
        .FIFO_Write(\JTAG_CONTROL_I/FIFO_Write ),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg (\I_SLAVE_ATTACHMENT/I_DECODER/GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg (\I_SLAVE_ATTACHMENT/I_DECODER/GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] (S_AXI_WREADY),
        .\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] (S_AXI_ARREADY),
        .RX_Buffer_Full(RX_Buffer_Full),
        .RX_Data(RX_Data),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_ARADDR(S_AXI_ARADDR[3:2]),
        .S_AXI_ARESETN(S_AXI_ARESETN),
        .S_AXI_ARVALID(S_AXI_ARVALID),
        .S_AXI_AWADDR(\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_S_AXI_AWADDR_UNCONNECTED [1:0]),
        .S_AXI_AWVALID(S_AXI_AWVALID),
        .S_AXI_BREADY(\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_S_AXI_BREADY_UNCONNECTED ),
        .S_AXI_BRESP(\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_S_AXI_BRESP_UNCONNECTED [0]),
        .S_AXI_BVALID(S_AXI_BVALID),
        .S_AXI_RDATA(S_AXI_RDATA[7:0]),
        .S_AXI_RREADY(\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_S_AXI_RREADY_UNCONNECTED ),
        .S_AXI_RRESP(\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_S_AXI_RRESP_UNCONNECTED [0]),
        .S_AXI_RVALID(S_AXI_RVALID),
        .S_AXI_WDATA({S_AXI_WDATA[4],\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_S_AXI_WDATA_UNCONNECTED [2],S_AXI_WDATA[1:0]}),
        .S_AXI_WVALID(S_AXI_WVALID),
        .bus2ip_rdce(bus2ip_rdce),
        .bus2ip_wrce(\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_bus2ip_wrce_UNCONNECTED [0]),
        .clear_Ext_BRK(\NLW_Use_AXI_IPIF.AXI_LITE_IPIF_I_clear_Ext_BRK_UNCONNECTED ),
        .enable_interrupts(enable_interrupts),
        .fifo_Data_Present(\JTAG_CONTROL_I/fifo_Data_Present ),
        .out(\JTAG_CONTROL_I/p_0_in32_in ),
        .reset_RX_FIFO(reset_RX_FIFO),
        .reset_TX_FIFO(reset_TX_FIFO),
        .rst_reg(MDM_Core_I1_n_12),
        .rx_Data_Present(rx_Data_Present),
        .tx_Buffer_Full(tx_Buffer_Full));
  cpu_MB_BSCANE2 \Use_E2.BSCAN_I 
       (.AR(sel_n_reset3_out),
        .D(p_0_in),
        .DRCK(DRCK),
        .Ext_JTAG_RESET(\NLW_Use_E2.BSCAN_I_Ext_JTAG_RESET_UNCONNECTED ),
        .Ext_JTAG_TDI(\^Ext_JTAG_TDI ),
        .Ext_JTAG_UPDATE(\^Ext_JTAG_UPDATE ),
        .Q(MDM_Core_I1_n_0),
        .SEL(SEL),
        .Scan_En(\NLW_Use_E2.BSCAN_I_Scan_En_UNCONNECTED ),
        .Scan_Reset(\NLW_Use_E2.BSCAN_I_Scan_Reset_UNCONNECTED ),
        .Scan_Reset_Sel(\NLW_Use_E2.BSCAN_I_Scan_Reset_Sel_UNCONNECTED ),
        .\Use_BSCAN.PORT_Selector_reg[0] (Dbg_Capture_0),
        .\Use_BSCAN.PORT_Selector_reg[0]_0 (\^Ext_JTAG_SHIFT ),
        .\Use_BSCAN.command_reg[5] (\JTAG_CONTROL_I/sel ),
        .\Use_E2.BSCANE2_I_0 (\Use_E2.BSCAN_I_n_11 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[15] (MDM_Core_I1_n_34),
        .\Use_Serial_Unified_Completion.count_reg[5] (\JTAG_CONTROL_I/Use_Serial_Unified_Completion.count_reg__0 ),
        .\Use_Serial_Unified_Completion.sample_1_reg[15] (\Use_E2.BSCAN_I_n_14 ),
        .\Using_FPGA.Native (\Use_E2.BSCAN_I_n_10 ),
        .p_35_out__0(\JTAG_CONTROL_I/p_35_out__0 ),
        .p_58_out__0(\JTAG_CONTROL_I/p_58_out__0 ),
        .\shift_Count_reg[0] (p_0_in__0),
        .shift_n_reset1_out(shift_n_reset1_out),
        .tdo(tdo));
endmodule

(* ORIG_REF_NAME = "MDM_Core" *) 
module cpu_MDM_Core
   (Q,
    rx_Data_Present,
    RX_Data,
    fifo_Data_Present,
    out,
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ,
    Ext_NM_BRK,
    Debug_SYS_Rst,
    Dbg_Rst_0,
    Dbg_Disable_0,
    Ext_BRK,
    enable_interrupts,
    Dbg_Reg_En_0,
    p_35_out__0,
    p_58_out__0,
    E,
    Ext_JTAG_SEL,
    tdo,
    tx_Buffer_Full,
    RX_Buffer_Full,
    \Use_Serial_Unified_Completion.sample_1_reg[15] ,
    \Use_Serial_Unified_Completion.count_reg[5] ,
    Interrupt,
    CLK,
    \Using_FPGA.Native ,
    S_AXI_ACLK,
    S_AXI_WDATA,
    bus2ip_wrce,
    reset_RX_FIFO,
    reset_TX_FIFO,
    sel_n_reg,
    clear_Ext_BRK,
    \Use_Uart.enable_interrupts_reg_0 ,
    shift_n_reset1_out,
    Scan_En,
    Scan_Reset,
    Scan_Reset_Sel,
    \Use_UART.fifo_Din_reg[7] ,
    SEL,
    Ext_JTAG_TDO,
    Dbg_TDO_0,
    FIFO_Write,
    Bus_RNW_reg,
    \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ,
    bus2ip_rdce,
    S_AXI_ARESETN,
    D,
    \shift_Count_reg[0] ,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ,
    Ext_JTAG_TDI,
    \Use_UART.tdo_reg_reg[7] ,
    \Use_Serial_Unified_Completion.completion_status_reg[10] ,
    \Use_Serial_Unified_Completion.completion_status_reg[15] ,
    AR,
    \Use_Serial_Unified_Completion.count_reg[5]_0 );
  output [0:0]Q;
  output rx_Data_Present;
  output [0:7]RX_Data;
  output fifo_Data_Present;
  output out;
  output \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  output Ext_NM_BRK;
  output Debug_SYS_Rst;
  output Dbg_Rst_0;
  output Dbg_Disable_0;
  output Ext_BRK;
  output enable_interrupts;
  output [0:7]Dbg_Reg_En_0;
  output p_35_out__0;
  output p_58_out__0;
  output [0:0]E;
  output Ext_JTAG_SEL;
  output tdo;
  output tx_Buffer_Full;
  output RX_Buffer_Full;
  output [0:0]\Use_Serial_Unified_Completion.sample_1_reg[15] ;
  output [0:0]\Use_Serial_Unified_Completion.count_reg[5] ;
  output Interrupt;
  input CLK;
  input \Using_FPGA.Native ;
  input S_AXI_ACLK;
  input [7:0]S_AXI_WDATA;
  input [0:0]bus2ip_wrce;
  input reset_RX_FIFO;
  input reset_TX_FIFO;
  input sel_n_reg;
  input clear_Ext_BRK;
  input \Use_Uart.enable_interrupts_reg_0 ;
  input shift_n_reset1_out;
  input Scan_En;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input \Use_UART.fifo_Din_reg[7] ;
  input SEL;
  input Ext_JTAG_TDO;
  input Dbg_TDO_0;
  input FIFO_Write;
  input Bus_RNW_reg;
  input \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  input [0:0]bus2ip_rdce;
  input S_AXI_ARESETN;
  input [0:0]D;
  input [0:0]\shift_Count_reg[0] ;
  input \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  input Ext_JTAG_TDI;
  input [0:0]\Use_UART.tdo_reg_reg[7] ;
  input [0:0]\Use_Serial_Unified_Completion.completion_status_reg[10] ;
  input [0:0]\Use_Serial_Unified_Completion.completion_status_reg[15] ;
  input [0:0]AR;
  input [0:0]\Use_Serial_Unified_Completion.count_reg[5]_0 ;

  wire \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  wire [0:0]AR;
  wire Bus_RNW_reg;
  wire CLK;
  wire [0:0]Config_Reg;
  wire [0:0]D;
  wire [0:7]Dbg_Reg_En_0;
  wire Dbg_Rst_0;
  wire Dbg_TDO_0;
  wire Debug_SYS_Rst;
  wire [0:0]E;
  wire Ext_JTAG_TDI;
  wire FIFO_Write;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  wire MDM_SEL;
  wire [3:0]PORT_Selector;
  wire [3:0]PORT_Selector_1;
  wire [0:0]Q;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire SEL;
  wire S_AXI_ACLK;
  wire S_AXI_ARESETN;
  wire [7:0]S_AXI_WDATA;
  wire [3:0]TDI_Shifter;
  wire \Use_BSCAN.Config_Reg_reg[11]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_12_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg[12]_srl13_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_11_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg[27]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_1_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg[28]_srl2_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_0_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg[4]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_3_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg[5]_srl4_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_2_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_0_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_10_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_11_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_12_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_1_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_2_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_3_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_4_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_5_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_6_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_7_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_8_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_9_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_gate__0_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_gate__1_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_gate_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[10] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[1] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[25] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[26] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[2] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[30] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[3] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[9] ;
  wire \Use_E2.BSCANE2_I_i_2_n_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.completion_status_reg[10] ;
  wire [0:0]\Use_Serial_Unified_Completion.completion_status_reg[15] ;
  wire [0:0]\Use_Serial_Unified_Completion.count_reg[5] ;
  wire [0:0]\Use_Serial_Unified_Completion.count_reg[5]_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.sample_1_reg[15] ;
  wire \Use_UART.fifo_Din_reg[7] ;
  wire [0:0]\Use_UART.tdo_reg_reg[7] ;
  wire \Use_Uart.enable_interrupts_reg_0 ;
  wire \Use_Uart.reset_RX_FIFO_reg_n_0 ;
  wire \Use_Uart.reset_TX_FIFO_reg_n_0 ;
  wire \Using_FPGA.Native ;
  wire [0:0]bus2ip_rdce;
  wire enable_interrupts;
  wire fifo_Data_Present;
  wire out;
  wire p_35_out__0;
  wire p_58_out__0;
  wire p_5_out;
  wire reset_RX_FIFO;
  wire reset_TX_FIFO;
  wire rx_Data_Present;
  wire sel_n_reg;
  wire [0:0]\shift_Count_reg[0] ;
  wire shift_n_reset1_out;
  wire tdo;
  wire tx_Buffer_Full;
  wire NLW_JTAG_CONTROL_I_Ext_BRK_UNCONNECTED;
  wire NLW_JTAG_CONTROL_I_Ext_NM_BRK_UNCONNECTED;
  wire NLW_JTAG_CONTROL_I_Interrupt_UNCONNECTED;
  wire NLW_JTAG_CONTROL_I_Q_0_UNCONNECTED;
  wire NLW_JTAG_CONTROL_I_Scan_En_UNCONNECTED;
  wire NLW_JTAG_CONTROL_I_Scan_Reset_UNCONNECTED;
  wire NLW_JTAG_CONTROL_I_Scan_Reset_Sel_UNCONNECTED;
  wire \NLW_JTAG_CONTROL_I_Using_FPGA.Native_3_UNCONNECTED ;
  wire NLW_JTAG_CONTROL_I_enable_interrupts_UNCONNECTED;
  wire NLW_JTAG_CONTROL_I_tx_Buffer_Empty_UNCONNECTED;
  wire [0:0]NLW_JTAG_CONTROL_I_AR_UNCONNECTED;

  cpu_JTAG_CONTROL JTAG_CONTROL_I
       (.AR(NLW_JTAG_CONTROL_I_AR_UNCONNECTED[0]),
        .Bus_RNW_reg(Bus_RNW_reg),
        .CLK(CLK),
        .D(D),
        .Dbg_Reg_En_0(Dbg_Reg_En_0),
        .Dbg_Rst_0(Dbg_Rst_0),
        .Dbg_TDO_0(Dbg_TDO_0),
        .Debug_SYS_Rst(Debug_SYS_Rst),
        .E(E),
        .Ext_BRK(NLW_JTAG_CONTROL_I_Ext_BRK_UNCONNECTED),
        .Ext_JTAG_TDI(Ext_JTAG_TDI),
        .Ext_NM_BRK(NLW_JTAG_CONTROL_I_Ext_NM_BRK_UNCONNECTED),
        .FIFO_Write(FIFO_Write),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg (\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .Interrupt(NLW_JTAG_CONTROL_I_Interrupt_UNCONNECTED),
        .Q(Q),
        .Q_0(NLW_JTAG_CONTROL_I_Q_0_UNCONNECTED),
        .RX_Buffer_Full(RX_Buffer_Full),
        .RX_Data(RX_Data),
        .SEL(SEL),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA),
        .Scan_En(NLW_JTAG_CONTROL_I_Scan_En_UNCONNECTED),
        .Scan_Reset(NLW_JTAG_CONTROL_I_Scan_Reset_UNCONNECTED),
        .Scan_Reset_Sel(NLW_JTAG_CONTROL_I_Scan_Reset_Sel_UNCONNECTED),
        .\Use_Serial_Unified_Completion.completion_status_reg[10]_0 (\Use_Serial_Unified_Completion.completion_status_reg[10] ),
        .\Use_Serial_Unified_Completion.completion_status_reg[15]_0 (\Use_Serial_Unified_Completion.completion_status_reg[15] ),
        .\Use_Serial_Unified_Completion.count_reg[5]_0 (\Use_Serial_Unified_Completion.count_reg[5] ),
        .\Use_Serial_Unified_Completion.count_reg[5]_1 (\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .\Use_Serial_Unified_Completion.sample_1_reg[15]_0 (\Use_Serial_Unified_Completion.sample_1_reg[15] ),
        .\Use_UART.fifo_Din_reg[7]_0 (\Use_UART.fifo_Din_reg[7] ),
        .\Use_UART.tdo_reg_reg[7]_0 (\Use_UART.tdo_reg_reg[7] ),
        .\Using_FPGA.Native (p_58_out__0),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Use_Uart.reset_RX_FIFO_reg_n_0 ),
        .\Using_FPGA.Native_2 (\Use_Uart.reset_TX_FIFO_reg_n_0 ),
        .\Using_FPGA.Native_3 (\NLW_JTAG_CONTROL_I_Using_FPGA.Native_3_UNCONNECTED ),
        .bus2ip_rdce(bus2ip_rdce),
        .\command_1_reg[7]_0 (PORT_Selector),
        .data_Exists_I_reg(rx_Data_Present),
        .data_Exists_I_reg_0(fifo_Data_Present),
        .enable_interrupts(NLW_JTAG_CONTROL_I_enable_interrupts_UNCONNECTED),
        .out(out),
        .p_35_out__0(p_35_out__0),
        .sel_n_reg_0(sel_n_reg),
        .sel_n_reg_1(\Use_E2.BSCANE2_I_i_2_n_0 ),
        .\shift_Count_reg[0]_0 (\shift_Count_reg[0] ),
        .tdo(tdo),
        .tx_Buffer_Empty(NLW_JTAG_CONTROL_I_tx_Buffer_Empty_UNCONNECTED),
        .tx_Buffer_Full(tx_Buffer_Full));
  (* SHREG_EXTRACT = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg[0] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[1] ),
        .Q(Config_Reg));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg[10] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_gate__0_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[10] ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg[11]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_12 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg[12]_srl13_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_11_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg[11]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_12_n_0 ),
        .R(1'b0));
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/Use_BSCAN.Config_Reg_reg " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/Use_BSCAN.Config_Reg_reg[12]_srl13_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_11 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \Use_BSCAN.Config_Reg_reg[12]_srl13_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_11 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(\Using_FPGA.Native ),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[25] ),
        .Q(\Use_BSCAN.Config_Reg_reg[12]_srl13_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_11_n_0 ));
  (* SHREG_EXTRACT = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    \Use_BSCAN.Config_Reg_reg[1] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[2] ),
        .PRE(shift_n_reset1_out),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[1] ));
  (* SHREG_EXTRACT = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    \Use_BSCAN.Config_Reg_reg[25] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[26] ),
        .PRE(shift_n_reset1_out),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[25] ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg[26] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_gate_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[26] ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg[27]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_1 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg[28]_srl2_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_0_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg[27]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_1_n_0 ),
        .R(1'b0));
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/Use_BSCAN.Config_Reg_reg " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/Use_BSCAN.Config_Reg_reg[28]_srl2_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_0 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \Use_BSCAN.Config_Reg_reg[28]_srl2_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_0 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\Using_FPGA.Native ),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[30] ),
        .Q(\Use_BSCAN.Config_Reg_reg[28]_srl2_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_0_n_0 ));
  (* SHREG_EXTRACT = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    \Use_BSCAN.Config_Reg_reg[2] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[3] ),
        .PRE(shift_n_reset1_out),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[2] ));
  (* SHREG_EXTRACT = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    \Use_BSCAN.Config_Reg_reg[30] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(1'b0),
        .PRE(shift_n_reset1_out),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[30] ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg[3] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_gate__1_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[3] ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg[4]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_3 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg[5]_srl4_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_2_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg[4]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_3_n_0 ),
        .R(1'b0));
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/Use_BSCAN.Config_Reg_reg " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/Use_BSCAN.Config_Reg_reg[5]_srl4_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \Use_BSCAN.Config_Reg_reg[5]_srl4_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_2 
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\Using_FPGA.Native ),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[9] ),
        .Q(\Use_BSCAN.Config_Reg_reg[5]_srl4_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_2_n_0 ));
  (* SHREG_EXTRACT = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    \Use_BSCAN.Config_Reg_reg[9] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[10] ),
        .PRE(shift_n_reset1_out),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[9] ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(1'b1),
        .Q(\Use_BSCAN.Config_Reg_reg_c_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_0 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_0_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_1 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_0_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_10 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_9_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_10_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_11 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_10_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_11_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_12 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_11_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_12_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_2 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_1_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_3 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_2_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_3_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_4 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_3_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_4_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_5 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_4_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_5_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_6 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_5_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_6_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_7 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_6_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_7_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_8 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_7_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_8_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg_c_9 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset1_out),
        .D(\Use_BSCAN.Config_Reg_reg_c_8_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_9_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Use_BSCAN.Config_Reg_reg_gate 
       (.I0(\Use_BSCAN.Config_Reg_reg[27]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_1_n_0 ),
        .I1(\Use_BSCAN.Config_Reg_reg_c_1_n_0 ),
        .O(\Use_BSCAN.Config_Reg_reg_gate_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Use_BSCAN.Config_Reg_reg_gate__0 
       (.I0(\Use_BSCAN.Config_Reg_reg[11]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_12_n_0 ),
        .I1(\Use_BSCAN.Config_Reg_reg_c_12_n_0 ),
        .O(\Use_BSCAN.Config_Reg_reg_gate__0_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Use_BSCAN.Config_Reg_reg_gate__1 
       (.I0(\Use_BSCAN.Config_Reg_reg[4]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_3_n_0 ),
        .I1(\Use_BSCAN.Config_Reg_reg_c_3_n_0 ),
        .O(\Use_BSCAN.Config_Reg_reg_gate__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Use_BSCAN.PORT_Selector_1[3]_i_1 
       (.I0(SEL),
        .I1(PORT_Selector[0]),
        .I2(PORT_Selector[1]),
        .I3(PORT_Selector[3]),
        .I4(PORT_Selector[2]),
        .O(MDM_SEL));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.PORT_Selector_1_reg[0] 
       (.C(CLK),
        .CE(MDM_SEL),
        .CLR(AR),
        .D(TDI_Shifter[0]),
        .Q(PORT_Selector_1[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.PORT_Selector_1_reg[1] 
       (.C(CLK),
        .CE(MDM_SEL),
        .CLR(AR),
        .D(TDI_Shifter[1]),
        .Q(PORT_Selector_1[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.PORT_Selector_1_reg[2] 
       (.C(CLK),
        .CE(MDM_SEL),
        .CLR(AR),
        .D(TDI_Shifter[2]),
        .Q(PORT_Selector_1[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.PORT_Selector_1_reg[3] 
       (.C(CLK),
        .CE(MDM_SEL),
        .CLR(AR),
        .D(TDI_Shifter[3]),
        .Q(PORT_Selector_1[3]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.PORT_Selector_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(AR),
        .D(PORT_Selector_1[0]),
        .Q(PORT_Selector[0]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.PORT_Selector_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(AR),
        .D(PORT_Selector_1[1]),
        .Q(PORT_Selector[1]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.PORT_Selector_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(AR),
        .D(PORT_Selector_1[2]),
        .Q(PORT_Selector[2]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.PORT_Selector_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(AR),
        .D(PORT_Selector_1[3]),
        .Q(PORT_Selector[3]));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \Use_BSCAN.TDI_Shifter[3]_i_1 
       (.I0(PORT_Selector[2]),
        .I1(PORT_Selector[3]),
        .I2(PORT_Selector[1]),
        .I3(PORT_Selector[0]),
        .I4(SEL),
        .I5(\Use_UART.fifo_Din_reg[7] ),
        .O(p_5_out));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.TDI_Shifter_reg[0] 
       (.C(\Using_FPGA.Native ),
        .CE(p_5_out),
        .CLR(AR),
        .D(TDI_Shifter[1]),
        .Q(TDI_Shifter[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.TDI_Shifter_reg[1] 
       (.C(\Using_FPGA.Native ),
        .CE(p_5_out),
        .CLR(AR),
        .D(TDI_Shifter[2]),
        .Q(TDI_Shifter[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.TDI_Shifter_reg[2] 
       (.C(\Using_FPGA.Native ),
        .CE(p_5_out),
        .CLR(AR),
        .D(TDI_Shifter[3]),
        .Q(TDI_Shifter[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.TDI_Shifter_reg[3] 
       (.C(\Using_FPGA.Native ),
        .CE(p_5_out),
        .CLR(AR),
        .D(Ext_JTAG_TDI),
        .Q(TDI_Shifter[3]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hEEEEEFEE)) 
    \Use_E2.BSCANE2_I_i_2 
       (.I0(PORT_Selector[2]),
        .I1(PORT_Selector[3]),
        .I2(PORT_Selector[0]),
        .I3(Config_Reg),
        .I4(PORT_Selector[1]),
        .O(\Use_E2.BSCANE2_I_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Uart.enable_interrupts_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\Use_Uart.enable_interrupts_reg_0 ),
        .Q(enable_interrupts),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  LUT1 #(
    .INIT(2'h1)) 
    \Use_Uart.reset_RX_FIFO_i_1 
       (.I0(S_AXI_ARESETN),
        .O(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDSE #(
    .INIT(1'b1)) 
    \Use_Uart.reset_RX_FIFO_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(reset_RX_FIFO),
        .Q(\Use_Uart.reset_RX_FIFO_reg_n_0 ),
        .S(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDSE #(
    .INIT(1'b1)) 
    \Use_Uart.reset_TX_FIFO_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(reset_TX_FIFO),
        .Q(\Use_Uart.reset_TX_FIFO_reg_n_0 ),
        .S(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
endmodule

(* ORIG_REF_NAME = "UART_Receive" *) 
module cpu_UART_Receive
   (out,
    \not_First.Clk_En_Out_i_reg ,
    \TMR_No.rx_data_exists_i_reg_0 ,
    \TMR_No.rx_data_exists_i_reg_1 ,
    \TMR_No.frame_error_reg ,
    Sl_DBus,
    \TMR_No.RX_Data_reg[6]_0 ,
    en_16x_baud,
    Clk,
    Rst,
    UART_Rx,
    lmb_reg_read,
    Q,
    UART_Status_Read,
    D,
    io_bus_read_data);
  output out;
  output \not_First.Clk_En_Out_i_reg ;
  output [0:0]\TMR_No.rx_data_exists_i_reg_0 ;
  output \TMR_No.rx_data_exists_i_reg_1 ;
  output \TMR_No.frame_error_reg ;
  output [3:0]Sl_DBus;
  output [3:0]\TMR_No.RX_Data_reg[6]_0 ;
  input en_16x_baud;
  input Clk;
  input Rst;
  input UART_Rx;
  input lmb_reg_read;
  input [4:0]Q;
  input UART_Status_Read;
  input [1:0]D;
  input [3:0]io_bus_read_data;

  wire Clk;
  wire [1:0]D;
  wire D_0;
  wire [4:0]Q;
  wire [7:1]RX_Data;
  wire Rst;
  wire [3:0]Sl_DBus;
  wire \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  wire \TMR_No.Delay_16_n_1 ;
  wire \TMR_No.Delay_16_n_2 ;
  wire \TMR_No.RX_Data[7]_i_1_n_0 ;
  wire [3:0]\TMR_No.RX_Data_reg[6]_0 ;
  wire \TMR_No.frame_error_reg ;
  wire \TMR_No.previous_RX_i_1_n_0 ;
  wire \TMR_No.running_reg_n_0 ;
  wire \TMR_No.rx_data_exists_i_i_1_n_0 ;
  wire [0:0]\TMR_No.rx_data_exists_i_reg_0 ;
  wire \TMR_No.rx_data_exists_i_reg_1 ;
  wire \TMR_No.start_Edge_Detected_i_1_n_0 ;
  wire \TMR_No.start_Edge_Detected_reg_n_0 ;
  wire \TMR_No.stop_Bit_Position_reg_n_0 ;
  wire UART_Rx_Read;
  wire UART_Status_Read;
  wire en_16x_baud;
  wire [3:0]io_bus_read_data;
  wire lmb_reg_read;
  wire mid_Start_Bit;
  (* RTL_KEEP = "true" *) wire [0:8]new_rx_data;
  (* RTL_KEEP = "true" *) wire new_rx_data_write;
  wire p_4_out__0;
  wire previous_RX;
  wire rx_1;
  wire [7:0]rx_data_i;
  (* RTL_KEEP = "true" *) wire rx_frame_error_i;
  wire sample_Point;
  wire \NLW_TMR_No.rx_1_reg_D_UNCONNECTED ;

  LUT2 #(
    .INIT(4'hE)) 
    \Sl_DBus[24]_INST_0 
       (.I0(RX_Data[7]),
        .I1(io_bus_read_data[3]),
        .O(Sl_DBus[3]));
  LUT2 #(
    .INIT(4'hE)) 
    \Sl_DBus[27]_INST_0 
       (.I0(RX_Data[4]),
        .I1(io_bus_read_data[2]),
        .O(Sl_DBus[2]));
  LUT2 #(
    .INIT(4'hE)) 
    \Sl_DBus[29]_INST_0 
       (.I0(RX_Data[2]),
        .I1(io_bus_read_data[1]),
        .O(Sl_DBus[1]));
  LUT2 #(
    .INIT(4'hE)) 
    \Sl_DBus[30]_INST_0 
       (.I0(RX_Data[1]),
        .I1(io_bus_read_data[0]),
        .O(Sl_DBus[0]));
  cpu_iomodule_v3_1_4_MB_FDSE \TMR_No.Convert_Serial_To_Parallel[1].First_Bit.First_Bit_I 
       (.Clk(Clk),
        .D_0(D_0),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[1]),
        .mid_Start_Bit(mid_Start_Bit));
  cpu_iomodule_v3_1_4_MB_FDRE_875 \TMR_No.Convert_Serial_To_Parallel[2].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[2]),
        .mid_Start_Bit(mid_Start_Bit));
  cpu_iomodule_v3_1_4_MB_FDRE_876 \TMR_No.Convert_Serial_To_Parallel[3].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[3]),
        .mid_Start_Bit(mid_Start_Bit));
  cpu_iomodule_v3_1_4_MB_FDRE_877 \TMR_No.Convert_Serial_To_Parallel[4].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[4]),
        .mid_Start_Bit(mid_Start_Bit));
  cpu_iomodule_v3_1_4_MB_FDRE_878 \TMR_No.Convert_Serial_To_Parallel[5].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[5]),
        .mid_Start_Bit(mid_Start_Bit));
  cpu_iomodule_v3_1_4_MB_FDRE_879 \TMR_No.Convert_Serial_To_Parallel[6].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[6]),
        .mid_Start_Bit(mid_Start_Bit));
  cpu_iomodule_v3_1_4_MB_FDRE_880 \TMR_No.Convert_Serial_To_Parallel[7].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[7]),
        .mid_Start_Bit(mid_Start_Bit));
  cpu_iomodule_v3_1_4_MB_FDRE_881 \TMR_No.Convert_Serial_To_Parallel[8].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[8]),
        .mid_Start_Bit(mid_Start_Bit));
  cpu_XIL_SRL16E__parameterized1 \TMR_No.Delay_16 
       (.Clk(Clk),
        .D_0(D_0),
        .\TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ),
        .\TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ),
        .\TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ),
        .\TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ),
        .\TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ),
        .\TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ),
        .\TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ),
        .\TMR_No.running_reg (\TMR_No.start_Edge_Detected_reg_n_0 ),
        .\TMR_No.running_reg_0 (\TMR_No.running_reg_n_0 ),
        .\TMR_No.stop_Bit_Position_reg (\TMR_No.Delay_16_n_2 ),
        .\TMR_No.stop_Bit_Position_reg_0 (\TMR_No.stop_Bit_Position_reg_n_0 ),
        .\Using_FPGA.Native (\TMR_No.Delay_16_n_1 ),
        .en_16x_baud(en_16x_baud),
        .mid_Start_Bit(mid_Start_Bit),
        .out({new_rx_data[0],new_rx_data[1],new_rx_data[2],new_rx_data[3],new_rx_data[4],new_rx_data[5],new_rx_data[6],new_rx_data[7],new_rx_data[8]}),
        .sample_Point(sample_Point));
  cpu_XIL_SRL16E__parameterized1_882 \TMR_No.Mid_Start_Bit_SRL16 
       (.Clk(Clk),
        .\Using_FPGA.Native (\TMR_No.start_Edge_Detected_reg_n_0 ),
        .en_16x_baud(en_16x_baud),
        .mid_Start_Bit(mid_Start_Bit));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFD)) 
    \TMR_No.RX_Data[7]_i_1 
       (.I0(lmb_reg_read),
        .I1(Q[3]),
        .I2(Q[1]),
        .I3(Q[4]),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\TMR_No.RX_Data[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.RX_Data_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[0]),
        .Q(\TMR_No.RX_Data_reg[6]_0 [0]),
        .R(\TMR_No.RX_Data[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.RX_Data_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[1]),
        .Q(RX_Data[1]),
        .R(\TMR_No.RX_Data[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.RX_Data_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[2]),
        .Q(RX_Data[2]),
        .R(\TMR_No.RX_Data[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.RX_Data_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[3]),
        .Q(\TMR_No.RX_Data_reg[6]_0 [1]),
        .R(\TMR_No.RX_Data[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.RX_Data_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[4]),
        .Q(RX_Data[4]),
        .R(\TMR_No.RX_Data[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.RX_Data_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[5]),
        .Q(\TMR_No.RX_Data_reg[6]_0 [2]),
        .R(\TMR_No.RX_Data[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.RX_Data_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[6]),
        .Q(\TMR_No.RX_Data_reg[6]_0 [3]),
        .R(\TMR_No.RX_Data[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.RX_Data_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[7]),
        .Q(RX_Data[7]),
        .R(\TMR_No.RX_Data[7]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hBA)) 
    \TMR_No.frame_error_i_1 
       (.I0(rx_frame_error_i),
        .I1(UART_Status_Read),
        .I2(D[1]),
        .O(\TMR_No.frame_error_reg ));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.new_rx_data_write_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_4_out__0),
        .Q(new_rx_data_write),
        .R(Rst));
  LUT4 #(
    .INIT(16'h8F88)) 
    \TMR_No.overrun_error_i_1 
       (.I0(\TMR_No.rx_data_exists_i_reg_0 ),
        .I1(new_rx_data_write),
        .I2(UART_Status_Read),
        .I3(D[0]),
        .O(\TMR_No.rx_data_exists_i_reg_1 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \TMR_No.previous_RX_i_1 
       (.I0(new_rx_data[0]),
        .I1(en_16x_baud),
        .I2(previous_RX),
        .O(\TMR_No.previous_RX_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.previous_RX_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.previous_RX_i_1_n_0 ),
        .Q(previous_RX),
        .R(Rst));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.running_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.Delay_16_n_2 ),
        .Q(\TMR_No.running_reg_n_0 ),
        .R(Rst));
  FDSE #(
    .INIT(1'b1)) 
    \TMR_No.rx_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\NLW_TMR_No.rx_1_reg_D_UNCONNECTED ),
        .Q(rx_1),
        .S(Rst));
  FDSE #(
    .INIT(1'b1)) 
    \TMR_No.rx_2_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_1),
        .Q(new_rx_data[0]),
        .S(Rst));
  LUT4 #(
    .INIT(16'h000E)) 
    \TMR_No.rx_data_exists_i_i_1 
       (.I0(\TMR_No.rx_data_exists_i_reg_0 ),
        .I1(new_rx_data_write),
        .I2(UART_Rx_Read),
        .I3(Rst),
        .O(\TMR_No.rx_data_exists_i_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \TMR_No.rx_data_exists_i_i_2 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[4]),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(lmb_reg_read),
        .O(UART_Rx_Read));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.rx_data_exists_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.rx_data_exists_i_i_1_n_0 ),
        .Q(\TMR_No.rx_data_exists_i_reg_0 ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.rx_data_i_reg[0] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[8]),
        .Q(rx_data_i[0]),
        .R(Rst));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.rx_data_i_reg[1] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[7]),
        .Q(rx_data_i[1]),
        .R(Rst));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.rx_data_i_reg[2] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[6]),
        .Q(rx_data_i[2]),
        .R(Rst));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.rx_data_i_reg[3] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[5]),
        .Q(rx_data_i[3]),
        .R(Rst));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.rx_data_i_reg[4] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[4]),
        .Q(rx_data_i[4]),
        .R(Rst));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.rx_data_i_reg[5] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[3]),
        .Q(rx_data_i[5]),
        .R(Rst));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.rx_data_i_reg[6] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[2]),
        .Q(rx_data_i[6]),
        .R(Rst));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.rx_data_i_reg[7] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[1]),
        .Q(rx_data_i[7]),
        .R(Rst));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT5 #(
    .INIT(32'h02FF0200)) 
    \TMR_No.start_Edge_Detected_i_1 
       (.I0(previous_RX),
        .I1(new_rx_data[0]),
        .I2(\TMR_No.running_reg_n_0 ),
        .I3(en_16x_baud),
        .I4(\TMR_No.start_Edge_Detected_reg_n_0 ),
        .O(\TMR_No.start_Edge_Detected_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.start_Edge_Detected_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.start_Edge_Detected_i_1_n_0 ),
        .Q(\TMR_No.start_Edge_Detected_reg_n_0 ),
        .R(Rst));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.stop_Bit_Position_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.Delay_16_n_1 ),
        .Q(\TMR_No.stop_Bit_Position_reg_n_0 ),
        .R(Rst));
  LUT4 #(
    .INIT(16'h0080)) 
    in00
       (.I0(en_16x_baud),
        .I1(sample_Point),
        .I2(\TMR_No.stop_Bit_Position_reg_n_0 ),
        .I3(new_rx_data[0]),
        .O(rx_frame_error_i));
  LUT4 #(
    .INIT(16'h8000)) 
    p_4_out
       (.I0(\TMR_No.stop_Bit_Position_reg_n_0 ),
        .I1(sample_Point),
        .I2(new_rx_data[0]),
        .I3(en_16x_baud),
        .O(p_4_out__0));
endmodule

(* ORIG_REF_NAME = "UART_Transmit" *) 
module cpu_UART_Transmit
   (UART_Tx,
    tx_data_transmitted,
    \TMR_No.tx_buffer_empty_i_reg_0 ,
    en_16x_baud,
    Clk,
    Rst,
    E,
    D);
  output UART_Tx;
  output tx_data_transmitted;
  output [0:0]\TMR_No.tx_buffer_empty_i_reg_0 ;
  input en_16x_baud;
  input Clk;
  input Rst;
  input [0:0]E;
  input [7:0]D;

  wire CI;
  wire Clk;
  wire [0:0]E;
  wire Rst;
  wire S;
  wire \TMR_No.Counter[1].XORCY_I_n_1 ;
  wire \TMR_No.Counter[2].h_Cnt_reg ;
  wire \TMR_No.FDRE_I_n_3 ;
  wire \TMR_No.mux_sel_reg_n_0_[0] ;
  wire \TMR_No.mux_sel_reg_n_0_[2] ;
  wire \TMR_No.tx_buffer_empty_i_i_1_n_0 ;
  wire [0:0]\TMR_No.tx_buffer_empty_i_reg_0 ;
  wire cnt_cy_1;
  wire div16;
  wire en_16x_baud;
  wire lopt_1;
  wire lopt_2;
  wire p_3_out;
  wire p_7_out;
  wire [0:2]sum_cnt;
  wire tx_DataBits;
  wire tx_Data_Enable;
  wire tx_Start;
  (* RTL_KEEP = "true" *) wire tx_buffer_empty_i;
  wire \^tx_data_transmitted ;
  wire \NLW_TMR_No.Counter[0].XORCY_I_cnt_cy_2_UNCONNECTED ;
  wire \NLW_TMR_No.Counter[2].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ;

  cpu_iomodule_v3_1_4_MB_XORCY \TMR_No.Counter[0].XORCY_I 
       (.D(sum_cnt[0]),
        .Q(\TMR_No.mux_sel_reg_n_0_[0] ),
        .cnt_cy_2(\NLW_TMR_No.Counter[0].XORCY_I_cnt_cy_2_UNCONNECTED ),
        .lopt(lopt_1),
        .lopt_1(lopt_2));
  cpu_iomodule_v3_1_4_MB_XORCY_871 \TMR_No.Counter[1].XORCY_I 
       (.D(sum_cnt[1]),
        .Q(S),
        .\TMR_No.mux_sel_reg[1] (\TMR_No.Counter[1].XORCY_I_n_1 ),
        .cnt_cy_1(cnt_cy_1));
  cpu_iomodule_v3_1_4_MB_MUXCY_872 \TMR_No.Counter[2].Used_MuxCY.MUXCY_L_I 
       (.CI(CI),
        .Q(\TMR_No.mux_sel_reg_n_0_[2] ),
        .\TMR_No.Counter[2].h_Cnt_reg (\TMR_No.Counter[2].h_Cnt_reg ),
        .cnt_cy_1(cnt_cy_1),
        .lopt(\NLW_TMR_No.Counter[2].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ),
        .lopt_1(S),
        .lopt_2(\TMR_No.Counter[1].XORCY_I_n_1 ),
        .lopt_3(lopt_1),
        .lopt_4(lopt_2),
        .tx_DataBits(tx_DataBits));
  cpu_iomodule_v3_1_4_MB_XORCY_873 \TMR_No.Counter[2].XORCY_I 
       (.CI(CI),
        .D(sum_cnt[2]),
        .\TMR_No.Counter[2].h_Cnt_reg (\TMR_No.Counter[2].h_Cnt_reg ));
  cpu_XIL_SRL16E \TMR_No.DIV16_SRL16E 
       (.Clk(Clk),
        .div16(div16),
        .en_16x_baud(en_16x_baud));
  cpu_iomodule_v3_1_4_MB_FDRE \TMR_No.FDRE_I 
       (.Clk(Clk),
        .Q({\TMR_No.mux_sel_reg_n_0_[0] ,S,\TMR_No.mux_sel_reg_n_0_[2] }),
        .\Using_FPGA.Native_0 (\TMR_No.FDRE_I_n_3 ),
        .div16(div16),
        .en_16x_baud(en_16x_baud),
        .out(tx_buffer_empty_i),
        .p_3_out(p_3_out),
        .p_7_out(p_7_out),
        .tx_DataBits(tx_DataBits),
        .tx_Data_Enable(tx_Data_Enable),
        .tx_Start(tx_Start),
        .tx_data_transmitted(\^tx_data_transmitted ));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.data_is_sent_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_3_out),
        .Q(\^tx_data_transmitted ),
        .R(Rst));
  FDSE #(
    .INIT(1'b1)) 
    \TMR_No.mux_sel_reg[0] 
       (.C(Clk),
        .CE(tx_Data_Enable),
        .D(sum_cnt[0]),
        .Q(\TMR_No.mux_sel_reg_n_0_[0] ),
        .S(Rst));
  FDSE #(
    .INIT(1'b1)) 
    \TMR_No.mux_sel_reg[1] 
       (.C(Clk),
        .CE(tx_Data_Enable),
        .D(sum_cnt[1]),
        .Q(S),
        .S(Rst));
  FDSE #(
    .INIT(1'b1)) 
    \TMR_No.mux_sel_reg[2] 
       (.C(Clk),
        .CE(tx_Data_Enable),
        .D(sum_cnt[2]),
        .Q(\TMR_No.mux_sel_reg_n_0_[2] ),
        .S(Rst));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.tx_DataBits_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_7_out),
        .Q(tx_DataBits),
        .R(Rst));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.tx_Start_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.FDRE_I_n_3 ),
        .Q(tx_Start),
        .R(Rst));
  LUT4 #(
    .INIT(16'hFFF4)) 
    \TMR_No.tx_buffer_empty_i_i_1 
       (.I0(E),
        .I1(tx_buffer_empty_i),
        .I2(\^tx_data_transmitted ),
        .I3(Rst),
        .O(\TMR_No.tx_buffer_empty_i_i_1_n_0 ));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.tx_buffer_empty_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.tx_buffer_empty_i_i_1_n_0 ),
        .Q(tx_buffer_empty_i),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \UART_Status[3]_i_1 
       (.I0(tx_buffer_empty_i),
        .O(\TMR_No.tx_buffer_empty_i_reg_0 ));
endmodule

(* ORIG_REF_NAME = "Uart_Control_Status" *) 
module cpu_Uart_Control_Status
   (D,
    UART_Status_Read,
    UART_Interrupt,
    Sl_DBus,
    Rst,
    \TMR_No.overrun_error_reg_0 ,
    Clk,
    \TMR_No.frame_error_reg_0 ,
    lmb_reg_read,
    Q,
    out,
    tx_data_transmitted,
    \LMB_ReadDBus[25]_INST_0 ,
    io_bus_read_data,
    \UART_Status_reg[3]_0 ,
    \TMR_No.error_interrupt_reg_0 );
  output [1:0]D;
  output UART_Status_Read;
  output UART_Interrupt;
  output [3:0]Sl_DBus;
  input Rst;
  input \TMR_No.overrun_error_reg_0 ;
  input Clk;
  input \TMR_No.frame_error_reg_0 ;
  input lmb_reg_read;
  input [4:0]Q;
  input out;
  input tx_data_transmitted;
  input [3:0]\LMB_ReadDBus[25]_INST_0 ;
  input [3:0]io_bus_read_data;
  input [1:0]\UART_Status_reg[3]_0 ;
  input \TMR_No.error_interrupt_reg_0 ;

  wire Clk;
  wire [1:0]D;
  wire [3:0]\LMB_ReadDBus[25]_INST_0 ;
  wire [4:0]Q;
  wire Rst;
  wire [3:0]Sl_DBus;
  wire \TMR_No.frame_error_reg_0 ;
  wire \TMR_No.overrun_error_reg_0 ;
  wire [6:0]UART_Status;
  wire \UART_Status[6]_i_1_n_0 ;
  wire UART_Status_Read;
  wire [1:0]\UART_Status_reg[3]_0 ;
  wire [3:0]io_bus_read_data;
  wire lmb_reg_read;

  LUT3 #(
    .INIT(8'hFE)) 
    \Sl_DBus[25]_INST_0 
       (.I0(UART_Status[6]),
        .I1(\LMB_ReadDBus[25]_INST_0 [3]),
        .I2(io_bus_read_data[3]),
        .O(Sl_DBus[3]));
  LUT3 #(
    .INIT(8'hFE)) 
    \Sl_DBus[26]_INST_0 
       (.I0(UART_Status[5]),
        .I1(\LMB_ReadDBus[25]_INST_0 [2]),
        .I2(io_bus_read_data[2]),
        .O(Sl_DBus[2]));
  LUT3 #(
    .INIT(8'hFE)) 
    \Sl_DBus[28]_INST_0 
       (.I0(UART_Status[3]),
        .I1(\LMB_ReadDBus[25]_INST_0 [1]),
        .I2(io_bus_read_data[1]),
        .O(Sl_DBus[1]));
  LUT3 #(
    .INIT(8'hFE)) 
    \Sl_DBus[31]_INST_0 
       (.I0(UART_Status[0]),
        .I1(\LMB_ReadDBus[25]_INST_0 [0]),
        .I2(io_bus_read_data[0]),
        .O(Sl_DBus[0]));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.frame_error_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.frame_error_reg_0 ),
        .Q(D[1]),
        .R(Rst));
  LUT6 #(
    .INIT(64'h0000001000000000)) 
    \TMR_No.overrun_error_i_2 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(lmb_reg_read),
        .O(UART_Status_Read));
  FDRE #(
    .INIT(1'b0)) 
    \TMR_No.overrun_error_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.overrun_error_reg_0 ),
        .Q(D[0]),
        .R(Rst));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFDFF)) 
    \UART_Status[6]_i_1 
       (.I0(lmb_reg_read),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\UART_Status[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \UART_Status_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\UART_Status_reg[3]_0 [0]),
        .Q(UART_Status[0]),
        .R(\UART_Status[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \UART_Status_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\UART_Status_reg[3]_0 [1]),
        .Q(UART_Status[3]),
        .R(\UART_Status[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \UART_Status_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(UART_Status[5]),
        .R(\UART_Status[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \UART_Status_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(UART_Status[6]),
        .R(\UART_Status[6]_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module cpu_XIL_SRL16E
   (div16,
    en_16x_baud,
    Clk);
  output div16;
  input en_16x_baud;
  input Clk;

  wire Clk;
  wire div16;
  wire en_16x_baud;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART_TX.UART_TX_I1/TMR_No.DIV16_SRL16E/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0001),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(en_16x_baud),
        .CLK(Clk),
        .D(div16),
        .Q(div16));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module cpu_XIL_SRL16E_884
   (loop_Bit,
    Clk_En_I_2,
    Clk);
  output loop_Bit;
  input Clk_En_I_2;
  input Clk;

  wire Clk;
  wire Clk_En_I_2;
  wire loop_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s " *) 
  (* srl_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s[2].Divide_I/One_SRL16.SRL16E_I/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0001),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(Clk_En_I_2),
        .CLK(Clk),
        .D(loop_Bit),
        .Q(loop_Bit));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module cpu_XIL_SRL16E_885
   (Clk_En_I_2,
    Clk);
  output Clk_En_I_2;
  input Clk;

  wire Clk;
  wire Clk_En_I_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s " *) 
  (* srl_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s[1].Divide_I/One_SRL16.SRL16E_I/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0001),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(Clk),
        .D(Clk_En_I_2),
        .Q(Clk_En_I_2));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module cpu_XIL_SRL16E__parameterized1
   (sample_Point,
    \Using_FPGA.Native ,
    \TMR_No.stop_Bit_Position_reg ,
    \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ,
    \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ,
    \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ,
    \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ,
    \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ,
    \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ,
    \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ,
    D_0,
    en_16x_baud,
    Clk,
    out,
    \TMR_No.stop_Bit_Position_reg_0 ,
    \TMR_No.running_reg ,
    \TMR_No.running_reg_0 ,
    mid_Start_Bit);
  output sample_Point;
  output \Using_FPGA.Native ;
  output \TMR_No.stop_Bit_Position_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  output D_0;
  input en_16x_baud;
  input Clk;
  input [8:0]out;
  input \TMR_No.stop_Bit_Position_reg_0 ;
  input \TMR_No.running_reg ;
  input \TMR_No.running_reg_0 ;
  input mid_Start_Bit;

  wire Clk;
  wire D_0;
  wire \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  wire \TMR_No.running_reg ;
  wire \TMR_No.running_reg_0 ;
  wire \TMR_No.stop_Bit_Position_reg ;
  wire \TMR_No.stop_Bit_Position_reg_0 ;
  wire \Use_unisim.XIL_SRL16E_I1_i_1_n_0 ;
  wire \Using_FPGA.Native ;
  wire en_16x_baud;
  wire mid_Start_Bit;
  wire [8:0]out;
  wire sample_Point;

  LUT5 #(
    .INIT(32'hF7FFF000)) 
    \TMR_No.running_i_1 
       (.I0(sample_Point),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(\TMR_No.running_reg ),
        .I3(en_16x_baud),
        .I4(\TMR_No.running_reg_0 ),
        .O(\TMR_No.stop_Bit_Position_reg ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h2CCC)) 
    \TMR_No.stop_Bit_Position_i_1 
       (.I0(out[0]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(en_16x_baud),
        .O(\Using_FPGA.Native ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART_RX.UART_RX_I1/TMR_No.Delay_16/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(en_16x_baud),
        .CLK(Clk),
        .D(\Use_unisim.XIL_SRL16E_I1_i_1_n_0 ),
        .Q(sample_Point));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    \Use_unisim.XIL_SRL16E_I1_i_1 
       (.I0(sample_Point),
        .I1(mid_Start_Bit),
        .I2(\TMR_No.stop_Bit_Position_reg_0 ),
        .O(\Use_unisim.XIL_SRL16E_I1_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__2 
       (.I0(out[0]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[1]),
        .O(\TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__3 
       (.I0(out[1]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[2]),
        .O(\TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__4 
       (.I0(out[2]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[3]),
        .O(\TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__5 
       (.I0(out[3]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[4]),
        .O(\TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__6 
       (.I0(out[4]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[5]),
        .O(\TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__7 
       (.I0(out[5]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[6]),
        .O(\TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__8 
       (.I0(out[6]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[7]),
        .O(\TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__9 
       (.I0(out[7]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[8]),
        .O(D_0));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module cpu_XIL_SRL16E__parameterized1_882
   (mid_Start_Bit,
    en_16x_baud,
    \Using_FPGA.Native ,
    Clk);
  output mid_Start_Bit;
  input en_16x_baud;
  input \Using_FPGA.Native ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native ;
  wire en_16x_baud;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART_RX.UART_RX_I1/TMR_No.Mid_Start_Bit_SRL16/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b0),
        .CE(en_16x_baud),
        .CLK(Clk),
        .D(\Using_FPGA.Native ),
        .Q(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module cpu_XIL_SRL16E__parameterized1_883
   (loop_Bit,
    Clk_En_I_1,
    shift,
    Clk,
    lopt);
  output loop_Bit;
  input Clk_En_I_1;
  input shift;
  input Clk;
  input lopt;

  wire Clk;
  wire Clk_En_I_1;
  wire loop_Bit;
  wire lopt;
  wire \NLW_Use_unisim.XIL_SRL16CE_I1Use_unisim.XIL_SRL16E_I1_Q31_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* srl_bus_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s " *) 
  (* srl_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s[3].Divide_I/Two_SRL16.SRL16E_2/Use_unisim.XIL_SRL16E_I1 " *) 
  SRLC32E #(
    .INIT(32'h00000001),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16CE_I1Use_unisim.XIL_SRL16E_I1 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(Clk_En_I_1),
        .CLK(Clk),
        .D(lopt),
        .Q(loop_Bit),
        .Q31(\NLW_Use_unisim.XIL_SRL16CE_I1Use_unisim.XIL_SRL16E_I1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "address_decoder" *) 
module cpu_address_decoder
   (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ,
    Bus_RNW_reg_reg_0,
    D,
    \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ,
    FIFO_Write,
    ip2bus_error,
    bus2ip_wrce,
    clear_Ext_BRK,
    reset_RX_FIFO,
    reset_TX_FIFO,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 ,
    bus2ip_rdce,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ,
    \FSM_onehot_state_reg[3] ,
    \FSM_onehot_state_reg[2] ,
    \FSM_onehot_state_reg[2]_0 ,
    start2,
    S_AXI_ACLK,
    Q,
    state1__2,
    S_AXI_AWVALID,
    S_AXI_WVALID,
    S_AXI_ARVALID,
    out,
    tx_Buffer_Full,
    rx_Data_Present,
    S_AXI_WDATA,
    RX_Data,
    RX_Buffer_Full,
    fifo_Data_Present,
    enable_interrupts,
    S_AXI_ARESETN,
    S_AXI_RREADY,
    S_AXI_RVALID,
    S_AXI_BREADY,
    S_AXI_BVALID,
    S_AXI_BRESP,
    bus2ip_rnw_i,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 );
  output \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ;
  output \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ;
  output Bus_RNW_reg_reg_0;
  output [2:0]D;
  output \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ;
  output \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ;
  output FIFO_Write;
  output ip2bus_error;
  output [0:0]bus2ip_wrce;
  output clear_Ext_BRK;
  output reset_RX_FIFO;
  output reset_TX_FIFO;
  output [7:0]\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 ;
  output [0:0]bus2ip_rdce;
  output \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  output \FSM_onehot_state_reg[3] ;
  output \FSM_onehot_state_reg[2] ;
  output \FSM_onehot_state_reg[2]_0 ;
  input start2;
  input S_AXI_ACLK;
  input [3:0]Q;
  input state1__2;
  input S_AXI_AWVALID;
  input S_AXI_WVALID;
  input S_AXI_ARVALID;
  input out;
  input tx_Buffer_Full;
  input rx_Data_Present;
  input [3:0]S_AXI_WDATA;
  input [0:7]RX_Data;
  input RX_Buffer_Full;
  input fifo_Data_Present;
  input enable_interrupts;
  input S_AXI_ARESETN;
  input S_AXI_RREADY;
  input S_AXI_RVALID;
  input S_AXI_BREADY;
  input S_AXI_BVALID;
  input [0:0]S_AXI_BRESP;
  input bus2ip_rnw_i;
  input \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ;
  input \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 ;

  wire \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  wire Bus_RNW_reg_i_1_n_0;
  wire Bus_RNW_reg_reg_0;
  wire [2:0]D;
  wire FIFO_Write;
  wire \FSM_onehot_state_reg[2] ;
  wire \FSM_onehot_state_reg[3] ;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ;
  wire [7:0]\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 ;
  wire \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ;
  wire \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ;
  wire [3:0]Q;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire S_AXI_ACLK;
  wire S_AXI_ARESETN;
  wire S_AXI_ARVALID;
  wire S_AXI_AWVALID;
  wire [3:0]S_AXI_WDATA;
  wire S_AXI_WVALID;
  wire [0:0]bus2ip_rdce;
  wire bus2ip_rnw_i;
  wire ce_expnd_i_0;
  wire ce_expnd_i_1;
  wire ce_expnd_i_2;
  wire ce_expnd_i_3;
  wire cs_ce_clr;
  wire enable_interrupts;
  wire fifo_Data_Present;
  wire out;
  wire reset_RX_FIFO;
  wire reset_TX_FIFO;
  wire rx_Data_Present;
  wire start2;
  wire state1__2;
  wire tx_Buffer_Full;

  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    Bus_RNW_reg_i_1
       (.I0(bus2ip_rnw_i),
        .I1(start2),
        .I2(Bus_RNW_reg_reg_0),
        .O(Bus_RNW_reg_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    Bus_RNW_reg_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(Bus_RNW_reg_i_1_n_0),
        .Q(Bus_RNW_reg_reg_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF888FFFFF888F888)) 
    \FSM_onehot_state[0]_i_1 
       (.I0(Q[3]),
        .I1(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ),
        .I2(Q[2]),
        .I3(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ),
        .I4(state1__2),
        .I5(Q[0]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h0080FFFF00800080)) 
    \FSM_onehot_state[2]_i_1 
       (.I0(S_AXI_AWVALID),
        .I1(S_AXI_WVALID),
        .I2(Q[1]),
        .I3(S_AXI_ARVALID),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ),
        .I5(Q[2]),
        .O(D[1]));
  LUT4 #(
    .INIT(16'hF444)) 
    \FSM_onehot_state[3]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ),
        .I1(Q[3]),
        .I2(S_AXI_ARVALID),
        .I3(Q[1]),
        .O(D[2]));
  FDRE #(
    .INIT(1'b0)) 
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] 
       (.C(S_AXI_ACLK),
        .CE(start2),
        .D(ce_expnd_i_3),
        .Q(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \GEN_BKEND_CE_REGISTERS[1].ce_out_i[1]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 ),
        .I1(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ),
        .O(ce_expnd_i_2));
  FDRE #(
    .INIT(1'b0)) 
    \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] 
       (.C(S_AXI_ACLK),
        .CE(start2),
        .D(ce_expnd_i_2),
        .Q(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ),
        .R(cs_ce_clr));
  FDRE #(
    .INIT(1'b0)) 
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] 
       (.C(S_AXI_ACLK),
        .CE(start2),
        .D(ce_expnd_i_1),
        .Q(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .R(cs_ce_clr));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \GEN_BKEND_CE_REGISTERS[3].ce_out_i[3]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .I1(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I2(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ),
        .I3(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .I4(S_AXI_ARESETN),
        .O(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \GEN_BKEND_CE_REGISTERS[3].ce_out_i[3]_i_2 
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ),
        .I1(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 ),
        .O(ce_expnd_i_0));
  FDRE #(
    .INIT(1'b0)) 
    \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] 
       (.C(S_AXI_ACLK),
        .CE(start2),
        .D(ce_expnd_i_0),
        .Q(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .R(cs_ce_clr));
  cpu_pselect_f \MEM_DECODE_GEN[0].PER_CE_GEN[0].MULTIPLE_CES_THIS_CS_GEN.CE_I 
       (.\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] (\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 ),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 (\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ),
        .ce_expnd_i_3(ce_expnd_i_3));
  cpu_pselect_f__parameterized1 \MEM_DECODE_GEN[0].PER_CE_GEN[2].MULTIPLE_CES_THIS_CS_GEN.CE_I 
       (.\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] (\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 (\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 ),
        .ce_expnd_i_1(ce_expnd_i_1));
  LUT5 #(
    .INIT(32'hFF00FE00)) 
    S_AXI_ARREADY_INST_0
       (.I0(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .I1(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h00FF00FE)) 
    S_AXI_WREADY_INST_0
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .I1(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I2(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    \Use_Uart.enable_interrupts_i_1 
       (.I0(S_AXI_WDATA[3]),
        .I1(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .I2(Bus_RNW_reg_reg_0),
        .I3(enable_interrupts),
        .O(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ));
  LUT3 #(
    .INIT(8'h40)) 
    \Use_Uart.reset_RX_FIFO_i_2 
       (.I0(Bus_RNW_reg_reg_0),
        .I1(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .I2(S_AXI_WDATA[1]),
        .O(reset_RX_FIFO));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Use_Uart.reset_TX_FIFO_i_1 
       (.I0(Bus_RNW_reg_reg_0),
        .I1(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .I2(S_AXI_WDATA[0]),
        .O(reset_TX_FIFO));
  LUT3 #(
    .INIT(8'h40)) 
    \Using_FPGA.Native_I1_i_3 
       (.I0(Bus_RNW_reg_reg_0),
        .I1(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ),
        .I2(out),
        .O(FIFO_Write));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_I1_i_3__0 
       (.I0(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I1(Bus_RNW_reg_reg_0),
        .O(bus2ip_rdce));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h8)) 
    s_axi_bvalid_i_i_1
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ),
        .I1(Q[2]),
        .O(\FSM_onehot_state_reg[2] ));
  LUT5 #(
    .INIT(32'hAA00C000)) 
    \s_axi_rdata_i[0]_i_1 
       (.I0(rx_Data_Present),
        .I1(RX_Data[7]),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [0]));
  LUT5 #(
    .INIT(32'hAA00C000)) 
    \s_axi_rdata_i[1]_i_1 
       (.I0(RX_Buffer_Full),
        .I1(RX_Data[6]),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [1]));
  LUT5 #(
    .INIT(32'h5500C000)) 
    \s_axi_rdata_i[2]_i_1 
       (.I0(fifo_Data_Present),
        .I1(RX_Data[5]),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [2]));
  LUT5 #(
    .INIT(32'hAA00C000)) 
    \s_axi_rdata_i[3]_i_1 
       (.I0(tx_Buffer_Full),
        .I1(RX_Data[4]),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [3]));
  LUT5 #(
    .INIT(32'hAA00C000)) 
    \s_axi_rdata_i[4]_i_1 
       (.I0(enable_interrupts),
        .I1(RX_Data[3]),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [4]));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \s_axi_rdata_i[5]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .I1(Bus_RNW_reg_reg_0),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(RX_Data[2]),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [5]));
  LUT4 #(
    .INIT(16'h4000)) 
    \s_axi_rdata_i[6]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .I1(Bus_RNW_reg_reg_0),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(RX_Data[1]),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [6]));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \s_axi_rdata_i[7]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .I1(Bus_RNW_reg_reg_0),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(RX_Data[0]),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [7]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h8)) 
    s_axi_rvalid_i_i_1
       (.I0(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ),
        .I1(Q[3]),
        .O(\FSM_onehot_state_reg[3] ));
endmodule

(* ORIG_REF_NAME = "axi_lite_ipif" *) 
module cpu_axi_lite_ipif
   (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ,
    S_AXI_RRESP,
    Bus_RNW_reg,
    S_AXI_RVALID,
    S_AXI_BVALID,
    S_AXI_BRESP,
    \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ,
    FIFO_Write,
    bus2ip_wrce,
    clear_Ext_BRK,
    reset_RX_FIFO,
    reset_TX_FIFO,
    bus2ip_rdce,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ,
    S_AXI_RDATA,
    rst_reg,
    S_AXI_ACLK,
    S_AXI_AWVALID,
    S_AXI_WVALID,
    S_AXI_ARVALID,
    out,
    tx_Buffer_Full,
    rx_Data_Present,
    S_AXI_WDATA,
    RX_Data,
    RX_Buffer_Full,
    fifo_Data_Present,
    enable_interrupts,
    S_AXI_RREADY,
    S_AXI_BREADY,
    S_AXI_ARESETN,
    S_AXI_ARADDR,
    S_AXI_AWADDR);
  output \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  output \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  output [0:0]S_AXI_RRESP;
  output Bus_RNW_reg;
  output S_AXI_RVALID;
  output S_AXI_BVALID;
  output [0:0]S_AXI_BRESP;
  output \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ;
  output \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ;
  output FIFO_Write;
  output [0:0]bus2ip_wrce;
  output clear_Ext_BRK;
  output reset_RX_FIFO;
  output reset_TX_FIFO;
  output [0:0]bus2ip_rdce;
  output \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  output [7:0]S_AXI_RDATA;
  input rst_reg;
  input S_AXI_ACLK;
  input S_AXI_AWVALID;
  input S_AXI_WVALID;
  input S_AXI_ARVALID;
  input out;
  input tx_Buffer_Full;
  input rx_Data_Present;
  input [3:0]S_AXI_WDATA;
  input [0:7]RX_Data;
  input RX_Buffer_Full;
  input fifo_Data_Present;
  input enable_interrupts;
  input S_AXI_RREADY;
  input S_AXI_BREADY;
  input S_AXI_ARESETN;
  input [1:0]S_AXI_ARADDR;
  input [1:0]S_AXI_AWADDR;

  wire \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  wire Bus_RNW_reg;
  wire FIFO_Write;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ;
  wire \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire S_AXI_ACLK;
  wire [1:0]S_AXI_ARADDR;
  wire S_AXI_ARESETN;
  wire S_AXI_ARVALID;
  wire S_AXI_AWVALID;
  wire S_AXI_BVALID;
  wire [7:0]S_AXI_RDATA;
  wire S_AXI_RVALID;
  wire [3:0]S_AXI_WDATA;
  wire S_AXI_WVALID;
  wire [0:0]bus2ip_rdce;
  wire enable_interrupts;
  wire fifo_Data_Present;
  wire out;
  wire reset_RX_FIFO;
  wire reset_TX_FIFO;
  wire rst_reg;
  wire rx_Data_Present;
  wire tx_Buffer_Full;
  wire NLW_I_SLAVE_ATTACHMENT_S_AXI_BREADY_UNCONNECTED;
  wire NLW_I_SLAVE_ATTACHMENT_S_AXI_RREADY_UNCONNECTED;
  wire NLW_I_SLAVE_ATTACHMENT_clear_Ext_BRK_UNCONNECTED;
  wire [1:0]NLW_I_SLAVE_ATTACHMENT_S_AXI_AWADDR_UNCONNECTED;
  wire [0:0]NLW_I_SLAVE_ATTACHMENT_S_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_I_SLAVE_ATTACHMENT_S_AXI_RRESP_UNCONNECTED;
  wire [2:2]NLW_I_SLAVE_ATTACHMENT_S_AXI_WDATA_UNCONNECTED;
  wire [0:0]NLW_I_SLAVE_ATTACHMENT_bus2ip_wrce_UNCONNECTED;

  cpu_slave_attachment I_SLAVE_ATTACHMENT
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ),
        .Bus_RNW_reg_reg(Bus_RNW_reg),
        .FIFO_Write(FIFO_Write),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] (\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] (\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ),
        .\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] (\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ),
        .RX_Buffer_Full(RX_Buffer_Full),
        .RX_Data(RX_Data),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_ARADDR(S_AXI_ARADDR),
        .S_AXI_ARESETN(S_AXI_ARESETN),
        .S_AXI_ARVALID(S_AXI_ARVALID),
        .S_AXI_AWADDR(NLW_I_SLAVE_ATTACHMENT_S_AXI_AWADDR_UNCONNECTED[1:0]),
        .S_AXI_AWVALID(S_AXI_AWVALID),
        .S_AXI_BREADY(NLW_I_SLAVE_ATTACHMENT_S_AXI_BREADY_UNCONNECTED),
        .S_AXI_BRESP(NLW_I_SLAVE_ATTACHMENT_S_AXI_BRESP_UNCONNECTED[0]),
        .S_AXI_BVALID(S_AXI_BVALID),
        .S_AXI_RDATA(S_AXI_RDATA),
        .S_AXI_RREADY(NLW_I_SLAVE_ATTACHMENT_S_AXI_RREADY_UNCONNECTED),
        .S_AXI_RRESP(NLW_I_SLAVE_ATTACHMENT_S_AXI_RRESP_UNCONNECTED[0]),
        .S_AXI_RVALID(S_AXI_RVALID),
        .S_AXI_WDATA({S_AXI_WDATA[3],NLW_I_SLAVE_ATTACHMENT_S_AXI_WDATA_UNCONNECTED[2],S_AXI_WDATA[1:0]}),
        .S_AXI_WVALID(S_AXI_WVALID),
        .bus2ip_rdce(bus2ip_rdce),
        .bus2ip_wrce(NLW_I_SLAVE_ATTACHMENT_bus2ip_wrce_UNCONNECTED[0]),
        .clear_Ext_BRK(NLW_I_SLAVE_ATTACHMENT_clear_Ext_BRK_UNCONNECTED),
        .enable_interrupts(enable_interrupts),
        .fifo_Data_Present(fifo_Data_Present),
        .out(out),
        .reset_RX_FIFO(reset_RX_FIFO),
        .reset_TX_FIFO(reset_TX_FIFO),
        .rst_reg_0(rst_reg),
        .rx_Data_Present(rx_Data_Present),
        .tx_Buffer_Full(tx_Buffer_Full));
endmodule

(* HW_HANDOFF = "cpu.hwdef" *) (* ORIG_REF_NAME = "bd_3914" *) 
module cpu_bd_3914
   (Clk,
    IO_addr_strobe,
    IO_address,
    IO_byte_enable,
    IO_read_data,
    IO_read_strobe,
    IO_ready,
    IO_write_data,
    IO_write_strobe,
    Reset,
    TRACE_data_access,
    TRACE_data_address,
    TRACE_data_byte_enable,
    TRACE_data_read,
    TRACE_data_write,
    TRACE_data_write_value,
    TRACE_dcache_hit,
    TRACE_dcache_rdy,
    TRACE_dcache_read,
    TRACE_dcache_req,
    TRACE_delay_slot,
    TRACE_ex_piperun,
    TRACE_exception_kind,
    TRACE_exception_taken,
    TRACE_icache_hit,
    TRACE_icache_rdy,
    TRACE_icache_req,
    TRACE_instruction,
    TRACE_jump_hit,
    TRACE_jump_taken,
    TRACE_mb_halted,
    TRACE_mem_piperun,
    TRACE_msr_reg,
    TRACE_new_reg_value,
    TRACE_of_piperun,
    TRACE_pc,
    TRACE_pid_reg,
    TRACE_reg_addr,
    TRACE_reg_write,
    TRACE_valid_instr,
    UART_rxd,
    UART_txd);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.CLK, ASSOCIATED_ASYNC_RESET Reset, FREQ_HZ 100000000, INSERT_VIP 0, PHASE 0.000" *) input Clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO ADDR_STROBE" *) output IO_addr_strobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO ADDRESS" *) output [31:0]IO_address;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO BYTE_ENABLE" *) output [3:0]IO_byte_enable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO READ_DATA" *) input [31:0]IO_read_data;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO READ_STROBE" *) output IO_read_strobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO READY" *) input IO_ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO WRITE_DATA" *) output [31:0]IO_write_data;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO WRITE_STROBE" *) output IO_write_strobe;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.RESET RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.RESET, INSERT_VIP 0, POLARITY ACTIVE_HIGH" *) input Reset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_ACCESS" *) output TRACE_data_access;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_ADDRESS" *) output [0:31]TRACE_data_address;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_BYTE_ENABLE" *) output [0:3]TRACE_data_byte_enable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_READ" *) output TRACE_data_read;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_WRITE" *) output TRACE_data_write;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_WRITE_VALUE" *) output [0:31]TRACE_data_write_value;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DCACHE_HIT" *) output TRACE_dcache_hit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DCACHE_RDY" *) output TRACE_dcache_rdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DCACHE_READ" *) output TRACE_dcache_read;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DCACHE_REQ" *) output TRACE_dcache_req;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DELAY_SLOT" *) output TRACE_delay_slot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE EX_PIPERUN" *) output TRACE_ex_piperun;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE EXCEPTION_KIND" *) output [0:4]TRACE_exception_kind;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE EXCEPTION_TAKEN" *) output TRACE_exception_taken;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE ICACHE_HIT" *) output TRACE_icache_hit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE ICACHE_RDY" *) output TRACE_icache_rdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE ICACHE_REQ" *) output TRACE_icache_req;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE INSTRUCTION" *) output [0:31]TRACE_instruction;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE JUMP_HIT" *) output TRACE_jump_hit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE JUMP_TAKEN" *) output TRACE_jump_taken;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE MB_HALTED" *) output TRACE_mb_halted;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE MEM_PIPERUN" *) output TRACE_mem_piperun;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE MSR_REG" *) output [0:14]TRACE_msr_reg;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE NEW_REG_VALUE" *) output [0:31]TRACE_new_reg_value;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE OF_PIPERUN" *) output TRACE_of_piperun;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE PC" *) output [0:31]TRACE_pc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE PID_REG" *) output [0:7]TRACE_pid_reg;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE REG_ADDR" *) output [0:4]TRACE_reg_addr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE REG_WRITE" *) output TRACE_reg_write;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE VALID_INSTR" *) output TRACE_valid_instr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:uart:1.0 UART RxD" *) input UART_rxd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:uart:1.0 UART TxD" *) output UART_txd;

  wire Clk;
  wire Dbg_Wakeup;
  wire Debug_SYS_Rst;
  wire IO_Rst;
  wire [31:0]IO_address;
  wire [31:0]IO_read_data;
  wire IO_read_strobe;
  wire [31:0]IO_write_data;
  wire IO_write_strobe;
  wire LMB_Rst1;
  wire MB_Reset;
  wire Reset;
  wire [1:0]Wakeup;
  wire [0:31]dlmb_ABUS;
  wire dlmb_ADDRSTROBE;
  wire [0:3]dlmb_BE;
  wire [0:31]dlmb_READDBUS;
  wire dlmb_READSTROBE;
  wire dlmb_READY;
  wire dlmb_WAIT;
  wire [0:31]dlmb_WRITEDBUS;
  wire dlmb_WRITESTROBE;
  wire [0:31]dlmb_port_ADDR;
  wire dlmb_port_CLK;
  wire [0:31]dlmb_port_DIN;
  wire [31:0]dlmb_port_DOUT;
  wire dlmb_port_EN;
  wire [0:3]dlmb_port_WE;
  wire [0:31]dlmb_sl_0_ABUS;
  wire dlmb_sl_0_ADDRSTROBE;
  wire [0:3]dlmb_sl_0_BE;
  wire [0:31]dlmb_sl_0_READDBUS;
  wire dlmb_sl_0_READSTROBE;
  wire dlmb_sl_0_READY;
  wire [0:31]dlmb_sl_0_WRITEDBUS;
  wire dlmb_sl_0_WRITESTROBE;
  wire [0:31]dlmb_sl_1_READDBUS;
  wire dlmb_sl_1_READY;
  wire dlmb_sl_1_WAIT;
  wire [0:31]ilmb_ABUS;
  wire ilmb_ADDRSTROBE;
  wire [0:31]ilmb_READDBUS;
  wire ilmb_READY;
  wire [0:31]ilmb_port_ADDR;
  wire ilmb_port_CLK;
  wire [0:31]ilmb_port_DIN;
  wire [31:0]ilmb_port_DOUT;
  wire ilmb_port_EN;
  wire [0:3]ilmb_port_WE;
  wire [0:31]ilmb_sl_0_ABUS;
  wire ilmb_sl_0_ADDRSTROBE;
  wire [0:31]ilmb_sl_0_READDBUS;
  wire ilmb_sl_0_READY;
  wire [0:31]ilmb_sl_0_WRITEDBUS;
  wire mdm_0_ARESETN;
  wire [3:0]mdm_0_s_axi_ARADDR;
  wire mdm_0_s_axi_ARREADY;
  wire mdm_0_s_axi_ARVALID;
  wire mdm_0_s_axi_AWREADY;
  wire mdm_0_s_axi_AWVALID;
  wire mdm_0_s_axi_BVALID;
  wire [31:0]mdm_0_s_axi_RDATA;
  wire mdm_0_s_axi_RVALID;
  wire [31:0]mdm_0_s_axi_WDATA;
  wire mdm_0_s_axi_WREADY;
  wire mdm_0_s_axi_WVALID;
  wire microblaze_I_mdm_bus_CAPTURE;
  wire microblaze_I_mdm_bus_CLK;
  wire [0:7]microblaze_I_mdm_bus_REG_EN;
  wire microblaze_I_mdm_bus_RST;
  wire microblaze_I_mdm_bus_SHIFT;
  wire microblaze_I_mdm_bus_TDI;
  wire microblaze_I_mdm_bus_TDO;
  wire microblaze_I_mdm_bus_UPDATE;
  wire NLW_dlmb_LMB_CE_UNCONNECTED;
  wire NLW_dlmb_LMB_Clk_UNCONNECTED;
  wire NLW_dlmb_LMB_Rst_UNCONNECTED;
  wire NLW_dlmb_LMB_UE_UNCONNECTED;
  wire NLW_dlmb_SYS_Rst_UNCONNECTED;
  wire [9:31]NLW_dlmb_LMB_ABus_UNCONNECTED;
  wire [9:31]NLW_dlmb_M_ABus_UNCONNECTED;
  wire [0:1]NLW_dlmb_Sl_CE_UNCONNECTED;
  wire [0:1]NLW_dlmb_Sl_UE_UNCONNECTED;
  wire [0:0]NLW_dlmb_Sl_Wait_UNCONNECTED;
  wire NLW_dlmb_cntlr_BRAM_Rst_A_UNCONNECTED;
  wire NLW_dlmb_cntlr_LMB_ReadStrobe_UNCONNECTED;
  wire NLW_dlmb_cntlr_Sl_CE_UNCONNECTED;
  wire NLW_dlmb_cntlr_Sl_UE_UNCONNECTED;
  wire NLW_dlmb_cntlr_Sl_Wait_UNCONNECTED;
  wire [0:31]NLW_dlmb_cntlr_BRAM_Addr_A_UNCONNECTED;
  wire [2:31]NLW_dlmb_cntlr_LMB_ABus_UNCONNECTED;
  wire NLW_ilmb_LMB_CE_UNCONNECTED;
  wire NLW_ilmb_LMB_Clk_UNCONNECTED;
  wire NLW_ilmb_LMB_ReadStrobe_UNCONNECTED;
  wire NLW_ilmb_LMB_Rst_UNCONNECTED;
  wire NLW_ilmb_LMB_UE_UNCONNECTED;
  wire NLW_ilmb_LMB_Wait_UNCONNECTED;
  wire NLW_ilmb_LMB_WriteStrobe_UNCONNECTED;
  wire NLW_ilmb_M_ReadStrobe_UNCONNECTED;
  wire NLW_ilmb_M_WriteStrobe_UNCONNECTED;
  wire NLW_ilmb_SYS_Rst_UNCONNECTED;
  wire [0:31]NLW_ilmb_LMB_ABus_UNCONNECTED;
  wire [0:3]NLW_ilmb_LMB_BE_UNCONNECTED;
  wire [0:31]NLW_ilmb_M_ABus_UNCONNECTED;
  wire [0:3]NLW_ilmb_M_BE_UNCONNECTED;
  wire [0:0]NLW_ilmb_Sl_CE_UNCONNECTED;
  wire [0:0]NLW_ilmb_Sl_UE_UNCONNECTED;
  wire [0:0]NLW_ilmb_Sl_Wait_UNCONNECTED;
  wire NLW_ilmb_cntlr_BRAM_Rst_A_UNCONNECTED;
  wire NLW_ilmb_cntlr_LMB_ReadStrobe_UNCONNECTED;
  wire NLW_ilmb_cntlr_LMB_WriteStrobe_UNCONNECTED;
  wire NLW_ilmb_cntlr_Sl_CE_UNCONNECTED;
  wire NLW_ilmb_cntlr_Sl_UE_UNCONNECTED;
  wire NLW_ilmb_cntlr_Sl_Wait_UNCONNECTED;
  wire [0:31]NLW_ilmb_cntlr_BRAM_Addr_A_UNCONNECTED;
  wire [0:31]NLW_ilmb_cntlr_LMB_ABus_UNCONNECTED;
  wire [0:3]NLW_ilmb_cntlr_LMB_BE_UNCONNECTED;
  wire NLW_iomodule_0_IO_Addr_Strobe_UNCONNECTED;
  wire NLW_iomodule_0_IO_Ready_UNCONNECTED;
  wire NLW_iomodule_0_Sl_CE_UNCONNECTED;
  wire NLW_iomodule_0_Sl_UE_UNCONNECTED;
  wire NLW_iomodule_0_UART_Rx_UNCONNECTED;
  wire NLW_iomodule_0_UART_Tx_UNCONNECTED;
  wire [22:0]NLW_iomodule_0_IO_Address_UNCONNECTED;
  wire [3:0]NLW_iomodule_0_IO_Byte_Enable_UNCONNECTED;
  wire [31:11]NLW_iomodule_0_IO_Write_Data_UNCONNECTED;
  wire [9:31]NLW_iomodule_0_LMB_ABus_UNCONNECTED;
  wire [0:3]NLW_iomodule_0_LMB_BE_UNCONNECTED;
  wire [0:20]NLW_iomodule_0_LMB_WriteDBus_UNCONNECTED;
  wire NLW_lmb_bram_I_rsta_UNCONNECTED;
  wire NLW_lmb_bram_I_rsta_busy_UNCONNECTED;
  wire NLW_lmb_bram_I_rstb_UNCONNECTED;
  wire NLW_lmb_bram_I_rstb_busy_UNCONNECTED;
  wire [31:0]NLW_lmb_bram_I_addra_UNCONNECTED;
  wire [31:0]NLW_lmb_bram_I_addrb_UNCONNECTED;
  wire NLW_mdm_0_Dbg_Disable_0_UNCONNECTED;
  wire NLW_mdm_0_Interrupt_UNCONNECTED;
  wire NLW_mdm_0_S_AXI_BREADY_UNCONNECTED;
  wire NLW_mdm_0_S_AXI_RREADY_UNCONNECTED;
  wire [1:0]NLW_mdm_0_S_AXI_ARADDR_UNCONNECTED;
  wire [3:0]NLW_mdm_0_S_AXI_AWADDR_UNCONNECTED;
  wire [1:0]NLW_mdm_0_S_AXI_BRESP_UNCONNECTED;
  wire [31:8]NLW_mdm_0_S_AXI_RDATA_UNCONNECTED;
  wire [1:0]NLW_mdm_0_S_AXI_RRESP_UNCONNECTED;
  wire [31:8]NLW_mdm_0_S_AXI_WDATA_UNCONNECTED;
  wire [3:0]NLW_mdm_0_S_AXI_WSTRB_UNCONNECTED;
  wire NLW_microblaze_I_DCE_UNCONNECTED;
  wire NLW_microblaze_I_DUE_UNCONNECTED;
  wire NLW_microblaze_I_Dbg_Continue_UNCONNECTED;
  wire NLW_microblaze_I_Dbg_Disable_UNCONNECTED;
  wire NLW_microblaze_I_Dbg_Stop_UNCONNECTED;
  wire NLW_microblaze_I_Ext_BRK_UNCONNECTED;
  wire NLW_microblaze_I_Ext_NM_BRK_UNCONNECTED;
  wire NLW_microblaze_I_Hibernate_UNCONNECTED;
  wire NLW_microblaze_I_ICE_UNCONNECTED;
  wire NLW_microblaze_I_IFetch_UNCONNECTED;
  wire NLW_microblaze_I_IUE_UNCONNECTED;
  wire NLW_microblaze_I_IWAIT_UNCONNECTED;
  wire NLW_microblaze_I_Interrupt_UNCONNECTED;
  wire NLW_microblaze_I_MB_Halted_UNCONNECTED;
  wire NLW_microblaze_I_M_AXI_DP_BREADY_UNCONNECTED;
  wire NLW_microblaze_I_M_AXI_DP_RREADY_UNCONNECTED;
  wire NLW_microblaze_I_Pause_UNCONNECTED;
  wire NLW_microblaze_I_Pause_Ack_UNCONNECTED;
  wire NLW_microblaze_I_Sleep_UNCONNECTED;
  wire NLW_microblaze_I_Suspend_UNCONNECTED;
  wire NLW_microblaze_I_Trace_DCache_Hit_UNCONNECTED;
  wire NLW_microblaze_I_Trace_DCache_Rdy_UNCONNECTED;
  wire NLW_microblaze_I_Trace_DCache_Read_UNCONNECTED;
  wire NLW_microblaze_I_Trace_DCache_Req_UNCONNECTED;
  wire NLW_microblaze_I_Trace_Data_Access_UNCONNECTED;
  wire NLW_microblaze_I_Trace_Data_Read_UNCONNECTED;
  wire NLW_microblaze_I_Trace_Data_Write_UNCONNECTED;
  wire NLW_microblaze_I_Trace_Delay_Slot_UNCONNECTED;
  wire NLW_microblaze_I_Trace_EX_PipeRun_UNCONNECTED;
  wire NLW_microblaze_I_Trace_Exception_Taken_UNCONNECTED;
  wire NLW_microblaze_I_Trace_ICache_Hit_UNCONNECTED;
  wire NLW_microblaze_I_Trace_ICache_Rdy_UNCONNECTED;
  wire NLW_microblaze_I_Trace_ICache_Req_UNCONNECTED;
  wire NLW_microblaze_I_Trace_Jump_Hit_UNCONNECTED;
  wire NLW_microblaze_I_Trace_Jump_Taken_UNCONNECTED;
  wire NLW_microblaze_I_Trace_MB_Halted_UNCONNECTED;
  wire NLW_microblaze_I_Trace_MEM_PipeRun_UNCONNECTED;
  wire NLW_microblaze_I_Trace_OF_PipeRun_UNCONNECTED;
  wire NLW_microblaze_I_Trace_Reg_Write_UNCONNECTED;
  wire NLW_microblaze_I_Trace_Valid_Instr_UNCONNECTED;
  wire [9:31]NLW_microblaze_I_Data_Addr_UNCONNECTED;
  wire [0:31]NLW_microblaze_I_Instr_Addr_UNCONNECTED;
  wire [0:1]NLW_microblaze_I_Interrupt_Ack_UNCONNECTED;
  wire [0:31]NLW_microblaze_I_Interrupt_Address_UNCONNECTED;
  wire [31:0]NLW_microblaze_I_M_AXI_DP_ARADDR_UNCONNECTED;
  wire [2:0]NLW_microblaze_I_M_AXI_DP_ARPROT_UNCONNECTED;
  wire [31:0]NLW_microblaze_I_M_AXI_DP_AWADDR_UNCONNECTED;
  wire [2:0]NLW_microblaze_I_M_AXI_DP_AWPROT_UNCONNECTED;
  wire [1:0]NLW_microblaze_I_M_AXI_DP_BRESP_UNCONNECTED;
  wire [31:8]NLW_microblaze_I_M_AXI_DP_RDATA_UNCONNECTED;
  wire [1:0]NLW_microblaze_I_M_AXI_DP_RRESP_UNCONNECTED;
  wire [31:8]NLW_microblaze_I_M_AXI_DP_WDATA_UNCONNECTED;
  wire [3:0]NLW_microblaze_I_M_AXI_DP_WSTRB_UNCONNECTED;
  wire [0:3]NLW_microblaze_I_Non_Secure_UNCONNECTED;
  wire [0:1]NLW_microblaze_I_Reset_Mode_UNCONNECTED;
  wire [0:31]NLW_microblaze_I_Trace_Data_Address_UNCONNECTED;
  wire [0:3]NLW_microblaze_I_Trace_Data_Byte_Enable_UNCONNECTED;
  wire [0:31]NLW_microblaze_I_Trace_Data_Write_Value_UNCONNECTED;
  wire [0:4]NLW_microblaze_I_Trace_Exception_Kind_UNCONNECTED;
  wire [0:31]NLW_microblaze_I_Trace_Instruction_UNCONNECTED;
  wire [0:14]NLW_microblaze_I_Trace_MSR_Reg_UNCONNECTED;
  wire [0:31]NLW_microblaze_I_Trace_New_Reg_Value_UNCONNECTED;
  wire [0:31]NLW_microblaze_I_Trace_PC_UNCONNECTED;
  wire [0:7]NLW_microblaze_I_Trace_PID_Reg_UNCONNECTED;
  wire [0:4]NLW_microblaze_I_Trace_Reg_Addr_UNCONNECTED;
  wire NLW_rst_0_aux_reset_in_UNCONNECTED;
  wire NLW_rst_0_dcm_locked_UNCONNECTED;
  wire [0:0]NLW_rst_0_interconnect_aresetn_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "bd_3914_dlmb_0,lmb_v10,{}" *) 
  (* X_CORE_INFO = "lmb_v10,Vivado 2018.3" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  cpu_bd_3914_dlmb_0 dlmb
       (.LMB_ABus({dlmb_sl_0_ABUS[0:8],NLW_dlmb_LMB_ABus_UNCONNECTED[9:14],dlmb_sl_0_ABUS[15:29],NLW_dlmb_LMB_ABus_UNCONNECTED[30:31]}),
        .LMB_AddrStrobe(dlmb_sl_0_ADDRSTROBE),
        .LMB_BE(dlmb_sl_0_BE),
        .LMB_CE(NLW_dlmb_LMB_CE_UNCONNECTED),
        .LMB_Clk(NLW_dlmb_LMB_Clk_UNCONNECTED),
        .LMB_ReadDBus(dlmb_READDBUS),
        .LMB_ReadStrobe(dlmb_sl_0_READSTROBE),
        .LMB_Ready(dlmb_READY),
        .LMB_Rst(NLW_dlmb_LMB_Rst_UNCONNECTED),
        .LMB_UE(NLW_dlmb_LMB_UE_UNCONNECTED),
        .LMB_Wait(dlmb_WAIT),
        .LMB_WriteDBus(dlmb_sl_0_WRITEDBUS),
        .LMB_WriteStrobe(dlmb_sl_0_WRITESTROBE),
        .M_ABus({dlmb_ABUS[0:8],NLW_dlmb_M_ABus_UNCONNECTED[9:14],dlmb_ABUS[15:29],NLW_dlmb_M_ABus_UNCONNECTED[30:31]}),
        .M_AddrStrobe(dlmb_ADDRSTROBE),
        .M_BE(dlmb_BE),
        .M_DBus(dlmb_WRITEDBUS),
        .M_ReadStrobe(dlmb_READSTROBE),
        .M_WriteStrobe(dlmb_WRITESTROBE),
        .SYS_Rst(NLW_dlmb_SYS_Rst_UNCONNECTED),
        .Sl_CE(NLW_dlmb_Sl_CE_UNCONNECTED[0:1]),
        .Sl_DBus({dlmb_sl_0_READDBUS,dlmb_sl_1_READDBUS}),
        .Sl_Ready({dlmb_sl_0_READY,dlmb_sl_1_READY}),
        .Sl_UE(NLW_dlmb_Sl_UE_UNCONNECTED[0:1]),
        .Sl_Wait({NLW_dlmb_Sl_Wait_UNCONNECTED[0],dlmb_sl_1_WAIT}));
  (* BMM_INFO_ADDRESS_SPACE = "byte  0x00000000 32 > bd_3914 lmb_bram_I" *) 
  (* CHECK_LICENSE_TYPE = "bd_3914_dlmb_cntlr_0,lmb_bram_if_cntlr,{}" *) 
  (* X_CORE_INFO = "lmb_bram_if_cntlr,Vivado 2018.3" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  cpu_bd_3914_dlmb_cntlr_0 dlmb_cntlr
       (.BRAM_Addr_A({NLW_dlmb_cntlr_BRAM_Addr_A_UNCONNECTED[0:14],dlmb_port_ADDR[15:29],NLW_dlmb_cntlr_BRAM_Addr_A_UNCONNECTED[30:31]}),
        .BRAM_Clk_A(dlmb_port_CLK),
        .BRAM_Din_A({dlmb_port_DOUT[31],dlmb_port_DOUT[30],dlmb_port_DOUT[29],dlmb_port_DOUT[28],dlmb_port_DOUT[27],dlmb_port_DOUT[26],dlmb_port_DOUT[25],dlmb_port_DOUT[24],dlmb_port_DOUT[23],dlmb_port_DOUT[22],dlmb_port_DOUT[21],dlmb_port_DOUT[20],dlmb_port_DOUT[19],dlmb_port_DOUT[18],dlmb_port_DOUT[17],dlmb_port_DOUT[16],dlmb_port_DOUT[15],dlmb_port_DOUT[14],dlmb_port_DOUT[13],dlmb_port_DOUT[12],dlmb_port_DOUT[11],dlmb_port_DOUT[10],dlmb_port_DOUT[9],dlmb_port_DOUT[8],dlmb_port_DOUT[7],dlmb_port_DOUT[6],dlmb_port_DOUT[5],dlmb_port_DOUT[4],dlmb_port_DOUT[3],dlmb_port_DOUT[2],dlmb_port_DOUT[1],dlmb_port_DOUT[0]}),
        .BRAM_Dout_A(dlmb_port_DIN),
        .BRAM_EN_A(dlmb_port_EN),
        .BRAM_Rst_A(NLW_dlmb_cntlr_BRAM_Rst_A_UNCONNECTED),
        .BRAM_WEN_A(dlmb_port_WE),
        .LMB_ABus({dlmb_sl_0_ABUS[0:1],NLW_dlmb_cntlr_LMB_ABus_UNCONNECTED[2:14],dlmb_sl_0_ABUS[15:29],NLW_dlmb_cntlr_LMB_ABus_UNCONNECTED[30:31]}),
        .LMB_AddrStrobe(dlmb_sl_0_ADDRSTROBE),
        .LMB_BE(dlmb_sl_0_BE),
        .LMB_Clk(Clk),
        .LMB_ReadStrobe(NLW_dlmb_cntlr_LMB_ReadStrobe_UNCONNECTED),
        .LMB_Rst(LMB_Rst1),
        .LMB_WriteDBus(dlmb_sl_0_WRITEDBUS),
        .LMB_WriteStrobe(dlmb_sl_0_WRITESTROBE),
        .Sl_CE(NLW_dlmb_cntlr_Sl_CE_UNCONNECTED),
        .Sl_DBus(dlmb_sl_0_READDBUS),
        .Sl_Ready(dlmb_sl_0_READY),
        .Sl_UE(NLW_dlmb_cntlr_Sl_UE_UNCONNECTED),
        .Sl_Wait(NLW_dlmb_cntlr_Sl_Wait_UNCONNECTED));
  (* CHECK_LICENSE_TYPE = "bd_3914_ilmb_0,lmb_v10,{}" *) 
  (* X_CORE_INFO = "lmb_v10,Vivado 2018.3" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  cpu_bd_3914_ilmb_0 ilmb
       (.LMB_ABus({NLW_ilmb_LMB_ABus_UNCONNECTED[0:14],ilmb_sl_0_ABUS[15:29],NLW_ilmb_LMB_ABus_UNCONNECTED[30:31]}),
        .LMB_AddrStrobe(ilmb_sl_0_ADDRSTROBE),
        .LMB_BE(NLW_ilmb_LMB_BE_UNCONNECTED[0:3]),
        .LMB_CE(NLW_ilmb_LMB_CE_UNCONNECTED),
        .LMB_Clk(NLW_ilmb_LMB_Clk_UNCONNECTED),
        .LMB_ReadDBus(ilmb_READDBUS),
        .LMB_ReadStrobe(NLW_ilmb_LMB_ReadStrobe_UNCONNECTED),
        .LMB_Ready(ilmb_READY),
        .LMB_Rst(NLW_ilmb_LMB_Rst_UNCONNECTED),
        .LMB_UE(NLW_ilmb_LMB_UE_UNCONNECTED),
        .LMB_Wait(NLW_ilmb_LMB_Wait_UNCONNECTED),
        .LMB_WriteDBus(ilmb_sl_0_WRITEDBUS),
        .LMB_WriteStrobe(NLW_ilmb_LMB_WriteStrobe_UNCONNECTED),
        .M_ABus({NLW_ilmb_M_ABus_UNCONNECTED[0:14],ilmb_ABUS[15:29],NLW_ilmb_M_ABus_UNCONNECTED[30:31]}),
        .M_AddrStrobe(ilmb_ADDRSTROBE),
        .M_BE(NLW_ilmb_M_BE_UNCONNECTED[0:3]),
        .M_DBus({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_ReadStrobe(NLW_ilmb_M_ReadStrobe_UNCONNECTED),
        .M_WriteStrobe(NLW_ilmb_M_WriteStrobe_UNCONNECTED),
        .SYS_Rst(NLW_ilmb_SYS_Rst_UNCONNECTED),
        .Sl_CE(NLW_ilmb_Sl_CE_UNCONNECTED[0]),
        .Sl_DBus(ilmb_sl_0_READDBUS),
        .Sl_Ready(ilmb_sl_0_READY),
        .Sl_UE(NLW_ilmb_Sl_UE_UNCONNECTED[0]),
        .Sl_Wait(NLW_ilmb_Sl_Wait_UNCONNECTED[0]));
  (* CHECK_LICENSE_TYPE = "bd_3914_ilmb_cntlr_0,lmb_bram_if_cntlr,{}" *) 
  (* X_CORE_INFO = "lmb_bram_if_cntlr,Vivado 2018.3" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  cpu_bd_3914_ilmb_cntlr_0 ilmb_cntlr
       (.BRAM_Addr_A({NLW_ilmb_cntlr_BRAM_Addr_A_UNCONNECTED[0:14],ilmb_port_ADDR[15:29],NLW_ilmb_cntlr_BRAM_Addr_A_UNCONNECTED[30:31]}),
        .BRAM_Clk_A(ilmb_port_CLK),
        .BRAM_Din_A({ilmb_port_DOUT[31],ilmb_port_DOUT[30],ilmb_port_DOUT[29],ilmb_port_DOUT[28],ilmb_port_DOUT[27],ilmb_port_DOUT[26],ilmb_port_DOUT[25],ilmb_port_DOUT[24],ilmb_port_DOUT[23],ilmb_port_DOUT[22],ilmb_port_DOUT[21],ilmb_port_DOUT[20],ilmb_port_DOUT[19],ilmb_port_DOUT[18],ilmb_port_DOUT[17],ilmb_port_DOUT[16],ilmb_port_DOUT[15],ilmb_port_DOUT[14],ilmb_port_DOUT[13],ilmb_port_DOUT[12],ilmb_port_DOUT[11],ilmb_port_DOUT[10],ilmb_port_DOUT[9],ilmb_port_DOUT[8],ilmb_port_DOUT[7],ilmb_port_DOUT[6],ilmb_port_DOUT[5],ilmb_port_DOUT[4],ilmb_port_DOUT[3],ilmb_port_DOUT[2],ilmb_port_DOUT[1],ilmb_port_DOUT[0]}),
        .BRAM_Dout_A(ilmb_port_DIN),
        .BRAM_EN_A(ilmb_port_EN),
        .BRAM_Rst_A(NLW_ilmb_cntlr_BRAM_Rst_A_UNCONNECTED),
        .BRAM_WEN_A(ilmb_port_WE),
        .LMB_ABus({NLW_ilmb_cntlr_LMB_ABus_UNCONNECTED[0:14],ilmb_sl_0_ABUS[15:29],NLW_ilmb_cntlr_LMB_ABus_UNCONNECTED[30:31]}),
        .LMB_AddrStrobe(ilmb_sl_0_ADDRSTROBE),
        .LMB_BE(NLW_ilmb_cntlr_LMB_BE_UNCONNECTED[0:3]),
        .LMB_Clk(Clk),
        .LMB_ReadStrobe(NLW_ilmb_cntlr_LMB_ReadStrobe_UNCONNECTED),
        .LMB_Rst(LMB_Rst1),
        .LMB_WriteDBus(ilmb_sl_0_WRITEDBUS),
        .LMB_WriteStrobe(NLW_ilmb_cntlr_LMB_WriteStrobe_UNCONNECTED),
        .Sl_CE(NLW_ilmb_cntlr_Sl_CE_UNCONNECTED),
        .Sl_DBus(ilmb_sl_0_READDBUS),
        .Sl_Ready(ilmb_sl_0_READY),
        .Sl_UE(NLW_ilmb_cntlr_Sl_UE_UNCONNECTED),
        .Sl_Wait(NLW_ilmb_cntlr_Sl_Wait_UNCONNECTED));
  (* CHECK_LICENSE_TYPE = "bd_3914_iomodule_0_0,iomodule,{}" *) 
  (* X_CORE_INFO = "iomodule,Vivado 2018.3" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  cpu_bd_3914_iomodule_0_0 iomodule_0
       (.Clk(Clk),
        .IO_Addr_Strobe(NLW_iomodule_0_IO_Addr_Strobe_UNCONNECTED),
        .IO_Address({IO_address[31:23],NLW_iomodule_0_IO_Address_UNCONNECTED[22:13],IO_address[12:7],NLW_iomodule_0_IO_Address_UNCONNECTED[6:4],IO_address[3:2],NLW_iomodule_0_IO_Address_UNCONNECTED[1:0]}),
        .IO_Byte_Enable(NLW_iomodule_0_IO_Byte_Enable_UNCONNECTED[3:0]),
        .IO_Read_Data(IO_read_data),
        .IO_Read_Strobe(IO_read_strobe),
        .IO_Ready(NLW_iomodule_0_IO_Ready_UNCONNECTED),
        .IO_Write_Data({NLW_iomodule_0_IO_Write_Data_UNCONNECTED[31:11],IO_write_data[10:0]}),
        .IO_Write_Strobe(IO_write_strobe),
        .LMB_ABus({dlmb_sl_0_ABUS[0:8],NLW_iomodule_0_LMB_ABus_UNCONNECTED[9:18],dlmb_sl_0_ABUS[19:29],NLW_iomodule_0_LMB_ABus_UNCONNECTED[30:31]}),
        .LMB_AddrStrobe(dlmb_sl_0_ADDRSTROBE),
        .LMB_BE(NLW_iomodule_0_LMB_BE_UNCONNECTED[0:3]),
        .LMB_ReadStrobe(dlmb_sl_0_READSTROBE),
        .LMB_WriteDBus({NLW_iomodule_0_LMB_WriteDBus_UNCONNECTED[0:20],dlmb_sl_0_WRITEDBUS[21:31]}),
        .LMB_WriteStrobe(dlmb_sl_0_WRITESTROBE),
        .Rst(IO_Rst),
        .Sl_CE(NLW_iomodule_0_Sl_CE_UNCONNECTED),
        .Sl_DBus(dlmb_sl_1_READDBUS),
        .Sl_Ready(dlmb_sl_1_READY),
        .Sl_UE(NLW_iomodule_0_Sl_UE_UNCONNECTED),
        .Sl_Wait(dlmb_sl_1_WAIT),
        .UART_Rx(NLW_iomodule_0_UART_Rx_UNCONNECTED),
        .UART_Tx(NLW_iomodule_0_UART_Tx_UNCONNECTED));
  (* CHECK_LICENSE_TYPE = "bd_3914_lmb_bram_I_0,blk_mem_gen_v8_4_2,{}" *) 
  (* X_CORE_INFO = "blk_mem_gen_v8_4_2,Vivado 2018.3" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  cpu_bd_3914_lmb_bram_I_0 lmb_bram_I
       (.addra({NLW_lmb_bram_I_addra_UNCONNECTED[31:17],dlmb_port_ADDR[15],dlmb_port_ADDR[16],dlmb_port_ADDR[17],dlmb_port_ADDR[18],dlmb_port_ADDR[19],dlmb_port_ADDR[20],dlmb_port_ADDR[21],dlmb_port_ADDR[22],dlmb_port_ADDR[23],dlmb_port_ADDR[24],dlmb_port_ADDR[25],dlmb_port_ADDR[26],dlmb_port_ADDR[27],dlmb_port_ADDR[28],dlmb_port_ADDR[29],NLW_lmb_bram_I_addra_UNCONNECTED[1:0]}),
        .addrb({NLW_lmb_bram_I_addrb_UNCONNECTED[31:17],ilmb_port_ADDR[15],ilmb_port_ADDR[16],ilmb_port_ADDR[17],ilmb_port_ADDR[18],ilmb_port_ADDR[19],ilmb_port_ADDR[20],ilmb_port_ADDR[21],ilmb_port_ADDR[22],ilmb_port_ADDR[23],ilmb_port_ADDR[24],ilmb_port_ADDR[25],ilmb_port_ADDR[26],ilmb_port_ADDR[27],ilmb_port_ADDR[28],ilmb_port_ADDR[29],NLW_lmb_bram_I_addrb_UNCONNECTED[1:0]}),
        .clka(dlmb_port_CLK),
        .clkb(ilmb_port_CLK),
        .dina({dlmb_port_DIN[0],dlmb_port_DIN[1],dlmb_port_DIN[2],dlmb_port_DIN[3],dlmb_port_DIN[4],dlmb_port_DIN[5],dlmb_port_DIN[6],dlmb_port_DIN[7],dlmb_port_DIN[8],dlmb_port_DIN[9],dlmb_port_DIN[10],dlmb_port_DIN[11],dlmb_port_DIN[12],dlmb_port_DIN[13],dlmb_port_DIN[14],dlmb_port_DIN[15],dlmb_port_DIN[16],dlmb_port_DIN[17],dlmb_port_DIN[18],dlmb_port_DIN[19],dlmb_port_DIN[20],dlmb_port_DIN[21],dlmb_port_DIN[22],dlmb_port_DIN[23],dlmb_port_DIN[24],dlmb_port_DIN[25],dlmb_port_DIN[26],dlmb_port_DIN[27],dlmb_port_DIN[28],dlmb_port_DIN[29],dlmb_port_DIN[30],dlmb_port_DIN[31]}),
        .dinb({ilmb_port_DIN[0],ilmb_port_DIN[1],ilmb_port_DIN[2],ilmb_port_DIN[3],ilmb_port_DIN[4],ilmb_port_DIN[5],ilmb_port_DIN[6],ilmb_port_DIN[7],ilmb_port_DIN[8],ilmb_port_DIN[9],ilmb_port_DIN[10],ilmb_port_DIN[11],ilmb_port_DIN[12],ilmb_port_DIN[13],ilmb_port_DIN[14],ilmb_port_DIN[15],ilmb_port_DIN[16],ilmb_port_DIN[17],ilmb_port_DIN[18],ilmb_port_DIN[19],ilmb_port_DIN[20],ilmb_port_DIN[21],ilmb_port_DIN[22],ilmb_port_DIN[23],ilmb_port_DIN[24],ilmb_port_DIN[25],ilmb_port_DIN[26],ilmb_port_DIN[27],ilmb_port_DIN[28],ilmb_port_DIN[29],ilmb_port_DIN[30],ilmb_port_DIN[31]}),
        .douta(dlmb_port_DOUT),
        .doutb(ilmb_port_DOUT),
        .ena(dlmb_port_EN),
        .enb(ilmb_port_EN),
        .rsta(NLW_lmb_bram_I_rsta_UNCONNECTED),
        .rsta_busy(NLW_lmb_bram_I_rsta_busy_UNCONNECTED),
        .rstb(NLW_lmb_bram_I_rstb_UNCONNECTED),
        .rstb_busy(NLW_lmb_bram_I_rstb_busy_UNCONNECTED),
        .wea({dlmb_port_WE[0],dlmb_port_WE[1],dlmb_port_WE[2],dlmb_port_WE[3]}),
        .web({ilmb_port_WE[0],ilmb_port_WE[1],ilmb_port_WE[2],ilmb_port_WE[3]}));
  (* CHECK_LICENSE_TYPE = "bd_3914_mdm_0_0,MDM,{}" *) 
  (* X_CORE_INFO = "MDM,Vivado 2018.3" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  cpu_bd_3914_mdm_0_0 mdm_0
       (.Dbg_Capture_0(microblaze_I_mdm_bus_CAPTURE),
        .Dbg_Clk_0(microblaze_I_mdm_bus_CLK),
        .Dbg_Disable_0(NLW_mdm_0_Dbg_Disable_0_UNCONNECTED),
        .Dbg_Reg_En_0(microblaze_I_mdm_bus_REG_EN),
        .Dbg_Rst_0(microblaze_I_mdm_bus_RST),
        .Dbg_Shift_0(microblaze_I_mdm_bus_SHIFT),
        .Dbg_TDI_0(microblaze_I_mdm_bus_TDI),
        .Dbg_TDO_0(microblaze_I_mdm_bus_TDO),
        .Dbg_Update_0(microblaze_I_mdm_bus_UPDATE),
        .Debug_SYS_Rst(Debug_SYS_Rst),
        .Interrupt(NLW_mdm_0_Interrupt_UNCONNECTED),
        .S_AXI_ACLK(Clk),
        .S_AXI_ARADDR({mdm_0_s_axi_ARADDR[3:2],NLW_mdm_0_S_AXI_ARADDR_UNCONNECTED[1:0]}),
        .S_AXI_ARESETN(mdm_0_ARESETN),
        .S_AXI_ARREADY(mdm_0_s_axi_ARREADY),
        .S_AXI_ARVALID(mdm_0_s_axi_ARVALID),
        .S_AXI_AWADDR(NLW_mdm_0_S_AXI_AWADDR_UNCONNECTED[3:0]),
        .S_AXI_AWREADY(mdm_0_s_axi_AWREADY),
        .S_AXI_AWVALID(mdm_0_s_axi_AWVALID),
        .S_AXI_BREADY(NLW_mdm_0_S_AXI_BREADY_UNCONNECTED),
        .S_AXI_BRESP(NLW_mdm_0_S_AXI_BRESP_UNCONNECTED[1:0]),
        .S_AXI_BVALID(mdm_0_s_axi_BVALID),
        .S_AXI_RDATA({NLW_mdm_0_S_AXI_RDATA_UNCONNECTED[31:8],mdm_0_s_axi_RDATA[7:0]}),
        .S_AXI_RREADY(NLW_mdm_0_S_AXI_RREADY_UNCONNECTED),
        .S_AXI_RRESP(NLW_mdm_0_S_AXI_RRESP_UNCONNECTED[1:0]),
        .S_AXI_RVALID(mdm_0_s_axi_RVALID),
        .S_AXI_WDATA({NLW_mdm_0_S_AXI_WDATA_UNCONNECTED[31:8],mdm_0_s_axi_WDATA[7:0]}),
        .S_AXI_WREADY(mdm_0_s_axi_WREADY),
        .S_AXI_WSTRB(NLW_mdm_0_S_AXI_WSTRB_UNCONNECTED[3:0]),
        .S_AXI_WVALID(mdm_0_s_axi_WVALID));
  (* BMM_INFO_PROCESSOR = "microblaze-le > bd_3914 dlmb_cntlr" *) 
  (* CHECK_LICENSE_TYPE = "bd_3914_microblaze_I_0,MicroBlaze,{}" *) 
  (* X_CORE_INFO = "MicroBlaze,Vivado 2018.3" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  cpu_bd_3914_microblaze_I_0 microblaze_I
       (.Byte_Enable(dlmb_BE),
        .Clk(Clk),
        .DCE(NLW_microblaze_I_DCE_UNCONNECTED),
        .DReady(dlmb_READY),
        .DUE(NLW_microblaze_I_DUE_UNCONNECTED),
        .DWait(dlmb_WAIT),
        .D_AS(dlmb_ADDRSTROBE),
        .Data_Addr({dlmb_ABUS[0:8],NLW_microblaze_I_Data_Addr_UNCONNECTED[9:14],dlmb_ABUS[15:29],NLW_microblaze_I_Data_Addr_UNCONNECTED[30:31]}),
        .Data_Read(dlmb_READDBUS),
        .Data_Write(dlmb_WRITEDBUS),
        .Dbg_Capture(microblaze_I_mdm_bus_CAPTURE),
        .Dbg_Clk(microblaze_I_mdm_bus_CLK),
        .Dbg_Continue(NLW_microblaze_I_Dbg_Continue_UNCONNECTED),
        .Dbg_Disable(NLW_microblaze_I_Dbg_Disable_UNCONNECTED),
        .Dbg_Reg_En(microblaze_I_mdm_bus_REG_EN),
        .Dbg_Shift(microblaze_I_mdm_bus_SHIFT),
        .Dbg_Stop(NLW_microblaze_I_Dbg_Stop_UNCONNECTED),
        .Dbg_TDI(microblaze_I_mdm_bus_TDI),
        .Dbg_TDO(microblaze_I_mdm_bus_TDO),
        .Dbg_Update(microblaze_I_mdm_bus_UPDATE),
        .Dbg_Wakeup(Dbg_Wakeup),
        .Debug_Rst(microblaze_I_mdm_bus_RST),
        .Ext_BRK(NLW_microblaze_I_Ext_BRK_UNCONNECTED),
        .Ext_NM_BRK(NLW_microblaze_I_Ext_NM_BRK_UNCONNECTED),
        .Hibernate(NLW_microblaze_I_Hibernate_UNCONNECTED),
        .ICE(NLW_microblaze_I_ICE_UNCONNECTED),
        .IFetch(NLW_microblaze_I_IFetch_UNCONNECTED),
        .IReady(ilmb_READY),
        .IUE(NLW_microblaze_I_IUE_UNCONNECTED),
        .IWAIT(NLW_microblaze_I_IWAIT_UNCONNECTED),
        .I_AS(ilmb_ADDRSTROBE),
        .Instr(ilmb_READDBUS),
        .Instr_Addr({NLW_microblaze_I_Instr_Addr_UNCONNECTED[0:14],ilmb_ABUS[15:29],NLW_microblaze_I_Instr_Addr_UNCONNECTED[30:31]}),
        .Interrupt(NLW_microblaze_I_Interrupt_UNCONNECTED),
        .Interrupt_Ack(NLW_microblaze_I_Interrupt_Ack_UNCONNECTED[0:1]),
        .Interrupt_Address(NLW_microblaze_I_Interrupt_Address_UNCONNECTED[0:31]),
        .MB_Halted(NLW_microblaze_I_MB_Halted_UNCONNECTED),
        .M_AXI_DP_ARADDR({NLW_microblaze_I_M_AXI_DP_ARADDR_UNCONNECTED[31:4],mdm_0_s_axi_ARADDR[3:2],NLW_microblaze_I_M_AXI_DP_ARADDR_UNCONNECTED[1:0]}),
        .M_AXI_DP_ARPROT(NLW_microblaze_I_M_AXI_DP_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_DP_ARREADY(mdm_0_s_axi_ARREADY),
        .M_AXI_DP_ARVALID(mdm_0_s_axi_ARVALID),
        .M_AXI_DP_AWADDR(NLW_microblaze_I_M_AXI_DP_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_DP_AWPROT(NLW_microblaze_I_M_AXI_DP_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_DP_AWREADY(mdm_0_s_axi_AWREADY),
        .M_AXI_DP_AWVALID(mdm_0_s_axi_AWVALID),
        .M_AXI_DP_BREADY(NLW_microblaze_I_M_AXI_DP_BREADY_UNCONNECTED),
        .M_AXI_DP_BRESP(NLW_microblaze_I_M_AXI_DP_BRESP_UNCONNECTED[1:0]),
        .M_AXI_DP_BVALID(mdm_0_s_axi_BVALID),
        .M_AXI_DP_RDATA({NLW_microblaze_I_M_AXI_DP_RDATA_UNCONNECTED[31:8],mdm_0_s_axi_RDATA[7:0]}),
        .M_AXI_DP_RREADY(NLW_microblaze_I_M_AXI_DP_RREADY_UNCONNECTED),
        .M_AXI_DP_RRESP(NLW_microblaze_I_M_AXI_DP_RRESP_UNCONNECTED[1:0]),
        .M_AXI_DP_RVALID(mdm_0_s_axi_RVALID),
        .M_AXI_DP_WDATA({NLW_microblaze_I_M_AXI_DP_WDATA_UNCONNECTED[31:8],mdm_0_s_axi_WDATA[7:0]}),
        .M_AXI_DP_WREADY(mdm_0_s_axi_WREADY),
        .M_AXI_DP_WSTRB(NLW_microblaze_I_M_AXI_DP_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_DP_WVALID(mdm_0_s_axi_WVALID),
        .Non_Secure(NLW_microblaze_I_Non_Secure_UNCONNECTED[0:3]),
        .Pause(NLW_microblaze_I_Pause_UNCONNECTED),
        .Pause_Ack(NLW_microblaze_I_Pause_Ack_UNCONNECTED),
        .Read_Strobe(dlmb_READSTROBE),
        .Reset(MB_Reset),
        .Reset_Mode(NLW_microblaze_I_Reset_Mode_UNCONNECTED[0:1]),
        .Sleep(NLW_microblaze_I_Sleep_UNCONNECTED),
        .Suspend(NLW_microblaze_I_Suspend_UNCONNECTED),
        .Trace_DCache_Hit(NLW_microblaze_I_Trace_DCache_Hit_UNCONNECTED),
        .Trace_DCache_Rdy(NLW_microblaze_I_Trace_DCache_Rdy_UNCONNECTED),
        .Trace_DCache_Read(NLW_microblaze_I_Trace_DCache_Read_UNCONNECTED),
        .Trace_DCache_Req(NLW_microblaze_I_Trace_DCache_Req_UNCONNECTED),
        .Trace_Data_Access(NLW_microblaze_I_Trace_Data_Access_UNCONNECTED),
        .Trace_Data_Address(NLW_microblaze_I_Trace_Data_Address_UNCONNECTED[0:31]),
        .Trace_Data_Byte_Enable(NLW_microblaze_I_Trace_Data_Byte_Enable_UNCONNECTED[0:3]),
        .Trace_Data_Read(NLW_microblaze_I_Trace_Data_Read_UNCONNECTED),
        .Trace_Data_Write(NLW_microblaze_I_Trace_Data_Write_UNCONNECTED),
        .Trace_Data_Write_Value(NLW_microblaze_I_Trace_Data_Write_Value_UNCONNECTED[0:31]),
        .Trace_Delay_Slot(NLW_microblaze_I_Trace_Delay_Slot_UNCONNECTED),
        .Trace_EX_PipeRun(NLW_microblaze_I_Trace_EX_PipeRun_UNCONNECTED),
        .Trace_Exception_Kind(NLW_microblaze_I_Trace_Exception_Kind_UNCONNECTED[0:4]),
        .Trace_Exception_Taken(NLW_microblaze_I_Trace_Exception_Taken_UNCONNECTED),
        .Trace_ICache_Hit(NLW_microblaze_I_Trace_ICache_Hit_UNCONNECTED),
        .Trace_ICache_Rdy(NLW_microblaze_I_Trace_ICache_Rdy_UNCONNECTED),
        .Trace_ICache_Req(NLW_microblaze_I_Trace_ICache_Req_UNCONNECTED),
        .Trace_Instruction(NLW_microblaze_I_Trace_Instruction_UNCONNECTED[0:31]),
        .Trace_Jump_Hit(NLW_microblaze_I_Trace_Jump_Hit_UNCONNECTED),
        .Trace_Jump_Taken(NLW_microblaze_I_Trace_Jump_Taken_UNCONNECTED),
        .Trace_MB_Halted(NLW_microblaze_I_Trace_MB_Halted_UNCONNECTED),
        .Trace_MEM_PipeRun(NLW_microblaze_I_Trace_MEM_PipeRun_UNCONNECTED),
        .Trace_MSR_Reg(NLW_microblaze_I_Trace_MSR_Reg_UNCONNECTED[0:14]),
        .Trace_New_Reg_Value(NLW_microblaze_I_Trace_New_Reg_Value_UNCONNECTED[0:31]),
        .Trace_OF_PipeRun(NLW_microblaze_I_Trace_OF_PipeRun_UNCONNECTED),
        .Trace_PC(NLW_microblaze_I_Trace_PC_UNCONNECTED[0:31]),
        .Trace_PID_Reg(NLW_microblaze_I_Trace_PID_Reg_UNCONNECTED[0:7]),
        .Trace_Reg_Addr(NLW_microblaze_I_Trace_Reg_Addr_UNCONNECTED[0:4]),
        .Trace_Reg_Write(NLW_microblaze_I_Trace_Reg_Write_UNCONNECTED),
        .Trace_Valid_Instr(NLW_microblaze_I_Trace_Valid_Instr_UNCONNECTED),
        .Wakeup({Wakeup[1],Wakeup[0]}),
        .Write_Strobe(dlmb_WRITESTROBE));
  (* CHECK_LICENSE_TYPE = "bd_3914_rst_0_0,proc_sys_reset,{}" *) 
  (* X_CORE_INFO = "proc_sys_reset,Vivado 2018.3" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  cpu_bd_3914_rst_0_0 rst_0
       (.aux_reset_in(NLW_rst_0_aux_reset_in_UNCONNECTED),
        .bus_struct_reset(LMB_Rst1),
        .dcm_locked(NLW_rst_0_dcm_locked_UNCONNECTED),
        .ext_reset_in(Reset),
        .interconnect_aresetn(NLW_rst_0_interconnect_aresetn_UNCONNECTED[0]),
        .mb_debug_sys_rst(Debug_SYS_Rst),
        .mb_reset(MB_Reset),
        .peripheral_aresetn(mdm_0_ARESETN),
        .peripheral_reset(IO_Rst),
        .slowest_sync_clk(Clk));
  (* CHECK_LICENSE_TYPE = "bd_3914_xlconcat_0_0,xlconcat_v2_1_1_xlconcat,{}" *) 
  (* X_CORE_INFO = "xlconcat_v2_1_1_xlconcat,Vivado 2018.3" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  cpu_bd_3914_xlconcat_0_0 xlconcat_0
       (.In0(Dbg_Wakeup),
        .In1(Dbg_Wakeup),
        .dout(Wakeup));
endmodule

(* CHECK_LICENSE_TYPE = "bd_3914_dlmb_0,lmb_v10,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "bd_3914_dlmb_0" *) 
(* X_CORE_INFO = "lmb_v10,Vivado 2018.3" *) 
module cpu_bd_3914_dlmb_0
   (LMB_Clk,
    SYS_Rst,
    LMB_Rst,
    M_ABus,
    M_ReadStrobe,
    M_WriteStrobe,
    M_AddrStrobe,
    M_DBus,
    M_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE,
    LMB_ABus,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_AddrStrobe,
    LMB_ReadDBus,
    LMB_WriteDBus,
    LMB_Ready,
    LMB_Wait,
    LMB_UE,
    LMB_CE,
    LMB_BE);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.LMB_Clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.LMB_Clk, ASSOCIATED_BUSIF LMB_Sl_0:LMB_Sl_1:LMB_Sl_2:LMB_Sl_3:LMB_Sl_4:LMB_Sl_5:LMB_Sl_6:LMB_Sl_7:LMB_Sl_8:LMB_Sl_9:LMB_Sl_10:LMB_Sl_11:LMB_Sl_12:LMB_Sl_13:LMB_Sl_14:LMB_Sl_15:LMB_M, ASSOCIATED_RESET SYS_Rst, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input LMB_Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.SYS_Rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.SYS_Rst, POLARITY ACTIVE_HIGH, TYPE INTERCONNECT, INSERT_VIP 0" *) input SYS_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 RST, xilinx.com:interface:lmb:1.0 LMB_Sl_1 RST, xilinx.com:interface:lmb:1.0 LMB_M RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME LMB_Sl_0, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, XIL_INTERFACENAME LMB_Sl_1, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, XIL_INTERFACENAME LMB_M, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE" *) output LMB_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M ABUS" *) input [0:31]M_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M READSTROBE" *) input M_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M WRITESTROBE" *) input M_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M ADDRSTROBE" *) input M_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M WRITEDBUS" *) input [0:31]M_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M BE" *) input [0:3]M_BE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 READDBUS [0:31] [0:31], xilinx.com:interface:lmb:1.0 LMB_Sl_1 READDBUS [0:31] [32:63]" *) input [0:63]Sl_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 READY [0:0] [0:0], xilinx.com:interface:lmb:1.0 LMB_Sl_1 READY [0:0] [1:1]" *) input [0:1]Sl_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 WAIT [0:0] [0:0], xilinx.com:interface:lmb:1.0 LMB_Sl_1 WAIT [0:0] [1:1]" *) input [0:1]Sl_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 UE [0:0] [0:0], xilinx.com:interface:lmb:1.0 LMB_Sl_1 UE [0:0] [1:1]" *) input [0:1]Sl_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 CE [0:0] [0:0], xilinx.com:interface:lmb:1.0 LMB_Sl_1 CE [0:0] [1:1]" *) input [0:1]Sl_CE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 ABUS, xilinx.com:interface:lmb:1.0 LMB_Sl_1 ABUS" *) output [0:31]LMB_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 READSTROBE, xilinx.com:interface:lmb:1.0 LMB_Sl_1 READSTROBE" *) output LMB_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 WRITESTROBE, xilinx.com:interface:lmb:1.0 LMB_Sl_1 WRITESTROBE" *) output LMB_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 ADDRSTROBE, xilinx.com:interface:lmb:1.0 LMB_Sl_1 ADDRSTROBE" *) output LMB_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M READDBUS" *) output [0:31]LMB_ReadDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 WRITEDBUS, xilinx.com:interface:lmb:1.0 LMB_Sl_1 WRITEDBUS" *) output [0:31]LMB_WriteDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M READY" *) output LMB_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M WAIT" *) output LMB_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M UE" *) output LMB_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M CE" *) output LMB_CE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 BE, xilinx.com:interface:lmb:1.0 LMB_Sl_1 BE" *) output [0:3]LMB_BE;

  wire [0:31]LMB_ABus;
  wire LMB_AddrStrobe;
  wire [0:3]LMB_BE;
  wire [0:31]LMB_ReadDBus;
  wire LMB_ReadStrobe;
  wire LMB_Ready;
  wire LMB_Wait;
  wire [0:31]LMB_WriteDBus;
  wire LMB_WriteStrobe;
  wire [0:31]M_ABus;
  wire M_AddrStrobe;
  wire [0:3]M_BE;
  wire [0:31]M_DBus;
  wire M_ReadStrobe;
  wire M_WriteStrobe;
  wire [0:63]Sl_DBus;
  wire [0:1]Sl_Ready;
  wire [0:1]Sl_Wait;
  wire NLW_U0_LMB_CE_UNCONNECTED;
  wire NLW_U0_LMB_Clk_UNCONNECTED;
  wire NLW_U0_LMB_Rst_UNCONNECTED;
  wire NLW_U0_LMB_UE_UNCONNECTED;
  wire NLW_U0_SYS_Rst_UNCONNECTED;
  wire [9:31]NLW_U0_LMB_ABus_UNCONNECTED;
  wire [9:31]NLW_U0_M_ABus_UNCONNECTED;
  wire [0:1]NLW_U0_Sl_CE_UNCONNECTED;
  wire [0:1]NLW_U0_Sl_UE_UNCONNECTED;
  wire [0:0]NLW_U0_Sl_Wait_UNCONNECTED;

  (* C_EXT_RESET_HIGH = "1" *) 
  (* C_LMB_AWIDTH = "32" *) 
  (* C_LMB_DWIDTH = "32" *) 
  (* C_LMB_NUM_SLAVES = "2" *) 
  cpu_lmb_v10 U0
       (.LMB_ABus({LMB_ABus[0:8],NLW_U0_LMB_ABus_UNCONNECTED[9:14],LMB_ABus[15:29],NLW_U0_LMB_ABus_UNCONNECTED[30:31]}),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .LMB_BE(LMB_BE),
        .LMB_CE(NLW_U0_LMB_CE_UNCONNECTED),
        .LMB_Clk(NLW_U0_LMB_Clk_UNCONNECTED),
        .LMB_ReadDBus(LMB_ReadDBus),
        .LMB_ReadStrobe(LMB_ReadStrobe),
        .LMB_Ready(LMB_Ready),
        .LMB_Rst(NLW_U0_LMB_Rst_UNCONNECTED),
        .LMB_UE(NLW_U0_LMB_UE_UNCONNECTED),
        .LMB_Wait(LMB_Wait),
        .LMB_WriteDBus(LMB_WriteDBus),
        .LMB_WriteStrobe(LMB_WriteStrobe),
        .M_ABus({M_ABus[0:8],NLW_U0_M_ABus_UNCONNECTED[9:14],M_ABus[15:29],NLW_U0_M_ABus_UNCONNECTED[30:31]}),
        .M_AddrStrobe(M_AddrStrobe),
        .M_BE(M_BE),
        .M_DBus(M_DBus),
        .M_ReadStrobe(M_ReadStrobe),
        .M_WriteStrobe(M_WriteStrobe),
        .SYS_Rst(NLW_U0_SYS_Rst_UNCONNECTED),
        .Sl_CE(NLW_U0_Sl_CE_UNCONNECTED[0:1]),
        .Sl_DBus(Sl_DBus),
        .Sl_Ready(Sl_Ready),
        .Sl_UE(NLW_U0_Sl_UE_UNCONNECTED[0:1]),
        .Sl_Wait({NLW_U0_Sl_Wait_UNCONNECTED[0],Sl_Wait[1]}));
endmodule

(* CHECK_LICENSE_TYPE = "bd_3914_dlmb_cntlr_0,lmb_bram_if_cntlr,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "bd_3914_dlmb_cntlr_0" *) 
(* X_CORE_INFO = "lmb_bram_if_cntlr,Vivado 2018.3" *) 
module cpu_bd_3914_dlmb_cntlr_0
   (LMB_Clk,
    LMB_Rst,
    LMB_ABus,
    LMB_WriteDBus,
    LMB_AddrStrobe,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE,
    BRAM_Rst_A,
    BRAM_Clk_A,
    BRAM_Addr_A,
    BRAM_EN_A,
    BRAM_WEN_A,
    BRAM_Dout_A,
    BRAM_Din_A);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.LMB_Clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.LMB_Clk, ASSOCIATED_BUSIF SLMB:SLMB1:SLMB2:SLMB3, ASSOCIATED_RESET LMB_Rst, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input LMB_Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.LMB_Rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.LMB_Rst, POLARITY ACTIVE_HIGH, TYPE INTERCONNECT, INSERT_VIP 0" *) input LMB_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB ABUS" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME SLMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE" *) input [0:31]LMB_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WRITEDBUS" *) input [0:31]LMB_WriteDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB ADDRSTROBE" *) input LMB_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READSTROBE" *) input LMB_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WRITESTROBE" *) input LMB_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB BE" *) input [0:3]LMB_BE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READDBUS" *) output [0:31]Sl_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READY" *) output Sl_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WAIT" *) output Sl_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB UE" *) output Sl_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB CE" *) output Sl_CE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME BRAM_PORT, MEM_SIZE 131072, MASTER_TYPE BRAM_CTRL, MEM_WIDTH 32, MEM_ECC NONE, READ_LATENCY 1" *) output BRAM_Rst_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT CLK" *) output BRAM_Clk_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT ADDR" *) output [0:31]BRAM_Addr_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT EN" *) output BRAM_EN_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT WE" *) output [0:3]BRAM_WEN_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT DIN" *) output [0:31]BRAM_Dout_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT DOUT" *) input [0:31]BRAM_Din_A;

  wire [0:31]BRAM_Din_A;
  wire [0:3]BRAM_WEN_A;
  wire [0:31]LMB_ABus;
  wire LMB_AddrStrobe;
  wire [0:3]LMB_BE;
  wire LMB_Clk;
  wire LMB_Rst;
  wire [0:31]LMB_WriteDBus;
  wire LMB_WriteStrobe;
  wire Sl_Ready;

  assign BRAM_Addr_A[15:29] = LMB_ABus[15:29];
  assign BRAM_Clk_A = LMB_Clk;
  assign BRAM_Dout_A[0:31] = LMB_WriteDBus;
  assign BRAM_EN_A = LMB_AddrStrobe;
  assign Sl_DBus[0:31] = BRAM_Din_A;
  cpu_lmb_bram_if_cntlr U0
       (.BRAM_WEN_A(BRAM_WEN_A),
        .LMB_ABus({LMB_ABus[0],LMB_ABus[1]}),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .LMB_BE(LMB_BE),
        .LMB_Clk(LMB_Clk),
        .LMB_Rst(LMB_Rst),
        .LMB_WriteStrobe(LMB_WriteStrobe),
        .Sl_Ready(Sl_Ready));
endmodule

(* CHECK_LICENSE_TYPE = "bd_3914_ilmb_0,lmb_v10,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "bd_3914_ilmb_0" *) 
(* X_CORE_INFO = "lmb_v10,Vivado 2018.3" *) 
module cpu_bd_3914_ilmb_0
   (LMB_Clk,
    SYS_Rst,
    LMB_Rst,
    M_ABus,
    M_ReadStrobe,
    M_WriteStrobe,
    M_AddrStrobe,
    M_DBus,
    M_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE,
    LMB_ABus,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_AddrStrobe,
    LMB_ReadDBus,
    LMB_WriteDBus,
    LMB_Ready,
    LMB_Wait,
    LMB_UE,
    LMB_CE,
    LMB_BE);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.LMB_Clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.LMB_Clk, ASSOCIATED_BUSIF LMB_Sl_0:LMB_Sl_1:LMB_Sl_2:LMB_Sl_3:LMB_Sl_4:LMB_Sl_5:LMB_Sl_6:LMB_Sl_7:LMB_Sl_8:LMB_Sl_9:LMB_Sl_10:LMB_Sl_11:LMB_Sl_12:LMB_Sl_13:LMB_Sl_14:LMB_Sl_15:LMB_M, ASSOCIATED_RESET SYS_Rst, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input LMB_Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.SYS_Rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.SYS_Rst, POLARITY ACTIVE_HIGH, TYPE INTERCONNECT, INSERT_VIP 0" *) input SYS_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 RST, xilinx.com:interface:lmb:1.0 LMB_M RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME LMB_Sl_0, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, XIL_INTERFACENAME LMB_M, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_ONLY" *) output LMB_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M ABUS" *) input [0:31]M_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M READSTROBE" *) input M_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M WRITESTROBE" *) input M_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M ADDRSTROBE" *) input M_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M WRITEDBUS" *) input [0:31]M_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M BE" *) input [0:3]M_BE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 READDBUS" *) input [0:31]Sl_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 READY" *) input [0:0]Sl_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 WAIT" *) input [0:0]Sl_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 UE" *) input [0:0]Sl_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 CE" *) input [0:0]Sl_CE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 ABUS" *) output [0:31]LMB_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 READSTROBE" *) output LMB_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 WRITESTROBE" *) output LMB_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 ADDRSTROBE" *) output LMB_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M READDBUS" *) output [0:31]LMB_ReadDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 WRITEDBUS" *) output [0:31]LMB_WriteDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M READY" *) output LMB_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M WAIT" *) output LMB_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M UE" *) output LMB_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M CE" *) output LMB_CE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 BE" *) output [0:3]LMB_BE;

  wire [0:31]LMB_ABus;
  wire LMB_AddrStrobe;
  wire [0:31]LMB_ReadDBus;
  wire LMB_Ready;
  wire [0:31]LMB_WriteDBus;
  wire [0:31]M_ABus;
  wire M_AddrStrobe;
  wire [0:31]M_DBus;
  wire [0:31]Sl_DBus;
  wire [0:0]Sl_Ready;
  wire NLW_U0_LMB_CE_UNCONNECTED;
  wire NLW_U0_LMB_Clk_UNCONNECTED;
  wire NLW_U0_LMB_ReadStrobe_UNCONNECTED;
  wire NLW_U0_LMB_Rst_UNCONNECTED;
  wire NLW_U0_LMB_UE_UNCONNECTED;
  wire NLW_U0_LMB_Wait_UNCONNECTED;
  wire NLW_U0_LMB_WriteStrobe_UNCONNECTED;
  wire NLW_U0_M_ReadStrobe_UNCONNECTED;
  wire NLW_U0_M_WriteStrobe_UNCONNECTED;
  wire NLW_U0_SYS_Rst_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_ABus_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_BE_UNCONNECTED;
  wire [0:31]NLW_U0_M_ABus_UNCONNECTED;
  wire [0:3]NLW_U0_M_BE_UNCONNECTED;
  wire [0:0]NLW_U0_Sl_CE_UNCONNECTED;
  wire [0:0]NLW_U0_Sl_UE_UNCONNECTED;
  wire [0:0]NLW_U0_Sl_Wait_UNCONNECTED;

  (* C_EXT_RESET_HIGH = "1" *) 
  (* C_LMB_AWIDTH = "32" *) 
  (* C_LMB_DWIDTH = "32" *) 
  (* C_LMB_NUM_SLAVES = "1" *) 
  cpu_lmb_v10__parameterized1 U0
       (.LMB_ABus({NLW_U0_LMB_ABus_UNCONNECTED[0:14],LMB_ABus[15:29],NLW_U0_LMB_ABus_UNCONNECTED[30:31]}),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .LMB_BE(NLW_U0_LMB_BE_UNCONNECTED[0:3]),
        .LMB_CE(NLW_U0_LMB_CE_UNCONNECTED),
        .LMB_Clk(NLW_U0_LMB_Clk_UNCONNECTED),
        .LMB_ReadDBus(LMB_ReadDBus),
        .LMB_ReadStrobe(NLW_U0_LMB_ReadStrobe_UNCONNECTED),
        .LMB_Ready(LMB_Ready),
        .LMB_Rst(NLW_U0_LMB_Rst_UNCONNECTED),
        .LMB_UE(NLW_U0_LMB_UE_UNCONNECTED),
        .LMB_Wait(NLW_U0_LMB_Wait_UNCONNECTED),
        .LMB_WriteDBus(LMB_WriteDBus),
        .LMB_WriteStrobe(NLW_U0_LMB_WriteStrobe_UNCONNECTED),
        .M_ABus({NLW_U0_M_ABus_UNCONNECTED[0:14],M_ABus[15:29],NLW_U0_M_ABus_UNCONNECTED[30:31]}),
        .M_AddrStrobe(M_AddrStrobe),
        .M_BE(NLW_U0_M_BE_UNCONNECTED[0:3]),
        .M_DBus(M_DBus),
        .M_ReadStrobe(NLW_U0_M_ReadStrobe_UNCONNECTED),
        .M_WriteStrobe(NLW_U0_M_WriteStrobe_UNCONNECTED),
        .SYS_Rst(NLW_U0_SYS_Rst_UNCONNECTED),
        .Sl_CE(NLW_U0_Sl_CE_UNCONNECTED[0]),
        .Sl_DBus(Sl_DBus),
        .Sl_Ready(Sl_Ready),
        .Sl_UE(NLW_U0_Sl_UE_UNCONNECTED[0]),
        .Sl_Wait(NLW_U0_Sl_Wait_UNCONNECTED[0]));
endmodule

(* CHECK_LICENSE_TYPE = "bd_3914_ilmb_cntlr_0,lmb_bram_if_cntlr,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "bd_3914_ilmb_cntlr_0" *) 
(* X_CORE_INFO = "lmb_bram_if_cntlr,Vivado 2018.3" *) 
module cpu_bd_3914_ilmb_cntlr_0
   (LMB_Clk,
    LMB_Rst,
    LMB_ABus,
    LMB_WriteDBus,
    LMB_AddrStrobe,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE,
    BRAM_Rst_A,
    BRAM_Clk_A,
    BRAM_Addr_A,
    BRAM_EN_A,
    BRAM_WEN_A,
    BRAM_Dout_A,
    BRAM_Din_A);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.LMB_Clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.LMB_Clk, ASSOCIATED_BUSIF SLMB:SLMB1:SLMB2:SLMB3, ASSOCIATED_RESET LMB_Rst, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input LMB_Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.LMB_Rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.LMB_Rst, POLARITY ACTIVE_HIGH, TYPE INTERCONNECT, INSERT_VIP 0" *) input LMB_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB ABUS" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME SLMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE" *) input [0:31]LMB_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WRITEDBUS" *) input [0:31]LMB_WriteDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB ADDRSTROBE" *) input LMB_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READSTROBE" *) input LMB_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WRITESTROBE" *) input LMB_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB BE" *) input [0:3]LMB_BE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READDBUS" *) output [0:31]Sl_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READY" *) output Sl_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WAIT" *) output Sl_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB UE" *) output Sl_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB CE" *) output Sl_CE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME BRAM_PORT, MEM_SIZE 131072, MASTER_TYPE BRAM_CTRL, MEM_WIDTH 32, MEM_ECC NONE, READ_LATENCY 1" *) output BRAM_Rst_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT CLK" *) output BRAM_Clk_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT ADDR" *) output [0:31]BRAM_Addr_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT EN" *) output BRAM_EN_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT WE" *) output [0:3]BRAM_WEN_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT DIN" *) output [0:31]BRAM_Dout_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT DOUT" *) input [0:31]BRAM_Din_A;

  wire [0:31]BRAM_Din_A;
  wire [0:3]BRAM_WEN_A;
  wire [0:31]LMB_ABus;
  wire LMB_AddrStrobe;
  wire LMB_Clk;
  wire LMB_Rst;
  wire [0:31]LMB_WriteDBus;
  wire Sl_Ready;
  wire NLW_U0_LMB_WriteStrobe_UNCONNECTED;
  wire [0:0]NLW_U0_LMB_ABus_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_BE_UNCONNECTED;

  assign BRAM_Addr_A[15:29] = LMB_ABus[15:29];
  assign BRAM_Clk_A = LMB_Clk;
  assign BRAM_Dout_A[0:31] = LMB_WriteDBus;
  assign BRAM_EN_A = LMB_AddrStrobe;
  assign Sl_DBus[0:31] = BRAM_Din_A;
  cpu_lmb_bram_if_cntlr__parameterized1 U0
       (.BRAM_WEN_A(BRAM_WEN_A),
        .LMB_ABus(NLW_U0_LMB_ABus_UNCONNECTED[0]),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .LMB_BE(NLW_U0_LMB_BE_UNCONNECTED[0:3]),
        .LMB_Clk(LMB_Clk),
        .LMB_Rst(LMB_Rst),
        .LMB_WriteStrobe(NLW_U0_LMB_WriteStrobe_UNCONNECTED),
        .Sl_Ready(Sl_Ready));
endmodule

(* CHECK_LICENSE_TYPE = "bd_3914_iomodule_0_0,iomodule,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "bd_3914_iomodule_0_0" *) 
(* X_CORE_INFO = "iomodule,Vivado 2018.3" *) 
module cpu_bd_3914_iomodule_0_0
   (Clk,
    Rst,
    IO_Addr_Strobe,
    IO_Read_Strobe,
    IO_Write_Strobe,
    IO_Address,
    IO_Byte_Enable,
    IO_Write_Data,
    IO_Read_Data,
    IO_Ready,
    UART_Rx,
    UART_Tx,
    LMB_ABus,
    LMB_WriteDBus,
    LMB_AddrStrobe,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.CLK, ASSOCIATED_BUSIF SLMB, ASSOCIATED_RESET Rst:TMR_Rst, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.Rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.Rst, POLARITY ACTIVE_HIGH, TYPE PERIPHERAL, INSERT_VIP 0" *) input Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO_BUS ADDR_STROBE" *) output IO_Addr_Strobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO_BUS READ_STROBE" *) output IO_Read_Strobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO_BUS WRITE_STROBE" *) output IO_Write_Strobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO_BUS ADDRESS" *) output [31:0]IO_Address;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO_BUS BYTE_ENABLE" *) output [3:0]IO_Byte_Enable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO_BUS WRITE_DATA" *) output [31:0]IO_Write_Data;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO_BUS READ_DATA" *) input [31:0]IO_Read_Data;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mcsio_bus:1.0 IO_BUS READY" *) input IO_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:uart:1.0 UART RxD" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME UART, BOARD.ASSOCIATED_PARAM UART_BOARD_INTERFACE" *) input UART_Rx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:uart:1.0 UART TxD" *) output UART_Tx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB ABUS" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME SLMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE" *) input [0:31]LMB_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WRITEDBUS" *) input [0:31]LMB_WriteDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB ADDRSTROBE" *) input LMB_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READSTROBE" *) input LMB_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WRITESTROBE" *) input LMB_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB BE" *) input [0:3]LMB_BE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READDBUS" *) output [0:31]Sl_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READY" *) output Sl_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WAIT" *) output Sl_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB UE" *) output Sl_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB CE" *) output Sl_CE;

  wire Clk;
  wire [31:0]IO_Address;
  wire [31:0]IO_Read_Data;
  wire IO_Read_Strobe;
  wire [31:0]IO_Write_Data;
  wire IO_Write_Strobe;
  wire [0:31]LMB_ABus;
  wire LMB_AddrStrobe;
  wire LMB_ReadStrobe;
  wire [0:31]LMB_WriteDBus;
  wire LMB_WriteStrobe;
  wire Rst;
  wire [0:31]Sl_DBus;
  wire Sl_Ready;
  wire Sl_Wait;
  wire NLW_U0_Config_Reset_UNCONNECTED;
  wire NLW_U0_FIT1_Interrupt_UNCONNECTED;
  wire NLW_U0_FIT1_Toggle_UNCONNECTED;
  wire NLW_U0_FIT2_Interrupt_UNCONNECTED;
  wire NLW_U0_FIT2_Toggle_UNCONNECTED;
  wire NLW_U0_FIT3_Interrupt_UNCONNECTED;
  wire NLW_U0_FIT3_Toggle_UNCONNECTED;
  wire NLW_U0_FIT4_Interrupt_UNCONNECTED;
  wire NLW_U0_FIT4_Toggle_UNCONNECTED;
  wire NLW_U0_GPI1_Interrupt_UNCONNECTED;
  wire NLW_U0_GPI2_Interrupt_UNCONNECTED;
  wire NLW_U0_GPI3_Interrupt_UNCONNECTED;
  wire NLW_U0_GPI4_Interrupt_UNCONNECTED;
  wire NLW_U0_INTC_IRQ_UNCONNECTED;
  wire NLW_U0_INTC_IRQ_OUT_UNCONNECTED;
  wire NLW_U0_IO_Addr_Strobe_UNCONNECTED;
  wire NLW_U0_IO_Ready_UNCONNECTED;
  wire NLW_U0_PIT1_Enable_UNCONNECTED;
  wire NLW_U0_PIT1_Interrupt_UNCONNECTED;
  wire NLW_U0_PIT1_Toggle_UNCONNECTED;
  wire NLW_U0_PIT2_Enable_UNCONNECTED;
  wire NLW_U0_PIT2_Interrupt_UNCONNECTED;
  wire NLW_U0_PIT2_Toggle_UNCONNECTED;
  wire NLW_U0_PIT3_Enable_UNCONNECTED;
  wire NLW_U0_PIT3_Interrupt_UNCONNECTED;
  wire NLW_U0_PIT3_Toggle_UNCONNECTED;
  wire NLW_U0_PIT4_Enable_UNCONNECTED;
  wire NLW_U0_PIT4_Interrupt_UNCONNECTED;
  wire NLW_U0_PIT4_Toggle_UNCONNECTED;
  wire NLW_U0_Sl_CE_UNCONNECTED;
  wire NLW_U0_Sl_UE_UNCONNECTED;
  wire NLW_U0_TMR_Disable_UNCONNECTED;
  wire NLW_U0_TMR_Rst_UNCONNECTED;
  wire NLW_U0_UART_Interrupt_UNCONNECTED;
  wire NLW_U0_UART_Rx_UNCONNECTED;
  wire NLW_U0_UART_Tx_UNCONNECTED;
  wire [1023:0]NLW_U0_FromAVote_UNCONNECTED;
  wire [1023:0]NLW_U0_FromBVote_UNCONNECTED;
  wire [31:0]NLW_U0_GPI1_UNCONNECTED;
  wire [31:0]NLW_U0_GPI2_UNCONNECTED;
  wire [31:0]NLW_U0_GPI3_UNCONNECTED;
  wire [31:0]NLW_U0_GPI4_UNCONNECTED;
  wire [31:0]NLW_U0_GPO1_UNCONNECTED;
  wire [31:0]NLW_U0_GPO2_UNCONNECTED;
  wire [31:0]NLW_U0_GPO3_UNCONNECTED;
  wire [31:0]NLW_U0_GPO4_UNCONNECTED;
  wire [0:0]NLW_U0_INTC_Interrupt_UNCONNECTED;
  wire [31:0]NLW_U0_INTC_Interrupt_Address_UNCONNECTED;
  wire [1:0]NLW_U0_INTC_Processor_Ack_UNCONNECTED;
  wire [22:0]NLW_U0_IO_Address_UNCONNECTED;
  wire [3:0]NLW_U0_IO_Byte_Enable_UNCONNECTED;
  wire [31:11]NLW_U0_IO_Write_Data_UNCONNECTED;
  wire [9:31]NLW_U0_LMB_ABus_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_BE_UNCONNECTED;
  wire [0:20]NLW_U0_LMB_WriteDBus_UNCONNECTED;
  wire [1023:0]NLW_U0_ToVote_UNCONNECTED;

  (* C_AVOID_PRIMITIVES = "0" *) 
  (* C_BASEADDR = "64'b0000000000000000000000000000000010000000000000000000000000000000" *) 
  (* C_FAMILY = "virtex7" *) 
  (* C_FIT1_INTERRUPT = "0" *) 
  (* C_FIT1_No_CLOCKS = "6216" *) 
  (* C_FIT2_INTERRUPT = "0" *) 
  (* C_FIT2_No_CLOCKS = "6216" *) 
  (* C_FIT3_INTERRUPT = "0" *) 
  (* C_FIT3_No_CLOCKS = "6216" *) 
  (* C_FIT4_INTERRUPT = "0" *) 
  (* C_FIT4_No_CLOCKS = "6216" *) 
  (* C_FREQ = "100000000" *) 
  (* C_GPI1_INTERRUPT = "0" *) 
  (* C_GPI1_SIZE = "32" *) 
  (* C_GPI2_INTERRUPT = "0" *) 
  (* C_GPI2_SIZE = "32" *) 
  (* C_GPI3_INTERRUPT = "0" *) 
  (* C_GPI3_SIZE = "32" *) 
  (* C_GPI4_INTERRUPT = "0" *) 
  (* C_GPI4_SIZE = "32" *) 
  (* C_GPO1_INIT = "0" *) 
  (* C_GPO1_SIZE = "32" *) 
  (* C_GPO2_INIT = "0" *) 
  (* C_GPO2_SIZE = "32" *) 
  (* C_GPO3_INIT = "0" *) 
  (* C_GPO3_SIZE = "32" *) 
  (* C_GPO4_INIT = "0" *) 
  (* C_GPO4_SIZE = "32" *) 
  (* C_HIGHADDR = "64'b0000000000000000000000000000000010000000000000001111111111111111" *) 
  (* C_INSTANCE = "iomodule" *) 
  (* C_INTC_ADDR_WIDTH = "17" *) 
  (* C_INTC_ASYNC_INTR = "16'b1111111111111111" *) 
  (* C_INTC_BASE_VECTORS = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_INTC_HAS_FAST = "1" *) 
  (* C_INTC_INTR_SIZE = "1" *) 
  (* C_INTC_LEVEL_EDGE = "16'b0000000000000000" *) 
  (* C_INTC_NUM_SYNC_FF = "2" *) 
  (* C_INTC_POSITIVE = "16'b1111111111111111" *) 
  (* C_INTC_USE_EXT_INTR = "0" *) 
  (* C_IO_BASEADDR = "64'b0000000000000000000000000000000011000000000000000000000000000000" *) 
  (* C_IO_HIGHADDR = "64'b0000000000000000000000000000000011111111111111111111111111111111" *) 
  (* C_IO_MASK = "64'b0000000000000000000000000000000011000000000000000000000000000000" *) 
  (* C_LMB_AWIDTH = "32" *) 
  (* C_LMB_DWIDTH = "32" *) 
  (* C_MASK = "64'b0000000000000000000000000000000011000000000000000000000000000000" *) 
  (* C_PIT1_INTERRUPT = "0" *) 
  (* C_PIT1_PRESCALER = "0" *) 
  (* C_PIT1_READABLE = "1" *) 
  (* C_PIT1_SIZE = "32" *) 
  (* C_PIT2_INTERRUPT = "0" *) 
  (* C_PIT2_PRESCALER = "0" *) 
  (* C_PIT2_READABLE = "1" *) 
  (* C_PIT2_SIZE = "32" *) 
  (* C_PIT3_INTERRUPT = "0" *) 
  (* C_PIT3_PRESCALER = "0" *) 
  (* C_PIT3_READABLE = "1" *) 
  (* C_PIT3_SIZE = "32" *) 
  (* C_PIT4_INTERRUPT = "0" *) 
  (* C_PIT4_PRESCALER = "0" *) 
  (* C_PIT4_READABLE = "1" *) 
  (* C_PIT4_SIZE = "32" *) 
  (* C_TMR = "0" *) 
  (* C_UART_BAUDRATE = "9600" *) 
  (* C_UART_DATA_BITS = "8" *) 
  (* C_UART_ERROR_INTERRUPT = "0" *) 
  (* C_UART_ODD_PARITY = "0" *) 
  (* C_UART_PROG_BAUDRATE = "0" *) 
  (* C_UART_RX_INTERRUPT = "0" *) 
  (* C_UART_TX_INTERRUPT = "0" *) 
  (* C_UART_USE_PARITY = "0" *) 
  (* C_USE_CONFIG_RESET = "0" *) 
  (* C_USE_FIT1 = "0" *) 
  (* C_USE_FIT2 = "0" *) 
  (* C_USE_FIT3 = "0" *) 
  (* C_USE_FIT4 = "0" *) 
  (* C_USE_GPI1 = "0" *) 
  (* C_USE_GPI2 = "0" *) 
  (* C_USE_GPI3 = "0" *) 
  (* C_USE_GPI4 = "0" *) 
  (* C_USE_GPO1 = "0" *) 
  (* C_USE_GPO2 = "0" *) 
  (* C_USE_GPO3 = "0" *) 
  (* C_USE_GPO4 = "0" *) 
  (* C_USE_IO_BUS = "1" *) 
  (* C_USE_PIT1 = "0" *) 
  (* C_USE_PIT2 = "0" *) 
  (* C_USE_PIT3 = "0" *) 
  (* C_USE_PIT4 = "0" *) 
  (* C_USE_TMR_DISABLE = "0" *) 
  (* C_USE_UART_RX = "1" *) 
  (* C_USE_UART_TX = "1" *) 
  cpu_iomodule U0
       (.Clk(Clk),
        .Config_Reset(NLW_U0_Config_Reset_UNCONNECTED),
        .FIT1_Interrupt(NLW_U0_FIT1_Interrupt_UNCONNECTED),
        .FIT1_Toggle(NLW_U0_FIT1_Toggle_UNCONNECTED),
        .FIT2_Interrupt(NLW_U0_FIT2_Interrupt_UNCONNECTED),
        .FIT2_Toggle(NLW_U0_FIT2_Toggle_UNCONNECTED),
        .FIT3_Interrupt(NLW_U0_FIT3_Interrupt_UNCONNECTED),
        .FIT3_Toggle(NLW_U0_FIT3_Toggle_UNCONNECTED),
        .FIT4_Interrupt(NLW_U0_FIT4_Interrupt_UNCONNECTED),
        .FIT4_Toggle(NLW_U0_FIT4_Toggle_UNCONNECTED),
        .FromAVote(NLW_U0_FromAVote_UNCONNECTED[1023:0]),
        .FromBVote(NLW_U0_FromBVote_UNCONNECTED[1023:0]),
        .GPI1(NLW_U0_GPI1_UNCONNECTED[31:0]),
        .GPI1_Interrupt(NLW_U0_GPI1_Interrupt_UNCONNECTED),
        .GPI2(NLW_U0_GPI2_UNCONNECTED[31:0]),
        .GPI2_Interrupt(NLW_U0_GPI2_Interrupt_UNCONNECTED),
        .GPI3(NLW_U0_GPI3_UNCONNECTED[31:0]),
        .GPI3_Interrupt(NLW_U0_GPI3_Interrupt_UNCONNECTED),
        .GPI4(NLW_U0_GPI4_UNCONNECTED[31:0]),
        .GPI4_Interrupt(NLW_U0_GPI4_Interrupt_UNCONNECTED),
        .GPO1(NLW_U0_GPO1_UNCONNECTED[31:0]),
        .GPO2(NLW_U0_GPO2_UNCONNECTED[31:0]),
        .GPO3(NLW_U0_GPO3_UNCONNECTED[31:0]),
        .GPO4(NLW_U0_GPO4_UNCONNECTED[31:0]),
        .INTC_IRQ(NLW_U0_INTC_IRQ_UNCONNECTED),
        .INTC_IRQ_OUT(NLW_U0_INTC_IRQ_OUT_UNCONNECTED),
        .INTC_Interrupt(NLW_U0_INTC_Interrupt_UNCONNECTED[0]),
        .INTC_Interrupt_Address(NLW_U0_INTC_Interrupt_Address_UNCONNECTED[31:0]),
        .INTC_Processor_Ack(NLW_U0_INTC_Processor_Ack_UNCONNECTED[1:0]),
        .IO_Addr_Strobe(NLW_U0_IO_Addr_Strobe_UNCONNECTED),
        .IO_Address({IO_Address[31:23],NLW_U0_IO_Address_UNCONNECTED[22:13],IO_Address[12:7],NLW_U0_IO_Address_UNCONNECTED[6:4],IO_Address[3:2],NLW_U0_IO_Address_UNCONNECTED[1:0]}),
        .IO_Byte_Enable(NLW_U0_IO_Byte_Enable_UNCONNECTED[3:0]),
        .IO_Read_Data(IO_Read_Data),
        .IO_Read_Strobe(IO_Read_Strobe),
        .IO_Ready(NLW_U0_IO_Ready_UNCONNECTED),
        .IO_Write_Data({NLW_U0_IO_Write_Data_UNCONNECTED[31:11],IO_Write_Data[10:0]}),
        .IO_Write_Strobe(IO_Write_Strobe),
        .LMB_ABus({LMB_ABus[0:8],NLW_U0_LMB_ABus_UNCONNECTED[9:18],LMB_ABus[19:29],NLW_U0_LMB_ABus_UNCONNECTED[30:31]}),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .LMB_BE(NLW_U0_LMB_BE_UNCONNECTED[0:3]),
        .LMB_ReadStrobe(LMB_ReadStrobe),
        .LMB_WriteDBus({NLW_U0_LMB_WriteDBus_UNCONNECTED[0:20],LMB_WriteDBus[21:31]}),
        .LMB_WriteStrobe(LMB_WriteStrobe),
        .PIT1_Enable(NLW_U0_PIT1_Enable_UNCONNECTED),
        .PIT1_Interrupt(NLW_U0_PIT1_Interrupt_UNCONNECTED),
        .PIT1_Toggle(NLW_U0_PIT1_Toggle_UNCONNECTED),
        .PIT2_Enable(NLW_U0_PIT2_Enable_UNCONNECTED),
        .PIT2_Interrupt(NLW_U0_PIT2_Interrupt_UNCONNECTED),
        .PIT2_Toggle(NLW_U0_PIT2_Toggle_UNCONNECTED),
        .PIT3_Enable(NLW_U0_PIT3_Enable_UNCONNECTED),
        .PIT3_Interrupt(NLW_U0_PIT3_Interrupt_UNCONNECTED),
        .PIT3_Toggle(NLW_U0_PIT3_Toggle_UNCONNECTED),
        .PIT4_Enable(NLW_U0_PIT4_Enable_UNCONNECTED),
        .PIT4_Interrupt(NLW_U0_PIT4_Interrupt_UNCONNECTED),
        .PIT4_Toggle(NLW_U0_PIT4_Toggle_UNCONNECTED),
        .Rst(Rst),
        .Sl_CE(NLW_U0_Sl_CE_UNCONNECTED),
        .Sl_DBus(Sl_DBus),
        .Sl_Ready(Sl_Ready),
        .Sl_UE(NLW_U0_Sl_UE_UNCONNECTED),
        .Sl_Wait(Sl_Wait),
        .TMR_Disable(NLW_U0_TMR_Disable_UNCONNECTED),
        .TMR_Rst(NLW_U0_TMR_Rst_UNCONNECTED),
        .ToVote(NLW_U0_ToVote_UNCONNECTED[1023:0]),
        .UART_Interrupt(NLW_U0_UART_Interrupt_UNCONNECTED),
        .UART_Rx(NLW_U0_UART_Rx_UNCONNECTED),
        .UART_Tx(NLW_U0_UART_Tx_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "bd_3914_lmb_bram_I_0,blk_mem_gen_v8_4_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "bd_3914_lmb_bram_I_0" *) 
(* X_CORE_INFO = "blk_mem_gen_v8_4_2,Vivado 2018.3" *) 
module cpu_bd_3914_lmb_bram_I_0
   (clka,
    rsta,
    ena,
    wea,
    addra,
    dina,
    douta,
    clkb,
    rstb,
    enb,
    web,
    addrb,
    dinb,
    doutb,
    rsta_busy,
    rstb_busy);
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME BRAM_PORTA, MEM_SIZE 131072, MEM_WIDTH 32, MEM_ECC NONE, MASTER_TYPE BRAM_CTRL, READ_WRITE_MODE READ_WRITE, READ_LATENCY 1" *) input clka;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA RST" *) input rsta;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA EN" *) input ena;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA WE" *) input [3:0]wea;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA ADDR" *) input [31:0]addra;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA DIN" *) input [31:0]dina;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA DOUT" *) output [31:0]douta;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME BRAM_PORTB, MEM_SIZE 131072, MEM_WIDTH 32, MEM_ECC NONE, MASTER_TYPE BRAM_CTRL, READ_WRITE_MODE READ_WRITE, READ_LATENCY 1" *) input clkb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB RST" *) input rstb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB EN" *) input enb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB WE" *) input [3:0]web;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB ADDR" *) input [31:0]addrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB DIN" *) input [31:0]dinb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB DOUT" *) output [31:0]doutb;
  output rsta_busy;
  output rstb_busy;

  wire [31:0]addra;
  wire [31:0]addrb;
  wire clka;
  wire clkb;
  wire [31:0]dina;
  wire [31:0]dinb;
  wire [31:0]douta;
  wire [31:0]doutb;
  wire ena;
  wire enb;
  wire [3:0]wea;
  wire [3:0]web;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_deepsleep_UNCONNECTED;
  wire NLW_U0_eccpipece_UNCONNECTED;
  wire NLW_U0_injectdbiterr_UNCONNECTED;
  wire NLW_U0_injectsbiterr_UNCONNECTED;
  wire NLW_U0_regcea_UNCONNECTED;
  wire NLW_U0_regceb_UNCONNECTED;
  wire NLW_U0_rsta_UNCONNECTED;
  wire NLW_U0_rsta_busy_UNCONNECTED;
  wire NLW_U0_rstb_UNCONNECTED;
  wire NLW_U0_rstb_busy_UNCONNECTED;
  wire NLW_U0_s_aclk_UNCONNECTED;
  wire NLW_U0_s_aresetn_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_arvalid_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_awvalid_UNCONNECTED;
  wire NLW_U0_s_axi_bready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_dbiterr_UNCONNECTED;
  wire NLW_U0_s_axi_injectdbiterr_UNCONNECTED;
  wire NLW_U0_s_axi_injectsbiterr_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rready_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_sbiterr_UNCONNECTED;
  wire NLW_U0_s_axi_wlast_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axi_wvalid_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_shutdown_UNCONNECTED;
  wire NLW_U0_sleep_UNCONNECTED;
  wire [31:0]NLW_U0_addra_UNCONNECTED;
  wire [31:0]NLW_U0_addrb_UNCONNECTED;
  wire [31:0]NLW_U0_rdaddrecc_UNCONNECTED;
  wire [31:0]NLW_U0_s_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_s_axi_arlen_UNCONNECTED;
  wire [2:0]NLW_U0_s_axi_arsize_UNCONNECTED;
  wire [31:0]NLW_U0_s_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_s_axi_awlen_UNCONNECTED;
  wire [2:0]NLW_U0_s_axi_awsize_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [31:0]NLW_U0_s_axi_rdaddrecc_UNCONNECTED;
  wire [31:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [31:0]NLW_U0_s_axi_wdata_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_wstrb_UNCONNECTED;

  (* C_ADDRA_WIDTH = "32" *) 
  (* C_ADDRB_WIDTH = "32" *) 
  (* C_ALGORITHM = "1" *) 
  (* C_AXI_ID_WIDTH = "4" *) 
  (* C_AXI_SLAVE_TYPE = "0" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_BYTE_SIZE = "8" *) 
  (* C_COMMON_CLK = "0" *) 
  (* C_COUNT_18K_BRAM = "0" *) 
  (* C_COUNT_36K_BRAM = "32" *) 
  (* C_CTRL_ECC_ALGO = "NONE" *) 
  (* C_DEFAULT_DATA = "0" *) 
  (* C_DISABLE_WARN_BHV_COLL = "0" *) 
  (* C_DISABLE_WARN_BHV_RANGE = "0" *) 
  (* C_ELABORATION_DIR = "./" *) 
  (* C_ENABLE_32BIT_ADDRESS = "1" *) 
  (* C_EN_DEEPSLEEP_PIN = "0" *) 
  (* C_EN_ECC_PIPE = "0" *) 
  (* C_EN_RDADDRA_CHG = "0" *) 
  (* C_EN_RDADDRB_CHG = "0" *) 
  (* C_EN_SAFETY_CKT = "1" *) 
  (* C_EN_SHUTDOWN_PIN = "0" *) 
  (* C_EN_SLEEP_PIN = "0" *) 
  (* C_EST_POWER_SUMMARY = "Estimated Power for IP     :     20.388 mW" *) 
  (* C_FAMILY = "virtex7" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_ENA = "1" *) 
  (* C_HAS_ENB = "1" *) 
  (* C_HAS_INJECTERR = "0" *) 
  (* C_HAS_MEM_OUTPUT_REGS_A = "0" *) 
  (* C_HAS_MEM_OUTPUT_REGS_B = "0" *) 
  (* C_HAS_MUX_OUTPUT_REGS_A = "0" *) 
  (* C_HAS_MUX_OUTPUT_REGS_B = "0" *) 
  (* C_HAS_REGCEA = "0" *) 
  (* C_HAS_REGCEB = "0" *) 
  (* C_HAS_RSTA = "1" *) 
  (* C_HAS_RSTB = "1" *) 
  (* C_HAS_SOFTECC_INPUT_REGS_A = "0" *) 
  (* C_HAS_SOFTECC_OUTPUT_REGS_B = "0" *) 
  (* C_INITA_VAL = "0" *) 
  (* C_INITB_VAL = "0" *) 
  (* C_INIT_FILE = "bd_3914_lmb_bram_I_0.mem" *) 
  (* C_INIT_FILE_NAME = "no_coe_file_loaded" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_LOAD_INIT_FILE = "0" *) 
  (* C_MEM_TYPE = "2" *) 
  (* C_MUX_PIPELINE_STAGES = "0" *) 
  (* C_PRIM_TYPE = "1" *) 
  (* C_READ_DEPTH_A = "32768" *) 
  (* C_READ_DEPTH_B = "32768" *) 
  (* C_READ_LATENCY_A = "1" *) 
  (* C_READ_LATENCY_B = "1" *) 
  (* C_READ_WIDTH_A = "32" *) 
  (* C_READ_WIDTH_B = "32" *) 
  (* C_RSTRAM_A = "0" *) 
  (* C_RSTRAM_B = "0" *) 
  (* C_RST_PRIORITY_A = "CE" *) 
  (* C_RST_PRIORITY_B = "CE" *) 
  (* C_SIM_COLLISION_CHECK = "ALL" *) 
  (* C_USE_BRAM_BLOCK = "1" *) 
  (* C_USE_BYTE_WEA = "1" *) 
  (* C_USE_BYTE_WEB = "1" *) 
  (* C_USE_DEFAULT_DATA = "0" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_SOFTECC = "0" *) 
  (* C_USE_URAM = "0" *) 
  (* C_WEA_WIDTH = "4" *) 
  (* C_WEB_WIDTH = "4" *) 
  (* C_WRITE_DEPTH_A = "32768" *) 
  (* C_WRITE_DEPTH_B = "32768" *) 
  (* C_WRITE_MODE_A = "WRITE_FIRST" *) 
  (* C_WRITE_MODE_B = "WRITE_FIRST" *) 
  (* C_WRITE_WIDTH_A = "32" *) 
  (* C_WRITE_WIDTH_B = "32" *) 
  (* C_XDEVICEFAMILY = "virtex7" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  cpu_blk_mem_gen_v8_4_2 U0
       (.addra({NLW_U0_addra_UNCONNECTED[31:17],addra[16:2],NLW_U0_addra_UNCONNECTED[1:0]}),
        .addrb({NLW_U0_addrb_UNCONNECTED[31:17],addrb[16:2],NLW_U0_addrb_UNCONNECTED[1:0]}),
        .clka(clka),
        .clkb(clkb),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .deepsleep(NLW_U0_deepsleep_UNCONNECTED),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .eccpipece(NLW_U0_eccpipece_UNCONNECTED),
        .ena(ena),
        .enb(enb),
        .injectdbiterr(NLW_U0_injectdbiterr_UNCONNECTED),
        .injectsbiterr(NLW_U0_injectsbiterr_UNCONNECTED),
        .rdaddrecc(NLW_U0_rdaddrecc_UNCONNECTED[31:0]),
        .regcea(NLW_U0_regcea_UNCONNECTED),
        .regceb(NLW_U0_regceb_UNCONNECTED),
        .rsta(NLW_U0_rsta_UNCONNECTED),
        .rsta_busy(NLW_U0_rsta_busy_UNCONNECTED),
        .rstb(NLW_U0_rstb_UNCONNECTED),
        .rstb_busy(NLW_U0_rstb_busy_UNCONNECTED),
        .s_aclk(NLW_U0_s_aclk_UNCONNECTED),
        .s_aresetn(NLW_U0_s_aresetn_UNCONNECTED),
        .s_axi_araddr(NLW_U0_s_axi_araddr_UNCONNECTED[31:0]),
        .s_axi_arburst(NLW_U0_s_axi_arburst_UNCONNECTED[1:0]),
        .s_axi_arid(NLW_U0_s_axi_arid_UNCONNECTED[3:0]),
        .s_axi_arlen(NLW_U0_s_axi_arlen_UNCONNECTED[7:0]),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arsize(NLW_U0_s_axi_arsize_UNCONNECTED[2:0]),
        .s_axi_arvalid(NLW_U0_s_axi_arvalid_UNCONNECTED),
        .s_axi_awaddr(NLW_U0_s_axi_awaddr_UNCONNECTED[31:0]),
        .s_axi_awburst(NLW_U0_s_axi_awburst_UNCONNECTED[1:0]),
        .s_axi_awid(NLW_U0_s_axi_awid_UNCONNECTED[3:0]),
        .s_axi_awlen(NLW_U0_s_axi_awlen_UNCONNECTED[7:0]),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awsize(NLW_U0_s_axi_awsize_UNCONNECTED[2:0]),
        .s_axi_awvalid(NLW_U0_s_axi_awvalid_UNCONNECTED),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[3:0]),
        .s_axi_bready(NLW_U0_s_axi_bready_UNCONNECTED),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_dbiterr(NLW_U0_s_axi_dbiterr_UNCONNECTED),
        .s_axi_injectdbiterr(NLW_U0_s_axi_injectdbiterr_UNCONNECTED),
        .s_axi_injectsbiterr(NLW_U0_s_axi_injectsbiterr_UNCONNECTED),
        .s_axi_rdaddrecc(NLW_U0_s_axi_rdaddrecc_UNCONNECTED[31:0]),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[31:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[3:0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(NLW_U0_s_axi_rready_UNCONNECTED),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_sbiterr(NLW_U0_s_axi_sbiterr_UNCONNECTED),
        .s_axi_wdata(NLW_U0_s_axi_wdata_UNCONNECTED[31:0]),
        .s_axi_wlast(NLW_U0_s_axi_wlast_UNCONNECTED),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb(NLW_U0_s_axi_wstrb_UNCONNECTED[3:0]),
        .s_axi_wvalid(NLW_U0_s_axi_wvalid_UNCONNECTED),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .shutdown(NLW_U0_shutdown_UNCONNECTED),
        .sleep(NLW_U0_sleep_UNCONNECTED),
        .wea(wea),
        .web(web));
endmodule

(* CHECK_LICENSE_TYPE = "bd_3914_mdm_0_0,MDM,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "bd_3914_mdm_0_0" *) 
(* X_CORE_INFO = "MDM,Vivado 2018.3" *) 
module cpu_bd_3914_mdm_0_0
   (S_AXI_ACLK,
    S_AXI_ARESETN,
    Interrupt,
    Debug_SYS_Rst,
    S_AXI_AWADDR,
    S_AXI_AWVALID,
    S_AXI_AWREADY,
    S_AXI_WDATA,
    S_AXI_WSTRB,
    S_AXI_WVALID,
    S_AXI_WREADY,
    S_AXI_BRESP,
    S_AXI_BVALID,
    S_AXI_BREADY,
    S_AXI_ARADDR,
    S_AXI_ARVALID,
    S_AXI_ARREADY,
    S_AXI_RDATA,
    S_AXI_RRESP,
    S_AXI_RVALID,
    S_AXI_RREADY,
    Dbg_Clk_0,
    Dbg_TDI_0,
    Dbg_TDO_0,
    Dbg_Reg_En_0,
    Dbg_Capture_0,
    Dbg_Shift_0,
    Dbg_Update_0,
    Dbg_Rst_0,
    Dbg_Disable_0);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.S_AXI_ACLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.S_AXI_ACLK, ASSOCIATED_BUSIF S_AXI:MBDEBUG_AXI_0:MBDEBUG_AXI_1:MBDEBUG_AXI_2:MBDEBUG_AXI_3:MBDEBUG_AXI_4:MBDEBUG_AXI_5:MBDEBUG_AXI_6:MBDEBUG_AXI_7:MBDEBUG_AXI_8:MBDEBUG_AXI_9:MBDEBUG_AXI_10:MBDEBUG_AXI_11:MBDEBUG_AXI_12:MBDEBUG_AXI_13:MBDEBUG_AXI_14:MBDEBUG_AXI_15:MBDEBUG_AXI_16:MBDEBUG_AXI_17:MBDEBUG_AXI_18:MBDEBUG_AXI_19:MBDEBUG_AXI_20:MBDEBUG_AXI_21:MBDEBUG_AXI_22:MBDEBUG_AXI_23:MBDEBUG_AXI_24:MBDEBUG_AXI_25:MBDEBUG_AXI_26:MBDEBUG_AXI_27:MBDEBUG_AXI_28:MBDEBUG_AXI_29:MBDEBUG_AXI_30:MBDEBUG_AXI_31, ASSOCIATED_RESET S_AXI_ARESETN, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input S_AXI_ACLK;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.S_AXI_ARESETN RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.S_AXI_ARESETN, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input S_AXI_ARESETN;
  (* X_INTERFACE_INFO = "xilinx.com:signal:interrupt:1.0 INTERRUPT.INTERRUPT INTERRUPT" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME INTERRUPT.INTERRUPT, SENSITIVITY EDGE_RISING, SUGGESTED_PRIORITY HIGH, PortWidth 1" *) output Interrupt;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.Debug_SYS_Rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.Debug_SYS_Rst, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) output Debug_SYS_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 4, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, MAX_BURST_LENGTH 1, PHASE 0.000, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) input [3:0]S_AXI_AWADDR;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input S_AXI_AWVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output S_AXI_AWREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [31:0]S_AXI_WDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [3:0]S_AXI_WSTRB;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input S_AXI_WVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output S_AXI_WREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BRESP" *) output [1:0]S_AXI_BRESP;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output S_AXI_BVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input S_AXI_BREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [3:0]S_AXI_ARADDR;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input S_AXI_ARVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output S_AXI_ARREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [31:0]S_AXI_RDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RRESP" *) output [1:0]S_AXI_RRESP;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output S_AXI_RVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) input S_AXI_RREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 CLK" *) output Dbg_Clk_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 TDI" *) output Dbg_TDI_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 TDO" *) input Dbg_TDO_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 REG_EN" *) output [0:7]Dbg_Reg_En_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 CAPTURE" *) output Dbg_Capture_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 SHIFT" *) output Dbg_Shift_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 UPDATE" *) output Dbg_Update_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 RST" *) output Dbg_Rst_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 DISABLE" *) output Dbg_Disable_0;

  wire Dbg_Capture_0;
  wire Dbg_Clk_0;
  wire [0:7]Dbg_Reg_En_0;
  wire Dbg_Rst_0;
  wire Dbg_Shift_0;
  wire Dbg_TDI_0;
  wire Dbg_TDO_0;
  wire Dbg_Update_0;
  wire Debug_SYS_Rst;
  wire S_AXI_ACLK;
  wire [3:0]S_AXI_ARADDR;
  wire S_AXI_ARESETN;
  wire S_AXI_ARREADY;
  wire S_AXI_ARVALID;
  wire S_AXI_AWREADY;
  wire S_AXI_AWVALID;
  wire S_AXI_BVALID;
  wire [31:0]S_AXI_RDATA;
  wire S_AXI_RVALID;
  wire [31:0]S_AXI_WDATA;
  wire S_AXI_WREADY;
  wire S_AXI_WVALID;
  wire NLW_U0_Config_Reset_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_0_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_1_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_10_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_11_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_12_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_13_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_14_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_15_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_16_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_17_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_18_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_19_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_2_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_20_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_21_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_22_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_23_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_24_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_25_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_26_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_27_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_28_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_29_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_3_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_30_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_31_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_4_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_5_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_6_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_7_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_8_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_9_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_0_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_1_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_10_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_11_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_12_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_13_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_14_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_15_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_16_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_17_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_18_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_19_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_2_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_20_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_21_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_22_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_23_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_24_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_25_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_26_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_27_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_28_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_29_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_3_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_30_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_31_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_4_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_5_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_6_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_7_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_8_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_9_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_0_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_1_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_10_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_11_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_12_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_13_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_14_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_15_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_16_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_17_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_18_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_19_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_2_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_20_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_21_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_22_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_23_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_24_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_25_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_26_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_27_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_28_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_29_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_3_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_30_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_31_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_4_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_5_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_6_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_7_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_8_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_9_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_0_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_1_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_10_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_11_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_12_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_13_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_14_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_15_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_16_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_17_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_18_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_19_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_2_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_20_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_21_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_22_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_23_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_24_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_25_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_26_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_27_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_28_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_29_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_3_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_30_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_31_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_4_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_5_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_6_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_7_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_8_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_9_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_0_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_1_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_10_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_11_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_12_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_13_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_14_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_15_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_16_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_17_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_18_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_19_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_2_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_20_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_21_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_22_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_23_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_24_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_25_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_26_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_27_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_28_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_29_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_3_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_30_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_31_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_4_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_5_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_6_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_7_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_8_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_9_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_0_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_1_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_10_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_11_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_12_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_13_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_14_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_15_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_16_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_17_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_18_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_19_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_2_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_20_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_21_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_22_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_23_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_24_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_25_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_26_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_27_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_28_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_29_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_3_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_30_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_31_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_4_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_5_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_6_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_7_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_8_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_9_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_1_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_10_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_11_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_12_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_13_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_14_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_15_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_16_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_17_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_18_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_19_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_2_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_20_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_21_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_22_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_23_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_24_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_25_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_26_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_27_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_28_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_29_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_3_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_30_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_31_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_4_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_5_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_6_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_7_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_8_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_9_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_1_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_10_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_11_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_12_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_13_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_14_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_15_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_16_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_17_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_18_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_19_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_2_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_20_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_21_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_22_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_23_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_24_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_25_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_26_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_27_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_28_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_29_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_3_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_30_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_31_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_4_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_5_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_6_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_7_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_8_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_9_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_0_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_1_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_10_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_11_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_12_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_13_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_14_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_15_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_16_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_17_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_18_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_19_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_2_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_20_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_21_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_22_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_23_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_24_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_25_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_26_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_27_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_28_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_29_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_3_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_30_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_31_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_4_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_5_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_6_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_7_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_8_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_9_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_0_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_1_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_10_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_11_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_12_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_13_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_14_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_15_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_16_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_17_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_18_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_19_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_2_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_20_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_21_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_22_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_23_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_24_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_25_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_26_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_27_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_28_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_29_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_3_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_30_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_31_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_4_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_5_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_6_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_7_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_8_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_9_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_0_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_1_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_10_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_11_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_12_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_13_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_14_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_15_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_16_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_17_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_18_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_19_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_2_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_20_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_21_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_22_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_23_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_24_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_25_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_26_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_27_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_28_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_29_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_3_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_30_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_31_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_4_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_5_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_6_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_7_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_8_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_9_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_1_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_10_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_11_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_12_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_13_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_14_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_15_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_16_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_17_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_18_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_19_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_2_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_20_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_21_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_22_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_23_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_24_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_25_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_26_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_27_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_28_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_29_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_3_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_30_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_31_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_4_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_5_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_6_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_7_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_8_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_9_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_1_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_10_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_11_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_12_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_13_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_14_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_15_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_16_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_17_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_18_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_19_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_2_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_20_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_21_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_22_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_23_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_24_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_25_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_26_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_27_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_28_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_29_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_3_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_30_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_31_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_4_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_5_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_6_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_7_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_8_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_9_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_1_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_10_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_11_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_12_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_13_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_14_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_15_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_16_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_17_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_18_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_19_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_2_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_20_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_21_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_22_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_23_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_24_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_25_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_26_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_27_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_28_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_29_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_3_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_30_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_31_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_4_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_5_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_6_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_7_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_8_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_9_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_1_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_10_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_11_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_12_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_13_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_14_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_15_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_16_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_17_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_18_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_19_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_2_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_20_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_21_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_22_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_23_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_24_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_25_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_26_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_27_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_28_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_29_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_3_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_30_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_31_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_4_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_5_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_6_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_7_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_8_UNCONNECTED;
  wire NLW_U0_Dbg_TDO_9_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_0_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_1_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_10_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_11_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_12_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_13_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_14_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_15_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_16_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_17_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_18_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_19_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_2_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_20_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_21_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_22_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_23_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_24_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_25_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_26_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_27_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_28_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_29_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_3_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_30_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_31_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_4_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_5_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_6_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_7_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_8_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_9_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_0_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_1_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_10_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_11_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_12_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_13_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_14_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_15_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_16_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_17_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_18_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_19_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_2_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_20_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_21_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_22_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_23_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_24_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_25_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_26_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_27_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_28_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_29_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_3_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_30_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_31_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_4_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_5_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_6_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_7_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_8_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_9_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_0_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_1_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_10_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_11_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_12_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_13_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_14_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_15_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_16_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_17_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_18_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_19_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_2_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_20_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_21_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_22_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_23_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_24_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_25_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_26_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_27_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_28_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_29_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_3_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_30_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_31_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_4_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_5_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_6_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_7_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_8_UNCONNECTED;
  wire NLW_U0_Dbg_TrValid_9_UNCONNECTED;
  wire NLW_U0_Dbg_Update_1_UNCONNECTED;
  wire NLW_U0_Dbg_Update_10_UNCONNECTED;
  wire NLW_U0_Dbg_Update_11_UNCONNECTED;
  wire NLW_U0_Dbg_Update_12_UNCONNECTED;
  wire NLW_U0_Dbg_Update_13_UNCONNECTED;
  wire NLW_U0_Dbg_Update_14_UNCONNECTED;
  wire NLW_U0_Dbg_Update_15_UNCONNECTED;
  wire NLW_U0_Dbg_Update_16_UNCONNECTED;
  wire NLW_U0_Dbg_Update_17_UNCONNECTED;
  wire NLW_U0_Dbg_Update_18_UNCONNECTED;
  wire NLW_U0_Dbg_Update_19_UNCONNECTED;
  wire NLW_U0_Dbg_Update_2_UNCONNECTED;
  wire NLW_U0_Dbg_Update_20_UNCONNECTED;
  wire NLW_U0_Dbg_Update_21_UNCONNECTED;
  wire NLW_U0_Dbg_Update_22_UNCONNECTED;
  wire NLW_U0_Dbg_Update_23_UNCONNECTED;
  wire NLW_U0_Dbg_Update_24_UNCONNECTED;
  wire NLW_U0_Dbg_Update_25_UNCONNECTED;
  wire NLW_U0_Dbg_Update_26_UNCONNECTED;
  wire NLW_U0_Dbg_Update_27_UNCONNECTED;
  wire NLW_U0_Dbg_Update_28_UNCONNECTED;
  wire NLW_U0_Dbg_Update_29_UNCONNECTED;
  wire NLW_U0_Dbg_Update_3_UNCONNECTED;
  wire NLW_U0_Dbg_Update_30_UNCONNECTED;
  wire NLW_U0_Dbg_Update_31_UNCONNECTED;
  wire NLW_U0_Dbg_Update_4_UNCONNECTED;
  wire NLW_U0_Dbg_Update_5_UNCONNECTED;
  wire NLW_U0_Dbg_Update_6_UNCONNECTED;
  wire NLW_U0_Dbg_Update_7_UNCONNECTED;
  wire NLW_U0_Dbg_Update_8_UNCONNECTED;
  wire NLW_U0_Dbg_Update_9_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_0_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_1_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_10_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_11_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_12_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_13_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_14_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_15_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_16_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_17_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_18_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_19_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_2_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_20_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_21_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_22_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_23_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_24_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_25_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_26_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_27_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_28_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_29_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_3_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_30_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_31_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_4_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_5_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_6_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_7_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_8_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_9_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_0_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_1_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_10_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_11_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_12_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_13_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_14_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_15_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_16_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_17_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_18_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_19_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_2_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_20_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_21_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_22_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_23_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_24_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_25_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_26_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_27_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_28_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_29_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_3_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_30_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_31_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_4_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_5_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_6_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_7_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_8_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_9_UNCONNECTED;
  wire NLW_U0_Ext_BRK_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_CAPTURE_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_DRCK_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_RESET_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_SEL_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_SHIFT_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_TDI_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_TDO_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_UPDATE_UNCONNECTED;
  wire NLW_U0_Ext_NM_BRK_UNCONNECTED;
  wire NLW_U0_Interrupt_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_0_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_1_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_10_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_11_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_12_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_13_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_14_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_15_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_16_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_17_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_18_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_19_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_2_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_20_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_21_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_22_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_23_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_24_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_25_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_26_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_27_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_28_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_29_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_3_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_30_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_31_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_4_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_5_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_6_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_7_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_8_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_9_UNCONNECTED;
  wire NLW_U0_LMB_CE_0_UNCONNECTED;
  wire NLW_U0_LMB_CE_1_UNCONNECTED;
  wire NLW_U0_LMB_CE_10_UNCONNECTED;
  wire NLW_U0_LMB_CE_11_UNCONNECTED;
  wire NLW_U0_LMB_CE_12_UNCONNECTED;
  wire NLW_U0_LMB_CE_13_UNCONNECTED;
  wire NLW_U0_LMB_CE_14_UNCONNECTED;
  wire NLW_U0_LMB_CE_15_UNCONNECTED;
  wire NLW_U0_LMB_CE_16_UNCONNECTED;
  wire NLW_U0_LMB_CE_17_UNCONNECTED;
  wire NLW_U0_LMB_CE_18_UNCONNECTED;
  wire NLW_U0_LMB_CE_19_UNCONNECTED;
  wire NLW_U0_LMB_CE_2_UNCONNECTED;
  wire NLW_U0_LMB_CE_20_UNCONNECTED;
  wire NLW_U0_LMB_CE_21_UNCONNECTED;
  wire NLW_U0_LMB_CE_22_UNCONNECTED;
  wire NLW_U0_LMB_CE_23_UNCONNECTED;
  wire NLW_U0_LMB_CE_24_UNCONNECTED;
  wire NLW_U0_LMB_CE_25_UNCONNECTED;
  wire NLW_U0_LMB_CE_26_UNCONNECTED;
  wire NLW_U0_LMB_CE_27_UNCONNECTED;
  wire NLW_U0_LMB_CE_28_UNCONNECTED;
  wire NLW_U0_LMB_CE_29_UNCONNECTED;
  wire NLW_U0_LMB_CE_3_UNCONNECTED;
  wire NLW_U0_LMB_CE_30_UNCONNECTED;
  wire NLW_U0_LMB_CE_31_UNCONNECTED;
  wire NLW_U0_LMB_CE_4_UNCONNECTED;
  wire NLW_U0_LMB_CE_5_UNCONNECTED;
  wire NLW_U0_LMB_CE_6_UNCONNECTED;
  wire NLW_U0_LMB_CE_7_UNCONNECTED;
  wire NLW_U0_LMB_CE_8_UNCONNECTED;
  wire NLW_U0_LMB_CE_9_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_0_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_1_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_10_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_11_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_12_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_13_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_14_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_15_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_16_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_17_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_18_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_19_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_2_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_20_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_21_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_22_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_23_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_24_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_25_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_26_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_27_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_28_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_29_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_3_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_30_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_31_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_4_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_5_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_6_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_7_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_8_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_9_UNCONNECTED;
  wire NLW_U0_LMB_Ready_0_UNCONNECTED;
  wire NLW_U0_LMB_Ready_1_UNCONNECTED;
  wire NLW_U0_LMB_Ready_10_UNCONNECTED;
  wire NLW_U0_LMB_Ready_11_UNCONNECTED;
  wire NLW_U0_LMB_Ready_12_UNCONNECTED;
  wire NLW_U0_LMB_Ready_13_UNCONNECTED;
  wire NLW_U0_LMB_Ready_14_UNCONNECTED;
  wire NLW_U0_LMB_Ready_15_UNCONNECTED;
  wire NLW_U0_LMB_Ready_16_UNCONNECTED;
  wire NLW_U0_LMB_Ready_17_UNCONNECTED;
  wire NLW_U0_LMB_Ready_18_UNCONNECTED;
  wire NLW_U0_LMB_Ready_19_UNCONNECTED;
  wire NLW_U0_LMB_Ready_2_UNCONNECTED;
  wire NLW_U0_LMB_Ready_20_UNCONNECTED;
  wire NLW_U0_LMB_Ready_21_UNCONNECTED;
  wire NLW_U0_LMB_Ready_22_UNCONNECTED;
  wire NLW_U0_LMB_Ready_23_UNCONNECTED;
  wire NLW_U0_LMB_Ready_24_UNCONNECTED;
  wire NLW_U0_LMB_Ready_25_UNCONNECTED;
  wire NLW_U0_LMB_Ready_26_UNCONNECTED;
  wire NLW_U0_LMB_Ready_27_UNCONNECTED;
  wire NLW_U0_LMB_Ready_28_UNCONNECTED;
  wire NLW_U0_LMB_Ready_29_UNCONNECTED;
  wire NLW_U0_LMB_Ready_3_UNCONNECTED;
  wire NLW_U0_LMB_Ready_30_UNCONNECTED;
  wire NLW_U0_LMB_Ready_31_UNCONNECTED;
  wire NLW_U0_LMB_Ready_4_UNCONNECTED;
  wire NLW_U0_LMB_Ready_5_UNCONNECTED;
  wire NLW_U0_LMB_Ready_6_UNCONNECTED;
  wire NLW_U0_LMB_Ready_7_UNCONNECTED;
  wire NLW_U0_LMB_Ready_8_UNCONNECTED;
  wire NLW_U0_LMB_Ready_9_UNCONNECTED;
  wire NLW_U0_LMB_UE_0_UNCONNECTED;
  wire NLW_U0_LMB_UE_1_UNCONNECTED;
  wire NLW_U0_LMB_UE_10_UNCONNECTED;
  wire NLW_U0_LMB_UE_11_UNCONNECTED;
  wire NLW_U0_LMB_UE_12_UNCONNECTED;
  wire NLW_U0_LMB_UE_13_UNCONNECTED;
  wire NLW_U0_LMB_UE_14_UNCONNECTED;
  wire NLW_U0_LMB_UE_15_UNCONNECTED;
  wire NLW_U0_LMB_UE_16_UNCONNECTED;
  wire NLW_U0_LMB_UE_17_UNCONNECTED;
  wire NLW_U0_LMB_UE_18_UNCONNECTED;
  wire NLW_U0_LMB_UE_19_UNCONNECTED;
  wire NLW_U0_LMB_UE_2_UNCONNECTED;
  wire NLW_U0_LMB_UE_20_UNCONNECTED;
  wire NLW_U0_LMB_UE_21_UNCONNECTED;
  wire NLW_U0_LMB_UE_22_UNCONNECTED;
  wire NLW_U0_LMB_UE_23_UNCONNECTED;
  wire NLW_U0_LMB_UE_24_UNCONNECTED;
  wire NLW_U0_LMB_UE_25_UNCONNECTED;
  wire NLW_U0_LMB_UE_26_UNCONNECTED;
  wire NLW_U0_LMB_UE_27_UNCONNECTED;
  wire NLW_U0_LMB_UE_28_UNCONNECTED;
  wire NLW_U0_LMB_UE_29_UNCONNECTED;
  wire NLW_U0_LMB_UE_3_UNCONNECTED;
  wire NLW_U0_LMB_UE_30_UNCONNECTED;
  wire NLW_U0_LMB_UE_31_UNCONNECTED;
  wire NLW_U0_LMB_UE_4_UNCONNECTED;
  wire NLW_U0_LMB_UE_5_UNCONNECTED;
  wire NLW_U0_LMB_UE_6_UNCONNECTED;
  wire NLW_U0_LMB_UE_7_UNCONNECTED;
  wire NLW_U0_LMB_UE_8_UNCONNECTED;
  wire NLW_U0_LMB_UE_9_UNCONNECTED;
  wire NLW_U0_LMB_Wait_0_UNCONNECTED;
  wire NLW_U0_LMB_Wait_1_UNCONNECTED;
  wire NLW_U0_LMB_Wait_10_UNCONNECTED;
  wire NLW_U0_LMB_Wait_11_UNCONNECTED;
  wire NLW_U0_LMB_Wait_12_UNCONNECTED;
  wire NLW_U0_LMB_Wait_13_UNCONNECTED;
  wire NLW_U0_LMB_Wait_14_UNCONNECTED;
  wire NLW_U0_LMB_Wait_15_UNCONNECTED;
  wire NLW_U0_LMB_Wait_16_UNCONNECTED;
  wire NLW_U0_LMB_Wait_17_UNCONNECTED;
  wire NLW_U0_LMB_Wait_18_UNCONNECTED;
  wire NLW_U0_LMB_Wait_19_UNCONNECTED;
  wire NLW_U0_LMB_Wait_2_UNCONNECTED;
  wire NLW_U0_LMB_Wait_20_UNCONNECTED;
  wire NLW_U0_LMB_Wait_21_UNCONNECTED;
  wire NLW_U0_LMB_Wait_22_UNCONNECTED;
  wire NLW_U0_LMB_Wait_23_UNCONNECTED;
  wire NLW_U0_LMB_Wait_24_UNCONNECTED;
  wire NLW_U0_LMB_Wait_25_UNCONNECTED;
  wire NLW_U0_LMB_Wait_26_UNCONNECTED;
  wire NLW_U0_LMB_Wait_27_UNCONNECTED;
  wire NLW_U0_LMB_Wait_28_UNCONNECTED;
  wire NLW_U0_LMB_Wait_29_UNCONNECTED;
  wire NLW_U0_LMB_Wait_3_UNCONNECTED;
  wire NLW_U0_LMB_Wait_30_UNCONNECTED;
  wire NLW_U0_LMB_Wait_31_UNCONNECTED;
  wire NLW_U0_LMB_Wait_4_UNCONNECTED;
  wire NLW_U0_LMB_Wait_5_UNCONNECTED;
  wire NLW_U0_LMB_Wait_6_UNCONNECTED;
  wire NLW_U0_LMB_Wait_7_UNCONNECTED;
  wire NLW_U0_LMB_Wait_8_UNCONNECTED;
  wire NLW_U0_LMB_Wait_9_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_0_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_1_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_10_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_11_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_12_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_13_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_14_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_15_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_16_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_17_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_18_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_19_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_2_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_20_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_21_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_22_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_23_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_24_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_25_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_26_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_27_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_28_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_29_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_3_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_30_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_31_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_4_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_5_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_6_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_7_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_8_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_9_UNCONNECTED;
  wire NLW_U0_M_AXIS_ACLK_UNCONNECTED;
  wire NLW_U0_M_AXIS_ARESETN_UNCONNECTED;
  wire NLW_U0_M_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_ACLK_UNCONNECTED;
  wire NLW_U0_M_AXI_ARESETN_UNCONNECTED;
  wire NLW_U0_M_AXI_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_WVALID_UNCONNECTED;
  wire NLW_U0_S_AXI_BREADY_UNCONNECTED;
  wire NLW_U0_S_AXI_RREADY_UNCONNECTED;
  wire NLW_U0_Scan_En_UNCONNECTED;
  wire NLW_U0_Scan_Reset_UNCONNECTED;
  wire NLW_U0_Scan_Reset_Sel_UNCONNECTED;
  wire NLW_U0_TRACE_CLK_UNCONNECTED;
  wire NLW_U0_TRACE_CLK_OUT_UNCONNECTED;
  wire NLW_U0_TRACE_CTL_UNCONNECTED;
  wire NLW_U0_Trig_Ack_In_0_UNCONNECTED;
  wire NLW_U0_Trig_Ack_In_1_UNCONNECTED;
  wire NLW_U0_Trig_Ack_In_2_UNCONNECTED;
  wire NLW_U0_Trig_Ack_In_3_UNCONNECTED;
  wire NLW_U0_Trig_Ack_Out_0_UNCONNECTED;
  wire NLW_U0_Trig_Ack_Out_1_UNCONNECTED;
  wire NLW_U0_Trig_Ack_Out_2_UNCONNECTED;
  wire NLW_U0_Trig_Ack_Out_3_UNCONNECTED;
  wire NLW_U0_Trig_In_0_UNCONNECTED;
  wire NLW_U0_Trig_In_1_UNCONNECTED;
  wire NLW_U0_Trig_In_2_UNCONNECTED;
  wire NLW_U0_Trig_In_3_UNCONNECTED;
  wire NLW_U0_Trig_Out_0_UNCONNECTED;
  wire NLW_U0_Trig_Out_1_UNCONNECTED;
  wire NLW_U0_Trig_Out_2_UNCONNECTED;
  wire NLW_U0_Trig_Out_3_UNCONNECTED;
  wire NLW_U0_bscan_ext_bscanid_en_UNCONNECTED;
  wire NLW_U0_bscan_ext_capture_UNCONNECTED;
  wire NLW_U0_bscan_ext_drck_UNCONNECTED;
  wire NLW_U0_bscan_ext_reset_UNCONNECTED;
  wire NLW_U0_bscan_ext_sel_UNCONNECTED;
  wire NLW_U0_bscan_ext_shift_UNCONNECTED;
  wire NLW_U0_bscan_ext_tck_UNCONNECTED;
  wire NLW_U0_bscan_ext_tdi_UNCONNECTED;
  wire NLW_U0_bscan_ext_tdo_UNCONNECTED;
  wire NLW_U0_bscan_ext_update_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_0_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_1_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_10_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_11_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_12_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_13_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_14_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_15_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_16_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_17_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_18_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_19_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_2_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_20_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_21_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_22_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_23_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_24_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_25_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_26_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_27_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_28_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_29_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_3_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_30_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_31_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_4_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_5_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_6_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_7_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_8_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_9_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_0_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_1_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_10_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_11_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_12_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_13_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_14_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_15_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_16_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_17_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_18_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_19_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_2_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_20_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_21_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_22_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_23_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_24_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_25_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_26_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_27_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_28_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_29_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_3_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_30_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_31_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_4_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_5_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_6_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_7_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_8_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_9_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_0_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_1_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_10_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_11_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_12_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_13_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_14_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_15_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_16_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_17_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_18_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_19_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_2_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_20_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_21_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_22_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_23_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_24_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_25_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_26_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_27_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_28_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_29_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_3_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_30_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_31_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_4_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_5_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_6_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_7_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_8_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_9_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_0_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_1_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_10_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_11_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_12_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_13_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_14_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_15_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_16_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_17_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_18_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_19_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_2_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_20_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_21_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_22_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_23_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_24_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_25_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_26_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_27_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_28_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_29_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_3_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_30_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_31_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_4_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_5_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_6_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_7_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_8_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_9_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_0_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_1_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_10_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_11_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_12_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_13_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_14_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_15_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_16_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_17_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_18_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_19_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_2_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_20_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_21_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_22_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_23_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_24_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_25_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_26_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_27_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_28_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_29_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_3_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_30_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_31_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_4_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_5_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_6_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_7_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_8_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_9_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_1_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_10_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_11_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_12_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_13_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_14_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_15_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_16_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_17_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_18_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_19_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_2_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_20_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_21_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_22_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_23_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_24_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_25_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_26_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_27_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_28_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_29_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_3_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_30_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_31_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_4_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_5_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_6_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_7_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_8_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_9_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_0_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_1_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_10_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_11_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_12_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_13_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_14_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_15_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_16_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_17_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_18_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_19_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_2_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_20_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_21_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_22_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_23_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_24_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_25_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_26_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_27_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_28_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_29_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_3_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_30_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_31_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_4_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_5_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_6_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_7_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_8_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_TrData_9_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_0_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_1_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_10_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_11_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_12_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_13_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_14_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_15_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_16_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_17_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_18_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_19_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_2_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_20_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_21_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_22_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_23_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_24_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_25_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_26_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_27_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_28_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_29_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_3_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_30_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_31_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_4_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_5_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_6_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_7_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_8_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_9_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_0_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_1_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_10_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_11_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_12_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_13_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_14_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_15_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_16_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_17_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_18_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_19_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_2_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_20_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_21_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_22_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_23_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_24_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_25_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_26_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_27_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_28_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_29_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_3_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_30_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_31_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_4_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_5_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_6_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_7_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_8_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_9_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_0_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_1_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_10_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_11_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_12_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_13_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_14_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_15_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_16_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_17_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_18_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_19_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_2_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_20_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_21_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_22_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_23_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_24_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_25_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_26_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_27_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_28_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_29_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_3_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_30_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_31_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_4_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_5_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_6_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_7_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_8_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_9_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_0_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_1_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_10_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_11_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_12_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_13_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_14_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_15_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_16_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_17_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_18_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_19_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_2_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_20_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_21_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_22_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_23_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_24_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_25_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_26_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_27_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_28_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_29_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_3_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_30_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_31_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_4_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_5_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_6_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_7_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_8_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_9_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_0_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_1_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_10_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_11_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_12_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_13_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_14_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_15_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_16_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_17_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_18_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_19_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_2_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_20_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_21_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_22_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_23_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_24_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_25_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_26_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_27_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_28_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_29_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_3_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_30_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_31_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_4_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_5_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_6_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_7_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_8_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_9_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_0_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_1_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_10_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_11_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_12_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_13_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_14_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_15_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_16_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_17_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_18_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_19_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_2_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_20_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_21_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_22_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_23_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_24_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_25_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_26_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_27_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_28_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_29_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_3_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_30_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_31_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_4_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_5_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_6_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_7_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_8_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_9_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_0_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_1_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_10_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_11_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_12_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_13_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_14_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_15_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_16_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_17_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_18_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_19_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_2_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_20_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_21_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_22_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_23_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_24_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_25_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_26_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_27_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_28_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_29_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_3_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_30_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_31_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_4_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_5_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_6_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_7_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_8_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_9_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_0_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_1_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_10_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_11_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_12_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_13_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_14_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_15_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_16_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_17_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_18_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_19_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_2_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_20_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_21_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_22_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_23_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_24_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_25_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_26_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_27_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_28_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_29_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_3_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_30_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_31_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_4_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_5_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_6_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_7_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_8_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Read_9_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_0_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_1_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_10_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_11_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_12_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_13_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_14_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_15_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_16_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_17_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_18_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_19_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_2_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_20_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_21_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_22_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_23_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_24_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_25_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_26_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_27_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_28_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_29_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_3_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_30_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_31_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_4_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_5_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_6_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_7_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_8_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_9_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXIS_TDATA_UNCONNECTED;
  wire [6:0]NLW_U0_M_AXIS_TID_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_AWSIZE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_WSTRB_UNCONNECTED;
  wire [1:0]NLW_U0_S_AXI_ARADDR_UNCONNECTED;
  wire [3:0]NLW_U0_S_AXI_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_S_AXI_BRESP_UNCONNECTED;
  wire [31:8]NLW_U0_S_AXI_RDATA_UNCONNECTED;
  wire [1:0]NLW_U0_S_AXI_RRESP_UNCONNECTED;
  wire [31:8]NLW_U0_S_AXI_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_S_AXI_WSTRB_UNCONNECTED;
  wire [31:0]NLW_U0_TRACE_DATA_UNCONNECTED;

  (* C_ADDR_SIZE = "32" *) 
  (* C_AVOID_PRIMITIVES = "0" *) 
  (* C_BSCANID = "76547328" *) 
  (* C_DATA_SIZE = "32" *) 
  (* C_DBG_MEM_ACCESS = "0" *) 
  (* C_DBG_REG_ACCESS = "0" *) 
  (* C_DEBUG_INTERFACE = "0" *) 
  (* C_EXT_TRIG_RESET_VALUE = "20'b11110001001000110100" *) 
  (* C_FAMILY = "virtex7" *) 
  (* C_INTERCONNECT = "2" *) 
  (* C_JTAG_CHAIN = "1" *) 
  (* C_MB_DBG_PORTS = "1" *) 
  (* C_M_AXIS_DATA_WIDTH = "32" *) 
  (* C_M_AXIS_ID_WIDTH = "7" *) 
  (* C_M_AXI_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_DATA_WIDTH = "32" *) 
  (* C_M_AXI_THREAD_ID_WIDTH = "1" *) 
  (* C_S_AXI_ACLK_FREQ_HZ = "100000000" *) 
  (* C_S_AXI_ADDR_WIDTH = "4" *) 
  (* C_S_AXI_DATA_WIDTH = "32" *) 
  (* C_TRACE_ASYNC_RESET = "0" *) 
  (* C_TRACE_CLK_FREQ_HZ = "200000000" *) 
  (* C_TRACE_CLK_OUT_PHASE = "90" *) 
  (* C_TRACE_DATA_WIDTH = "32" *) 
  (* C_TRACE_ID = "110" *) 
  (* C_TRACE_OUTPUT = "0" *) 
  (* C_TRACE_PROTOCOL = "1" *) 
  (* C_USE_BSCAN = "0" *) 
  (* C_USE_CONFIG_RESET = "0" *) 
  (* C_USE_CROSS_TRIGGER = "0" *) 
  (* C_USE_UART = "1" *) 
  cpu_MDM U0
       (.Config_Reset(NLW_U0_Config_Reset_UNCONNECTED),
        .Dbg_ARADDR_0(NLW_U0_Dbg_ARADDR_0_UNCONNECTED[14:2]),
        .Dbg_ARADDR_1(NLW_U0_Dbg_ARADDR_1_UNCONNECTED[14:2]),
        .Dbg_ARADDR_10(NLW_U0_Dbg_ARADDR_10_UNCONNECTED[14:2]),
        .Dbg_ARADDR_11(NLW_U0_Dbg_ARADDR_11_UNCONNECTED[14:2]),
        .Dbg_ARADDR_12(NLW_U0_Dbg_ARADDR_12_UNCONNECTED[14:2]),
        .Dbg_ARADDR_13(NLW_U0_Dbg_ARADDR_13_UNCONNECTED[14:2]),
        .Dbg_ARADDR_14(NLW_U0_Dbg_ARADDR_14_UNCONNECTED[14:2]),
        .Dbg_ARADDR_15(NLW_U0_Dbg_ARADDR_15_UNCONNECTED[14:2]),
        .Dbg_ARADDR_16(NLW_U0_Dbg_ARADDR_16_UNCONNECTED[14:2]),
        .Dbg_ARADDR_17(NLW_U0_Dbg_ARADDR_17_UNCONNECTED[14:2]),
        .Dbg_ARADDR_18(NLW_U0_Dbg_ARADDR_18_UNCONNECTED[14:2]),
        .Dbg_ARADDR_19(NLW_U0_Dbg_ARADDR_19_UNCONNECTED[14:2]),
        .Dbg_ARADDR_2(NLW_U0_Dbg_ARADDR_2_UNCONNECTED[14:2]),
        .Dbg_ARADDR_20(NLW_U0_Dbg_ARADDR_20_UNCONNECTED[14:2]),
        .Dbg_ARADDR_21(NLW_U0_Dbg_ARADDR_21_UNCONNECTED[14:2]),
        .Dbg_ARADDR_22(NLW_U0_Dbg_ARADDR_22_UNCONNECTED[14:2]),
        .Dbg_ARADDR_23(NLW_U0_Dbg_ARADDR_23_UNCONNECTED[14:2]),
        .Dbg_ARADDR_24(NLW_U0_Dbg_ARADDR_24_UNCONNECTED[14:2]),
        .Dbg_ARADDR_25(NLW_U0_Dbg_ARADDR_25_UNCONNECTED[14:2]),
        .Dbg_ARADDR_26(NLW_U0_Dbg_ARADDR_26_UNCONNECTED[14:2]),
        .Dbg_ARADDR_27(NLW_U0_Dbg_ARADDR_27_UNCONNECTED[14:2]),
        .Dbg_ARADDR_28(NLW_U0_Dbg_ARADDR_28_UNCONNECTED[14:2]),
        .Dbg_ARADDR_29(NLW_U0_Dbg_ARADDR_29_UNCONNECTED[14:2]),
        .Dbg_ARADDR_3(NLW_U0_Dbg_ARADDR_3_UNCONNECTED[14:2]),
        .Dbg_ARADDR_30(NLW_U0_Dbg_ARADDR_30_UNCONNECTED[14:2]),
        .Dbg_ARADDR_31(NLW_U0_Dbg_ARADDR_31_UNCONNECTED[14:2]),
        .Dbg_ARADDR_4(NLW_U0_Dbg_ARADDR_4_UNCONNECTED[14:2]),
        .Dbg_ARADDR_5(NLW_U0_Dbg_ARADDR_5_UNCONNECTED[14:2]),
        .Dbg_ARADDR_6(NLW_U0_Dbg_ARADDR_6_UNCONNECTED[14:2]),
        .Dbg_ARADDR_7(NLW_U0_Dbg_ARADDR_7_UNCONNECTED[14:2]),
        .Dbg_ARADDR_8(NLW_U0_Dbg_ARADDR_8_UNCONNECTED[14:2]),
        .Dbg_ARADDR_9(NLW_U0_Dbg_ARADDR_9_UNCONNECTED[14:2]),
        .Dbg_ARREADY_0(NLW_U0_Dbg_ARREADY_0_UNCONNECTED),
        .Dbg_ARREADY_1(NLW_U0_Dbg_ARREADY_1_UNCONNECTED),
        .Dbg_ARREADY_10(NLW_U0_Dbg_ARREADY_10_UNCONNECTED),
        .Dbg_ARREADY_11(NLW_U0_Dbg_ARREADY_11_UNCONNECTED),
        .Dbg_ARREADY_12(NLW_U0_Dbg_ARREADY_12_UNCONNECTED),
        .Dbg_ARREADY_13(NLW_U0_Dbg_ARREADY_13_UNCONNECTED),
        .Dbg_ARREADY_14(NLW_U0_Dbg_ARREADY_14_UNCONNECTED),
        .Dbg_ARREADY_15(NLW_U0_Dbg_ARREADY_15_UNCONNECTED),
        .Dbg_ARREADY_16(NLW_U0_Dbg_ARREADY_16_UNCONNECTED),
        .Dbg_ARREADY_17(NLW_U0_Dbg_ARREADY_17_UNCONNECTED),
        .Dbg_ARREADY_18(NLW_U0_Dbg_ARREADY_18_UNCONNECTED),
        .Dbg_ARREADY_19(NLW_U0_Dbg_ARREADY_19_UNCONNECTED),
        .Dbg_ARREADY_2(NLW_U0_Dbg_ARREADY_2_UNCONNECTED),
        .Dbg_ARREADY_20(NLW_U0_Dbg_ARREADY_20_UNCONNECTED),
        .Dbg_ARREADY_21(NLW_U0_Dbg_ARREADY_21_UNCONNECTED),
        .Dbg_ARREADY_22(NLW_U0_Dbg_ARREADY_22_UNCONNECTED),
        .Dbg_ARREADY_23(NLW_U0_Dbg_ARREADY_23_UNCONNECTED),
        .Dbg_ARREADY_24(NLW_U0_Dbg_ARREADY_24_UNCONNECTED),
        .Dbg_ARREADY_25(NLW_U0_Dbg_ARREADY_25_UNCONNECTED),
        .Dbg_ARREADY_26(NLW_U0_Dbg_ARREADY_26_UNCONNECTED),
        .Dbg_ARREADY_27(NLW_U0_Dbg_ARREADY_27_UNCONNECTED),
        .Dbg_ARREADY_28(NLW_U0_Dbg_ARREADY_28_UNCONNECTED),
        .Dbg_ARREADY_29(NLW_U0_Dbg_ARREADY_29_UNCONNECTED),
        .Dbg_ARREADY_3(NLW_U0_Dbg_ARREADY_3_UNCONNECTED),
        .Dbg_ARREADY_30(NLW_U0_Dbg_ARREADY_30_UNCONNECTED),
        .Dbg_ARREADY_31(NLW_U0_Dbg_ARREADY_31_UNCONNECTED),
        .Dbg_ARREADY_4(NLW_U0_Dbg_ARREADY_4_UNCONNECTED),
        .Dbg_ARREADY_5(NLW_U0_Dbg_ARREADY_5_UNCONNECTED),
        .Dbg_ARREADY_6(NLW_U0_Dbg_ARREADY_6_UNCONNECTED),
        .Dbg_ARREADY_7(NLW_U0_Dbg_ARREADY_7_UNCONNECTED),
        .Dbg_ARREADY_8(NLW_U0_Dbg_ARREADY_8_UNCONNECTED),
        .Dbg_ARREADY_9(NLW_U0_Dbg_ARREADY_9_UNCONNECTED),
        .Dbg_ARVALID_0(NLW_U0_Dbg_ARVALID_0_UNCONNECTED),
        .Dbg_ARVALID_1(NLW_U0_Dbg_ARVALID_1_UNCONNECTED),
        .Dbg_ARVALID_10(NLW_U0_Dbg_ARVALID_10_UNCONNECTED),
        .Dbg_ARVALID_11(NLW_U0_Dbg_ARVALID_11_UNCONNECTED),
        .Dbg_ARVALID_12(NLW_U0_Dbg_ARVALID_12_UNCONNECTED),
        .Dbg_ARVALID_13(NLW_U0_Dbg_ARVALID_13_UNCONNECTED),
        .Dbg_ARVALID_14(NLW_U0_Dbg_ARVALID_14_UNCONNECTED),
        .Dbg_ARVALID_15(NLW_U0_Dbg_ARVALID_15_UNCONNECTED),
        .Dbg_ARVALID_16(NLW_U0_Dbg_ARVALID_16_UNCONNECTED),
        .Dbg_ARVALID_17(NLW_U0_Dbg_ARVALID_17_UNCONNECTED),
        .Dbg_ARVALID_18(NLW_U0_Dbg_ARVALID_18_UNCONNECTED),
        .Dbg_ARVALID_19(NLW_U0_Dbg_ARVALID_19_UNCONNECTED),
        .Dbg_ARVALID_2(NLW_U0_Dbg_ARVALID_2_UNCONNECTED),
        .Dbg_ARVALID_20(NLW_U0_Dbg_ARVALID_20_UNCONNECTED),
        .Dbg_ARVALID_21(NLW_U0_Dbg_ARVALID_21_UNCONNECTED),
        .Dbg_ARVALID_22(NLW_U0_Dbg_ARVALID_22_UNCONNECTED),
        .Dbg_ARVALID_23(NLW_U0_Dbg_ARVALID_23_UNCONNECTED),
        .Dbg_ARVALID_24(NLW_U0_Dbg_ARVALID_24_UNCONNECTED),
        .Dbg_ARVALID_25(NLW_U0_Dbg_ARVALID_25_UNCONNECTED),
        .Dbg_ARVALID_26(NLW_U0_Dbg_ARVALID_26_UNCONNECTED),
        .Dbg_ARVALID_27(NLW_U0_Dbg_ARVALID_27_UNCONNECTED),
        .Dbg_ARVALID_28(NLW_U0_Dbg_ARVALID_28_UNCONNECTED),
        .Dbg_ARVALID_29(NLW_U0_Dbg_ARVALID_29_UNCONNECTED),
        .Dbg_ARVALID_3(NLW_U0_Dbg_ARVALID_3_UNCONNECTED),
        .Dbg_ARVALID_30(NLW_U0_Dbg_ARVALID_30_UNCONNECTED),
        .Dbg_ARVALID_31(NLW_U0_Dbg_ARVALID_31_UNCONNECTED),
        .Dbg_ARVALID_4(NLW_U0_Dbg_ARVALID_4_UNCONNECTED),
        .Dbg_ARVALID_5(NLW_U0_Dbg_ARVALID_5_UNCONNECTED),
        .Dbg_ARVALID_6(NLW_U0_Dbg_ARVALID_6_UNCONNECTED),
        .Dbg_ARVALID_7(NLW_U0_Dbg_ARVALID_7_UNCONNECTED),
        .Dbg_ARVALID_8(NLW_U0_Dbg_ARVALID_8_UNCONNECTED),
        .Dbg_ARVALID_9(NLW_U0_Dbg_ARVALID_9_UNCONNECTED),
        .Dbg_AWADDR_0(NLW_U0_Dbg_AWADDR_0_UNCONNECTED[14:2]),
        .Dbg_AWADDR_1(NLW_U0_Dbg_AWADDR_1_UNCONNECTED[14:2]),
        .Dbg_AWADDR_10(NLW_U0_Dbg_AWADDR_10_UNCONNECTED[14:2]),
        .Dbg_AWADDR_11(NLW_U0_Dbg_AWADDR_11_UNCONNECTED[14:2]),
        .Dbg_AWADDR_12(NLW_U0_Dbg_AWADDR_12_UNCONNECTED[14:2]),
        .Dbg_AWADDR_13(NLW_U0_Dbg_AWADDR_13_UNCONNECTED[14:2]),
        .Dbg_AWADDR_14(NLW_U0_Dbg_AWADDR_14_UNCONNECTED[14:2]),
        .Dbg_AWADDR_15(NLW_U0_Dbg_AWADDR_15_UNCONNECTED[14:2]),
        .Dbg_AWADDR_16(NLW_U0_Dbg_AWADDR_16_UNCONNECTED[14:2]),
        .Dbg_AWADDR_17(NLW_U0_Dbg_AWADDR_17_UNCONNECTED[14:2]),
        .Dbg_AWADDR_18(NLW_U0_Dbg_AWADDR_18_UNCONNECTED[14:2]),
        .Dbg_AWADDR_19(NLW_U0_Dbg_AWADDR_19_UNCONNECTED[14:2]),
        .Dbg_AWADDR_2(NLW_U0_Dbg_AWADDR_2_UNCONNECTED[14:2]),
        .Dbg_AWADDR_20(NLW_U0_Dbg_AWADDR_20_UNCONNECTED[14:2]),
        .Dbg_AWADDR_21(NLW_U0_Dbg_AWADDR_21_UNCONNECTED[14:2]),
        .Dbg_AWADDR_22(NLW_U0_Dbg_AWADDR_22_UNCONNECTED[14:2]),
        .Dbg_AWADDR_23(NLW_U0_Dbg_AWADDR_23_UNCONNECTED[14:2]),
        .Dbg_AWADDR_24(NLW_U0_Dbg_AWADDR_24_UNCONNECTED[14:2]),
        .Dbg_AWADDR_25(NLW_U0_Dbg_AWADDR_25_UNCONNECTED[14:2]),
        .Dbg_AWADDR_26(NLW_U0_Dbg_AWADDR_26_UNCONNECTED[14:2]),
        .Dbg_AWADDR_27(NLW_U0_Dbg_AWADDR_27_UNCONNECTED[14:2]),
        .Dbg_AWADDR_28(NLW_U0_Dbg_AWADDR_28_UNCONNECTED[14:2]),
        .Dbg_AWADDR_29(NLW_U0_Dbg_AWADDR_29_UNCONNECTED[14:2]),
        .Dbg_AWADDR_3(NLW_U0_Dbg_AWADDR_3_UNCONNECTED[14:2]),
        .Dbg_AWADDR_30(NLW_U0_Dbg_AWADDR_30_UNCONNECTED[14:2]),
        .Dbg_AWADDR_31(NLW_U0_Dbg_AWADDR_31_UNCONNECTED[14:2]),
        .Dbg_AWADDR_4(NLW_U0_Dbg_AWADDR_4_UNCONNECTED[14:2]),
        .Dbg_AWADDR_5(NLW_U0_Dbg_AWADDR_5_UNCONNECTED[14:2]),
        .Dbg_AWADDR_6(NLW_U0_Dbg_AWADDR_6_UNCONNECTED[14:2]),
        .Dbg_AWADDR_7(NLW_U0_Dbg_AWADDR_7_UNCONNECTED[14:2]),
        .Dbg_AWADDR_8(NLW_U0_Dbg_AWADDR_8_UNCONNECTED[14:2]),
        .Dbg_AWADDR_9(NLW_U0_Dbg_AWADDR_9_UNCONNECTED[14:2]),
        .Dbg_AWREADY_0(NLW_U0_Dbg_AWREADY_0_UNCONNECTED),
        .Dbg_AWREADY_1(NLW_U0_Dbg_AWREADY_1_UNCONNECTED),
        .Dbg_AWREADY_10(NLW_U0_Dbg_AWREADY_10_UNCONNECTED),
        .Dbg_AWREADY_11(NLW_U0_Dbg_AWREADY_11_UNCONNECTED),
        .Dbg_AWREADY_12(NLW_U0_Dbg_AWREADY_12_UNCONNECTED),
        .Dbg_AWREADY_13(NLW_U0_Dbg_AWREADY_13_UNCONNECTED),
        .Dbg_AWREADY_14(NLW_U0_Dbg_AWREADY_14_UNCONNECTED),
        .Dbg_AWREADY_15(NLW_U0_Dbg_AWREADY_15_UNCONNECTED),
        .Dbg_AWREADY_16(NLW_U0_Dbg_AWREADY_16_UNCONNECTED),
        .Dbg_AWREADY_17(NLW_U0_Dbg_AWREADY_17_UNCONNECTED),
        .Dbg_AWREADY_18(NLW_U0_Dbg_AWREADY_18_UNCONNECTED),
        .Dbg_AWREADY_19(NLW_U0_Dbg_AWREADY_19_UNCONNECTED),
        .Dbg_AWREADY_2(NLW_U0_Dbg_AWREADY_2_UNCONNECTED),
        .Dbg_AWREADY_20(NLW_U0_Dbg_AWREADY_20_UNCONNECTED),
        .Dbg_AWREADY_21(NLW_U0_Dbg_AWREADY_21_UNCONNECTED),
        .Dbg_AWREADY_22(NLW_U0_Dbg_AWREADY_22_UNCONNECTED),
        .Dbg_AWREADY_23(NLW_U0_Dbg_AWREADY_23_UNCONNECTED),
        .Dbg_AWREADY_24(NLW_U0_Dbg_AWREADY_24_UNCONNECTED),
        .Dbg_AWREADY_25(NLW_U0_Dbg_AWREADY_25_UNCONNECTED),
        .Dbg_AWREADY_26(NLW_U0_Dbg_AWREADY_26_UNCONNECTED),
        .Dbg_AWREADY_27(NLW_U0_Dbg_AWREADY_27_UNCONNECTED),
        .Dbg_AWREADY_28(NLW_U0_Dbg_AWREADY_28_UNCONNECTED),
        .Dbg_AWREADY_29(NLW_U0_Dbg_AWREADY_29_UNCONNECTED),
        .Dbg_AWREADY_3(NLW_U0_Dbg_AWREADY_3_UNCONNECTED),
        .Dbg_AWREADY_30(NLW_U0_Dbg_AWREADY_30_UNCONNECTED),
        .Dbg_AWREADY_31(NLW_U0_Dbg_AWREADY_31_UNCONNECTED),
        .Dbg_AWREADY_4(NLW_U0_Dbg_AWREADY_4_UNCONNECTED),
        .Dbg_AWREADY_5(NLW_U0_Dbg_AWREADY_5_UNCONNECTED),
        .Dbg_AWREADY_6(NLW_U0_Dbg_AWREADY_6_UNCONNECTED),
        .Dbg_AWREADY_7(NLW_U0_Dbg_AWREADY_7_UNCONNECTED),
        .Dbg_AWREADY_8(NLW_U0_Dbg_AWREADY_8_UNCONNECTED),
        .Dbg_AWREADY_9(NLW_U0_Dbg_AWREADY_9_UNCONNECTED),
        .Dbg_AWVALID_0(NLW_U0_Dbg_AWVALID_0_UNCONNECTED),
        .Dbg_AWVALID_1(NLW_U0_Dbg_AWVALID_1_UNCONNECTED),
        .Dbg_AWVALID_10(NLW_U0_Dbg_AWVALID_10_UNCONNECTED),
        .Dbg_AWVALID_11(NLW_U0_Dbg_AWVALID_11_UNCONNECTED),
        .Dbg_AWVALID_12(NLW_U0_Dbg_AWVALID_12_UNCONNECTED),
        .Dbg_AWVALID_13(NLW_U0_Dbg_AWVALID_13_UNCONNECTED),
        .Dbg_AWVALID_14(NLW_U0_Dbg_AWVALID_14_UNCONNECTED),
        .Dbg_AWVALID_15(NLW_U0_Dbg_AWVALID_15_UNCONNECTED),
        .Dbg_AWVALID_16(NLW_U0_Dbg_AWVALID_16_UNCONNECTED),
        .Dbg_AWVALID_17(NLW_U0_Dbg_AWVALID_17_UNCONNECTED),
        .Dbg_AWVALID_18(NLW_U0_Dbg_AWVALID_18_UNCONNECTED),
        .Dbg_AWVALID_19(NLW_U0_Dbg_AWVALID_19_UNCONNECTED),
        .Dbg_AWVALID_2(NLW_U0_Dbg_AWVALID_2_UNCONNECTED),
        .Dbg_AWVALID_20(NLW_U0_Dbg_AWVALID_20_UNCONNECTED),
        .Dbg_AWVALID_21(NLW_U0_Dbg_AWVALID_21_UNCONNECTED),
        .Dbg_AWVALID_22(NLW_U0_Dbg_AWVALID_22_UNCONNECTED),
        .Dbg_AWVALID_23(NLW_U0_Dbg_AWVALID_23_UNCONNECTED),
        .Dbg_AWVALID_24(NLW_U0_Dbg_AWVALID_24_UNCONNECTED),
        .Dbg_AWVALID_25(NLW_U0_Dbg_AWVALID_25_UNCONNECTED),
        .Dbg_AWVALID_26(NLW_U0_Dbg_AWVALID_26_UNCONNECTED),
        .Dbg_AWVALID_27(NLW_U0_Dbg_AWVALID_27_UNCONNECTED),
        .Dbg_AWVALID_28(NLW_U0_Dbg_AWVALID_28_UNCONNECTED),
        .Dbg_AWVALID_29(NLW_U0_Dbg_AWVALID_29_UNCONNECTED),
        .Dbg_AWVALID_3(NLW_U0_Dbg_AWVALID_3_UNCONNECTED),
        .Dbg_AWVALID_30(NLW_U0_Dbg_AWVALID_30_UNCONNECTED),
        .Dbg_AWVALID_31(NLW_U0_Dbg_AWVALID_31_UNCONNECTED),
        .Dbg_AWVALID_4(NLW_U0_Dbg_AWVALID_4_UNCONNECTED),
        .Dbg_AWVALID_5(NLW_U0_Dbg_AWVALID_5_UNCONNECTED),
        .Dbg_AWVALID_6(NLW_U0_Dbg_AWVALID_6_UNCONNECTED),
        .Dbg_AWVALID_7(NLW_U0_Dbg_AWVALID_7_UNCONNECTED),
        .Dbg_AWVALID_8(NLW_U0_Dbg_AWVALID_8_UNCONNECTED),
        .Dbg_AWVALID_9(NLW_U0_Dbg_AWVALID_9_UNCONNECTED),
        .Dbg_BREADY_0(NLW_U0_Dbg_BREADY_0_UNCONNECTED),
        .Dbg_BREADY_1(NLW_U0_Dbg_BREADY_1_UNCONNECTED),
        .Dbg_BREADY_10(NLW_U0_Dbg_BREADY_10_UNCONNECTED),
        .Dbg_BREADY_11(NLW_U0_Dbg_BREADY_11_UNCONNECTED),
        .Dbg_BREADY_12(NLW_U0_Dbg_BREADY_12_UNCONNECTED),
        .Dbg_BREADY_13(NLW_U0_Dbg_BREADY_13_UNCONNECTED),
        .Dbg_BREADY_14(NLW_U0_Dbg_BREADY_14_UNCONNECTED),
        .Dbg_BREADY_15(NLW_U0_Dbg_BREADY_15_UNCONNECTED),
        .Dbg_BREADY_16(NLW_U0_Dbg_BREADY_16_UNCONNECTED),
        .Dbg_BREADY_17(NLW_U0_Dbg_BREADY_17_UNCONNECTED),
        .Dbg_BREADY_18(NLW_U0_Dbg_BREADY_18_UNCONNECTED),
        .Dbg_BREADY_19(NLW_U0_Dbg_BREADY_19_UNCONNECTED),
        .Dbg_BREADY_2(NLW_U0_Dbg_BREADY_2_UNCONNECTED),
        .Dbg_BREADY_20(NLW_U0_Dbg_BREADY_20_UNCONNECTED),
        .Dbg_BREADY_21(NLW_U0_Dbg_BREADY_21_UNCONNECTED),
        .Dbg_BREADY_22(NLW_U0_Dbg_BREADY_22_UNCONNECTED),
        .Dbg_BREADY_23(NLW_U0_Dbg_BREADY_23_UNCONNECTED),
        .Dbg_BREADY_24(NLW_U0_Dbg_BREADY_24_UNCONNECTED),
        .Dbg_BREADY_25(NLW_U0_Dbg_BREADY_25_UNCONNECTED),
        .Dbg_BREADY_26(NLW_U0_Dbg_BREADY_26_UNCONNECTED),
        .Dbg_BREADY_27(NLW_U0_Dbg_BREADY_27_UNCONNECTED),
        .Dbg_BREADY_28(NLW_U0_Dbg_BREADY_28_UNCONNECTED),
        .Dbg_BREADY_29(NLW_U0_Dbg_BREADY_29_UNCONNECTED),
        .Dbg_BREADY_3(NLW_U0_Dbg_BREADY_3_UNCONNECTED),
        .Dbg_BREADY_30(NLW_U0_Dbg_BREADY_30_UNCONNECTED),
        .Dbg_BREADY_31(NLW_U0_Dbg_BREADY_31_UNCONNECTED),
        .Dbg_BREADY_4(NLW_U0_Dbg_BREADY_4_UNCONNECTED),
        .Dbg_BREADY_5(NLW_U0_Dbg_BREADY_5_UNCONNECTED),
        .Dbg_BREADY_6(NLW_U0_Dbg_BREADY_6_UNCONNECTED),
        .Dbg_BREADY_7(NLW_U0_Dbg_BREADY_7_UNCONNECTED),
        .Dbg_BREADY_8(NLW_U0_Dbg_BREADY_8_UNCONNECTED),
        .Dbg_BREADY_9(NLW_U0_Dbg_BREADY_9_UNCONNECTED),
        .Dbg_BRESP_0(NLW_U0_Dbg_BRESP_0_UNCONNECTED[1:0]),
        .Dbg_BRESP_1(NLW_U0_Dbg_BRESP_1_UNCONNECTED[1:0]),
        .Dbg_BRESP_10(NLW_U0_Dbg_BRESP_10_UNCONNECTED[1:0]),
        .Dbg_BRESP_11(NLW_U0_Dbg_BRESP_11_UNCONNECTED[1:0]),
        .Dbg_BRESP_12(NLW_U0_Dbg_BRESP_12_UNCONNECTED[1:0]),
        .Dbg_BRESP_13(NLW_U0_Dbg_BRESP_13_UNCONNECTED[1:0]),
        .Dbg_BRESP_14(NLW_U0_Dbg_BRESP_14_UNCONNECTED[1:0]),
        .Dbg_BRESP_15(NLW_U0_Dbg_BRESP_15_UNCONNECTED[1:0]),
        .Dbg_BRESP_16(NLW_U0_Dbg_BRESP_16_UNCONNECTED[1:0]),
        .Dbg_BRESP_17(NLW_U0_Dbg_BRESP_17_UNCONNECTED[1:0]),
        .Dbg_BRESP_18(NLW_U0_Dbg_BRESP_18_UNCONNECTED[1:0]),
        .Dbg_BRESP_19(NLW_U0_Dbg_BRESP_19_UNCONNECTED[1:0]),
        .Dbg_BRESP_2(NLW_U0_Dbg_BRESP_2_UNCONNECTED[1:0]),
        .Dbg_BRESP_20(NLW_U0_Dbg_BRESP_20_UNCONNECTED[1:0]),
        .Dbg_BRESP_21(NLW_U0_Dbg_BRESP_21_UNCONNECTED[1:0]),
        .Dbg_BRESP_22(NLW_U0_Dbg_BRESP_22_UNCONNECTED[1:0]),
        .Dbg_BRESP_23(NLW_U0_Dbg_BRESP_23_UNCONNECTED[1:0]),
        .Dbg_BRESP_24(NLW_U0_Dbg_BRESP_24_UNCONNECTED[1:0]),
        .Dbg_BRESP_25(NLW_U0_Dbg_BRESP_25_UNCONNECTED[1:0]),
        .Dbg_BRESP_26(NLW_U0_Dbg_BRESP_26_UNCONNECTED[1:0]),
        .Dbg_BRESP_27(NLW_U0_Dbg_BRESP_27_UNCONNECTED[1:0]),
        .Dbg_BRESP_28(NLW_U0_Dbg_BRESP_28_UNCONNECTED[1:0]),
        .Dbg_BRESP_29(NLW_U0_Dbg_BRESP_29_UNCONNECTED[1:0]),
        .Dbg_BRESP_3(NLW_U0_Dbg_BRESP_3_UNCONNECTED[1:0]),
        .Dbg_BRESP_30(NLW_U0_Dbg_BRESP_30_UNCONNECTED[1:0]),
        .Dbg_BRESP_31(NLW_U0_Dbg_BRESP_31_UNCONNECTED[1:0]),
        .Dbg_BRESP_4(NLW_U0_Dbg_BRESP_4_UNCONNECTED[1:0]),
        .Dbg_BRESP_5(NLW_U0_Dbg_BRESP_5_UNCONNECTED[1:0]),
        .Dbg_BRESP_6(NLW_U0_Dbg_BRESP_6_UNCONNECTED[1:0]),
        .Dbg_BRESP_7(NLW_U0_Dbg_BRESP_7_UNCONNECTED[1:0]),
        .Dbg_BRESP_8(NLW_U0_Dbg_BRESP_8_UNCONNECTED[1:0]),
        .Dbg_BRESP_9(NLW_U0_Dbg_BRESP_9_UNCONNECTED[1:0]),
        .Dbg_BVALID_0(NLW_U0_Dbg_BVALID_0_UNCONNECTED),
        .Dbg_BVALID_1(NLW_U0_Dbg_BVALID_1_UNCONNECTED),
        .Dbg_BVALID_10(NLW_U0_Dbg_BVALID_10_UNCONNECTED),
        .Dbg_BVALID_11(NLW_U0_Dbg_BVALID_11_UNCONNECTED),
        .Dbg_BVALID_12(NLW_U0_Dbg_BVALID_12_UNCONNECTED),
        .Dbg_BVALID_13(NLW_U0_Dbg_BVALID_13_UNCONNECTED),
        .Dbg_BVALID_14(NLW_U0_Dbg_BVALID_14_UNCONNECTED),
        .Dbg_BVALID_15(NLW_U0_Dbg_BVALID_15_UNCONNECTED),
        .Dbg_BVALID_16(NLW_U0_Dbg_BVALID_16_UNCONNECTED),
        .Dbg_BVALID_17(NLW_U0_Dbg_BVALID_17_UNCONNECTED),
        .Dbg_BVALID_18(NLW_U0_Dbg_BVALID_18_UNCONNECTED),
        .Dbg_BVALID_19(NLW_U0_Dbg_BVALID_19_UNCONNECTED),
        .Dbg_BVALID_2(NLW_U0_Dbg_BVALID_2_UNCONNECTED),
        .Dbg_BVALID_20(NLW_U0_Dbg_BVALID_20_UNCONNECTED),
        .Dbg_BVALID_21(NLW_U0_Dbg_BVALID_21_UNCONNECTED),
        .Dbg_BVALID_22(NLW_U0_Dbg_BVALID_22_UNCONNECTED),
        .Dbg_BVALID_23(NLW_U0_Dbg_BVALID_23_UNCONNECTED),
        .Dbg_BVALID_24(NLW_U0_Dbg_BVALID_24_UNCONNECTED),
        .Dbg_BVALID_25(NLW_U0_Dbg_BVALID_25_UNCONNECTED),
        .Dbg_BVALID_26(NLW_U0_Dbg_BVALID_26_UNCONNECTED),
        .Dbg_BVALID_27(NLW_U0_Dbg_BVALID_27_UNCONNECTED),
        .Dbg_BVALID_28(NLW_U0_Dbg_BVALID_28_UNCONNECTED),
        .Dbg_BVALID_29(NLW_U0_Dbg_BVALID_29_UNCONNECTED),
        .Dbg_BVALID_3(NLW_U0_Dbg_BVALID_3_UNCONNECTED),
        .Dbg_BVALID_30(NLW_U0_Dbg_BVALID_30_UNCONNECTED),
        .Dbg_BVALID_31(NLW_U0_Dbg_BVALID_31_UNCONNECTED),
        .Dbg_BVALID_4(NLW_U0_Dbg_BVALID_4_UNCONNECTED),
        .Dbg_BVALID_5(NLW_U0_Dbg_BVALID_5_UNCONNECTED),
        .Dbg_BVALID_6(NLW_U0_Dbg_BVALID_6_UNCONNECTED),
        .Dbg_BVALID_7(NLW_U0_Dbg_BVALID_7_UNCONNECTED),
        .Dbg_BVALID_8(NLW_U0_Dbg_BVALID_8_UNCONNECTED),
        .Dbg_BVALID_9(NLW_U0_Dbg_BVALID_9_UNCONNECTED),
        .Dbg_Capture_0(Dbg_Capture_0),
        .Dbg_Capture_1(NLW_U0_Dbg_Capture_1_UNCONNECTED),
        .Dbg_Capture_10(NLW_U0_Dbg_Capture_10_UNCONNECTED),
        .Dbg_Capture_11(NLW_U0_Dbg_Capture_11_UNCONNECTED),
        .Dbg_Capture_12(NLW_U0_Dbg_Capture_12_UNCONNECTED),
        .Dbg_Capture_13(NLW_U0_Dbg_Capture_13_UNCONNECTED),
        .Dbg_Capture_14(NLW_U0_Dbg_Capture_14_UNCONNECTED),
        .Dbg_Capture_15(NLW_U0_Dbg_Capture_15_UNCONNECTED),
        .Dbg_Capture_16(NLW_U0_Dbg_Capture_16_UNCONNECTED),
        .Dbg_Capture_17(NLW_U0_Dbg_Capture_17_UNCONNECTED),
        .Dbg_Capture_18(NLW_U0_Dbg_Capture_18_UNCONNECTED),
        .Dbg_Capture_19(NLW_U0_Dbg_Capture_19_UNCONNECTED),
        .Dbg_Capture_2(NLW_U0_Dbg_Capture_2_UNCONNECTED),
        .Dbg_Capture_20(NLW_U0_Dbg_Capture_20_UNCONNECTED),
        .Dbg_Capture_21(NLW_U0_Dbg_Capture_21_UNCONNECTED),
        .Dbg_Capture_22(NLW_U0_Dbg_Capture_22_UNCONNECTED),
        .Dbg_Capture_23(NLW_U0_Dbg_Capture_23_UNCONNECTED),
        .Dbg_Capture_24(NLW_U0_Dbg_Capture_24_UNCONNECTED),
        .Dbg_Capture_25(NLW_U0_Dbg_Capture_25_UNCONNECTED),
        .Dbg_Capture_26(NLW_U0_Dbg_Capture_26_UNCONNECTED),
        .Dbg_Capture_27(NLW_U0_Dbg_Capture_27_UNCONNECTED),
        .Dbg_Capture_28(NLW_U0_Dbg_Capture_28_UNCONNECTED),
        .Dbg_Capture_29(NLW_U0_Dbg_Capture_29_UNCONNECTED),
        .Dbg_Capture_3(NLW_U0_Dbg_Capture_3_UNCONNECTED),
        .Dbg_Capture_30(NLW_U0_Dbg_Capture_30_UNCONNECTED),
        .Dbg_Capture_31(NLW_U0_Dbg_Capture_31_UNCONNECTED),
        .Dbg_Capture_4(NLW_U0_Dbg_Capture_4_UNCONNECTED),
        .Dbg_Capture_5(NLW_U0_Dbg_Capture_5_UNCONNECTED),
        .Dbg_Capture_6(NLW_U0_Dbg_Capture_6_UNCONNECTED),
        .Dbg_Capture_7(NLW_U0_Dbg_Capture_7_UNCONNECTED),
        .Dbg_Capture_8(NLW_U0_Dbg_Capture_8_UNCONNECTED),
        .Dbg_Capture_9(NLW_U0_Dbg_Capture_9_UNCONNECTED),
        .Dbg_Clk_0(Dbg_Clk_0),
        .Dbg_Clk_1(NLW_U0_Dbg_Clk_1_UNCONNECTED),
        .Dbg_Clk_10(NLW_U0_Dbg_Clk_10_UNCONNECTED),
        .Dbg_Clk_11(NLW_U0_Dbg_Clk_11_UNCONNECTED),
        .Dbg_Clk_12(NLW_U0_Dbg_Clk_12_UNCONNECTED),
        .Dbg_Clk_13(NLW_U0_Dbg_Clk_13_UNCONNECTED),
        .Dbg_Clk_14(NLW_U0_Dbg_Clk_14_UNCONNECTED),
        .Dbg_Clk_15(NLW_U0_Dbg_Clk_15_UNCONNECTED),
        .Dbg_Clk_16(NLW_U0_Dbg_Clk_16_UNCONNECTED),
        .Dbg_Clk_17(NLW_U0_Dbg_Clk_17_UNCONNECTED),
        .Dbg_Clk_18(NLW_U0_Dbg_Clk_18_UNCONNECTED),
        .Dbg_Clk_19(NLW_U0_Dbg_Clk_19_UNCONNECTED),
        .Dbg_Clk_2(NLW_U0_Dbg_Clk_2_UNCONNECTED),
        .Dbg_Clk_20(NLW_U0_Dbg_Clk_20_UNCONNECTED),
        .Dbg_Clk_21(NLW_U0_Dbg_Clk_21_UNCONNECTED),
        .Dbg_Clk_22(NLW_U0_Dbg_Clk_22_UNCONNECTED),
        .Dbg_Clk_23(NLW_U0_Dbg_Clk_23_UNCONNECTED),
        .Dbg_Clk_24(NLW_U0_Dbg_Clk_24_UNCONNECTED),
        .Dbg_Clk_25(NLW_U0_Dbg_Clk_25_UNCONNECTED),
        .Dbg_Clk_26(NLW_U0_Dbg_Clk_26_UNCONNECTED),
        .Dbg_Clk_27(NLW_U0_Dbg_Clk_27_UNCONNECTED),
        .Dbg_Clk_28(NLW_U0_Dbg_Clk_28_UNCONNECTED),
        .Dbg_Clk_29(NLW_U0_Dbg_Clk_29_UNCONNECTED),
        .Dbg_Clk_3(NLW_U0_Dbg_Clk_3_UNCONNECTED),
        .Dbg_Clk_30(NLW_U0_Dbg_Clk_30_UNCONNECTED),
        .Dbg_Clk_31(NLW_U0_Dbg_Clk_31_UNCONNECTED),
        .Dbg_Clk_4(NLW_U0_Dbg_Clk_4_UNCONNECTED),
        .Dbg_Clk_5(NLW_U0_Dbg_Clk_5_UNCONNECTED),
        .Dbg_Clk_6(NLW_U0_Dbg_Clk_6_UNCONNECTED),
        .Dbg_Clk_7(NLW_U0_Dbg_Clk_7_UNCONNECTED),
        .Dbg_Clk_8(NLW_U0_Dbg_Clk_8_UNCONNECTED),
        .Dbg_Clk_9(NLW_U0_Dbg_Clk_9_UNCONNECTED),
        .Dbg_Disable_0(NLW_U0_Dbg_Disable_0_UNCONNECTED),
        .Dbg_Disable_1(NLW_U0_Dbg_Disable_1_UNCONNECTED),
        .Dbg_Disable_10(NLW_U0_Dbg_Disable_10_UNCONNECTED),
        .Dbg_Disable_11(NLW_U0_Dbg_Disable_11_UNCONNECTED),
        .Dbg_Disable_12(NLW_U0_Dbg_Disable_12_UNCONNECTED),
        .Dbg_Disable_13(NLW_U0_Dbg_Disable_13_UNCONNECTED),
        .Dbg_Disable_14(NLW_U0_Dbg_Disable_14_UNCONNECTED),
        .Dbg_Disable_15(NLW_U0_Dbg_Disable_15_UNCONNECTED),
        .Dbg_Disable_16(NLW_U0_Dbg_Disable_16_UNCONNECTED),
        .Dbg_Disable_17(NLW_U0_Dbg_Disable_17_UNCONNECTED),
        .Dbg_Disable_18(NLW_U0_Dbg_Disable_18_UNCONNECTED),
        .Dbg_Disable_19(NLW_U0_Dbg_Disable_19_UNCONNECTED),
        .Dbg_Disable_2(NLW_U0_Dbg_Disable_2_UNCONNECTED),
        .Dbg_Disable_20(NLW_U0_Dbg_Disable_20_UNCONNECTED),
        .Dbg_Disable_21(NLW_U0_Dbg_Disable_21_UNCONNECTED),
        .Dbg_Disable_22(NLW_U0_Dbg_Disable_22_UNCONNECTED),
        .Dbg_Disable_23(NLW_U0_Dbg_Disable_23_UNCONNECTED),
        .Dbg_Disable_24(NLW_U0_Dbg_Disable_24_UNCONNECTED),
        .Dbg_Disable_25(NLW_U0_Dbg_Disable_25_UNCONNECTED),
        .Dbg_Disable_26(NLW_U0_Dbg_Disable_26_UNCONNECTED),
        .Dbg_Disable_27(NLW_U0_Dbg_Disable_27_UNCONNECTED),
        .Dbg_Disable_28(NLW_U0_Dbg_Disable_28_UNCONNECTED),
        .Dbg_Disable_29(NLW_U0_Dbg_Disable_29_UNCONNECTED),
        .Dbg_Disable_3(NLW_U0_Dbg_Disable_3_UNCONNECTED),
        .Dbg_Disable_30(NLW_U0_Dbg_Disable_30_UNCONNECTED),
        .Dbg_Disable_31(NLW_U0_Dbg_Disable_31_UNCONNECTED),
        .Dbg_Disable_4(NLW_U0_Dbg_Disable_4_UNCONNECTED),
        .Dbg_Disable_5(NLW_U0_Dbg_Disable_5_UNCONNECTED),
        .Dbg_Disable_6(NLW_U0_Dbg_Disable_6_UNCONNECTED),
        .Dbg_Disable_7(NLW_U0_Dbg_Disable_7_UNCONNECTED),
        .Dbg_Disable_8(NLW_U0_Dbg_Disable_8_UNCONNECTED),
        .Dbg_Disable_9(NLW_U0_Dbg_Disable_9_UNCONNECTED),
        .Dbg_RDATA_0(NLW_U0_Dbg_RDATA_0_UNCONNECTED[31:0]),
        .Dbg_RDATA_1(NLW_U0_Dbg_RDATA_1_UNCONNECTED[31:0]),
        .Dbg_RDATA_10(NLW_U0_Dbg_RDATA_10_UNCONNECTED[31:0]),
        .Dbg_RDATA_11(NLW_U0_Dbg_RDATA_11_UNCONNECTED[31:0]),
        .Dbg_RDATA_12(NLW_U0_Dbg_RDATA_12_UNCONNECTED[31:0]),
        .Dbg_RDATA_13(NLW_U0_Dbg_RDATA_13_UNCONNECTED[31:0]),
        .Dbg_RDATA_14(NLW_U0_Dbg_RDATA_14_UNCONNECTED[31:0]),
        .Dbg_RDATA_15(NLW_U0_Dbg_RDATA_15_UNCONNECTED[31:0]),
        .Dbg_RDATA_16(NLW_U0_Dbg_RDATA_16_UNCONNECTED[31:0]),
        .Dbg_RDATA_17(NLW_U0_Dbg_RDATA_17_UNCONNECTED[31:0]),
        .Dbg_RDATA_18(NLW_U0_Dbg_RDATA_18_UNCONNECTED[31:0]),
        .Dbg_RDATA_19(NLW_U0_Dbg_RDATA_19_UNCONNECTED[31:0]),
        .Dbg_RDATA_2(NLW_U0_Dbg_RDATA_2_UNCONNECTED[31:0]),
        .Dbg_RDATA_20(NLW_U0_Dbg_RDATA_20_UNCONNECTED[31:0]),
        .Dbg_RDATA_21(NLW_U0_Dbg_RDATA_21_UNCONNECTED[31:0]),
        .Dbg_RDATA_22(NLW_U0_Dbg_RDATA_22_UNCONNECTED[31:0]),
        .Dbg_RDATA_23(NLW_U0_Dbg_RDATA_23_UNCONNECTED[31:0]),
        .Dbg_RDATA_24(NLW_U0_Dbg_RDATA_24_UNCONNECTED[31:0]),
        .Dbg_RDATA_25(NLW_U0_Dbg_RDATA_25_UNCONNECTED[31:0]),
        .Dbg_RDATA_26(NLW_U0_Dbg_RDATA_26_UNCONNECTED[31:0]),
        .Dbg_RDATA_27(NLW_U0_Dbg_RDATA_27_UNCONNECTED[31:0]),
        .Dbg_RDATA_28(NLW_U0_Dbg_RDATA_28_UNCONNECTED[31:0]),
        .Dbg_RDATA_29(NLW_U0_Dbg_RDATA_29_UNCONNECTED[31:0]),
        .Dbg_RDATA_3(NLW_U0_Dbg_RDATA_3_UNCONNECTED[31:0]),
        .Dbg_RDATA_30(NLW_U0_Dbg_RDATA_30_UNCONNECTED[31:0]),
        .Dbg_RDATA_31(NLW_U0_Dbg_RDATA_31_UNCONNECTED[31:0]),
        .Dbg_RDATA_4(NLW_U0_Dbg_RDATA_4_UNCONNECTED[31:0]),
        .Dbg_RDATA_5(NLW_U0_Dbg_RDATA_5_UNCONNECTED[31:0]),
        .Dbg_RDATA_6(NLW_U0_Dbg_RDATA_6_UNCONNECTED[31:0]),
        .Dbg_RDATA_7(NLW_U0_Dbg_RDATA_7_UNCONNECTED[31:0]),
        .Dbg_RDATA_8(NLW_U0_Dbg_RDATA_8_UNCONNECTED[31:0]),
        .Dbg_RDATA_9(NLW_U0_Dbg_RDATA_9_UNCONNECTED[31:0]),
        .Dbg_RREADY_0(NLW_U0_Dbg_RREADY_0_UNCONNECTED),
        .Dbg_RREADY_1(NLW_U0_Dbg_RREADY_1_UNCONNECTED),
        .Dbg_RREADY_10(NLW_U0_Dbg_RREADY_10_UNCONNECTED),
        .Dbg_RREADY_11(NLW_U0_Dbg_RREADY_11_UNCONNECTED),
        .Dbg_RREADY_12(NLW_U0_Dbg_RREADY_12_UNCONNECTED),
        .Dbg_RREADY_13(NLW_U0_Dbg_RREADY_13_UNCONNECTED),
        .Dbg_RREADY_14(NLW_U0_Dbg_RREADY_14_UNCONNECTED),
        .Dbg_RREADY_15(NLW_U0_Dbg_RREADY_15_UNCONNECTED),
        .Dbg_RREADY_16(NLW_U0_Dbg_RREADY_16_UNCONNECTED),
        .Dbg_RREADY_17(NLW_U0_Dbg_RREADY_17_UNCONNECTED),
        .Dbg_RREADY_18(NLW_U0_Dbg_RREADY_18_UNCONNECTED),
        .Dbg_RREADY_19(NLW_U0_Dbg_RREADY_19_UNCONNECTED),
        .Dbg_RREADY_2(NLW_U0_Dbg_RREADY_2_UNCONNECTED),
        .Dbg_RREADY_20(NLW_U0_Dbg_RREADY_20_UNCONNECTED),
        .Dbg_RREADY_21(NLW_U0_Dbg_RREADY_21_UNCONNECTED),
        .Dbg_RREADY_22(NLW_U0_Dbg_RREADY_22_UNCONNECTED),
        .Dbg_RREADY_23(NLW_U0_Dbg_RREADY_23_UNCONNECTED),
        .Dbg_RREADY_24(NLW_U0_Dbg_RREADY_24_UNCONNECTED),
        .Dbg_RREADY_25(NLW_U0_Dbg_RREADY_25_UNCONNECTED),
        .Dbg_RREADY_26(NLW_U0_Dbg_RREADY_26_UNCONNECTED),
        .Dbg_RREADY_27(NLW_U0_Dbg_RREADY_27_UNCONNECTED),
        .Dbg_RREADY_28(NLW_U0_Dbg_RREADY_28_UNCONNECTED),
        .Dbg_RREADY_29(NLW_U0_Dbg_RREADY_29_UNCONNECTED),
        .Dbg_RREADY_3(NLW_U0_Dbg_RREADY_3_UNCONNECTED),
        .Dbg_RREADY_30(NLW_U0_Dbg_RREADY_30_UNCONNECTED),
        .Dbg_RREADY_31(NLW_U0_Dbg_RREADY_31_UNCONNECTED),
        .Dbg_RREADY_4(NLW_U0_Dbg_RREADY_4_UNCONNECTED),
        .Dbg_RREADY_5(NLW_U0_Dbg_RREADY_5_UNCONNECTED),
        .Dbg_RREADY_6(NLW_U0_Dbg_RREADY_6_UNCONNECTED),
        .Dbg_RREADY_7(NLW_U0_Dbg_RREADY_7_UNCONNECTED),
        .Dbg_RREADY_8(NLW_U0_Dbg_RREADY_8_UNCONNECTED),
        .Dbg_RREADY_9(NLW_U0_Dbg_RREADY_9_UNCONNECTED),
        .Dbg_RRESP_0(NLW_U0_Dbg_RRESP_0_UNCONNECTED[1:0]),
        .Dbg_RRESP_1(NLW_U0_Dbg_RRESP_1_UNCONNECTED[1:0]),
        .Dbg_RRESP_10(NLW_U0_Dbg_RRESP_10_UNCONNECTED[1:0]),
        .Dbg_RRESP_11(NLW_U0_Dbg_RRESP_11_UNCONNECTED[1:0]),
        .Dbg_RRESP_12(NLW_U0_Dbg_RRESP_12_UNCONNECTED[1:0]),
        .Dbg_RRESP_13(NLW_U0_Dbg_RRESP_13_UNCONNECTED[1:0]),
        .Dbg_RRESP_14(NLW_U0_Dbg_RRESP_14_UNCONNECTED[1:0]),
        .Dbg_RRESP_15(NLW_U0_Dbg_RRESP_15_UNCONNECTED[1:0]),
        .Dbg_RRESP_16(NLW_U0_Dbg_RRESP_16_UNCONNECTED[1:0]),
        .Dbg_RRESP_17(NLW_U0_Dbg_RRESP_17_UNCONNECTED[1:0]),
        .Dbg_RRESP_18(NLW_U0_Dbg_RRESP_18_UNCONNECTED[1:0]),
        .Dbg_RRESP_19(NLW_U0_Dbg_RRESP_19_UNCONNECTED[1:0]),
        .Dbg_RRESP_2(NLW_U0_Dbg_RRESP_2_UNCONNECTED[1:0]),
        .Dbg_RRESP_20(NLW_U0_Dbg_RRESP_20_UNCONNECTED[1:0]),
        .Dbg_RRESP_21(NLW_U0_Dbg_RRESP_21_UNCONNECTED[1:0]),
        .Dbg_RRESP_22(NLW_U0_Dbg_RRESP_22_UNCONNECTED[1:0]),
        .Dbg_RRESP_23(NLW_U0_Dbg_RRESP_23_UNCONNECTED[1:0]),
        .Dbg_RRESP_24(NLW_U0_Dbg_RRESP_24_UNCONNECTED[1:0]),
        .Dbg_RRESP_25(NLW_U0_Dbg_RRESP_25_UNCONNECTED[1:0]),
        .Dbg_RRESP_26(NLW_U0_Dbg_RRESP_26_UNCONNECTED[1:0]),
        .Dbg_RRESP_27(NLW_U0_Dbg_RRESP_27_UNCONNECTED[1:0]),
        .Dbg_RRESP_28(NLW_U0_Dbg_RRESP_28_UNCONNECTED[1:0]),
        .Dbg_RRESP_29(NLW_U0_Dbg_RRESP_29_UNCONNECTED[1:0]),
        .Dbg_RRESP_3(NLW_U0_Dbg_RRESP_3_UNCONNECTED[1:0]),
        .Dbg_RRESP_30(NLW_U0_Dbg_RRESP_30_UNCONNECTED[1:0]),
        .Dbg_RRESP_31(NLW_U0_Dbg_RRESP_31_UNCONNECTED[1:0]),
        .Dbg_RRESP_4(NLW_U0_Dbg_RRESP_4_UNCONNECTED[1:0]),
        .Dbg_RRESP_5(NLW_U0_Dbg_RRESP_5_UNCONNECTED[1:0]),
        .Dbg_RRESP_6(NLW_U0_Dbg_RRESP_6_UNCONNECTED[1:0]),
        .Dbg_RRESP_7(NLW_U0_Dbg_RRESP_7_UNCONNECTED[1:0]),
        .Dbg_RRESP_8(NLW_U0_Dbg_RRESP_8_UNCONNECTED[1:0]),
        .Dbg_RRESP_9(NLW_U0_Dbg_RRESP_9_UNCONNECTED[1:0]),
        .Dbg_RVALID_0(NLW_U0_Dbg_RVALID_0_UNCONNECTED),
        .Dbg_RVALID_1(NLW_U0_Dbg_RVALID_1_UNCONNECTED),
        .Dbg_RVALID_10(NLW_U0_Dbg_RVALID_10_UNCONNECTED),
        .Dbg_RVALID_11(NLW_U0_Dbg_RVALID_11_UNCONNECTED),
        .Dbg_RVALID_12(NLW_U0_Dbg_RVALID_12_UNCONNECTED),
        .Dbg_RVALID_13(NLW_U0_Dbg_RVALID_13_UNCONNECTED),
        .Dbg_RVALID_14(NLW_U0_Dbg_RVALID_14_UNCONNECTED),
        .Dbg_RVALID_15(NLW_U0_Dbg_RVALID_15_UNCONNECTED),
        .Dbg_RVALID_16(NLW_U0_Dbg_RVALID_16_UNCONNECTED),
        .Dbg_RVALID_17(NLW_U0_Dbg_RVALID_17_UNCONNECTED),
        .Dbg_RVALID_18(NLW_U0_Dbg_RVALID_18_UNCONNECTED),
        .Dbg_RVALID_19(NLW_U0_Dbg_RVALID_19_UNCONNECTED),
        .Dbg_RVALID_2(NLW_U0_Dbg_RVALID_2_UNCONNECTED),
        .Dbg_RVALID_20(NLW_U0_Dbg_RVALID_20_UNCONNECTED),
        .Dbg_RVALID_21(NLW_U0_Dbg_RVALID_21_UNCONNECTED),
        .Dbg_RVALID_22(NLW_U0_Dbg_RVALID_22_UNCONNECTED),
        .Dbg_RVALID_23(NLW_U0_Dbg_RVALID_23_UNCONNECTED),
        .Dbg_RVALID_24(NLW_U0_Dbg_RVALID_24_UNCONNECTED),
        .Dbg_RVALID_25(NLW_U0_Dbg_RVALID_25_UNCONNECTED),
        .Dbg_RVALID_26(NLW_U0_Dbg_RVALID_26_UNCONNECTED),
        .Dbg_RVALID_27(NLW_U0_Dbg_RVALID_27_UNCONNECTED),
        .Dbg_RVALID_28(NLW_U0_Dbg_RVALID_28_UNCONNECTED),
        .Dbg_RVALID_29(NLW_U0_Dbg_RVALID_29_UNCONNECTED),
        .Dbg_RVALID_3(NLW_U0_Dbg_RVALID_3_UNCONNECTED),
        .Dbg_RVALID_30(NLW_U0_Dbg_RVALID_30_UNCONNECTED),
        .Dbg_RVALID_31(NLW_U0_Dbg_RVALID_31_UNCONNECTED),
        .Dbg_RVALID_4(NLW_U0_Dbg_RVALID_4_UNCONNECTED),
        .Dbg_RVALID_5(NLW_U0_Dbg_RVALID_5_UNCONNECTED),
        .Dbg_RVALID_6(NLW_U0_Dbg_RVALID_6_UNCONNECTED),
        .Dbg_RVALID_7(NLW_U0_Dbg_RVALID_7_UNCONNECTED),
        .Dbg_RVALID_8(NLW_U0_Dbg_RVALID_8_UNCONNECTED),
        .Dbg_RVALID_9(NLW_U0_Dbg_RVALID_9_UNCONNECTED),
        .Dbg_Reg_En_0(Dbg_Reg_En_0),
        .Dbg_Reg_En_1(NLW_U0_Dbg_Reg_En_1_UNCONNECTED[0:7]),
        .Dbg_Reg_En_10(NLW_U0_Dbg_Reg_En_10_UNCONNECTED[0:7]),
        .Dbg_Reg_En_11(NLW_U0_Dbg_Reg_En_11_UNCONNECTED[0:7]),
        .Dbg_Reg_En_12(NLW_U0_Dbg_Reg_En_12_UNCONNECTED[0:7]),
        .Dbg_Reg_En_13(NLW_U0_Dbg_Reg_En_13_UNCONNECTED[0:7]),
        .Dbg_Reg_En_14(NLW_U0_Dbg_Reg_En_14_UNCONNECTED[0:7]),
        .Dbg_Reg_En_15(NLW_U0_Dbg_Reg_En_15_UNCONNECTED[0:7]),
        .Dbg_Reg_En_16(NLW_U0_Dbg_Reg_En_16_UNCONNECTED[0:7]),
        .Dbg_Reg_En_17(NLW_U0_Dbg_Reg_En_17_UNCONNECTED[0:7]),
        .Dbg_Reg_En_18(NLW_U0_Dbg_Reg_En_18_UNCONNECTED[0:7]),
        .Dbg_Reg_En_19(NLW_U0_Dbg_Reg_En_19_UNCONNECTED[0:7]),
        .Dbg_Reg_En_2(NLW_U0_Dbg_Reg_En_2_UNCONNECTED[0:7]),
        .Dbg_Reg_En_20(NLW_U0_Dbg_Reg_En_20_UNCONNECTED[0:7]),
        .Dbg_Reg_En_21(NLW_U0_Dbg_Reg_En_21_UNCONNECTED[0:7]),
        .Dbg_Reg_En_22(NLW_U0_Dbg_Reg_En_22_UNCONNECTED[0:7]),
        .Dbg_Reg_En_23(NLW_U0_Dbg_Reg_En_23_UNCONNECTED[0:7]),
        .Dbg_Reg_En_24(NLW_U0_Dbg_Reg_En_24_UNCONNECTED[0:7]),
        .Dbg_Reg_En_25(NLW_U0_Dbg_Reg_En_25_UNCONNECTED[0:7]),
        .Dbg_Reg_En_26(NLW_U0_Dbg_Reg_En_26_UNCONNECTED[0:7]),
        .Dbg_Reg_En_27(NLW_U0_Dbg_Reg_En_27_UNCONNECTED[0:7]),
        .Dbg_Reg_En_28(NLW_U0_Dbg_Reg_En_28_UNCONNECTED[0:7]),
        .Dbg_Reg_En_29(NLW_U0_Dbg_Reg_En_29_UNCONNECTED[0:7]),
        .Dbg_Reg_En_3(NLW_U0_Dbg_Reg_En_3_UNCONNECTED[0:7]),
        .Dbg_Reg_En_30(NLW_U0_Dbg_Reg_En_30_UNCONNECTED[0:7]),
        .Dbg_Reg_En_31(NLW_U0_Dbg_Reg_En_31_UNCONNECTED[0:7]),
        .Dbg_Reg_En_4(NLW_U0_Dbg_Reg_En_4_UNCONNECTED[0:7]),
        .Dbg_Reg_En_5(NLW_U0_Dbg_Reg_En_5_UNCONNECTED[0:7]),
        .Dbg_Reg_En_6(NLW_U0_Dbg_Reg_En_6_UNCONNECTED[0:7]),
        .Dbg_Reg_En_7(NLW_U0_Dbg_Reg_En_7_UNCONNECTED[0:7]),
        .Dbg_Reg_En_8(NLW_U0_Dbg_Reg_En_8_UNCONNECTED[0:7]),
        .Dbg_Reg_En_9(NLW_U0_Dbg_Reg_En_9_UNCONNECTED[0:7]),
        .Dbg_Rst_0(Dbg_Rst_0),
        .Dbg_Rst_1(NLW_U0_Dbg_Rst_1_UNCONNECTED),
        .Dbg_Rst_10(NLW_U0_Dbg_Rst_10_UNCONNECTED),
        .Dbg_Rst_11(NLW_U0_Dbg_Rst_11_UNCONNECTED),
        .Dbg_Rst_12(NLW_U0_Dbg_Rst_12_UNCONNECTED),
        .Dbg_Rst_13(NLW_U0_Dbg_Rst_13_UNCONNECTED),
        .Dbg_Rst_14(NLW_U0_Dbg_Rst_14_UNCONNECTED),
        .Dbg_Rst_15(NLW_U0_Dbg_Rst_15_UNCONNECTED),
        .Dbg_Rst_16(NLW_U0_Dbg_Rst_16_UNCONNECTED),
        .Dbg_Rst_17(NLW_U0_Dbg_Rst_17_UNCONNECTED),
        .Dbg_Rst_18(NLW_U0_Dbg_Rst_18_UNCONNECTED),
        .Dbg_Rst_19(NLW_U0_Dbg_Rst_19_UNCONNECTED),
        .Dbg_Rst_2(NLW_U0_Dbg_Rst_2_UNCONNECTED),
        .Dbg_Rst_20(NLW_U0_Dbg_Rst_20_UNCONNECTED),
        .Dbg_Rst_21(NLW_U0_Dbg_Rst_21_UNCONNECTED),
        .Dbg_Rst_22(NLW_U0_Dbg_Rst_22_UNCONNECTED),
        .Dbg_Rst_23(NLW_U0_Dbg_Rst_23_UNCONNECTED),
        .Dbg_Rst_24(NLW_U0_Dbg_Rst_24_UNCONNECTED),
        .Dbg_Rst_25(NLW_U0_Dbg_Rst_25_UNCONNECTED),
        .Dbg_Rst_26(NLW_U0_Dbg_Rst_26_UNCONNECTED),
        .Dbg_Rst_27(NLW_U0_Dbg_Rst_27_UNCONNECTED),
        .Dbg_Rst_28(NLW_U0_Dbg_Rst_28_UNCONNECTED),
        .Dbg_Rst_29(NLW_U0_Dbg_Rst_29_UNCONNECTED),
        .Dbg_Rst_3(NLW_U0_Dbg_Rst_3_UNCONNECTED),
        .Dbg_Rst_30(NLW_U0_Dbg_Rst_30_UNCONNECTED),
        .Dbg_Rst_31(NLW_U0_Dbg_Rst_31_UNCONNECTED),
        .Dbg_Rst_4(NLW_U0_Dbg_Rst_4_UNCONNECTED),
        .Dbg_Rst_5(NLW_U0_Dbg_Rst_5_UNCONNECTED),
        .Dbg_Rst_6(NLW_U0_Dbg_Rst_6_UNCONNECTED),
        .Dbg_Rst_7(NLW_U0_Dbg_Rst_7_UNCONNECTED),
        .Dbg_Rst_8(NLW_U0_Dbg_Rst_8_UNCONNECTED),
        .Dbg_Rst_9(NLW_U0_Dbg_Rst_9_UNCONNECTED),
        .Dbg_Shift_0(Dbg_Shift_0),
        .Dbg_Shift_1(NLW_U0_Dbg_Shift_1_UNCONNECTED),
        .Dbg_Shift_10(NLW_U0_Dbg_Shift_10_UNCONNECTED),
        .Dbg_Shift_11(NLW_U0_Dbg_Shift_11_UNCONNECTED),
        .Dbg_Shift_12(NLW_U0_Dbg_Shift_12_UNCONNECTED),
        .Dbg_Shift_13(NLW_U0_Dbg_Shift_13_UNCONNECTED),
        .Dbg_Shift_14(NLW_U0_Dbg_Shift_14_UNCONNECTED),
        .Dbg_Shift_15(NLW_U0_Dbg_Shift_15_UNCONNECTED),
        .Dbg_Shift_16(NLW_U0_Dbg_Shift_16_UNCONNECTED),
        .Dbg_Shift_17(NLW_U0_Dbg_Shift_17_UNCONNECTED),
        .Dbg_Shift_18(NLW_U0_Dbg_Shift_18_UNCONNECTED),
        .Dbg_Shift_19(NLW_U0_Dbg_Shift_19_UNCONNECTED),
        .Dbg_Shift_2(NLW_U0_Dbg_Shift_2_UNCONNECTED),
        .Dbg_Shift_20(NLW_U0_Dbg_Shift_20_UNCONNECTED),
        .Dbg_Shift_21(NLW_U0_Dbg_Shift_21_UNCONNECTED),
        .Dbg_Shift_22(NLW_U0_Dbg_Shift_22_UNCONNECTED),
        .Dbg_Shift_23(NLW_U0_Dbg_Shift_23_UNCONNECTED),
        .Dbg_Shift_24(NLW_U0_Dbg_Shift_24_UNCONNECTED),
        .Dbg_Shift_25(NLW_U0_Dbg_Shift_25_UNCONNECTED),
        .Dbg_Shift_26(NLW_U0_Dbg_Shift_26_UNCONNECTED),
        .Dbg_Shift_27(NLW_U0_Dbg_Shift_27_UNCONNECTED),
        .Dbg_Shift_28(NLW_U0_Dbg_Shift_28_UNCONNECTED),
        .Dbg_Shift_29(NLW_U0_Dbg_Shift_29_UNCONNECTED),
        .Dbg_Shift_3(NLW_U0_Dbg_Shift_3_UNCONNECTED),
        .Dbg_Shift_30(NLW_U0_Dbg_Shift_30_UNCONNECTED),
        .Dbg_Shift_31(NLW_U0_Dbg_Shift_31_UNCONNECTED),
        .Dbg_Shift_4(NLW_U0_Dbg_Shift_4_UNCONNECTED),
        .Dbg_Shift_5(NLW_U0_Dbg_Shift_5_UNCONNECTED),
        .Dbg_Shift_6(NLW_U0_Dbg_Shift_6_UNCONNECTED),
        .Dbg_Shift_7(NLW_U0_Dbg_Shift_7_UNCONNECTED),
        .Dbg_Shift_8(NLW_U0_Dbg_Shift_8_UNCONNECTED),
        .Dbg_Shift_9(NLW_U0_Dbg_Shift_9_UNCONNECTED),
        .Dbg_TDI_0(Dbg_TDI_0),
        .Dbg_TDI_1(NLW_U0_Dbg_TDI_1_UNCONNECTED),
        .Dbg_TDI_10(NLW_U0_Dbg_TDI_10_UNCONNECTED),
        .Dbg_TDI_11(NLW_U0_Dbg_TDI_11_UNCONNECTED),
        .Dbg_TDI_12(NLW_U0_Dbg_TDI_12_UNCONNECTED),
        .Dbg_TDI_13(NLW_U0_Dbg_TDI_13_UNCONNECTED),
        .Dbg_TDI_14(NLW_U0_Dbg_TDI_14_UNCONNECTED),
        .Dbg_TDI_15(NLW_U0_Dbg_TDI_15_UNCONNECTED),
        .Dbg_TDI_16(NLW_U0_Dbg_TDI_16_UNCONNECTED),
        .Dbg_TDI_17(NLW_U0_Dbg_TDI_17_UNCONNECTED),
        .Dbg_TDI_18(NLW_U0_Dbg_TDI_18_UNCONNECTED),
        .Dbg_TDI_19(NLW_U0_Dbg_TDI_19_UNCONNECTED),
        .Dbg_TDI_2(NLW_U0_Dbg_TDI_2_UNCONNECTED),
        .Dbg_TDI_20(NLW_U0_Dbg_TDI_20_UNCONNECTED),
        .Dbg_TDI_21(NLW_U0_Dbg_TDI_21_UNCONNECTED),
        .Dbg_TDI_22(NLW_U0_Dbg_TDI_22_UNCONNECTED),
        .Dbg_TDI_23(NLW_U0_Dbg_TDI_23_UNCONNECTED),
        .Dbg_TDI_24(NLW_U0_Dbg_TDI_24_UNCONNECTED),
        .Dbg_TDI_25(NLW_U0_Dbg_TDI_25_UNCONNECTED),
        .Dbg_TDI_26(NLW_U0_Dbg_TDI_26_UNCONNECTED),
        .Dbg_TDI_27(NLW_U0_Dbg_TDI_27_UNCONNECTED),
        .Dbg_TDI_28(NLW_U0_Dbg_TDI_28_UNCONNECTED),
        .Dbg_TDI_29(NLW_U0_Dbg_TDI_29_UNCONNECTED),
        .Dbg_TDI_3(NLW_U0_Dbg_TDI_3_UNCONNECTED),
        .Dbg_TDI_30(NLW_U0_Dbg_TDI_30_UNCONNECTED),
        .Dbg_TDI_31(NLW_U0_Dbg_TDI_31_UNCONNECTED),
        .Dbg_TDI_4(NLW_U0_Dbg_TDI_4_UNCONNECTED),
        .Dbg_TDI_5(NLW_U0_Dbg_TDI_5_UNCONNECTED),
        .Dbg_TDI_6(NLW_U0_Dbg_TDI_6_UNCONNECTED),
        .Dbg_TDI_7(NLW_U0_Dbg_TDI_7_UNCONNECTED),
        .Dbg_TDI_8(NLW_U0_Dbg_TDI_8_UNCONNECTED),
        .Dbg_TDI_9(NLW_U0_Dbg_TDI_9_UNCONNECTED),
        .Dbg_TDO_0(Dbg_TDO_0),
        .Dbg_TDO_1(NLW_U0_Dbg_TDO_1_UNCONNECTED),
        .Dbg_TDO_10(NLW_U0_Dbg_TDO_10_UNCONNECTED),
        .Dbg_TDO_11(NLW_U0_Dbg_TDO_11_UNCONNECTED),
        .Dbg_TDO_12(NLW_U0_Dbg_TDO_12_UNCONNECTED),
        .Dbg_TDO_13(NLW_U0_Dbg_TDO_13_UNCONNECTED),
        .Dbg_TDO_14(NLW_U0_Dbg_TDO_14_UNCONNECTED),
        .Dbg_TDO_15(NLW_U0_Dbg_TDO_15_UNCONNECTED),
        .Dbg_TDO_16(NLW_U0_Dbg_TDO_16_UNCONNECTED),
        .Dbg_TDO_17(NLW_U0_Dbg_TDO_17_UNCONNECTED),
        .Dbg_TDO_18(NLW_U0_Dbg_TDO_18_UNCONNECTED),
        .Dbg_TDO_19(NLW_U0_Dbg_TDO_19_UNCONNECTED),
        .Dbg_TDO_2(NLW_U0_Dbg_TDO_2_UNCONNECTED),
        .Dbg_TDO_20(NLW_U0_Dbg_TDO_20_UNCONNECTED),
        .Dbg_TDO_21(NLW_U0_Dbg_TDO_21_UNCONNECTED),
        .Dbg_TDO_22(NLW_U0_Dbg_TDO_22_UNCONNECTED),
        .Dbg_TDO_23(NLW_U0_Dbg_TDO_23_UNCONNECTED),
        .Dbg_TDO_24(NLW_U0_Dbg_TDO_24_UNCONNECTED),
        .Dbg_TDO_25(NLW_U0_Dbg_TDO_25_UNCONNECTED),
        .Dbg_TDO_26(NLW_U0_Dbg_TDO_26_UNCONNECTED),
        .Dbg_TDO_27(NLW_U0_Dbg_TDO_27_UNCONNECTED),
        .Dbg_TDO_28(NLW_U0_Dbg_TDO_28_UNCONNECTED),
        .Dbg_TDO_29(NLW_U0_Dbg_TDO_29_UNCONNECTED),
        .Dbg_TDO_3(NLW_U0_Dbg_TDO_3_UNCONNECTED),
        .Dbg_TDO_30(NLW_U0_Dbg_TDO_30_UNCONNECTED),
        .Dbg_TDO_31(NLW_U0_Dbg_TDO_31_UNCONNECTED),
        .Dbg_TDO_4(NLW_U0_Dbg_TDO_4_UNCONNECTED),
        .Dbg_TDO_5(NLW_U0_Dbg_TDO_5_UNCONNECTED),
        .Dbg_TDO_6(NLW_U0_Dbg_TDO_6_UNCONNECTED),
        .Dbg_TDO_7(NLW_U0_Dbg_TDO_7_UNCONNECTED),
        .Dbg_TDO_8(NLW_U0_Dbg_TDO_8_UNCONNECTED),
        .Dbg_TDO_9(NLW_U0_Dbg_TDO_9_UNCONNECTED),
        .Dbg_TrClk_0(NLW_U0_Dbg_TrClk_0_UNCONNECTED),
        .Dbg_TrClk_1(NLW_U0_Dbg_TrClk_1_UNCONNECTED),
        .Dbg_TrClk_10(NLW_U0_Dbg_TrClk_10_UNCONNECTED),
        .Dbg_TrClk_11(NLW_U0_Dbg_TrClk_11_UNCONNECTED),
        .Dbg_TrClk_12(NLW_U0_Dbg_TrClk_12_UNCONNECTED),
        .Dbg_TrClk_13(NLW_U0_Dbg_TrClk_13_UNCONNECTED),
        .Dbg_TrClk_14(NLW_U0_Dbg_TrClk_14_UNCONNECTED),
        .Dbg_TrClk_15(NLW_U0_Dbg_TrClk_15_UNCONNECTED),
        .Dbg_TrClk_16(NLW_U0_Dbg_TrClk_16_UNCONNECTED),
        .Dbg_TrClk_17(NLW_U0_Dbg_TrClk_17_UNCONNECTED),
        .Dbg_TrClk_18(NLW_U0_Dbg_TrClk_18_UNCONNECTED),
        .Dbg_TrClk_19(NLW_U0_Dbg_TrClk_19_UNCONNECTED),
        .Dbg_TrClk_2(NLW_U0_Dbg_TrClk_2_UNCONNECTED),
        .Dbg_TrClk_20(NLW_U0_Dbg_TrClk_20_UNCONNECTED),
        .Dbg_TrClk_21(NLW_U0_Dbg_TrClk_21_UNCONNECTED),
        .Dbg_TrClk_22(NLW_U0_Dbg_TrClk_22_UNCONNECTED),
        .Dbg_TrClk_23(NLW_U0_Dbg_TrClk_23_UNCONNECTED),
        .Dbg_TrClk_24(NLW_U0_Dbg_TrClk_24_UNCONNECTED),
        .Dbg_TrClk_25(NLW_U0_Dbg_TrClk_25_UNCONNECTED),
        .Dbg_TrClk_26(NLW_U0_Dbg_TrClk_26_UNCONNECTED),
        .Dbg_TrClk_27(NLW_U0_Dbg_TrClk_27_UNCONNECTED),
        .Dbg_TrClk_28(NLW_U0_Dbg_TrClk_28_UNCONNECTED),
        .Dbg_TrClk_29(NLW_U0_Dbg_TrClk_29_UNCONNECTED),
        .Dbg_TrClk_3(NLW_U0_Dbg_TrClk_3_UNCONNECTED),
        .Dbg_TrClk_30(NLW_U0_Dbg_TrClk_30_UNCONNECTED),
        .Dbg_TrClk_31(NLW_U0_Dbg_TrClk_31_UNCONNECTED),
        .Dbg_TrClk_4(NLW_U0_Dbg_TrClk_4_UNCONNECTED),
        .Dbg_TrClk_5(NLW_U0_Dbg_TrClk_5_UNCONNECTED),
        .Dbg_TrClk_6(NLW_U0_Dbg_TrClk_6_UNCONNECTED),
        .Dbg_TrClk_7(NLW_U0_Dbg_TrClk_7_UNCONNECTED),
        .Dbg_TrClk_8(NLW_U0_Dbg_TrClk_8_UNCONNECTED),
        .Dbg_TrClk_9(NLW_U0_Dbg_TrClk_9_UNCONNECTED),
        .Dbg_TrData_0(NLW_U0_Dbg_TrData_0_UNCONNECTED[0:35]),
        .Dbg_TrData_1(NLW_U0_Dbg_TrData_1_UNCONNECTED[0:35]),
        .Dbg_TrData_10(NLW_U0_Dbg_TrData_10_UNCONNECTED[0:35]),
        .Dbg_TrData_11(NLW_U0_Dbg_TrData_11_UNCONNECTED[0:35]),
        .Dbg_TrData_12(NLW_U0_Dbg_TrData_12_UNCONNECTED[0:35]),
        .Dbg_TrData_13(NLW_U0_Dbg_TrData_13_UNCONNECTED[0:35]),
        .Dbg_TrData_14(NLW_U0_Dbg_TrData_14_UNCONNECTED[0:35]),
        .Dbg_TrData_15(NLW_U0_Dbg_TrData_15_UNCONNECTED[0:35]),
        .Dbg_TrData_16(NLW_U0_Dbg_TrData_16_UNCONNECTED[0:35]),
        .Dbg_TrData_17(NLW_U0_Dbg_TrData_17_UNCONNECTED[0:35]),
        .Dbg_TrData_18(NLW_U0_Dbg_TrData_18_UNCONNECTED[0:35]),
        .Dbg_TrData_19(NLW_U0_Dbg_TrData_19_UNCONNECTED[0:35]),
        .Dbg_TrData_2(NLW_U0_Dbg_TrData_2_UNCONNECTED[0:35]),
        .Dbg_TrData_20(NLW_U0_Dbg_TrData_20_UNCONNECTED[0:35]),
        .Dbg_TrData_21(NLW_U0_Dbg_TrData_21_UNCONNECTED[0:35]),
        .Dbg_TrData_22(NLW_U0_Dbg_TrData_22_UNCONNECTED[0:35]),
        .Dbg_TrData_23(NLW_U0_Dbg_TrData_23_UNCONNECTED[0:35]),
        .Dbg_TrData_24(NLW_U0_Dbg_TrData_24_UNCONNECTED[0:35]),
        .Dbg_TrData_25(NLW_U0_Dbg_TrData_25_UNCONNECTED[0:35]),
        .Dbg_TrData_26(NLW_U0_Dbg_TrData_26_UNCONNECTED[0:35]),
        .Dbg_TrData_27(NLW_U0_Dbg_TrData_27_UNCONNECTED[0:35]),
        .Dbg_TrData_28(NLW_U0_Dbg_TrData_28_UNCONNECTED[0:35]),
        .Dbg_TrData_29(NLW_U0_Dbg_TrData_29_UNCONNECTED[0:35]),
        .Dbg_TrData_3(NLW_U0_Dbg_TrData_3_UNCONNECTED[0:35]),
        .Dbg_TrData_30(NLW_U0_Dbg_TrData_30_UNCONNECTED[0:35]),
        .Dbg_TrData_31(NLW_U0_Dbg_TrData_31_UNCONNECTED[0:35]),
        .Dbg_TrData_4(NLW_U0_Dbg_TrData_4_UNCONNECTED[0:35]),
        .Dbg_TrData_5(NLW_U0_Dbg_TrData_5_UNCONNECTED[0:35]),
        .Dbg_TrData_6(NLW_U0_Dbg_TrData_6_UNCONNECTED[0:35]),
        .Dbg_TrData_7(NLW_U0_Dbg_TrData_7_UNCONNECTED[0:35]),
        .Dbg_TrData_8(NLW_U0_Dbg_TrData_8_UNCONNECTED[0:35]),
        .Dbg_TrData_9(NLW_U0_Dbg_TrData_9_UNCONNECTED[0:35]),
        .Dbg_TrReady_0(NLW_U0_Dbg_TrReady_0_UNCONNECTED),
        .Dbg_TrReady_1(NLW_U0_Dbg_TrReady_1_UNCONNECTED),
        .Dbg_TrReady_10(NLW_U0_Dbg_TrReady_10_UNCONNECTED),
        .Dbg_TrReady_11(NLW_U0_Dbg_TrReady_11_UNCONNECTED),
        .Dbg_TrReady_12(NLW_U0_Dbg_TrReady_12_UNCONNECTED),
        .Dbg_TrReady_13(NLW_U0_Dbg_TrReady_13_UNCONNECTED),
        .Dbg_TrReady_14(NLW_U0_Dbg_TrReady_14_UNCONNECTED),
        .Dbg_TrReady_15(NLW_U0_Dbg_TrReady_15_UNCONNECTED),
        .Dbg_TrReady_16(NLW_U0_Dbg_TrReady_16_UNCONNECTED),
        .Dbg_TrReady_17(NLW_U0_Dbg_TrReady_17_UNCONNECTED),
        .Dbg_TrReady_18(NLW_U0_Dbg_TrReady_18_UNCONNECTED),
        .Dbg_TrReady_19(NLW_U0_Dbg_TrReady_19_UNCONNECTED),
        .Dbg_TrReady_2(NLW_U0_Dbg_TrReady_2_UNCONNECTED),
        .Dbg_TrReady_20(NLW_U0_Dbg_TrReady_20_UNCONNECTED),
        .Dbg_TrReady_21(NLW_U0_Dbg_TrReady_21_UNCONNECTED),
        .Dbg_TrReady_22(NLW_U0_Dbg_TrReady_22_UNCONNECTED),
        .Dbg_TrReady_23(NLW_U0_Dbg_TrReady_23_UNCONNECTED),
        .Dbg_TrReady_24(NLW_U0_Dbg_TrReady_24_UNCONNECTED),
        .Dbg_TrReady_25(NLW_U0_Dbg_TrReady_25_UNCONNECTED),
        .Dbg_TrReady_26(NLW_U0_Dbg_TrReady_26_UNCONNECTED),
        .Dbg_TrReady_27(NLW_U0_Dbg_TrReady_27_UNCONNECTED),
        .Dbg_TrReady_28(NLW_U0_Dbg_TrReady_28_UNCONNECTED),
        .Dbg_TrReady_29(NLW_U0_Dbg_TrReady_29_UNCONNECTED),
        .Dbg_TrReady_3(NLW_U0_Dbg_TrReady_3_UNCONNECTED),
        .Dbg_TrReady_30(NLW_U0_Dbg_TrReady_30_UNCONNECTED),
        .Dbg_TrReady_31(NLW_U0_Dbg_TrReady_31_UNCONNECTED),
        .Dbg_TrReady_4(NLW_U0_Dbg_TrReady_4_UNCONNECTED),
        .Dbg_TrReady_5(NLW_U0_Dbg_TrReady_5_UNCONNECTED),
        .Dbg_TrReady_6(NLW_U0_Dbg_TrReady_6_UNCONNECTED),
        .Dbg_TrReady_7(NLW_U0_Dbg_TrReady_7_UNCONNECTED),
        .Dbg_TrReady_8(NLW_U0_Dbg_TrReady_8_UNCONNECTED),
        .Dbg_TrReady_9(NLW_U0_Dbg_TrReady_9_UNCONNECTED),
        .Dbg_TrValid_0(NLW_U0_Dbg_TrValid_0_UNCONNECTED),
        .Dbg_TrValid_1(NLW_U0_Dbg_TrValid_1_UNCONNECTED),
        .Dbg_TrValid_10(NLW_U0_Dbg_TrValid_10_UNCONNECTED),
        .Dbg_TrValid_11(NLW_U0_Dbg_TrValid_11_UNCONNECTED),
        .Dbg_TrValid_12(NLW_U0_Dbg_TrValid_12_UNCONNECTED),
        .Dbg_TrValid_13(NLW_U0_Dbg_TrValid_13_UNCONNECTED),
        .Dbg_TrValid_14(NLW_U0_Dbg_TrValid_14_UNCONNECTED),
        .Dbg_TrValid_15(NLW_U0_Dbg_TrValid_15_UNCONNECTED),
        .Dbg_TrValid_16(NLW_U0_Dbg_TrValid_16_UNCONNECTED),
        .Dbg_TrValid_17(NLW_U0_Dbg_TrValid_17_UNCONNECTED),
        .Dbg_TrValid_18(NLW_U0_Dbg_TrValid_18_UNCONNECTED),
        .Dbg_TrValid_19(NLW_U0_Dbg_TrValid_19_UNCONNECTED),
        .Dbg_TrValid_2(NLW_U0_Dbg_TrValid_2_UNCONNECTED),
        .Dbg_TrValid_20(NLW_U0_Dbg_TrValid_20_UNCONNECTED),
        .Dbg_TrValid_21(NLW_U0_Dbg_TrValid_21_UNCONNECTED),
        .Dbg_TrValid_22(NLW_U0_Dbg_TrValid_22_UNCONNECTED),
        .Dbg_TrValid_23(NLW_U0_Dbg_TrValid_23_UNCONNECTED),
        .Dbg_TrValid_24(NLW_U0_Dbg_TrValid_24_UNCONNECTED),
        .Dbg_TrValid_25(NLW_U0_Dbg_TrValid_25_UNCONNECTED),
        .Dbg_TrValid_26(NLW_U0_Dbg_TrValid_26_UNCONNECTED),
        .Dbg_TrValid_27(NLW_U0_Dbg_TrValid_27_UNCONNECTED),
        .Dbg_TrValid_28(NLW_U0_Dbg_TrValid_28_UNCONNECTED),
        .Dbg_TrValid_29(NLW_U0_Dbg_TrValid_29_UNCONNECTED),
        .Dbg_TrValid_3(NLW_U0_Dbg_TrValid_3_UNCONNECTED),
        .Dbg_TrValid_30(NLW_U0_Dbg_TrValid_30_UNCONNECTED),
        .Dbg_TrValid_31(NLW_U0_Dbg_TrValid_31_UNCONNECTED),
        .Dbg_TrValid_4(NLW_U0_Dbg_TrValid_4_UNCONNECTED),
        .Dbg_TrValid_5(NLW_U0_Dbg_TrValid_5_UNCONNECTED),
        .Dbg_TrValid_6(NLW_U0_Dbg_TrValid_6_UNCONNECTED),
        .Dbg_TrValid_7(NLW_U0_Dbg_TrValid_7_UNCONNECTED),
        .Dbg_TrValid_8(NLW_U0_Dbg_TrValid_8_UNCONNECTED),
        .Dbg_TrValid_9(NLW_U0_Dbg_TrValid_9_UNCONNECTED),
        .Dbg_Trig_Ack_In_0(NLW_U0_Dbg_Trig_Ack_In_0_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_1(NLW_U0_Dbg_Trig_Ack_In_1_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_10(NLW_U0_Dbg_Trig_Ack_In_10_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_11(NLW_U0_Dbg_Trig_Ack_In_11_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_12(NLW_U0_Dbg_Trig_Ack_In_12_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_13(NLW_U0_Dbg_Trig_Ack_In_13_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_14(NLW_U0_Dbg_Trig_Ack_In_14_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_15(NLW_U0_Dbg_Trig_Ack_In_15_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_16(NLW_U0_Dbg_Trig_Ack_In_16_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_17(NLW_U0_Dbg_Trig_Ack_In_17_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_18(NLW_U0_Dbg_Trig_Ack_In_18_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_19(NLW_U0_Dbg_Trig_Ack_In_19_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_2(NLW_U0_Dbg_Trig_Ack_In_2_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_20(NLW_U0_Dbg_Trig_Ack_In_20_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_21(NLW_U0_Dbg_Trig_Ack_In_21_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_22(NLW_U0_Dbg_Trig_Ack_In_22_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_23(NLW_U0_Dbg_Trig_Ack_In_23_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_24(NLW_U0_Dbg_Trig_Ack_In_24_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_25(NLW_U0_Dbg_Trig_Ack_In_25_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_26(NLW_U0_Dbg_Trig_Ack_In_26_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_27(NLW_U0_Dbg_Trig_Ack_In_27_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_28(NLW_U0_Dbg_Trig_Ack_In_28_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_29(NLW_U0_Dbg_Trig_Ack_In_29_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_3(NLW_U0_Dbg_Trig_Ack_In_3_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_30(NLW_U0_Dbg_Trig_Ack_In_30_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_31(NLW_U0_Dbg_Trig_Ack_In_31_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_4(NLW_U0_Dbg_Trig_Ack_In_4_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_5(NLW_U0_Dbg_Trig_Ack_In_5_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_6(NLW_U0_Dbg_Trig_Ack_In_6_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_7(NLW_U0_Dbg_Trig_Ack_In_7_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_8(NLW_U0_Dbg_Trig_Ack_In_8_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_9(NLW_U0_Dbg_Trig_Ack_In_9_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_0(NLW_U0_Dbg_Trig_Ack_Out_0_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_1(NLW_U0_Dbg_Trig_Ack_Out_1_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_10(NLW_U0_Dbg_Trig_Ack_Out_10_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_11(NLW_U0_Dbg_Trig_Ack_Out_11_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_12(NLW_U0_Dbg_Trig_Ack_Out_12_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_13(NLW_U0_Dbg_Trig_Ack_Out_13_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_14(NLW_U0_Dbg_Trig_Ack_Out_14_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_15(NLW_U0_Dbg_Trig_Ack_Out_15_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_16(NLW_U0_Dbg_Trig_Ack_Out_16_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_17(NLW_U0_Dbg_Trig_Ack_Out_17_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_18(NLW_U0_Dbg_Trig_Ack_Out_18_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_19(NLW_U0_Dbg_Trig_Ack_Out_19_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_2(NLW_U0_Dbg_Trig_Ack_Out_2_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_20(NLW_U0_Dbg_Trig_Ack_Out_20_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_21(NLW_U0_Dbg_Trig_Ack_Out_21_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_22(NLW_U0_Dbg_Trig_Ack_Out_22_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_23(NLW_U0_Dbg_Trig_Ack_Out_23_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_24(NLW_U0_Dbg_Trig_Ack_Out_24_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_25(NLW_U0_Dbg_Trig_Ack_Out_25_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_26(NLW_U0_Dbg_Trig_Ack_Out_26_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_27(NLW_U0_Dbg_Trig_Ack_Out_27_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_28(NLW_U0_Dbg_Trig_Ack_Out_28_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_29(NLW_U0_Dbg_Trig_Ack_Out_29_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_3(NLW_U0_Dbg_Trig_Ack_Out_3_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_30(NLW_U0_Dbg_Trig_Ack_Out_30_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_31(NLW_U0_Dbg_Trig_Ack_Out_31_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_4(NLW_U0_Dbg_Trig_Ack_Out_4_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_5(NLW_U0_Dbg_Trig_Ack_Out_5_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_6(NLW_U0_Dbg_Trig_Ack_Out_6_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_7(NLW_U0_Dbg_Trig_Ack_Out_7_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_8(NLW_U0_Dbg_Trig_Ack_Out_8_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_9(NLW_U0_Dbg_Trig_Ack_Out_9_UNCONNECTED[0:7]),
        .Dbg_Trig_In_0(NLW_U0_Dbg_Trig_In_0_UNCONNECTED[0:7]),
        .Dbg_Trig_In_1(NLW_U0_Dbg_Trig_In_1_UNCONNECTED[0:7]),
        .Dbg_Trig_In_10(NLW_U0_Dbg_Trig_In_10_UNCONNECTED[0:7]),
        .Dbg_Trig_In_11(NLW_U0_Dbg_Trig_In_11_UNCONNECTED[0:7]),
        .Dbg_Trig_In_12(NLW_U0_Dbg_Trig_In_12_UNCONNECTED[0:7]),
        .Dbg_Trig_In_13(NLW_U0_Dbg_Trig_In_13_UNCONNECTED[0:7]),
        .Dbg_Trig_In_14(NLW_U0_Dbg_Trig_In_14_UNCONNECTED[0:7]),
        .Dbg_Trig_In_15(NLW_U0_Dbg_Trig_In_15_UNCONNECTED[0:7]),
        .Dbg_Trig_In_16(NLW_U0_Dbg_Trig_In_16_UNCONNECTED[0:7]),
        .Dbg_Trig_In_17(NLW_U0_Dbg_Trig_In_17_UNCONNECTED[0:7]),
        .Dbg_Trig_In_18(NLW_U0_Dbg_Trig_In_18_UNCONNECTED[0:7]),
        .Dbg_Trig_In_19(NLW_U0_Dbg_Trig_In_19_UNCONNECTED[0:7]),
        .Dbg_Trig_In_2(NLW_U0_Dbg_Trig_In_2_UNCONNECTED[0:7]),
        .Dbg_Trig_In_20(NLW_U0_Dbg_Trig_In_20_UNCONNECTED[0:7]),
        .Dbg_Trig_In_21(NLW_U0_Dbg_Trig_In_21_UNCONNECTED[0:7]),
        .Dbg_Trig_In_22(NLW_U0_Dbg_Trig_In_22_UNCONNECTED[0:7]),
        .Dbg_Trig_In_23(NLW_U0_Dbg_Trig_In_23_UNCONNECTED[0:7]),
        .Dbg_Trig_In_24(NLW_U0_Dbg_Trig_In_24_UNCONNECTED[0:7]),
        .Dbg_Trig_In_25(NLW_U0_Dbg_Trig_In_25_UNCONNECTED[0:7]),
        .Dbg_Trig_In_26(NLW_U0_Dbg_Trig_In_26_UNCONNECTED[0:7]),
        .Dbg_Trig_In_27(NLW_U0_Dbg_Trig_In_27_UNCONNECTED[0:7]),
        .Dbg_Trig_In_28(NLW_U0_Dbg_Trig_In_28_UNCONNECTED[0:7]),
        .Dbg_Trig_In_29(NLW_U0_Dbg_Trig_In_29_UNCONNECTED[0:7]),
        .Dbg_Trig_In_3(NLW_U0_Dbg_Trig_In_3_UNCONNECTED[0:7]),
        .Dbg_Trig_In_30(NLW_U0_Dbg_Trig_In_30_UNCONNECTED[0:7]),
        .Dbg_Trig_In_31(NLW_U0_Dbg_Trig_In_31_UNCONNECTED[0:7]),
        .Dbg_Trig_In_4(NLW_U0_Dbg_Trig_In_4_UNCONNECTED[0:7]),
        .Dbg_Trig_In_5(NLW_U0_Dbg_Trig_In_5_UNCONNECTED[0:7]),
        .Dbg_Trig_In_6(NLW_U0_Dbg_Trig_In_6_UNCONNECTED[0:7]),
        .Dbg_Trig_In_7(NLW_U0_Dbg_Trig_In_7_UNCONNECTED[0:7]),
        .Dbg_Trig_In_8(NLW_U0_Dbg_Trig_In_8_UNCONNECTED[0:7]),
        .Dbg_Trig_In_9(NLW_U0_Dbg_Trig_In_9_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_0(NLW_U0_Dbg_Trig_Out_0_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_1(NLW_U0_Dbg_Trig_Out_1_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_10(NLW_U0_Dbg_Trig_Out_10_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_11(NLW_U0_Dbg_Trig_Out_11_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_12(NLW_U0_Dbg_Trig_Out_12_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_13(NLW_U0_Dbg_Trig_Out_13_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_14(NLW_U0_Dbg_Trig_Out_14_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_15(NLW_U0_Dbg_Trig_Out_15_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_16(NLW_U0_Dbg_Trig_Out_16_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_17(NLW_U0_Dbg_Trig_Out_17_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_18(NLW_U0_Dbg_Trig_Out_18_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_19(NLW_U0_Dbg_Trig_Out_19_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_2(NLW_U0_Dbg_Trig_Out_2_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_20(NLW_U0_Dbg_Trig_Out_20_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_21(NLW_U0_Dbg_Trig_Out_21_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_22(NLW_U0_Dbg_Trig_Out_22_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_23(NLW_U0_Dbg_Trig_Out_23_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_24(NLW_U0_Dbg_Trig_Out_24_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_25(NLW_U0_Dbg_Trig_Out_25_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_26(NLW_U0_Dbg_Trig_Out_26_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_27(NLW_U0_Dbg_Trig_Out_27_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_28(NLW_U0_Dbg_Trig_Out_28_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_29(NLW_U0_Dbg_Trig_Out_29_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_3(NLW_U0_Dbg_Trig_Out_3_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_30(NLW_U0_Dbg_Trig_Out_30_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_31(NLW_U0_Dbg_Trig_Out_31_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_4(NLW_U0_Dbg_Trig_Out_4_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_5(NLW_U0_Dbg_Trig_Out_5_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_6(NLW_U0_Dbg_Trig_Out_6_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_7(NLW_U0_Dbg_Trig_Out_7_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_8(NLW_U0_Dbg_Trig_Out_8_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_9(NLW_U0_Dbg_Trig_Out_9_UNCONNECTED[0:7]),
        .Dbg_Update_0(Dbg_Update_0),
        .Dbg_Update_1(NLW_U0_Dbg_Update_1_UNCONNECTED),
        .Dbg_Update_10(NLW_U0_Dbg_Update_10_UNCONNECTED),
        .Dbg_Update_11(NLW_U0_Dbg_Update_11_UNCONNECTED),
        .Dbg_Update_12(NLW_U0_Dbg_Update_12_UNCONNECTED),
        .Dbg_Update_13(NLW_U0_Dbg_Update_13_UNCONNECTED),
        .Dbg_Update_14(NLW_U0_Dbg_Update_14_UNCONNECTED),
        .Dbg_Update_15(NLW_U0_Dbg_Update_15_UNCONNECTED),
        .Dbg_Update_16(NLW_U0_Dbg_Update_16_UNCONNECTED),
        .Dbg_Update_17(NLW_U0_Dbg_Update_17_UNCONNECTED),
        .Dbg_Update_18(NLW_U0_Dbg_Update_18_UNCONNECTED),
        .Dbg_Update_19(NLW_U0_Dbg_Update_19_UNCONNECTED),
        .Dbg_Update_2(NLW_U0_Dbg_Update_2_UNCONNECTED),
        .Dbg_Update_20(NLW_U0_Dbg_Update_20_UNCONNECTED),
        .Dbg_Update_21(NLW_U0_Dbg_Update_21_UNCONNECTED),
        .Dbg_Update_22(NLW_U0_Dbg_Update_22_UNCONNECTED),
        .Dbg_Update_23(NLW_U0_Dbg_Update_23_UNCONNECTED),
        .Dbg_Update_24(NLW_U0_Dbg_Update_24_UNCONNECTED),
        .Dbg_Update_25(NLW_U0_Dbg_Update_25_UNCONNECTED),
        .Dbg_Update_26(NLW_U0_Dbg_Update_26_UNCONNECTED),
        .Dbg_Update_27(NLW_U0_Dbg_Update_27_UNCONNECTED),
        .Dbg_Update_28(NLW_U0_Dbg_Update_28_UNCONNECTED),
        .Dbg_Update_29(NLW_U0_Dbg_Update_29_UNCONNECTED),
        .Dbg_Update_3(NLW_U0_Dbg_Update_3_UNCONNECTED),
        .Dbg_Update_30(NLW_U0_Dbg_Update_30_UNCONNECTED),
        .Dbg_Update_31(NLW_U0_Dbg_Update_31_UNCONNECTED),
        .Dbg_Update_4(NLW_U0_Dbg_Update_4_UNCONNECTED),
        .Dbg_Update_5(NLW_U0_Dbg_Update_5_UNCONNECTED),
        .Dbg_Update_6(NLW_U0_Dbg_Update_6_UNCONNECTED),
        .Dbg_Update_7(NLW_U0_Dbg_Update_7_UNCONNECTED),
        .Dbg_Update_8(NLW_U0_Dbg_Update_8_UNCONNECTED),
        .Dbg_Update_9(NLW_U0_Dbg_Update_9_UNCONNECTED),
        .Dbg_WDATA_0(NLW_U0_Dbg_WDATA_0_UNCONNECTED[31:0]),
        .Dbg_WDATA_1(NLW_U0_Dbg_WDATA_1_UNCONNECTED[31:0]),
        .Dbg_WDATA_10(NLW_U0_Dbg_WDATA_10_UNCONNECTED[31:0]),
        .Dbg_WDATA_11(NLW_U0_Dbg_WDATA_11_UNCONNECTED[31:0]),
        .Dbg_WDATA_12(NLW_U0_Dbg_WDATA_12_UNCONNECTED[31:0]),
        .Dbg_WDATA_13(NLW_U0_Dbg_WDATA_13_UNCONNECTED[31:0]),
        .Dbg_WDATA_14(NLW_U0_Dbg_WDATA_14_UNCONNECTED[31:0]),
        .Dbg_WDATA_15(NLW_U0_Dbg_WDATA_15_UNCONNECTED[31:0]),
        .Dbg_WDATA_16(NLW_U0_Dbg_WDATA_16_UNCONNECTED[31:0]),
        .Dbg_WDATA_17(NLW_U0_Dbg_WDATA_17_UNCONNECTED[31:0]),
        .Dbg_WDATA_18(NLW_U0_Dbg_WDATA_18_UNCONNECTED[31:0]),
        .Dbg_WDATA_19(NLW_U0_Dbg_WDATA_19_UNCONNECTED[31:0]),
        .Dbg_WDATA_2(NLW_U0_Dbg_WDATA_2_UNCONNECTED[31:0]),
        .Dbg_WDATA_20(NLW_U0_Dbg_WDATA_20_UNCONNECTED[31:0]),
        .Dbg_WDATA_21(NLW_U0_Dbg_WDATA_21_UNCONNECTED[31:0]),
        .Dbg_WDATA_22(NLW_U0_Dbg_WDATA_22_UNCONNECTED[31:0]),
        .Dbg_WDATA_23(NLW_U0_Dbg_WDATA_23_UNCONNECTED[31:0]),
        .Dbg_WDATA_24(NLW_U0_Dbg_WDATA_24_UNCONNECTED[31:0]),
        .Dbg_WDATA_25(NLW_U0_Dbg_WDATA_25_UNCONNECTED[31:0]),
        .Dbg_WDATA_26(NLW_U0_Dbg_WDATA_26_UNCONNECTED[31:0]),
        .Dbg_WDATA_27(NLW_U0_Dbg_WDATA_27_UNCONNECTED[31:0]),
        .Dbg_WDATA_28(NLW_U0_Dbg_WDATA_28_UNCONNECTED[31:0]),
        .Dbg_WDATA_29(NLW_U0_Dbg_WDATA_29_UNCONNECTED[31:0]),
        .Dbg_WDATA_3(NLW_U0_Dbg_WDATA_3_UNCONNECTED[31:0]),
        .Dbg_WDATA_30(NLW_U0_Dbg_WDATA_30_UNCONNECTED[31:0]),
        .Dbg_WDATA_31(NLW_U0_Dbg_WDATA_31_UNCONNECTED[31:0]),
        .Dbg_WDATA_4(NLW_U0_Dbg_WDATA_4_UNCONNECTED[31:0]),
        .Dbg_WDATA_5(NLW_U0_Dbg_WDATA_5_UNCONNECTED[31:0]),
        .Dbg_WDATA_6(NLW_U0_Dbg_WDATA_6_UNCONNECTED[31:0]),
        .Dbg_WDATA_7(NLW_U0_Dbg_WDATA_7_UNCONNECTED[31:0]),
        .Dbg_WDATA_8(NLW_U0_Dbg_WDATA_8_UNCONNECTED[31:0]),
        .Dbg_WDATA_9(NLW_U0_Dbg_WDATA_9_UNCONNECTED[31:0]),
        .Dbg_WREADY_0(NLW_U0_Dbg_WREADY_0_UNCONNECTED),
        .Dbg_WREADY_1(NLW_U0_Dbg_WREADY_1_UNCONNECTED),
        .Dbg_WREADY_10(NLW_U0_Dbg_WREADY_10_UNCONNECTED),
        .Dbg_WREADY_11(NLW_U0_Dbg_WREADY_11_UNCONNECTED),
        .Dbg_WREADY_12(NLW_U0_Dbg_WREADY_12_UNCONNECTED),
        .Dbg_WREADY_13(NLW_U0_Dbg_WREADY_13_UNCONNECTED),
        .Dbg_WREADY_14(NLW_U0_Dbg_WREADY_14_UNCONNECTED),
        .Dbg_WREADY_15(NLW_U0_Dbg_WREADY_15_UNCONNECTED),
        .Dbg_WREADY_16(NLW_U0_Dbg_WREADY_16_UNCONNECTED),
        .Dbg_WREADY_17(NLW_U0_Dbg_WREADY_17_UNCONNECTED),
        .Dbg_WREADY_18(NLW_U0_Dbg_WREADY_18_UNCONNECTED),
        .Dbg_WREADY_19(NLW_U0_Dbg_WREADY_19_UNCONNECTED),
        .Dbg_WREADY_2(NLW_U0_Dbg_WREADY_2_UNCONNECTED),
        .Dbg_WREADY_20(NLW_U0_Dbg_WREADY_20_UNCONNECTED),
        .Dbg_WREADY_21(NLW_U0_Dbg_WREADY_21_UNCONNECTED),
        .Dbg_WREADY_22(NLW_U0_Dbg_WREADY_22_UNCONNECTED),
        .Dbg_WREADY_23(NLW_U0_Dbg_WREADY_23_UNCONNECTED),
        .Dbg_WREADY_24(NLW_U0_Dbg_WREADY_24_UNCONNECTED),
        .Dbg_WREADY_25(NLW_U0_Dbg_WREADY_25_UNCONNECTED),
        .Dbg_WREADY_26(NLW_U0_Dbg_WREADY_26_UNCONNECTED),
        .Dbg_WREADY_27(NLW_U0_Dbg_WREADY_27_UNCONNECTED),
        .Dbg_WREADY_28(NLW_U0_Dbg_WREADY_28_UNCONNECTED),
        .Dbg_WREADY_29(NLW_U0_Dbg_WREADY_29_UNCONNECTED),
        .Dbg_WREADY_3(NLW_U0_Dbg_WREADY_3_UNCONNECTED),
        .Dbg_WREADY_30(NLW_U0_Dbg_WREADY_30_UNCONNECTED),
        .Dbg_WREADY_31(NLW_U0_Dbg_WREADY_31_UNCONNECTED),
        .Dbg_WREADY_4(NLW_U0_Dbg_WREADY_4_UNCONNECTED),
        .Dbg_WREADY_5(NLW_U0_Dbg_WREADY_5_UNCONNECTED),
        .Dbg_WREADY_6(NLW_U0_Dbg_WREADY_6_UNCONNECTED),
        .Dbg_WREADY_7(NLW_U0_Dbg_WREADY_7_UNCONNECTED),
        .Dbg_WREADY_8(NLW_U0_Dbg_WREADY_8_UNCONNECTED),
        .Dbg_WREADY_9(NLW_U0_Dbg_WREADY_9_UNCONNECTED),
        .Dbg_WVALID_0(NLW_U0_Dbg_WVALID_0_UNCONNECTED),
        .Dbg_WVALID_1(NLW_U0_Dbg_WVALID_1_UNCONNECTED),
        .Dbg_WVALID_10(NLW_U0_Dbg_WVALID_10_UNCONNECTED),
        .Dbg_WVALID_11(NLW_U0_Dbg_WVALID_11_UNCONNECTED),
        .Dbg_WVALID_12(NLW_U0_Dbg_WVALID_12_UNCONNECTED),
        .Dbg_WVALID_13(NLW_U0_Dbg_WVALID_13_UNCONNECTED),
        .Dbg_WVALID_14(NLW_U0_Dbg_WVALID_14_UNCONNECTED),
        .Dbg_WVALID_15(NLW_U0_Dbg_WVALID_15_UNCONNECTED),
        .Dbg_WVALID_16(NLW_U0_Dbg_WVALID_16_UNCONNECTED),
        .Dbg_WVALID_17(NLW_U0_Dbg_WVALID_17_UNCONNECTED),
        .Dbg_WVALID_18(NLW_U0_Dbg_WVALID_18_UNCONNECTED),
        .Dbg_WVALID_19(NLW_U0_Dbg_WVALID_19_UNCONNECTED),
        .Dbg_WVALID_2(NLW_U0_Dbg_WVALID_2_UNCONNECTED),
        .Dbg_WVALID_20(NLW_U0_Dbg_WVALID_20_UNCONNECTED),
        .Dbg_WVALID_21(NLW_U0_Dbg_WVALID_21_UNCONNECTED),
        .Dbg_WVALID_22(NLW_U0_Dbg_WVALID_22_UNCONNECTED),
        .Dbg_WVALID_23(NLW_U0_Dbg_WVALID_23_UNCONNECTED),
        .Dbg_WVALID_24(NLW_U0_Dbg_WVALID_24_UNCONNECTED),
        .Dbg_WVALID_25(NLW_U0_Dbg_WVALID_25_UNCONNECTED),
        .Dbg_WVALID_26(NLW_U0_Dbg_WVALID_26_UNCONNECTED),
        .Dbg_WVALID_27(NLW_U0_Dbg_WVALID_27_UNCONNECTED),
        .Dbg_WVALID_28(NLW_U0_Dbg_WVALID_28_UNCONNECTED),
        .Dbg_WVALID_29(NLW_U0_Dbg_WVALID_29_UNCONNECTED),
        .Dbg_WVALID_3(NLW_U0_Dbg_WVALID_3_UNCONNECTED),
        .Dbg_WVALID_30(NLW_U0_Dbg_WVALID_30_UNCONNECTED),
        .Dbg_WVALID_31(NLW_U0_Dbg_WVALID_31_UNCONNECTED),
        .Dbg_WVALID_4(NLW_U0_Dbg_WVALID_4_UNCONNECTED),
        .Dbg_WVALID_5(NLW_U0_Dbg_WVALID_5_UNCONNECTED),
        .Dbg_WVALID_6(NLW_U0_Dbg_WVALID_6_UNCONNECTED),
        .Dbg_WVALID_7(NLW_U0_Dbg_WVALID_7_UNCONNECTED),
        .Dbg_WVALID_8(NLW_U0_Dbg_WVALID_8_UNCONNECTED),
        .Dbg_WVALID_9(NLW_U0_Dbg_WVALID_9_UNCONNECTED),
        .Debug_SYS_Rst(Debug_SYS_Rst),
        .Ext_BRK(NLW_U0_Ext_BRK_UNCONNECTED),
        .Ext_JTAG_CAPTURE(NLW_U0_Ext_JTAG_CAPTURE_UNCONNECTED),
        .Ext_JTAG_DRCK(NLW_U0_Ext_JTAG_DRCK_UNCONNECTED),
        .Ext_JTAG_RESET(NLW_U0_Ext_JTAG_RESET_UNCONNECTED),
        .Ext_JTAG_SEL(NLW_U0_Ext_JTAG_SEL_UNCONNECTED),
        .Ext_JTAG_SHIFT(NLW_U0_Ext_JTAG_SHIFT_UNCONNECTED),
        .Ext_JTAG_TDI(NLW_U0_Ext_JTAG_TDI_UNCONNECTED),
        .Ext_JTAG_TDO(NLW_U0_Ext_JTAG_TDO_UNCONNECTED),
        .Ext_JTAG_UPDATE(NLW_U0_Ext_JTAG_UPDATE_UNCONNECTED),
        .Ext_NM_BRK(NLW_U0_Ext_NM_BRK_UNCONNECTED),
        .Interrupt(NLW_U0_Interrupt_UNCONNECTED),
        .LMB_Addr_Strobe_0(NLW_U0_LMB_Addr_Strobe_0_UNCONNECTED),
        .LMB_Addr_Strobe_1(NLW_U0_LMB_Addr_Strobe_1_UNCONNECTED),
        .LMB_Addr_Strobe_10(NLW_U0_LMB_Addr_Strobe_10_UNCONNECTED),
        .LMB_Addr_Strobe_11(NLW_U0_LMB_Addr_Strobe_11_UNCONNECTED),
        .LMB_Addr_Strobe_12(NLW_U0_LMB_Addr_Strobe_12_UNCONNECTED),
        .LMB_Addr_Strobe_13(NLW_U0_LMB_Addr_Strobe_13_UNCONNECTED),
        .LMB_Addr_Strobe_14(NLW_U0_LMB_Addr_Strobe_14_UNCONNECTED),
        .LMB_Addr_Strobe_15(NLW_U0_LMB_Addr_Strobe_15_UNCONNECTED),
        .LMB_Addr_Strobe_16(NLW_U0_LMB_Addr_Strobe_16_UNCONNECTED),
        .LMB_Addr_Strobe_17(NLW_U0_LMB_Addr_Strobe_17_UNCONNECTED),
        .LMB_Addr_Strobe_18(NLW_U0_LMB_Addr_Strobe_18_UNCONNECTED),
        .LMB_Addr_Strobe_19(NLW_U0_LMB_Addr_Strobe_19_UNCONNECTED),
        .LMB_Addr_Strobe_2(NLW_U0_LMB_Addr_Strobe_2_UNCONNECTED),
        .LMB_Addr_Strobe_20(NLW_U0_LMB_Addr_Strobe_20_UNCONNECTED),
        .LMB_Addr_Strobe_21(NLW_U0_LMB_Addr_Strobe_21_UNCONNECTED),
        .LMB_Addr_Strobe_22(NLW_U0_LMB_Addr_Strobe_22_UNCONNECTED),
        .LMB_Addr_Strobe_23(NLW_U0_LMB_Addr_Strobe_23_UNCONNECTED),
        .LMB_Addr_Strobe_24(NLW_U0_LMB_Addr_Strobe_24_UNCONNECTED),
        .LMB_Addr_Strobe_25(NLW_U0_LMB_Addr_Strobe_25_UNCONNECTED),
        .LMB_Addr_Strobe_26(NLW_U0_LMB_Addr_Strobe_26_UNCONNECTED),
        .LMB_Addr_Strobe_27(NLW_U0_LMB_Addr_Strobe_27_UNCONNECTED),
        .LMB_Addr_Strobe_28(NLW_U0_LMB_Addr_Strobe_28_UNCONNECTED),
        .LMB_Addr_Strobe_29(NLW_U0_LMB_Addr_Strobe_29_UNCONNECTED),
        .LMB_Addr_Strobe_3(NLW_U0_LMB_Addr_Strobe_3_UNCONNECTED),
        .LMB_Addr_Strobe_30(NLW_U0_LMB_Addr_Strobe_30_UNCONNECTED),
        .LMB_Addr_Strobe_31(NLW_U0_LMB_Addr_Strobe_31_UNCONNECTED),
        .LMB_Addr_Strobe_4(NLW_U0_LMB_Addr_Strobe_4_UNCONNECTED),
        .LMB_Addr_Strobe_5(NLW_U0_LMB_Addr_Strobe_5_UNCONNECTED),
        .LMB_Addr_Strobe_6(NLW_U0_LMB_Addr_Strobe_6_UNCONNECTED),
        .LMB_Addr_Strobe_7(NLW_U0_LMB_Addr_Strobe_7_UNCONNECTED),
        .LMB_Addr_Strobe_8(NLW_U0_LMB_Addr_Strobe_8_UNCONNECTED),
        .LMB_Addr_Strobe_9(NLW_U0_LMB_Addr_Strobe_9_UNCONNECTED),
        .LMB_Byte_Enable_0(NLW_U0_LMB_Byte_Enable_0_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_1(NLW_U0_LMB_Byte_Enable_1_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_10(NLW_U0_LMB_Byte_Enable_10_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_11(NLW_U0_LMB_Byte_Enable_11_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_12(NLW_U0_LMB_Byte_Enable_12_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_13(NLW_U0_LMB_Byte_Enable_13_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_14(NLW_U0_LMB_Byte_Enable_14_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_15(NLW_U0_LMB_Byte_Enable_15_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_16(NLW_U0_LMB_Byte_Enable_16_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_17(NLW_U0_LMB_Byte_Enable_17_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_18(NLW_U0_LMB_Byte_Enable_18_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_19(NLW_U0_LMB_Byte_Enable_19_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_2(NLW_U0_LMB_Byte_Enable_2_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_20(NLW_U0_LMB_Byte_Enable_20_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_21(NLW_U0_LMB_Byte_Enable_21_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_22(NLW_U0_LMB_Byte_Enable_22_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_23(NLW_U0_LMB_Byte_Enable_23_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_24(NLW_U0_LMB_Byte_Enable_24_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_25(NLW_U0_LMB_Byte_Enable_25_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_26(NLW_U0_LMB_Byte_Enable_26_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_27(NLW_U0_LMB_Byte_Enable_27_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_28(NLW_U0_LMB_Byte_Enable_28_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_29(NLW_U0_LMB_Byte_Enable_29_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_3(NLW_U0_LMB_Byte_Enable_3_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_30(NLW_U0_LMB_Byte_Enable_30_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_31(NLW_U0_LMB_Byte_Enable_31_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_4(NLW_U0_LMB_Byte_Enable_4_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_5(NLW_U0_LMB_Byte_Enable_5_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_6(NLW_U0_LMB_Byte_Enable_6_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_7(NLW_U0_LMB_Byte_Enable_7_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_8(NLW_U0_LMB_Byte_Enable_8_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_9(NLW_U0_LMB_Byte_Enable_9_UNCONNECTED[0:3]),
        .LMB_CE_0(NLW_U0_LMB_CE_0_UNCONNECTED),
        .LMB_CE_1(NLW_U0_LMB_CE_1_UNCONNECTED),
        .LMB_CE_10(NLW_U0_LMB_CE_10_UNCONNECTED),
        .LMB_CE_11(NLW_U0_LMB_CE_11_UNCONNECTED),
        .LMB_CE_12(NLW_U0_LMB_CE_12_UNCONNECTED),
        .LMB_CE_13(NLW_U0_LMB_CE_13_UNCONNECTED),
        .LMB_CE_14(NLW_U0_LMB_CE_14_UNCONNECTED),
        .LMB_CE_15(NLW_U0_LMB_CE_15_UNCONNECTED),
        .LMB_CE_16(NLW_U0_LMB_CE_16_UNCONNECTED),
        .LMB_CE_17(NLW_U0_LMB_CE_17_UNCONNECTED),
        .LMB_CE_18(NLW_U0_LMB_CE_18_UNCONNECTED),
        .LMB_CE_19(NLW_U0_LMB_CE_19_UNCONNECTED),
        .LMB_CE_2(NLW_U0_LMB_CE_2_UNCONNECTED),
        .LMB_CE_20(NLW_U0_LMB_CE_20_UNCONNECTED),
        .LMB_CE_21(NLW_U0_LMB_CE_21_UNCONNECTED),
        .LMB_CE_22(NLW_U0_LMB_CE_22_UNCONNECTED),
        .LMB_CE_23(NLW_U0_LMB_CE_23_UNCONNECTED),
        .LMB_CE_24(NLW_U0_LMB_CE_24_UNCONNECTED),
        .LMB_CE_25(NLW_U0_LMB_CE_25_UNCONNECTED),
        .LMB_CE_26(NLW_U0_LMB_CE_26_UNCONNECTED),
        .LMB_CE_27(NLW_U0_LMB_CE_27_UNCONNECTED),
        .LMB_CE_28(NLW_U0_LMB_CE_28_UNCONNECTED),
        .LMB_CE_29(NLW_U0_LMB_CE_29_UNCONNECTED),
        .LMB_CE_3(NLW_U0_LMB_CE_3_UNCONNECTED),
        .LMB_CE_30(NLW_U0_LMB_CE_30_UNCONNECTED),
        .LMB_CE_31(NLW_U0_LMB_CE_31_UNCONNECTED),
        .LMB_CE_4(NLW_U0_LMB_CE_4_UNCONNECTED),
        .LMB_CE_5(NLW_U0_LMB_CE_5_UNCONNECTED),
        .LMB_CE_6(NLW_U0_LMB_CE_6_UNCONNECTED),
        .LMB_CE_7(NLW_U0_LMB_CE_7_UNCONNECTED),
        .LMB_CE_8(NLW_U0_LMB_CE_8_UNCONNECTED),
        .LMB_CE_9(NLW_U0_LMB_CE_9_UNCONNECTED),
        .LMB_Data_Addr_0(NLW_U0_LMB_Data_Addr_0_UNCONNECTED[0:31]),
        .LMB_Data_Addr_1(NLW_U0_LMB_Data_Addr_1_UNCONNECTED[0:31]),
        .LMB_Data_Addr_10(NLW_U0_LMB_Data_Addr_10_UNCONNECTED[0:31]),
        .LMB_Data_Addr_11(NLW_U0_LMB_Data_Addr_11_UNCONNECTED[0:31]),
        .LMB_Data_Addr_12(NLW_U0_LMB_Data_Addr_12_UNCONNECTED[0:31]),
        .LMB_Data_Addr_13(NLW_U0_LMB_Data_Addr_13_UNCONNECTED[0:31]),
        .LMB_Data_Addr_14(NLW_U0_LMB_Data_Addr_14_UNCONNECTED[0:31]),
        .LMB_Data_Addr_15(NLW_U0_LMB_Data_Addr_15_UNCONNECTED[0:31]),
        .LMB_Data_Addr_16(NLW_U0_LMB_Data_Addr_16_UNCONNECTED[0:31]),
        .LMB_Data_Addr_17(NLW_U0_LMB_Data_Addr_17_UNCONNECTED[0:31]),
        .LMB_Data_Addr_18(NLW_U0_LMB_Data_Addr_18_UNCONNECTED[0:31]),
        .LMB_Data_Addr_19(NLW_U0_LMB_Data_Addr_19_UNCONNECTED[0:31]),
        .LMB_Data_Addr_2(NLW_U0_LMB_Data_Addr_2_UNCONNECTED[0:31]),
        .LMB_Data_Addr_20(NLW_U0_LMB_Data_Addr_20_UNCONNECTED[0:31]),
        .LMB_Data_Addr_21(NLW_U0_LMB_Data_Addr_21_UNCONNECTED[0:31]),
        .LMB_Data_Addr_22(NLW_U0_LMB_Data_Addr_22_UNCONNECTED[0:31]),
        .LMB_Data_Addr_23(NLW_U0_LMB_Data_Addr_23_UNCONNECTED[0:31]),
        .LMB_Data_Addr_24(NLW_U0_LMB_Data_Addr_24_UNCONNECTED[0:31]),
        .LMB_Data_Addr_25(NLW_U0_LMB_Data_Addr_25_UNCONNECTED[0:31]),
        .LMB_Data_Addr_26(NLW_U0_LMB_Data_Addr_26_UNCONNECTED[0:31]),
        .LMB_Data_Addr_27(NLW_U0_LMB_Data_Addr_27_UNCONNECTED[0:31]),
        .LMB_Data_Addr_28(NLW_U0_LMB_Data_Addr_28_UNCONNECTED[0:31]),
        .LMB_Data_Addr_29(NLW_U0_LMB_Data_Addr_29_UNCONNECTED[0:31]),
        .LMB_Data_Addr_3(NLW_U0_LMB_Data_Addr_3_UNCONNECTED[0:31]),
        .LMB_Data_Addr_30(NLW_U0_LMB_Data_Addr_30_UNCONNECTED[0:31]),
        .LMB_Data_Addr_31(NLW_U0_LMB_Data_Addr_31_UNCONNECTED[0:31]),
        .LMB_Data_Addr_4(NLW_U0_LMB_Data_Addr_4_UNCONNECTED[0:31]),
        .LMB_Data_Addr_5(NLW_U0_LMB_Data_Addr_5_UNCONNECTED[0:31]),
        .LMB_Data_Addr_6(NLW_U0_LMB_Data_Addr_6_UNCONNECTED[0:31]),
        .LMB_Data_Addr_7(NLW_U0_LMB_Data_Addr_7_UNCONNECTED[0:31]),
        .LMB_Data_Addr_8(NLW_U0_LMB_Data_Addr_8_UNCONNECTED[0:31]),
        .LMB_Data_Addr_9(NLW_U0_LMB_Data_Addr_9_UNCONNECTED[0:31]),
        .LMB_Data_Read_0(NLW_U0_LMB_Data_Read_0_UNCONNECTED[0:31]),
        .LMB_Data_Read_1(NLW_U0_LMB_Data_Read_1_UNCONNECTED[0:31]),
        .LMB_Data_Read_10(NLW_U0_LMB_Data_Read_10_UNCONNECTED[0:31]),
        .LMB_Data_Read_11(NLW_U0_LMB_Data_Read_11_UNCONNECTED[0:31]),
        .LMB_Data_Read_12(NLW_U0_LMB_Data_Read_12_UNCONNECTED[0:31]),
        .LMB_Data_Read_13(NLW_U0_LMB_Data_Read_13_UNCONNECTED[0:31]),
        .LMB_Data_Read_14(NLW_U0_LMB_Data_Read_14_UNCONNECTED[0:31]),
        .LMB_Data_Read_15(NLW_U0_LMB_Data_Read_15_UNCONNECTED[0:31]),
        .LMB_Data_Read_16(NLW_U0_LMB_Data_Read_16_UNCONNECTED[0:31]),
        .LMB_Data_Read_17(NLW_U0_LMB_Data_Read_17_UNCONNECTED[0:31]),
        .LMB_Data_Read_18(NLW_U0_LMB_Data_Read_18_UNCONNECTED[0:31]),
        .LMB_Data_Read_19(NLW_U0_LMB_Data_Read_19_UNCONNECTED[0:31]),
        .LMB_Data_Read_2(NLW_U0_LMB_Data_Read_2_UNCONNECTED[0:31]),
        .LMB_Data_Read_20(NLW_U0_LMB_Data_Read_20_UNCONNECTED[0:31]),
        .LMB_Data_Read_21(NLW_U0_LMB_Data_Read_21_UNCONNECTED[0:31]),
        .LMB_Data_Read_22(NLW_U0_LMB_Data_Read_22_UNCONNECTED[0:31]),
        .LMB_Data_Read_23(NLW_U0_LMB_Data_Read_23_UNCONNECTED[0:31]),
        .LMB_Data_Read_24(NLW_U0_LMB_Data_Read_24_UNCONNECTED[0:31]),
        .LMB_Data_Read_25(NLW_U0_LMB_Data_Read_25_UNCONNECTED[0:31]),
        .LMB_Data_Read_26(NLW_U0_LMB_Data_Read_26_UNCONNECTED[0:31]),
        .LMB_Data_Read_27(NLW_U0_LMB_Data_Read_27_UNCONNECTED[0:31]),
        .LMB_Data_Read_28(NLW_U0_LMB_Data_Read_28_UNCONNECTED[0:31]),
        .LMB_Data_Read_29(NLW_U0_LMB_Data_Read_29_UNCONNECTED[0:31]),
        .LMB_Data_Read_3(NLW_U0_LMB_Data_Read_3_UNCONNECTED[0:31]),
        .LMB_Data_Read_30(NLW_U0_LMB_Data_Read_30_UNCONNECTED[0:31]),
        .LMB_Data_Read_31(NLW_U0_LMB_Data_Read_31_UNCONNECTED[0:31]),
        .LMB_Data_Read_4(NLW_U0_LMB_Data_Read_4_UNCONNECTED[0:31]),
        .LMB_Data_Read_5(NLW_U0_LMB_Data_Read_5_UNCONNECTED[0:31]),
        .LMB_Data_Read_6(NLW_U0_LMB_Data_Read_6_UNCONNECTED[0:31]),
        .LMB_Data_Read_7(NLW_U0_LMB_Data_Read_7_UNCONNECTED[0:31]),
        .LMB_Data_Read_8(NLW_U0_LMB_Data_Read_8_UNCONNECTED[0:31]),
        .LMB_Data_Read_9(NLW_U0_LMB_Data_Read_9_UNCONNECTED[0:31]),
        .LMB_Data_Write_0(NLW_U0_LMB_Data_Write_0_UNCONNECTED[0:31]),
        .LMB_Data_Write_1(NLW_U0_LMB_Data_Write_1_UNCONNECTED[0:31]),
        .LMB_Data_Write_10(NLW_U0_LMB_Data_Write_10_UNCONNECTED[0:31]),
        .LMB_Data_Write_11(NLW_U0_LMB_Data_Write_11_UNCONNECTED[0:31]),
        .LMB_Data_Write_12(NLW_U0_LMB_Data_Write_12_UNCONNECTED[0:31]),
        .LMB_Data_Write_13(NLW_U0_LMB_Data_Write_13_UNCONNECTED[0:31]),
        .LMB_Data_Write_14(NLW_U0_LMB_Data_Write_14_UNCONNECTED[0:31]),
        .LMB_Data_Write_15(NLW_U0_LMB_Data_Write_15_UNCONNECTED[0:31]),
        .LMB_Data_Write_16(NLW_U0_LMB_Data_Write_16_UNCONNECTED[0:31]),
        .LMB_Data_Write_17(NLW_U0_LMB_Data_Write_17_UNCONNECTED[0:31]),
        .LMB_Data_Write_18(NLW_U0_LMB_Data_Write_18_UNCONNECTED[0:31]),
        .LMB_Data_Write_19(NLW_U0_LMB_Data_Write_19_UNCONNECTED[0:31]),
        .LMB_Data_Write_2(NLW_U0_LMB_Data_Write_2_UNCONNECTED[0:31]),
        .LMB_Data_Write_20(NLW_U0_LMB_Data_Write_20_UNCONNECTED[0:31]),
        .LMB_Data_Write_21(NLW_U0_LMB_Data_Write_21_UNCONNECTED[0:31]),
        .LMB_Data_Write_22(NLW_U0_LMB_Data_Write_22_UNCONNECTED[0:31]),
        .LMB_Data_Write_23(NLW_U0_LMB_Data_Write_23_UNCONNECTED[0:31]),
        .LMB_Data_Write_24(NLW_U0_LMB_Data_Write_24_UNCONNECTED[0:31]),
        .LMB_Data_Write_25(NLW_U0_LMB_Data_Write_25_UNCONNECTED[0:31]),
        .LMB_Data_Write_26(NLW_U0_LMB_Data_Write_26_UNCONNECTED[0:31]),
        .LMB_Data_Write_27(NLW_U0_LMB_Data_Write_27_UNCONNECTED[0:31]),
        .LMB_Data_Write_28(NLW_U0_LMB_Data_Write_28_UNCONNECTED[0:31]),
        .LMB_Data_Write_29(NLW_U0_LMB_Data_Write_29_UNCONNECTED[0:31]),
        .LMB_Data_Write_3(NLW_U0_LMB_Data_Write_3_UNCONNECTED[0:31]),
        .LMB_Data_Write_30(NLW_U0_LMB_Data_Write_30_UNCONNECTED[0:31]),
        .LMB_Data_Write_31(NLW_U0_LMB_Data_Write_31_UNCONNECTED[0:31]),
        .LMB_Data_Write_4(NLW_U0_LMB_Data_Write_4_UNCONNECTED[0:31]),
        .LMB_Data_Write_5(NLW_U0_LMB_Data_Write_5_UNCONNECTED[0:31]),
        .LMB_Data_Write_6(NLW_U0_LMB_Data_Write_6_UNCONNECTED[0:31]),
        .LMB_Data_Write_7(NLW_U0_LMB_Data_Write_7_UNCONNECTED[0:31]),
        .LMB_Data_Write_8(NLW_U0_LMB_Data_Write_8_UNCONNECTED[0:31]),
        .LMB_Data_Write_9(NLW_U0_LMB_Data_Write_9_UNCONNECTED[0:31]),
        .LMB_Read_Strobe_0(NLW_U0_LMB_Read_Strobe_0_UNCONNECTED),
        .LMB_Read_Strobe_1(NLW_U0_LMB_Read_Strobe_1_UNCONNECTED),
        .LMB_Read_Strobe_10(NLW_U0_LMB_Read_Strobe_10_UNCONNECTED),
        .LMB_Read_Strobe_11(NLW_U0_LMB_Read_Strobe_11_UNCONNECTED),
        .LMB_Read_Strobe_12(NLW_U0_LMB_Read_Strobe_12_UNCONNECTED),
        .LMB_Read_Strobe_13(NLW_U0_LMB_Read_Strobe_13_UNCONNECTED),
        .LMB_Read_Strobe_14(NLW_U0_LMB_Read_Strobe_14_UNCONNECTED),
        .LMB_Read_Strobe_15(NLW_U0_LMB_Read_Strobe_15_UNCONNECTED),
        .LMB_Read_Strobe_16(NLW_U0_LMB_Read_Strobe_16_UNCONNECTED),
        .LMB_Read_Strobe_17(NLW_U0_LMB_Read_Strobe_17_UNCONNECTED),
        .LMB_Read_Strobe_18(NLW_U0_LMB_Read_Strobe_18_UNCONNECTED),
        .LMB_Read_Strobe_19(NLW_U0_LMB_Read_Strobe_19_UNCONNECTED),
        .LMB_Read_Strobe_2(NLW_U0_LMB_Read_Strobe_2_UNCONNECTED),
        .LMB_Read_Strobe_20(NLW_U0_LMB_Read_Strobe_20_UNCONNECTED),
        .LMB_Read_Strobe_21(NLW_U0_LMB_Read_Strobe_21_UNCONNECTED),
        .LMB_Read_Strobe_22(NLW_U0_LMB_Read_Strobe_22_UNCONNECTED),
        .LMB_Read_Strobe_23(NLW_U0_LMB_Read_Strobe_23_UNCONNECTED),
        .LMB_Read_Strobe_24(NLW_U0_LMB_Read_Strobe_24_UNCONNECTED),
        .LMB_Read_Strobe_25(NLW_U0_LMB_Read_Strobe_25_UNCONNECTED),
        .LMB_Read_Strobe_26(NLW_U0_LMB_Read_Strobe_26_UNCONNECTED),
        .LMB_Read_Strobe_27(NLW_U0_LMB_Read_Strobe_27_UNCONNECTED),
        .LMB_Read_Strobe_28(NLW_U0_LMB_Read_Strobe_28_UNCONNECTED),
        .LMB_Read_Strobe_29(NLW_U0_LMB_Read_Strobe_29_UNCONNECTED),
        .LMB_Read_Strobe_3(NLW_U0_LMB_Read_Strobe_3_UNCONNECTED),
        .LMB_Read_Strobe_30(NLW_U0_LMB_Read_Strobe_30_UNCONNECTED),
        .LMB_Read_Strobe_31(NLW_U0_LMB_Read_Strobe_31_UNCONNECTED),
        .LMB_Read_Strobe_4(NLW_U0_LMB_Read_Strobe_4_UNCONNECTED),
        .LMB_Read_Strobe_5(NLW_U0_LMB_Read_Strobe_5_UNCONNECTED),
        .LMB_Read_Strobe_6(NLW_U0_LMB_Read_Strobe_6_UNCONNECTED),
        .LMB_Read_Strobe_7(NLW_U0_LMB_Read_Strobe_7_UNCONNECTED),
        .LMB_Read_Strobe_8(NLW_U0_LMB_Read_Strobe_8_UNCONNECTED),
        .LMB_Read_Strobe_9(NLW_U0_LMB_Read_Strobe_9_UNCONNECTED),
        .LMB_Ready_0(NLW_U0_LMB_Ready_0_UNCONNECTED),
        .LMB_Ready_1(NLW_U0_LMB_Ready_1_UNCONNECTED),
        .LMB_Ready_10(NLW_U0_LMB_Ready_10_UNCONNECTED),
        .LMB_Ready_11(NLW_U0_LMB_Ready_11_UNCONNECTED),
        .LMB_Ready_12(NLW_U0_LMB_Ready_12_UNCONNECTED),
        .LMB_Ready_13(NLW_U0_LMB_Ready_13_UNCONNECTED),
        .LMB_Ready_14(NLW_U0_LMB_Ready_14_UNCONNECTED),
        .LMB_Ready_15(NLW_U0_LMB_Ready_15_UNCONNECTED),
        .LMB_Ready_16(NLW_U0_LMB_Ready_16_UNCONNECTED),
        .LMB_Ready_17(NLW_U0_LMB_Ready_17_UNCONNECTED),
        .LMB_Ready_18(NLW_U0_LMB_Ready_18_UNCONNECTED),
        .LMB_Ready_19(NLW_U0_LMB_Ready_19_UNCONNECTED),
        .LMB_Ready_2(NLW_U0_LMB_Ready_2_UNCONNECTED),
        .LMB_Ready_20(NLW_U0_LMB_Ready_20_UNCONNECTED),
        .LMB_Ready_21(NLW_U0_LMB_Ready_21_UNCONNECTED),
        .LMB_Ready_22(NLW_U0_LMB_Ready_22_UNCONNECTED),
        .LMB_Ready_23(NLW_U0_LMB_Ready_23_UNCONNECTED),
        .LMB_Ready_24(NLW_U0_LMB_Ready_24_UNCONNECTED),
        .LMB_Ready_25(NLW_U0_LMB_Ready_25_UNCONNECTED),
        .LMB_Ready_26(NLW_U0_LMB_Ready_26_UNCONNECTED),
        .LMB_Ready_27(NLW_U0_LMB_Ready_27_UNCONNECTED),
        .LMB_Ready_28(NLW_U0_LMB_Ready_28_UNCONNECTED),
        .LMB_Ready_29(NLW_U0_LMB_Ready_29_UNCONNECTED),
        .LMB_Ready_3(NLW_U0_LMB_Ready_3_UNCONNECTED),
        .LMB_Ready_30(NLW_U0_LMB_Ready_30_UNCONNECTED),
        .LMB_Ready_31(NLW_U0_LMB_Ready_31_UNCONNECTED),
        .LMB_Ready_4(NLW_U0_LMB_Ready_4_UNCONNECTED),
        .LMB_Ready_5(NLW_U0_LMB_Ready_5_UNCONNECTED),
        .LMB_Ready_6(NLW_U0_LMB_Ready_6_UNCONNECTED),
        .LMB_Ready_7(NLW_U0_LMB_Ready_7_UNCONNECTED),
        .LMB_Ready_8(NLW_U0_LMB_Ready_8_UNCONNECTED),
        .LMB_Ready_9(NLW_U0_LMB_Ready_9_UNCONNECTED),
        .LMB_UE_0(NLW_U0_LMB_UE_0_UNCONNECTED),
        .LMB_UE_1(NLW_U0_LMB_UE_1_UNCONNECTED),
        .LMB_UE_10(NLW_U0_LMB_UE_10_UNCONNECTED),
        .LMB_UE_11(NLW_U0_LMB_UE_11_UNCONNECTED),
        .LMB_UE_12(NLW_U0_LMB_UE_12_UNCONNECTED),
        .LMB_UE_13(NLW_U0_LMB_UE_13_UNCONNECTED),
        .LMB_UE_14(NLW_U0_LMB_UE_14_UNCONNECTED),
        .LMB_UE_15(NLW_U0_LMB_UE_15_UNCONNECTED),
        .LMB_UE_16(NLW_U0_LMB_UE_16_UNCONNECTED),
        .LMB_UE_17(NLW_U0_LMB_UE_17_UNCONNECTED),
        .LMB_UE_18(NLW_U0_LMB_UE_18_UNCONNECTED),
        .LMB_UE_19(NLW_U0_LMB_UE_19_UNCONNECTED),
        .LMB_UE_2(NLW_U0_LMB_UE_2_UNCONNECTED),
        .LMB_UE_20(NLW_U0_LMB_UE_20_UNCONNECTED),
        .LMB_UE_21(NLW_U0_LMB_UE_21_UNCONNECTED),
        .LMB_UE_22(NLW_U0_LMB_UE_22_UNCONNECTED),
        .LMB_UE_23(NLW_U0_LMB_UE_23_UNCONNECTED),
        .LMB_UE_24(NLW_U0_LMB_UE_24_UNCONNECTED),
        .LMB_UE_25(NLW_U0_LMB_UE_25_UNCONNECTED),
        .LMB_UE_26(NLW_U0_LMB_UE_26_UNCONNECTED),
        .LMB_UE_27(NLW_U0_LMB_UE_27_UNCONNECTED),
        .LMB_UE_28(NLW_U0_LMB_UE_28_UNCONNECTED),
        .LMB_UE_29(NLW_U0_LMB_UE_29_UNCONNECTED),
        .LMB_UE_3(NLW_U0_LMB_UE_3_UNCONNECTED),
        .LMB_UE_30(NLW_U0_LMB_UE_30_UNCONNECTED),
        .LMB_UE_31(NLW_U0_LMB_UE_31_UNCONNECTED),
        .LMB_UE_4(NLW_U0_LMB_UE_4_UNCONNECTED),
        .LMB_UE_5(NLW_U0_LMB_UE_5_UNCONNECTED),
        .LMB_UE_6(NLW_U0_LMB_UE_6_UNCONNECTED),
        .LMB_UE_7(NLW_U0_LMB_UE_7_UNCONNECTED),
        .LMB_UE_8(NLW_U0_LMB_UE_8_UNCONNECTED),
        .LMB_UE_9(NLW_U0_LMB_UE_9_UNCONNECTED),
        .LMB_Wait_0(NLW_U0_LMB_Wait_0_UNCONNECTED),
        .LMB_Wait_1(NLW_U0_LMB_Wait_1_UNCONNECTED),
        .LMB_Wait_10(NLW_U0_LMB_Wait_10_UNCONNECTED),
        .LMB_Wait_11(NLW_U0_LMB_Wait_11_UNCONNECTED),
        .LMB_Wait_12(NLW_U0_LMB_Wait_12_UNCONNECTED),
        .LMB_Wait_13(NLW_U0_LMB_Wait_13_UNCONNECTED),
        .LMB_Wait_14(NLW_U0_LMB_Wait_14_UNCONNECTED),
        .LMB_Wait_15(NLW_U0_LMB_Wait_15_UNCONNECTED),
        .LMB_Wait_16(NLW_U0_LMB_Wait_16_UNCONNECTED),
        .LMB_Wait_17(NLW_U0_LMB_Wait_17_UNCONNECTED),
        .LMB_Wait_18(NLW_U0_LMB_Wait_18_UNCONNECTED),
        .LMB_Wait_19(NLW_U0_LMB_Wait_19_UNCONNECTED),
        .LMB_Wait_2(NLW_U0_LMB_Wait_2_UNCONNECTED),
        .LMB_Wait_20(NLW_U0_LMB_Wait_20_UNCONNECTED),
        .LMB_Wait_21(NLW_U0_LMB_Wait_21_UNCONNECTED),
        .LMB_Wait_22(NLW_U0_LMB_Wait_22_UNCONNECTED),
        .LMB_Wait_23(NLW_U0_LMB_Wait_23_UNCONNECTED),
        .LMB_Wait_24(NLW_U0_LMB_Wait_24_UNCONNECTED),
        .LMB_Wait_25(NLW_U0_LMB_Wait_25_UNCONNECTED),
        .LMB_Wait_26(NLW_U0_LMB_Wait_26_UNCONNECTED),
        .LMB_Wait_27(NLW_U0_LMB_Wait_27_UNCONNECTED),
        .LMB_Wait_28(NLW_U0_LMB_Wait_28_UNCONNECTED),
        .LMB_Wait_29(NLW_U0_LMB_Wait_29_UNCONNECTED),
        .LMB_Wait_3(NLW_U0_LMB_Wait_3_UNCONNECTED),
        .LMB_Wait_30(NLW_U0_LMB_Wait_30_UNCONNECTED),
        .LMB_Wait_31(NLW_U0_LMB_Wait_31_UNCONNECTED),
        .LMB_Wait_4(NLW_U0_LMB_Wait_4_UNCONNECTED),
        .LMB_Wait_5(NLW_U0_LMB_Wait_5_UNCONNECTED),
        .LMB_Wait_6(NLW_U0_LMB_Wait_6_UNCONNECTED),
        .LMB_Wait_7(NLW_U0_LMB_Wait_7_UNCONNECTED),
        .LMB_Wait_8(NLW_U0_LMB_Wait_8_UNCONNECTED),
        .LMB_Wait_9(NLW_U0_LMB_Wait_9_UNCONNECTED),
        .LMB_Write_Strobe_0(NLW_U0_LMB_Write_Strobe_0_UNCONNECTED),
        .LMB_Write_Strobe_1(NLW_U0_LMB_Write_Strobe_1_UNCONNECTED),
        .LMB_Write_Strobe_10(NLW_U0_LMB_Write_Strobe_10_UNCONNECTED),
        .LMB_Write_Strobe_11(NLW_U0_LMB_Write_Strobe_11_UNCONNECTED),
        .LMB_Write_Strobe_12(NLW_U0_LMB_Write_Strobe_12_UNCONNECTED),
        .LMB_Write_Strobe_13(NLW_U0_LMB_Write_Strobe_13_UNCONNECTED),
        .LMB_Write_Strobe_14(NLW_U0_LMB_Write_Strobe_14_UNCONNECTED),
        .LMB_Write_Strobe_15(NLW_U0_LMB_Write_Strobe_15_UNCONNECTED),
        .LMB_Write_Strobe_16(NLW_U0_LMB_Write_Strobe_16_UNCONNECTED),
        .LMB_Write_Strobe_17(NLW_U0_LMB_Write_Strobe_17_UNCONNECTED),
        .LMB_Write_Strobe_18(NLW_U0_LMB_Write_Strobe_18_UNCONNECTED),
        .LMB_Write_Strobe_19(NLW_U0_LMB_Write_Strobe_19_UNCONNECTED),
        .LMB_Write_Strobe_2(NLW_U0_LMB_Write_Strobe_2_UNCONNECTED),
        .LMB_Write_Strobe_20(NLW_U0_LMB_Write_Strobe_20_UNCONNECTED),
        .LMB_Write_Strobe_21(NLW_U0_LMB_Write_Strobe_21_UNCONNECTED),
        .LMB_Write_Strobe_22(NLW_U0_LMB_Write_Strobe_22_UNCONNECTED),
        .LMB_Write_Strobe_23(NLW_U0_LMB_Write_Strobe_23_UNCONNECTED),
        .LMB_Write_Strobe_24(NLW_U0_LMB_Write_Strobe_24_UNCONNECTED),
        .LMB_Write_Strobe_25(NLW_U0_LMB_Write_Strobe_25_UNCONNECTED),
        .LMB_Write_Strobe_26(NLW_U0_LMB_Write_Strobe_26_UNCONNECTED),
        .LMB_Write_Strobe_27(NLW_U0_LMB_Write_Strobe_27_UNCONNECTED),
        .LMB_Write_Strobe_28(NLW_U0_LMB_Write_Strobe_28_UNCONNECTED),
        .LMB_Write_Strobe_29(NLW_U0_LMB_Write_Strobe_29_UNCONNECTED),
        .LMB_Write_Strobe_3(NLW_U0_LMB_Write_Strobe_3_UNCONNECTED),
        .LMB_Write_Strobe_30(NLW_U0_LMB_Write_Strobe_30_UNCONNECTED),
        .LMB_Write_Strobe_31(NLW_U0_LMB_Write_Strobe_31_UNCONNECTED),
        .LMB_Write_Strobe_4(NLW_U0_LMB_Write_Strobe_4_UNCONNECTED),
        .LMB_Write_Strobe_5(NLW_U0_LMB_Write_Strobe_5_UNCONNECTED),
        .LMB_Write_Strobe_6(NLW_U0_LMB_Write_Strobe_6_UNCONNECTED),
        .LMB_Write_Strobe_7(NLW_U0_LMB_Write_Strobe_7_UNCONNECTED),
        .LMB_Write_Strobe_8(NLW_U0_LMB_Write_Strobe_8_UNCONNECTED),
        .LMB_Write_Strobe_9(NLW_U0_LMB_Write_Strobe_9_UNCONNECTED),
        .M_AXIS_ACLK(NLW_U0_M_AXIS_ACLK_UNCONNECTED),
        .M_AXIS_ARESETN(NLW_U0_M_AXIS_ARESETN_UNCONNECTED),
        .M_AXIS_TDATA(NLW_U0_M_AXIS_TDATA_UNCONNECTED[31:0]),
        .M_AXIS_TID(NLW_U0_M_AXIS_TID_UNCONNECTED[6:0]),
        .M_AXIS_TREADY(NLW_U0_M_AXIS_TREADY_UNCONNECTED),
        .M_AXIS_TVALID(NLW_U0_M_AXIS_TVALID_UNCONNECTED),
        .M_AXI_ACLK(NLW_U0_M_AXI_ACLK_UNCONNECTED),
        .M_AXI_ARADDR(NLW_U0_M_AXI_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_ARBURST(NLW_U0_M_AXI_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_ARCACHE(NLW_U0_M_AXI_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_ARESETN(NLW_U0_M_AXI_ARESETN_UNCONNECTED),
        .M_AXI_ARID(NLW_U0_M_AXI_ARID_UNCONNECTED[0]),
        .M_AXI_ARLEN(NLW_U0_M_AXI_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_ARLOCK(NLW_U0_M_AXI_ARLOCK_UNCONNECTED),
        .M_AXI_ARPROT(NLW_U0_M_AXI_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_ARQOS(NLW_U0_M_AXI_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_ARREADY(NLW_U0_M_AXI_ARREADY_UNCONNECTED),
        .M_AXI_ARSIZE(NLW_U0_M_AXI_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_ARVALID(NLW_U0_M_AXI_ARVALID_UNCONNECTED),
        .M_AXI_AWADDR(NLW_U0_M_AXI_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_AWBURST(NLW_U0_M_AXI_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_AWCACHE(NLW_U0_M_AXI_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_AWID(NLW_U0_M_AXI_AWID_UNCONNECTED[0]),
        .M_AXI_AWLEN(NLW_U0_M_AXI_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_AWLOCK(NLW_U0_M_AXI_AWLOCK_UNCONNECTED),
        .M_AXI_AWPROT(NLW_U0_M_AXI_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_AWQOS(NLW_U0_M_AXI_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_AWREADY(NLW_U0_M_AXI_AWREADY_UNCONNECTED),
        .M_AXI_AWSIZE(NLW_U0_M_AXI_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_AWVALID(NLW_U0_M_AXI_AWVALID_UNCONNECTED),
        .M_AXI_BID(NLW_U0_M_AXI_BID_UNCONNECTED[0]),
        .M_AXI_BREADY(NLW_U0_M_AXI_BREADY_UNCONNECTED),
        .M_AXI_BRESP(NLW_U0_M_AXI_BRESP_UNCONNECTED[1:0]),
        .M_AXI_BVALID(NLW_U0_M_AXI_BVALID_UNCONNECTED),
        .M_AXI_RDATA(NLW_U0_M_AXI_RDATA_UNCONNECTED[31:0]),
        .M_AXI_RID(NLW_U0_M_AXI_RID_UNCONNECTED[0]),
        .M_AXI_RLAST(NLW_U0_M_AXI_RLAST_UNCONNECTED),
        .M_AXI_RREADY(NLW_U0_M_AXI_RREADY_UNCONNECTED),
        .M_AXI_RRESP(NLW_U0_M_AXI_RRESP_UNCONNECTED[1:0]),
        .M_AXI_RVALID(NLW_U0_M_AXI_RVALID_UNCONNECTED),
        .M_AXI_WDATA(NLW_U0_M_AXI_WDATA_UNCONNECTED[31:0]),
        .M_AXI_WLAST(NLW_U0_M_AXI_WLAST_UNCONNECTED),
        .M_AXI_WREADY(NLW_U0_M_AXI_WREADY_UNCONNECTED),
        .M_AXI_WSTRB(NLW_U0_M_AXI_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_WVALID(NLW_U0_M_AXI_WVALID_UNCONNECTED),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_ARADDR({S_AXI_ARADDR[3:2],NLW_U0_S_AXI_ARADDR_UNCONNECTED[1:0]}),
        .S_AXI_ARESETN(S_AXI_ARESETN),
        .S_AXI_ARREADY(S_AXI_ARREADY),
        .S_AXI_ARVALID(S_AXI_ARVALID),
        .S_AXI_AWADDR(NLW_U0_S_AXI_AWADDR_UNCONNECTED[3:0]),
        .S_AXI_AWREADY(S_AXI_AWREADY),
        .S_AXI_AWVALID(S_AXI_AWVALID),
        .S_AXI_BREADY(NLW_U0_S_AXI_BREADY_UNCONNECTED),
        .S_AXI_BRESP(NLW_U0_S_AXI_BRESP_UNCONNECTED[1:0]),
        .S_AXI_BVALID(S_AXI_BVALID),
        .S_AXI_RDATA({NLW_U0_S_AXI_RDATA_UNCONNECTED[31:8],S_AXI_RDATA[7:0]}),
        .S_AXI_RREADY(NLW_U0_S_AXI_RREADY_UNCONNECTED),
        .S_AXI_RRESP(NLW_U0_S_AXI_RRESP_UNCONNECTED[1:0]),
        .S_AXI_RVALID(S_AXI_RVALID),
        .S_AXI_WDATA({NLW_U0_S_AXI_WDATA_UNCONNECTED[31:8],S_AXI_WDATA[7:0]}),
        .S_AXI_WREADY(S_AXI_WREADY),
        .S_AXI_WSTRB(NLW_U0_S_AXI_WSTRB_UNCONNECTED[3:0]),
        .S_AXI_WVALID(S_AXI_WVALID),
        .Scan_En(NLW_U0_Scan_En_UNCONNECTED),
        .Scan_Reset(NLW_U0_Scan_Reset_UNCONNECTED),
        .Scan_Reset_Sel(NLW_U0_Scan_Reset_Sel_UNCONNECTED),
        .TRACE_CLK(NLW_U0_TRACE_CLK_UNCONNECTED),
        .TRACE_CLK_OUT(NLW_U0_TRACE_CLK_OUT_UNCONNECTED),
        .TRACE_CTL(NLW_U0_TRACE_CTL_UNCONNECTED),
        .TRACE_DATA(NLW_U0_TRACE_DATA_UNCONNECTED[31:0]),
        .Trig_Ack_In_0(NLW_U0_Trig_Ack_In_0_UNCONNECTED),
        .Trig_Ack_In_1(NLW_U0_Trig_Ack_In_1_UNCONNECTED),
        .Trig_Ack_In_2(NLW_U0_Trig_Ack_In_2_UNCONNECTED),
        .Trig_Ack_In_3(NLW_U0_Trig_Ack_In_3_UNCONNECTED),
        .Trig_Ack_Out_0(NLW_U0_Trig_Ack_Out_0_UNCONNECTED),
        .Trig_Ack_Out_1(NLW_U0_Trig_Ack_Out_1_UNCONNECTED),
        .Trig_Ack_Out_2(NLW_U0_Trig_Ack_Out_2_UNCONNECTED),
        .Trig_Ack_Out_3(NLW_U0_Trig_Ack_Out_3_UNCONNECTED),
        .Trig_In_0(NLW_U0_Trig_In_0_UNCONNECTED),
        .Trig_In_1(NLW_U0_Trig_In_1_UNCONNECTED),
        .Trig_In_2(NLW_U0_Trig_In_2_UNCONNECTED),
        .Trig_In_3(NLW_U0_Trig_In_3_UNCONNECTED),
        .Trig_Out_0(NLW_U0_Trig_Out_0_UNCONNECTED),
        .Trig_Out_1(NLW_U0_Trig_Out_1_UNCONNECTED),
        .Trig_Out_2(NLW_U0_Trig_Out_2_UNCONNECTED),
        .Trig_Out_3(NLW_U0_Trig_Out_3_UNCONNECTED),
        .bscan_ext_bscanid_en(NLW_U0_bscan_ext_bscanid_en_UNCONNECTED),
        .bscan_ext_capture(NLW_U0_bscan_ext_capture_UNCONNECTED),
        .bscan_ext_drck(NLW_U0_bscan_ext_drck_UNCONNECTED),
        .bscan_ext_reset(NLW_U0_bscan_ext_reset_UNCONNECTED),
        .bscan_ext_sel(NLW_U0_bscan_ext_sel_UNCONNECTED),
        .bscan_ext_shift(NLW_U0_bscan_ext_shift_UNCONNECTED),
        .bscan_ext_tck(NLW_U0_bscan_ext_tck_UNCONNECTED),
        .bscan_ext_tdi(NLW_U0_bscan_ext_tdi_UNCONNECTED),
        .bscan_ext_tdo(NLW_U0_bscan_ext_tdo_UNCONNECTED),
        .bscan_ext_update(NLW_U0_bscan_ext_update_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "bd_3914_microblaze_I_0,MicroBlaze,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "bd_3914_microblaze_I_0" *) 
(* X_CORE_INFO = "MicroBlaze,Vivado 2018.3" *) 
module cpu_bd_3914_microblaze_I_0
   (Clk,
    Reset,
    Interrupt,
    Interrupt_Address,
    Interrupt_Ack,
    Ext_BRK,
    Ext_NM_BRK,
    Dbg_Stop,
    MB_Halted,
    Wakeup,
    Sleep,
    Hibernate,
    Suspend,
    Dbg_Wakeup,
    Dbg_Continue,
    Reset_Mode,
    Pause,
    Pause_Ack,
    Non_Secure,
    Instr_Addr,
    Instr,
    IFetch,
    I_AS,
    IReady,
    IWAIT,
    ICE,
    IUE,
    Data_Addr,
    Data_Read,
    Data_Write,
    D_AS,
    Read_Strobe,
    Write_Strobe,
    DReady,
    DWait,
    DCE,
    DUE,
    Byte_Enable,
    M_AXI_DP_AWADDR,
    M_AXI_DP_AWPROT,
    M_AXI_DP_AWVALID,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WDATA,
    M_AXI_DP_WSTRB,
    M_AXI_DP_WVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_BRESP,
    M_AXI_DP_BVALID,
    M_AXI_DP_BREADY,
    M_AXI_DP_ARADDR,
    M_AXI_DP_ARPROT,
    M_AXI_DP_ARVALID,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RDATA,
    M_AXI_DP_RRESP,
    M_AXI_DP_RVALID,
    M_AXI_DP_RREADY,
    Dbg_Clk,
    Dbg_TDI,
    Dbg_TDO,
    Dbg_Reg_En,
    Dbg_Shift,
    Dbg_Capture,
    Dbg_Update,
    Debug_Rst,
    Dbg_Disable,
    Trace_Instruction,
    Trace_Valid_Instr,
    Trace_PC,
    Trace_Reg_Write,
    Trace_Reg_Addr,
    Trace_MSR_Reg,
    Trace_PID_Reg,
    Trace_New_Reg_Value,
    Trace_Exception_Taken,
    Trace_Exception_Kind,
    Trace_Jump_Taken,
    Trace_Delay_Slot,
    Trace_Data_Address,
    Trace_Data_Write_Value,
    Trace_Data_Byte_Enable,
    Trace_Data_Access,
    Trace_Data_Read,
    Trace_Data_Write,
    Trace_DCache_Req,
    Trace_DCache_Hit,
    Trace_DCache_Rdy,
    Trace_DCache_Read,
    Trace_ICache_Req,
    Trace_ICache_Hit,
    Trace_ICache_Rdy,
    Trace_OF_PipeRun,
    Trace_EX_PipeRun,
    Trace_MEM_PipeRun,
    Trace_MB_Halted,
    Trace_Jump_Hit);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.CLK, ASSOCIATED_BUSIF M0_AXIS:S0_AXIS:M1_AXIS:S1_AXIS:M2_AXIS:S2_AXIS:M3_AXIS:S3_AXIS:M4_AXIS:S4_AXIS:M5_AXIS:S5_AXIS:M6_AXIS:S6_AXIS:M7_AXIS:S7_AXIS:M8_AXIS:S8_AXIS:M9_AXIS:S9_AXIS:M10_AXIS:S10_AXIS:M11_AXIS:S11_AXIS:M12_AXIS:S12_AXIS:M13_AXIS:S13_AXIS:M14_AXIS:S14_AXIS:M15_AXIS:S15_AXIS:DLMB:ILMB:M_AXI_DP:M_AXI_IP:M_AXI_DC:M_AXI_IC:M_ACE_DC:M_ACE_IC:MON_DLMB:MON_ILMB:MON_AXI_DP:MON_AXI_IP:MON_AXI_DC:MON_AXI_IC:MON_ACE_DC:MON_ACE_IC, ASSOCIATED_RESET Reset, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.RESET RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.RESET, POLARITY ACTIVE_HIGH, TYPE PROCESSOR, INSERT_VIP 0" *) input Reset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT INTERRUPT" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME INTERRUPT, SENSITIVITY LEVEL_HIGH, LOW_LATENCY 0" *) input Interrupt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT ADDRESS" *) input [0:31]Interrupt_Address;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT ACK" *) output [0:1]Interrupt_Ack;
  input Ext_BRK;
  input Ext_NM_BRK;
  input Dbg_Stop;
  output MB_Halted;
  input [0:1]Wakeup;
  output Sleep;
  output Hibernate;
  output Suspend;
  output Dbg_Wakeup;
  output Dbg_Continue;
  input [0:1]Reset_Mode;
  input Pause;
  output Pause_Ack;
  input [0:3]Non_Secure;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB ABUS" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ILMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_ONLY" *) output [0:31]Instr_Addr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB READDBUS" *) input [0:31]Instr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB READSTROBE" *) output IFetch;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB ADDRSTROBE" *) output I_AS;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB READY" *) input IReady;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB WAIT" *) input IWAIT;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB CE" *) input ICE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB UE" *) input IUE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB ABUS" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME DLMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE" *) output [0:31]Data_Addr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB READDBUS" *) input [0:31]Data_Read;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB WRITEDBUS" *) output [0:31]Data_Write;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB ADDRSTROBE" *) output D_AS;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB READSTROBE" *) output Read_Strobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB WRITESTROBE" *) output Write_Strobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB READY" *) input DReady;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB WAIT" *) input DWait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB CE" *) input DCE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB UE" *) input DUE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB BE" *) output [0:3]Byte_Enable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWADDR" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M_AXI_DP, ID_WIDTH 0, READ_WRITE_MODE READ_WRITE, SUPPORTS_NARROW_BURST 0, HAS_BURST 0, HAS_LOCK 0, DATA_WIDTH 32, ADDR_WIDTH 32, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, MAX_BURST_LENGTH 1, PROTOCOL AXI4LITE, FREQ_HZ 100000000, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, HAS_PROT 1, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, PHASE 0.000, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) output [31:0]M_AXI_DP_AWADDR;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWPROT" *) output [2:0]M_AXI_DP_AWPROT;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWVALID" *) output M_AXI_DP_AWVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWREADY" *) input M_AXI_DP_AWREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP WDATA" *) output [31:0]M_AXI_DP_WDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP WSTRB" *) output [3:0]M_AXI_DP_WSTRB;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP WVALID" *) output M_AXI_DP_WVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP WREADY" *) input M_AXI_DP_WREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP BRESP" *) input [1:0]M_AXI_DP_BRESP;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP BVALID" *) input M_AXI_DP_BVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP BREADY" *) output M_AXI_DP_BREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARADDR" *) output [31:0]M_AXI_DP_ARADDR;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARPROT" *) output [2:0]M_AXI_DP_ARPROT;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARVALID" *) output M_AXI_DP_ARVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARREADY" *) input M_AXI_DP_ARREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP RDATA" *) input [31:0]M_AXI_DP_RDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP RRESP" *) input [1:0]M_AXI_DP_RRESP;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP RVALID" *) input M_AXI_DP_RVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP RREADY" *) output M_AXI_DP_RREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG CLK" *) input Dbg_Clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG TDI" *) input Dbg_TDI;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG TDO" *) output Dbg_TDO;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG REG_EN" *) input [0:7]Dbg_Reg_En;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG SHIFT" *) input Dbg_Shift;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG CAPTURE" *) input Dbg_Capture;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG UPDATE" *) input Dbg_Update;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG RST" *) input Debug_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG DISABLE" *) input Dbg_Disable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE INSTRUCTION" *) output [0:31]Trace_Instruction;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE VALID_INSTR" *) output Trace_Valid_Instr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE PC" *) output [0:31]Trace_PC;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE REG_WRITE" *) output Trace_Reg_Write;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE REG_ADDR" *) output [0:4]Trace_Reg_Addr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE MSR_REG" *) output [0:14]Trace_MSR_Reg;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE PID_REG" *) output [0:7]Trace_PID_Reg;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE NEW_REG_VALUE" *) output [0:31]Trace_New_Reg_Value;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE EXCEPTION_TAKEN" *) output Trace_Exception_Taken;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE EXCEPTION_KIND" *) output [0:4]Trace_Exception_Kind;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE JUMP_TAKEN" *) output Trace_Jump_Taken;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DELAY_SLOT" *) output Trace_Delay_Slot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_ADDRESS" *) output [0:31]Trace_Data_Address;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_WRITE_VALUE" *) output [0:31]Trace_Data_Write_Value;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_BYTE_ENABLE" *) output [0:3]Trace_Data_Byte_Enable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_ACCESS" *) output Trace_Data_Access;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_READ" *) output Trace_Data_Read;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DATA_WRITE" *) output Trace_Data_Write;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DCACHE_REQ" *) output Trace_DCache_Req;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DCACHE_HIT" *) output Trace_DCache_Hit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DCACHE_RDY" *) output Trace_DCache_Rdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE DCACHE_READ" *) output Trace_DCache_Read;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE ICACHE_REQ" *) output Trace_ICache_Req;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE ICACHE_HIT" *) output Trace_ICache_Hit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE ICACHE_RDY" *) output Trace_ICache_Rdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE OF_PIPERUN" *) output Trace_OF_PipeRun;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE EX_PIPERUN" *) output Trace_EX_PipeRun;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE MEM_PIPERUN" *) output Trace_MEM_PipeRun;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE MB_HALTED" *) output Trace_MB_Halted;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbtrace:2.0 TRACE JUMP_HIT" *) output Trace_Jump_Hit;

  wire [0:3]Byte_Enable;
  wire Clk;
  wire DReady;
  wire DWait;
  wire D_AS;
  wire [0:31]Data_Addr;
  wire [0:31]Data_Read;
  wire [0:31]Data_Write;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_Update;
  wire Dbg_Wakeup;
  wire Debug_Rst;
  wire IReady;
  wire I_AS;
  wire [0:31]Instr;
  wire [0:31]Instr_Addr;
  wire [31:0]M_AXI_DP_ARADDR;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire [31:0]M_AXI_DP_WDATA;
  wire M_AXI_DP_WREADY;
  wire M_AXI_DP_WVALID;
  wire Read_Strobe;
  wire Reset;
  wire [0:1]Wakeup;
  wire Write_Strobe;
  wire NLW_U0_Config_Reset_UNCONNECTED;
  wire NLW_U0_DCE_UNCONNECTED;
  wire NLW_U0_DEBUG_ACLK_UNCONNECTED;
  wire NLW_U0_DEBUG_ARESETN_UNCONNECTED;
  wire NLW_U0_DUE_UNCONNECTED;
  wire NLW_U0_Dbg_ARREADY_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_UNCONNECTED;
  wire NLW_U0_Dbg_Continue_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_UNCONNECTED;
  wire NLW_U0_Dbg_Intr_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_UNCONNECTED;
  wire NLW_U0_Dbg_Stop_UNCONNECTED;
  wire NLW_U0_Dbg_Trace_Clk_UNCONNECTED;
  wire NLW_U0_Dbg_Trace_Ready_UNCONNECTED;
  wire NLW_U0_Dbg_Trace_Valid_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_UNCONNECTED;
  wire NLW_U0_Ext_BRK_UNCONNECTED;
  wire NLW_U0_Ext_NM_BRK_UNCONNECTED;
  wire NLW_U0_Hibernate_UNCONNECTED;
  wire NLW_U0_ICE_UNCONNECTED;
  wire NLW_U0_IFetch_UNCONNECTED;
  wire NLW_U0_IUE_UNCONNECTED;
  wire NLW_U0_IWAIT_UNCONNECTED;
  wire NLW_U0_Interrupt_UNCONNECTED;
  wire NLW_U0_M0_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M0_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M0_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M10_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M10_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M10_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M11_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M11_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M11_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M12_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M12_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M12_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M13_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M13_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M13_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M14_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M14_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M14_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M15_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M15_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M15_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M1_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M1_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M1_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M2_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M2_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M2_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M3_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M3_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M3_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M4_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M4_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M4_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M5_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M5_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M5_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M6_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M6_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M6_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M7_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M7_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M7_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M8_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M8_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M8_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M9_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M9_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_M9_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_MB_Error_UNCONNECTED;
  wire NLW_U0_MB_Halted_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ACREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ACVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ARREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_AWREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_BVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CDLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CDREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CDVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CRREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CRVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_RACK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_RLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_RVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WACK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_RLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ACREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ACVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ARREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_AWREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_BVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CDLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CDREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CDVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CRREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CRVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_RACK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_RLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_RVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WACK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_ARREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_AWREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_BVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_RLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_RVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_WREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_WVALID_UNCONNECTED;
  wire NLW_U0_Mb_Reset_UNCONNECTED;
  wire NLW_U0_Pause_UNCONNECTED;
  wire NLW_U0_Pause_Ack_UNCONNECTED;
  wire NLW_U0_S0_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S0_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S0_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S10_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S10_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S10_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S11_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S11_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S11_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S12_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S12_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S12_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S13_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S13_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S13_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S14_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S14_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S14_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S15_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S15_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S15_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S1_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S1_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S1_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S2_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S2_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S2_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S3_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S3_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S3_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S4_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S4_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S4_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S5_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S5_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S5_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S6_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S6_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S6_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S7_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S7_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S7_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S8_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S8_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S8_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_S9_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_S9_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S9_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_Scan_En_UNCONNECTED;
  wire NLW_U0_Scan_Reset_UNCONNECTED;
  wire NLW_U0_Scan_Reset_Sel_UNCONNECTED;
  wire NLW_U0_Sleep_UNCONNECTED;
  wire NLW_U0_Suspend_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Hit_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Rdy_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Read_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Req_UNCONNECTED;
  wire NLW_U0_Trace_Data_Access_UNCONNECTED;
  wire NLW_U0_Trace_Data_Read_UNCONNECTED;
  wire NLW_U0_Trace_Data_Write_UNCONNECTED;
  wire NLW_U0_Trace_Delay_Slot_UNCONNECTED;
  wire NLW_U0_Trace_EX_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_Exception_Taken_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Hit_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Rdy_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Req_UNCONNECTED;
  wire NLW_U0_Trace_Jump_Hit_UNCONNECTED;
  wire NLW_U0_Trace_Jump_Taken_UNCONNECTED;
  wire NLW_U0_Trace_MB_Halted_UNCONNECTED;
  wire NLW_U0_Trace_MEM_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_OF_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_Reg_Write_UNCONNECTED;
  wire NLW_U0_Trace_Valid_Instr_UNCONNECTED;
  wire [9:31]NLW_U0_Data_Addr_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_Trace_Data_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_UNCONNECTED;
  wire [0:31]NLW_U0_Instr_Addr_UNCONNECTED;
  wire [0:1]NLW_U0_Interrupt_Ack_UNCONNECTED;
  wire [0:31]NLW_U0_Interrupt_Address_UNCONNECTED;
  wire [0:4095]NLW_U0_LOCKSTEP_Master_Out_UNCONNECTED;
  wire [0:4095]NLW_U0_LOCKSTEP_Out_UNCONNECTED;
  wire [0:4095]NLW_U0_LOCKSTEP_Slave_In_UNCONNECTED;
  wire [31:0]NLW_U0_M0_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M10_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M11_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M12_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M13_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M14_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M15_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M1_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M2_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M3_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M4_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M5_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M6_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M7_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M8_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M9_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ACSNOOP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DC_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_ARSIZE_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_ARUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_AWCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DC_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWSIZE_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_AWUSER_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_BID_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_BUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_CDDATA_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_CRRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_RID_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_RRESP_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_RUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_WSTRB_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_WUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DP_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DP_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DP_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DP_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DP_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DP_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DP_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DP_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DP_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DP_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DP_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DP_AWSIZE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DP_BID_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DP_BRESP_UNCONNECTED;
  wire [31:8]NLW_U0_M_AXI_DP_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DP_RID_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DP_RRESP_UNCONNECTED;
  wire [31:8]NLW_U0_M_AXI_DP_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_WSTRB_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ACSNOOP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IC_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_ARSIZE_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_ARUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_AWCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IC_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWSIZE_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_AWUSER_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_BID_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_BUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_CDDATA_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_CRRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_RID_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_RRESP_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_RUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_WSTRB_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_WUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IP_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IP_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IP_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IP_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IP_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IP_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_AWSIZE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IP_BID_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IP_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IP_RID_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IP_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_WSTRB_UNCONNECTED;
  wire [0:3]NLW_U0_Non_Secure_UNCONNECTED;
  wire [255:0]NLW_U0_RAM_From_UNCONNECTED;
  wire [255:0]NLW_U0_RAM_To_UNCONNECTED;
  wire [0:1]NLW_U0_Reset_Mode_UNCONNECTED;
  wire [31:0]NLW_U0_S0_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S10_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S11_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S12_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S13_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S14_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S15_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S1_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S2_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S3_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S4_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S5_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S6_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S7_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S8_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_S9_AXIS_TDATA_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Data_Address_UNCONNECTED;
  wire [0:3]NLW_U0_Trace_Data_Byte_Enable_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Data_Write_Value_UNCONNECTED;
  wire [0:4]NLW_U0_Trace_Exception_Kind_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Instruction_UNCONNECTED;
  wire [0:14]NLW_U0_Trace_MSR_Reg_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_New_Reg_Value_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_PC_UNCONNECTED;
  wire [0:7]NLW_U0_Trace_PID_Reg_UNCONNECTED;
  wire [0:4]NLW_U0_Trace_Reg_Addr_UNCONNECTED;

  (* C_ADDR_TAG_BITS = "0" *) 
  (* C_ALLOW_DCACHE_WR = "1" *) 
  (* C_ALLOW_ICACHE_WR = "1" *) 
  (* C_AREA_OPTIMIZED = "1" *) 
  (* C_ASYNC_INTERRUPT = "1" *) 
  (* C_ASYNC_WAKEUP = "3" *) 
  (* C_AVOID_PRIMITIVES = "0" *) 
  (* C_BASE_VECTORS = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_BRANCH_TARGET_CACHE_SIZE = "0" *) 
  (* C_CACHE_BYTE_SIZE = "8192" *) 
  (* C_DADDR_SIZE = "32" *) 
  (* C_DATA_SIZE = "32" *) 
  (* C_DCACHE_ADDR_TAG = "0" *) 
  (* C_DCACHE_ALWAYS_USED = "0" *) 
  (* C_DCACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_DCACHE_BYTE_SIZE = "8192" *) 
  (* C_DCACHE_DATA_WIDTH = "0" *) 
  (* C_DCACHE_FORCE_TAG_LUTRAM = "0" *) 
  (* C_DCACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) 
  (* C_DCACHE_LINE_LEN = "4" *) 
  (* C_DCACHE_USE_WRITEBACK = "0" *) 
  (* C_DCACHE_VICTIMS = "0" *) 
  (* C_DEBUG_COUNTER_WIDTH = "32" *) 
  (* C_DEBUG_ENABLED = "1" *) 
  (* C_DEBUG_EVENT_COUNTERS = "5" *) 
  (* C_DEBUG_EXTERNAL_TRACE = "0" *) 
  (* C_DEBUG_INTERFACE = "0" *) 
  (* C_DEBUG_LATENCY_COUNTERS = "1" *) 
  (* C_DEBUG_PROFILE_SIZE = "0" *) 
  (* C_DEBUG_TRACE_ASYNC_RESET = "0" *) 
  (* C_DEBUG_TRACE_SIZE = "8192" *) 
  (* C_DIV_ZERO_EXCEPTION = "0" *) 
  (* C_DYNAMIC_BUS_SIZING = "0" *) 
  (* C_D_AXI = "1" *) 
  (* C_D_LMB = "1" *) 
  (* C_ECC_USE_CE_EXCEPTION = "0" *) 
  (* C_EDGE_IS_POSITIVE = "1" *) 
  (* C_ENDIANNESS = "1" *) 
  (* C_FAMILY = "virtex7" *) 
  (* C_FAULT_TOLERANT = "0" *) 
  (* C_FPU_EXCEPTION = "0" *) 
  (* C_FREQ = "100000000" *) 
  (* C_FSL_EXCEPTION = "0" *) 
  (* C_FSL_LINKS = "0" *) 
  (* C_IADDR_SIZE = "32" *) 
  (* C_ICACHE_ALWAYS_USED = "0" *) 
  (* C_ICACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_ICACHE_DATA_WIDTH = "0" *) 
  (* C_ICACHE_FORCE_TAG_LUTRAM = "0" *) 
  (* C_ICACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) 
  (* C_ICACHE_LINE_LEN = "4" *) 
  (* C_ICACHE_STREAMS = "0" *) 
  (* C_ICACHE_VICTIMS = "0" *) 
  (* C_ILL_OPCODE_EXCEPTION = "0" *) 
  (* C_IMPRECISE_EXCEPTIONS = "0" *) 
  (* C_INSTANCE = "bd_3914_microblaze_I_0" *) 
  (* C_INSTR_SIZE = "32" *) 
  (* C_INTERCONNECT = "2" *) 
  (* C_INTERRUPT_IS_EDGE = "0" *) 
  (* C_I_AXI = "0" *) 
  (* C_I_LMB = "1" *) 
  (* C_LMB_DATA_SIZE = "32" *) 
  (* C_LOCKSTEP_MASTER = "0" *) 
  (* C_LOCKSTEP_SLAVE = "0" *) 
  (* C_M0_AXIS_DATA_WIDTH = "32" *) 
  (* C_M10_AXIS_DATA_WIDTH = "32" *) 
  (* C_M11_AXIS_DATA_WIDTH = "32" *) 
  (* C_M12_AXIS_DATA_WIDTH = "32" *) 
  (* C_M13_AXIS_DATA_WIDTH = "32" *) 
  (* C_M14_AXIS_DATA_WIDTH = "32" *) 
  (* C_M15_AXIS_DATA_WIDTH = "32" *) 
  (* C_M1_AXIS_DATA_WIDTH = "32" *) 
  (* C_M2_AXIS_DATA_WIDTH = "32" *) 
  (* C_M3_AXIS_DATA_WIDTH = "32" *) 
  (* C_M4_AXIS_DATA_WIDTH = "32" *) 
  (* C_M5_AXIS_DATA_WIDTH = "32" *) 
  (* C_M6_AXIS_DATA_WIDTH = "32" *) 
  (* C_M7_AXIS_DATA_WIDTH = "32" *) 
  (* C_M8_AXIS_DATA_WIDTH = "32" *) 
  (* C_M9_AXIS_DATA_WIDTH = "32" *) 
  (* C_MMU_DTLB_SIZE = "4" *) 
  (* C_MMU_ITLB_SIZE = "2" *) 
  (* C_MMU_PRIVILEGED_INSTR = "0" *) 
  (* C_MMU_TLB_ACCESS = "3" *) 
  (* C_MMU_ZONES = "16" *) 
  (* C_M_AXI_DC_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_DC_ARUSER_WIDTH = "5" *) 
  (* C_M_AXI_DC_AWUSER_WIDTH = "5" *) 
  (* C_M_AXI_DC_BUSER_WIDTH = "1" *) 
  (* C_M_AXI_DC_DATA_WIDTH = "32" *) 
  (* C_M_AXI_DC_EXCLUSIVE_ACCESS = "0" *) 
  (* C_M_AXI_DC_RUSER_WIDTH = "1" *) 
  (* C_M_AXI_DC_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_DC_USER_VALUE = "31" *) 
  (* C_M_AXI_DC_WUSER_WIDTH = "1" *) 
  (* C_M_AXI_DP_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_DP_DATA_WIDTH = "32" *) 
  (* C_M_AXI_DP_EXCLUSIVE_ACCESS = "0" *) 
  (* C_M_AXI_DP_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_D_BUS_EXCEPTION = "0" *) 
  (* C_M_AXI_IC_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_IC_ARUSER_WIDTH = "5" *) 
  (* C_M_AXI_IC_AWUSER_WIDTH = "5" *) 
  (* C_M_AXI_IC_BUSER_WIDTH = "1" *) 
  (* C_M_AXI_IC_DATA_WIDTH = "32" *) 
  (* C_M_AXI_IC_RUSER_WIDTH = "1" *) 
  (* C_M_AXI_IC_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_IC_USER_VALUE = "31" *) 
  (* C_M_AXI_IC_WUSER_WIDTH = "1" *) 
  (* C_M_AXI_IP_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_IP_DATA_WIDTH = "32" *) 
  (* C_M_AXI_IP_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_I_BUS_EXCEPTION = "0" *) 
  (* C_NUMBER_OF_PC_BRK = "1" *) 
  (* C_NUMBER_OF_RD_ADDR_BRK = "0" *) 
  (* C_NUMBER_OF_WR_ADDR_BRK = "0" *) 
  (* C_NUM_SYNC_FF_CLK = "2" *) 
  (* C_NUM_SYNC_FF_CLK_DEBUG = "2" *) 
  (* C_NUM_SYNC_FF_CLK_IRQ = "1" *) 
  (* C_NUM_SYNC_FF_DBG_CLK = "1" *) 
  (* C_NUM_SYNC_FF_DBG_TRACE_CLK = "2" *) 
  (* C_OPCODE_0x0_ILLEGAL = "0" *) 
  (* C_OPTIMIZATION = "0" *) 
  (* C_PC_WIDTH = "17" *) 
  (* C_PIADDR_SIZE = "32" *) 
  (* C_PVR = "0" *) 
  (* C_PVR_USER1 = "8'b00000000" *) 
  (* C_PVR_USER2 = "0" *) 
  (* C_RESET_MSR = "0" *) 
  (* C_S0_AXIS_DATA_WIDTH = "32" *) 
  (* C_S10_AXIS_DATA_WIDTH = "32" *) 
  (* C_S11_AXIS_DATA_WIDTH = "32" *) 
  (* C_S12_AXIS_DATA_WIDTH = "32" *) 
  (* C_S13_AXIS_DATA_WIDTH = "32" *) 
  (* C_S14_AXIS_DATA_WIDTH = "32" *) 
  (* C_S15_AXIS_DATA_WIDTH = "32" *) 
  (* C_S1_AXIS_DATA_WIDTH = "32" *) 
  (* C_S2_AXIS_DATA_WIDTH = "32" *) 
  (* C_S3_AXIS_DATA_WIDTH = "32" *) 
  (* C_S4_AXIS_DATA_WIDTH = "32" *) 
  (* C_S5_AXIS_DATA_WIDTH = "32" *) 
  (* C_S6_AXIS_DATA_WIDTH = "32" *) 
  (* C_S7_AXIS_DATA_WIDTH = "32" *) 
  (* C_S8_AXIS_DATA_WIDTH = "32" *) 
  (* C_S9_AXIS_DATA_WIDTH = "32" *) 
  (* C_SCO = "0" *) 
  (* C_UNALIGNED_EXCEPTIONS = "0" *) 
  (* C_USE_BARREL = "0" *) 
  (* C_USE_BRANCH_TARGET_CACHE = "0" *) 
  (* C_USE_CONFIG_RESET = "0" *) 
  (* C_USE_DCACHE = "0" *) 
  (* C_USE_DIV = "0" *) 
  (* C_USE_EXTENDED_FSL_INSTR = "0" *) 
  (* C_USE_EXT_BRK = "0" *) 
  (* C_USE_EXT_NM_BRK = "0" *) 
  (* C_USE_FPU = "0" *) 
  (* C_USE_HW_MUL = "0" *) 
  (* C_USE_ICACHE = "0" *) 
  (* C_USE_INTERRUPT = "2" *) 
  (* C_USE_MMU = "0" *) 
  (* C_USE_MSR_INSTR = "0" *) 
  (* C_USE_NON_SECURE = "0" *) 
  (* C_USE_PCMP_INSTR = "0" *) 
  (* C_USE_REORDER_INSTR = "0" *) 
  (* C_USE_STACK_PROTECTION = "0" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  cpu_MicroBlaze U0
       (.Byte_Enable(Byte_Enable),
        .Clk(Clk),
        .Config_Reset(NLW_U0_Config_Reset_UNCONNECTED),
        .DCE(NLW_U0_DCE_UNCONNECTED),
        .DEBUG_ACLK(NLW_U0_DEBUG_ACLK_UNCONNECTED),
        .DEBUG_ARESETN(NLW_U0_DEBUG_ARESETN_UNCONNECTED),
        .DReady(DReady),
        .DUE(NLW_U0_DUE_UNCONNECTED),
        .DWait(DWait),
        .D_AS(D_AS),
        .Data_Addr({Data_Addr[0:8],NLW_U0_Data_Addr_UNCONNECTED[9:14],Data_Addr[15:29],NLW_U0_Data_Addr_UNCONNECTED[30:31]}),
        .Data_Read(Data_Read),
        .Data_Write(Data_Write),
        .Dbg_ARADDR(NLW_U0_Dbg_ARADDR_UNCONNECTED[14:2]),
        .Dbg_ARREADY(NLW_U0_Dbg_ARREADY_UNCONNECTED),
        .Dbg_ARVALID(NLW_U0_Dbg_ARVALID_UNCONNECTED),
        .Dbg_AWADDR(NLW_U0_Dbg_AWADDR_UNCONNECTED[14:2]),
        .Dbg_AWREADY(NLW_U0_Dbg_AWREADY_UNCONNECTED),
        .Dbg_AWVALID(NLW_U0_Dbg_AWVALID_UNCONNECTED),
        .Dbg_BREADY(NLW_U0_Dbg_BREADY_UNCONNECTED),
        .Dbg_BRESP(NLW_U0_Dbg_BRESP_UNCONNECTED[1:0]),
        .Dbg_BVALID(NLW_U0_Dbg_BVALID_UNCONNECTED),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Continue(NLW_U0_Dbg_Continue_UNCONNECTED),
        .Dbg_Disable(NLW_U0_Dbg_Disable_UNCONNECTED),
        .Dbg_Intr(NLW_U0_Dbg_Intr_UNCONNECTED),
        .Dbg_RDATA(NLW_U0_Dbg_RDATA_UNCONNECTED[31:0]),
        .Dbg_RREADY(NLW_U0_Dbg_RREADY_UNCONNECTED),
        .Dbg_RRESP(NLW_U0_Dbg_RRESP_UNCONNECTED[1:0]),
        .Dbg_RVALID(NLW_U0_Dbg_RVALID_UNCONNECTED),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(NLW_U0_Dbg_Stop_UNCONNECTED),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trace_Clk(NLW_U0_Dbg_Trace_Clk_UNCONNECTED),
        .Dbg_Trace_Data(NLW_U0_Dbg_Trace_Data_UNCONNECTED[0:35]),
        .Dbg_Trace_Ready(NLW_U0_Dbg_Trace_Ready_UNCONNECTED),
        .Dbg_Trace_Valid(NLW_U0_Dbg_Trace_Valid_UNCONNECTED),
        .Dbg_Trig_Ack_In(NLW_U0_Dbg_Trig_Ack_In_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out(NLW_U0_Dbg_Trig_Ack_Out_UNCONNECTED[0:7]),
        .Dbg_Trig_In(NLW_U0_Dbg_Trig_In_UNCONNECTED[0:7]),
        .Dbg_Trig_Out({NLW_U0_Dbg_Trig_Out_UNCONNECTED[0],1'b0,NLW_U0_Dbg_Trig_Out_UNCONNECTED[2:7]}),
        .Dbg_Update(Dbg_Update),
        .Dbg_WDATA(NLW_U0_Dbg_WDATA_UNCONNECTED[31:0]),
        .Dbg_WREADY(NLW_U0_Dbg_WREADY_UNCONNECTED),
        .Dbg_WVALID(NLW_U0_Dbg_WVALID_UNCONNECTED),
        .Dbg_Wakeup(Dbg_Wakeup),
        .Debug_Rst(Debug_Rst),
        .Ext_BRK(NLW_U0_Ext_BRK_UNCONNECTED),
        .Ext_NM_BRK(NLW_U0_Ext_NM_BRK_UNCONNECTED),
        .Hibernate(NLW_U0_Hibernate_UNCONNECTED),
        .ICE(NLW_U0_ICE_UNCONNECTED),
        .IFetch(NLW_U0_IFetch_UNCONNECTED),
        .IReady(IReady),
        .IUE(NLW_U0_IUE_UNCONNECTED),
        .IWAIT(NLW_U0_IWAIT_UNCONNECTED),
        .I_AS(I_AS),
        .Instr(Instr),
        .Instr_Addr({NLW_U0_Instr_Addr_UNCONNECTED[0:14],Instr_Addr[15:29],NLW_U0_Instr_Addr_UNCONNECTED[30:31]}),
        .Interrupt(NLW_U0_Interrupt_UNCONNECTED),
        .Interrupt_Ack(NLW_U0_Interrupt_Ack_UNCONNECTED[0:1]),
        .Interrupt_Address(NLW_U0_Interrupt_Address_UNCONNECTED[0:31]),
        .LOCKSTEP_Master_Out(NLW_U0_LOCKSTEP_Master_Out_UNCONNECTED[0:4095]),
        .LOCKSTEP_Out(NLW_U0_LOCKSTEP_Out_UNCONNECTED[0:4095]),
        .LOCKSTEP_Slave_In(NLW_U0_LOCKSTEP_Slave_In_UNCONNECTED[0:4095]),
        .M0_AXIS_TDATA(NLW_U0_M0_AXIS_TDATA_UNCONNECTED[31:0]),
        .M0_AXIS_TLAST(NLW_U0_M0_AXIS_TLAST_UNCONNECTED),
        .M0_AXIS_TREADY(NLW_U0_M0_AXIS_TREADY_UNCONNECTED),
        .M0_AXIS_TVALID(NLW_U0_M0_AXIS_TVALID_UNCONNECTED),
        .M10_AXIS_TDATA(NLW_U0_M10_AXIS_TDATA_UNCONNECTED[31:0]),
        .M10_AXIS_TLAST(NLW_U0_M10_AXIS_TLAST_UNCONNECTED),
        .M10_AXIS_TREADY(NLW_U0_M10_AXIS_TREADY_UNCONNECTED),
        .M10_AXIS_TVALID(NLW_U0_M10_AXIS_TVALID_UNCONNECTED),
        .M11_AXIS_TDATA(NLW_U0_M11_AXIS_TDATA_UNCONNECTED[31:0]),
        .M11_AXIS_TLAST(NLW_U0_M11_AXIS_TLAST_UNCONNECTED),
        .M11_AXIS_TREADY(NLW_U0_M11_AXIS_TREADY_UNCONNECTED),
        .M11_AXIS_TVALID(NLW_U0_M11_AXIS_TVALID_UNCONNECTED),
        .M12_AXIS_TDATA(NLW_U0_M12_AXIS_TDATA_UNCONNECTED[31:0]),
        .M12_AXIS_TLAST(NLW_U0_M12_AXIS_TLAST_UNCONNECTED),
        .M12_AXIS_TREADY(NLW_U0_M12_AXIS_TREADY_UNCONNECTED),
        .M12_AXIS_TVALID(NLW_U0_M12_AXIS_TVALID_UNCONNECTED),
        .M13_AXIS_TDATA(NLW_U0_M13_AXIS_TDATA_UNCONNECTED[31:0]),
        .M13_AXIS_TLAST(NLW_U0_M13_AXIS_TLAST_UNCONNECTED),
        .M13_AXIS_TREADY(NLW_U0_M13_AXIS_TREADY_UNCONNECTED),
        .M13_AXIS_TVALID(NLW_U0_M13_AXIS_TVALID_UNCONNECTED),
        .M14_AXIS_TDATA(NLW_U0_M14_AXIS_TDATA_UNCONNECTED[31:0]),
        .M14_AXIS_TLAST(NLW_U0_M14_AXIS_TLAST_UNCONNECTED),
        .M14_AXIS_TREADY(NLW_U0_M14_AXIS_TREADY_UNCONNECTED),
        .M14_AXIS_TVALID(NLW_U0_M14_AXIS_TVALID_UNCONNECTED),
        .M15_AXIS_TDATA(NLW_U0_M15_AXIS_TDATA_UNCONNECTED[31:0]),
        .M15_AXIS_TLAST(NLW_U0_M15_AXIS_TLAST_UNCONNECTED),
        .M15_AXIS_TREADY(NLW_U0_M15_AXIS_TREADY_UNCONNECTED),
        .M15_AXIS_TVALID(NLW_U0_M15_AXIS_TVALID_UNCONNECTED),
        .M1_AXIS_TDATA(NLW_U0_M1_AXIS_TDATA_UNCONNECTED[31:0]),
        .M1_AXIS_TLAST(NLW_U0_M1_AXIS_TLAST_UNCONNECTED),
        .M1_AXIS_TREADY(NLW_U0_M1_AXIS_TREADY_UNCONNECTED),
        .M1_AXIS_TVALID(NLW_U0_M1_AXIS_TVALID_UNCONNECTED),
        .M2_AXIS_TDATA(NLW_U0_M2_AXIS_TDATA_UNCONNECTED[31:0]),
        .M2_AXIS_TLAST(NLW_U0_M2_AXIS_TLAST_UNCONNECTED),
        .M2_AXIS_TREADY(NLW_U0_M2_AXIS_TREADY_UNCONNECTED),
        .M2_AXIS_TVALID(NLW_U0_M2_AXIS_TVALID_UNCONNECTED),
        .M3_AXIS_TDATA(NLW_U0_M3_AXIS_TDATA_UNCONNECTED[31:0]),
        .M3_AXIS_TLAST(NLW_U0_M3_AXIS_TLAST_UNCONNECTED),
        .M3_AXIS_TREADY(NLW_U0_M3_AXIS_TREADY_UNCONNECTED),
        .M3_AXIS_TVALID(NLW_U0_M3_AXIS_TVALID_UNCONNECTED),
        .M4_AXIS_TDATA(NLW_U0_M4_AXIS_TDATA_UNCONNECTED[31:0]),
        .M4_AXIS_TLAST(NLW_U0_M4_AXIS_TLAST_UNCONNECTED),
        .M4_AXIS_TREADY(NLW_U0_M4_AXIS_TREADY_UNCONNECTED),
        .M4_AXIS_TVALID(NLW_U0_M4_AXIS_TVALID_UNCONNECTED),
        .M5_AXIS_TDATA(NLW_U0_M5_AXIS_TDATA_UNCONNECTED[31:0]),
        .M5_AXIS_TLAST(NLW_U0_M5_AXIS_TLAST_UNCONNECTED),
        .M5_AXIS_TREADY(NLW_U0_M5_AXIS_TREADY_UNCONNECTED),
        .M5_AXIS_TVALID(NLW_U0_M5_AXIS_TVALID_UNCONNECTED),
        .M6_AXIS_TDATA(NLW_U0_M6_AXIS_TDATA_UNCONNECTED[31:0]),
        .M6_AXIS_TLAST(NLW_U0_M6_AXIS_TLAST_UNCONNECTED),
        .M6_AXIS_TREADY(NLW_U0_M6_AXIS_TREADY_UNCONNECTED),
        .M6_AXIS_TVALID(NLW_U0_M6_AXIS_TVALID_UNCONNECTED),
        .M7_AXIS_TDATA(NLW_U0_M7_AXIS_TDATA_UNCONNECTED[31:0]),
        .M7_AXIS_TLAST(NLW_U0_M7_AXIS_TLAST_UNCONNECTED),
        .M7_AXIS_TREADY(NLW_U0_M7_AXIS_TREADY_UNCONNECTED),
        .M7_AXIS_TVALID(NLW_U0_M7_AXIS_TVALID_UNCONNECTED),
        .M8_AXIS_TDATA(NLW_U0_M8_AXIS_TDATA_UNCONNECTED[31:0]),
        .M8_AXIS_TLAST(NLW_U0_M8_AXIS_TLAST_UNCONNECTED),
        .M8_AXIS_TREADY(NLW_U0_M8_AXIS_TREADY_UNCONNECTED),
        .M8_AXIS_TVALID(NLW_U0_M8_AXIS_TVALID_UNCONNECTED),
        .M9_AXIS_TDATA(NLW_U0_M9_AXIS_TDATA_UNCONNECTED[31:0]),
        .M9_AXIS_TLAST(NLW_U0_M9_AXIS_TLAST_UNCONNECTED),
        .M9_AXIS_TREADY(NLW_U0_M9_AXIS_TREADY_UNCONNECTED),
        .M9_AXIS_TVALID(NLW_U0_M9_AXIS_TVALID_UNCONNECTED),
        .MB_Error(NLW_U0_MB_Error_UNCONNECTED),
        .MB_Halted(NLW_U0_MB_Halted_UNCONNECTED),
        .M_AXI_DC_ACADDR(NLW_U0_M_AXI_DC_ACADDR_UNCONNECTED[31:0]),
        .M_AXI_DC_ACPROT(NLW_U0_M_AXI_DC_ACPROT_UNCONNECTED[2:0]),
        .M_AXI_DC_ACREADY(NLW_U0_M_AXI_DC_ACREADY_UNCONNECTED),
        .M_AXI_DC_ACSNOOP(NLW_U0_M_AXI_DC_ACSNOOP_UNCONNECTED[3:0]),
        .M_AXI_DC_ACVALID(NLW_U0_M_AXI_DC_ACVALID_UNCONNECTED),
        .M_AXI_DC_ARADDR(NLW_U0_M_AXI_DC_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_DC_ARBAR(NLW_U0_M_AXI_DC_ARBAR_UNCONNECTED[1:0]),
        .M_AXI_DC_ARBURST(NLW_U0_M_AXI_DC_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_DC_ARCACHE(NLW_U0_M_AXI_DC_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_DC_ARDOMAIN(NLW_U0_M_AXI_DC_ARDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_DC_ARID(NLW_U0_M_AXI_DC_ARID_UNCONNECTED[0]),
        .M_AXI_DC_ARLEN(NLW_U0_M_AXI_DC_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_DC_ARLOCK(NLW_U0_M_AXI_DC_ARLOCK_UNCONNECTED),
        .M_AXI_DC_ARPROT(NLW_U0_M_AXI_DC_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_DC_ARQOS(NLW_U0_M_AXI_DC_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_DC_ARREADY(NLW_U0_M_AXI_DC_ARREADY_UNCONNECTED),
        .M_AXI_DC_ARSIZE(NLW_U0_M_AXI_DC_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_DC_ARSNOOP(NLW_U0_M_AXI_DC_ARSNOOP_UNCONNECTED[3:0]),
        .M_AXI_DC_ARUSER(NLW_U0_M_AXI_DC_ARUSER_UNCONNECTED[4:0]),
        .M_AXI_DC_ARVALID(NLW_U0_M_AXI_DC_ARVALID_UNCONNECTED),
        .M_AXI_DC_AWADDR(NLW_U0_M_AXI_DC_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_DC_AWBAR(NLW_U0_M_AXI_DC_AWBAR_UNCONNECTED[1:0]),
        .M_AXI_DC_AWBURST(NLW_U0_M_AXI_DC_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_DC_AWCACHE(NLW_U0_M_AXI_DC_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_DC_AWDOMAIN(NLW_U0_M_AXI_DC_AWDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_DC_AWID(NLW_U0_M_AXI_DC_AWID_UNCONNECTED[0]),
        .M_AXI_DC_AWLEN(NLW_U0_M_AXI_DC_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_DC_AWLOCK(NLW_U0_M_AXI_DC_AWLOCK_UNCONNECTED),
        .M_AXI_DC_AWPROT(NLW_U0_M_AXI_DC_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_DC_AWQOS(NLW_U0_M_AXI_DC_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_DC_AWREADY(NLW_U0_M_AXI_DC_AWREADY_UNCONNECTED),
        .M_AXI_DC_AWSIZE(NLW_U0_M_AXI_DC_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_DC_AWSNOOP(NLW_U0_M_AXI_DC_AWSNOOP_UNCONNECTED[2:0]),
        .M_AXI_DC_AWUSER(NLW_U0_M_AXI_DC_AWUSER_UNCONNECTED[4:0]),
        .M_AXI_DC_AWVALID(NLW_U0_M_AXI_DC_AWVALID_UNCONNECTED),
        .M_AXI_DC_BID(NLW_U0_M_AXI_DC_BID_UNCONNECTED[0]),
        .M_AXI_DC_BREADY(NLW_U0_M_AXI_DC_BREADY_UNCONNECTED),
        .M_AXI_DC_BRESP(NLW_U0_M_AXI_DC_BRESP_UNCONNECTED[1:0]),
        .M_AXI_DC_BUSER(NLW_U0_M_AXI_DC_BUSER_UNCONNECTED[0]),
        .M_AXI_DC_BVALID(NLW_U0_M_AXI_DC_BVALID_UNCONNECTED),
        .M_AXI_DC_CDDATA(NLW_U0_M_AXI_DC_CDDATA_UNCONNECTED[31:0]),
        .M_AXI_DC_CDLAST(NLW_U0_M_AXI_DC_CDLAST_UNCONNECTED),
        .M_AXI_DC_CDREADY(NLW_U0_M_AXI_DC_CDREADY_UNCONNECTED),
        .M_AXI_DC_CDVALID(NLW_U0_M_AXI_DC_CDVALID_UNCONNECTED),
        .M_AXI_DC_CRREADY(NLW_U0_M_AXI_DC_CRREADY_UNCONNECTED),
        .M_AXI_DC_CRRESP(NLW_U0_M_AXI_DC_CRRESP_UNCONNECTED[4:0]),
        .M_AXI_DC_CRVALID(NLW_U0_M_AXI_DC_CRVALID_UNCONNECTED),
        .M_AXI_DC_RACK(NLW_U0_M_AXI_DC_RACK_UNCONNECTED),
        .M_AXI_DC_RDATA(NLW_U0_M_AXI_DC_RDATA_UNCONNECTED[31:0]),
        .M_AXI_DC_RID(NLW_U0_M_AXI_DC_RID_UNCONNECTED[0]),
        .M_AXI_DC_RLAST(NLW_U0_M_AXI_DC_RLAST_UNCONNECTED),
        .M_AXI_DC_RREADY(NLW_U0_M_AXI_DC_RREADY_UNCONNECTED),
        .M_AXI_DC_RRESP(NLW_U0_M_AXI_DC_RRESP_UNCONNECTED[1:0]),
        .M_AXI_DC_RUSER(NLW_U0_M_AXI_DC_RUSER_UNCONNECTED[0]),
        .M_AXI_DC_RVALID(NLW_U0_M_AXI_DC_RVALID_UNCONNECTED),
        .M_AXI_DC_WACK(NLW_U0_M_AXI_DC_WACK_UNCONNECTED),
        .M_AXI_DC_WDATA(NLW_U0_M_AXI_DC_WDATA_UNCONNECTED[31:0]),
        .M_AXI_DC_WLAST(NLW_U0_M_AXI_DC_WLAST_UNCONNECTED),
        .M_AXI_DC_WREADY(NLW_U0_M_AXI_DC_WREADY_UNCONNECTED),
        .M_AXI_DC_WSTRB(NLW_U0_M_AXI_DC_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_DC_WUSER(NLW_U0_M_AXI_DC_WUSER_UNCONNECTED[0]),
        .M_AXI_DC_WVALID(NLW_U0_M_AXI_DC_WVALID_UNCONNECTED),
        .M_AXI_DP_ARADDR({NLW_U0_M_AXI_DP_ARADDR_UNCONNECTED[31:4],M_AXI_DP_ARADDR[3:2],NLW_U0_M_AXI_DP_ARADDR_UNCONNECTED[1:0]}),
        .M_AXI_DP_ARBURST(NLW_U0_M_AXI_DP_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_DP_ARCACHE(NLW_U0_M_AXI_DP_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_DP_ARID(NLW_U0_M_AXI_DP_ARID_UNCONNECTED[0]),
        .M_AXI_DP_ARLEN(NLW_U0_M_AXI_DP_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_DP_ARLOCK(NLW_U0_M_AXI_DP_ARLOCK_UNCONNECTED),
        .M_AXI_DP_ARPROT(NLW_U0_M_AXI_DP_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_DP_ARQOS(NLW_U0_M_AXI_DP_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_ARSIZE(NLW_U0_M_AXI_DP_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_DP_ARVALID(M_AXI_DP_ARVALID),
        .M_AXI_DP_AWADDR(NLW_U0_M_AXI_DP_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_DP_AWBURST(NLW_U0_M_AXI_DP_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_DP_AWCACHE(NLW_U0_M_AXI_DP_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_DP_AWID(NLW_U0_M_AXI_DP_AWID_UNCONNECTED[0]),
        .M_AXI_DP_AWLEN(NLW_U0_M_AXI_DP_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_DP_AWLOCK(NLW_U0_M_AXI_DP_AWLOCK_UNCONNECTED),
        .M_AXI_DP_AWPROT(NLW_U0_M_AXI_DP_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_DP_AWQOS(NLW_U0_M_AXI_DP_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_AWSIZE(NLW_U0_M_AXI_DP_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_DP_AWVALID(M_AXI_DP_AWVALID),
        .M_AXI_DP_BID(NLW_U0_M_AXI_DP_BID_UNCONNECTED[0]),
        .M_AXI_DP_BREADY(NLW_U0_M_AXI_DP_BREADY_UNCONNECTED),
        .M_AXI_DP_BRESP(NLW_U0_M_AXI_DP_BRESP_UNCONNECTED[1:0]),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA({NLW_U0_M_AXI_DP_RDATA_UNCONNECTED[31:8],M_AXI_DP_RDATA[7:0]}),
        .M_AXI_DP_RID(NLW_U0_M_AXI_DP_RID_UNCONNECTED[0]),
        .M_AXI_DP_RLAST(NLW_U0_M_AXI_DP_RLAST_UNCONNECTED),
        .M_AXI_DP_RREADY(NLW_U0_M_AXI_DP_RREADY_UNCONNECTED),
        .M_AXI_DP_RRESP(NLW_U0_M_AXI_DP_RRESP_UNCONNECTED[1:0]),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WDATA({NLW_U0_M_AXI_DP_WDATA_UNCONNECTED[31:8],M_AXI_DP_WDATA[7:0]}),
        .M_AXI_DP_WLAST(NLW_U0_M_AXI_DP_WLAST_UNCONNECTED),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .M_AXI_DP_WSTRB(NLW_U0_M_AXI_DP_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_DP_WVALID(M_AXI_DP_WVALID),
        .M_AXI_IC_ACADDR(NLW_U0_M_AXI_IC_ACADDR_UNCONNECTED[31:0]),
        .M_AXI_IC_ACPROT(NLW_U0_M_AXI_IC_ACPROT_UNCONNECTED[2:0]),
        .M_AXI_IC_ACREADY(NLW_U0_M_AXI_IC_ACREADY_UNCONNECTED),
        .M_AXI_IC_ACSNOOP(NLW_U0_M_AXI_IC_ACSNOOP_UNCONNECTED[3:0]),
        .M_AXI_IC_ACVALID(NLW_U0_M_AXI_IC_ACVALID_UNCONNECTED),
        .M_AXI_IC_ARADDR(NLW_U0_M_AXI_IC_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_IC_ARBAR(NLW_U0_M_AXI_IC_ARBAR_UNCONNECTED[1:0]),
        .M_AXI_IC_ARBURST(NLW_U0_M_AXI_IC_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_IC_ARCACHE(NLW_U0_M_AXI_IC_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_IC_ARDOMAIN(NLW_U0_M_AXI_IC_ARDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_IC_ARID(NLW_U0_M_AXI_IC_ARID_UNCONNECTED[0]),
        .M_AXI_IC_ARLEN(NLW_U0_M_AXI_IC_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_IC_ARLOCK(NLW_U0_M_AXI_IC_ARLOCK_UNCONNECTED),
        .M_AXI_IC_ARPROT(NLW_U0_M_AXI_IC_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_IC_ARQOS(NLW_U0_M_AXI_IC_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_IC_ARREADY(NLW_U0_M_AXI_IC_ARREADY_UNCONNECTED),
        .M_AXI_IC_ARSIZE(NLW_U0_M_AXI_IC_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_IC_ARSNOOP(NLW_U0_M_AXI_IC_ARSNOOP_UNCONNECTED[3:0]),
        .M_AXI_IC_ARUSER(NLW_U0_M_AXI_IC_ARUSER_UNCONNECTED[4:0]),
        .M_AXI_IC_ARVALID(NLW_U0_M_AXI_IC_ARVALID_UNCONNECTED),
        .M_AXI_IC_AWADDR(NLW_U0_M_AXI_IC_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_IC_AWBAR(NLW_U0_M_AXI_IC_AWBAR_UNCONNECTED[1:0]),
        .M_AXI_IC_AWBURST(NLW_U0_M_AXI_IC_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_IC_AWCACHE(NLW_U0_M_AXI_IC_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_IC_AWDOMAIN(NLW_U0_M_AXI_IC_AWDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_IC_AWID(NLW_U0_M_AXI_IC_AWID_UNCONNECTED[0]),
        .M_AXI_IC_AWLEN(NLW_U0_M_AXI_IC_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_IC_AWLOCK(NLW_U0_M_AXI_IC_AWLOCK_UNCONNECTED),
        .M_AXI_IC_AWPROT(NLW_U0_M_AXI_IC_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_IC_AWQOS(NLW_U0_M_AXI_IC_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_IC_AWREADY(NLW_U0_M_AXI_IC_AWREADY_UNCONNECTED),
        .M_AXI_IC_AWSIZE(NLW_U0_M_AXI_IC_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_IC_AWSNOOP(NLW_U0_M_AXI_IC_AWSNOOP_UNCONNECTED[2:0]),
        .M_AXI_IC_AWUSER(NLW_U0_M_AXI_IC_AWUSER_UNCONNECTED[4:0]),
        .M_AXI_IC_AWVALID(NLW_U0_M_AXI_IC_AWVALID_UNCONNECTED),
        .M_AXI_IC_BID(NLW_U0_M_AXI_IC_BID_UNCONNECTED[0]),
        .M_AXI_IC_BREADY(NLW_U0_M_AXI_IC_BREADY_UNCONNECTED),
        .M_AXI_IC_BRESP(NLW_U0_M_AXI_IC_BRESP_UNCONNECTED[1:0]),
        .M_AXI_IC_BUSER(NLW_U0_M_AXI_IC_BUSER_UNCONNECTED[0]),
        .M_AXI_IC_BVALID(NLW_U0_M_AXI_IC_BVALID_UNCONNECTED),
        .M_AXI_IC_CDDATA(NLW_U0_M_AXI_IC_CDDATA_UNCONNECTED[31:0]),
        .M_AXI_IC_CDLAST(NLW_U0_M_AXI_IC_CDLAST_UNCONNECTED),
        .M_AXI_IC_CDREADY(NLW_U0_M_AXI_IC_CDREADY_UNCONNECTED),
        .M_AXI_IC_CDVALID(NLW_U0_M_AXI_IC_CDVALID_UNCONNECTED),
        .M_AXI_IC_CRREADY(NLW_U0_M_AXI_IC_CRREADY_UNCONNECTED),
        .M_AXI_IC_CRRESP(NLW_U0_M_AXI_IC_CRRESP_UNCONNECTED[4:0]),
        .M_AXI_IC_CRVALID(NLW_U0_M_AXI_IC_CRVALID_UNCONNECTED),
        .M_AXI_IC_RACK(NLW_U0_M_AXI_IC_RACK_UNCONNECTED),
        .M_AXI_IC_RDATA(NLW_U0_M_AXI_IC_RDATA_UNCONNECTED[31:0]),
        .M_AXI_IC_RID(NLW_U0_M_AXI_IC_RID_UNCONNECTED[0]),
        .M_AXI_IC_RLAST(NLW_U0_M_AXI_IC_RLAST_UNCONNECTED),
        .M_AXI_IC_RREADY(NLW_U0_M_AXI_IC_RREADY_UNCONNECTED),
        .M_AXI_IC_RRESP(NLW_U0_M_AXI_IC_RRESP_UNCONNECTED[1:0]),
        .M_AXI_IC_RUSER(NLW_U0_M_AXI_IC_RUSER_UNCONNECTED[0]),
        .M_AXI_IC_RVALID(NLW_U0_M_AXI_IC_RVALID_UNCONNECTED),
        .M_AXI_IC_WACK(NLW_U0_M_AXI_IC_WACK_UNCONNECTED),
        .M_AXI_IC_WDATA(NLW_U0_M_AXI_IC_WDATA_UNCONNECTED[31:0]),
        .M_AXI_IC_WLAST(NLW_U0_M_AXI_IC_WLAST_UNCONNECTED),
        .M_AXI_IC_WREADY(NLW_U0_M_AXI_IC_WREADY_UNCONNECTED),
        .M_AXI_IC_WSTRB(NLW_U0_M_AXI_IC_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_IC_WUSER(NLW_U0_M_AXI_IC_WUSER_UNCONNECTED[0]),
        .M_AXI_IC_WVALID(NLW_U0_M_AXI_IC_WVALID_UNCONNECTED),
        .M_AXI_IP_ARADDR(NLW_U0_M_AXI_IP_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_IP_ARBURST(NLW_U0_M_AXI_IP_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_IP_ARCACHE(NLW_U0_M_AXI_IP_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_IP_ARID(NLW_U0_M_AXI_IP_ARID_UNCONNECTED[0]),
        .M_AXI_IP_ARLEN(NLW_U0_M_AXI_IP_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_IP_ARLOCK(NLW_U0_M_AXI_IP_ARLOCK_UNCONNECTED),
        .M_AXI_IP_ARPROT(NLW_U0_M_AXI_IP_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_IP_ARQOS(NLW_U0_M_AXI_IP_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_IP_ARREADY(NLW_U0_M_AXI_IP_ARREADY_UNCONNECTED),
        .M_AXI_IP_ARSIZE(NLW_U0_M_AXI_IP_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_IP_ARVALID(NLW_U0_M_AXI_IP_ARVALID_UNCONNECTED),
        .M_AXI_IP_AWADDR(NLW_U0_M_AXI_IP_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_IP_AWBURST(NLW_U0_M_AXI_IP_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_IP_AWCACHE(NLW_U0_M_AXI_IP_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_IP_AWID(NLW_U0_M_AXI_IP_AWID_UNCONNECTED[0]),
        .M_AXI_IP_AWLEN(NLW_U0_M_AXI_IP_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_IP_AWLOCK(NLW_U0_M_AXI_IP_AWLOCK_UNCONNECTED),
        .M_AXI_IP_AWPROT(NLW_U0_M_AXI_IP_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_IP_AWQOS(NLW_U0_M_AXI_IP_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_IP_AWREADY(NLW_U0_M_AXI_IP_AWREADY_UNCONNECTED),
        .M_AXI_IP_AWSIZE(NLW_U0_M_AXI_IP_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_IP_AWVALID(NLW_U0_M_AXI_IP_AWVALID_UNCONNECTED),
        .M_AXI_IP_BID(NLW_U0_M_AXI_IP_BID_UNCONNECTED[0]),
        .M_AXI_IP_BREADY(NLW_U0_M_AXI_IP_BREADY_UNCONNECTED),
        .M_AXI_IP_BRESP(NLW_U0_M_AXI_IP_BRESP_UNCONNECTED[1:0]),
        .M_AXI_IP_BVALID(NLW_U0_M_AXI_IP_BVALID_UNCONNECTED),
        .M_AXI_IP_RDATA(NLW_U0_M_AXI_IP_RDATA_UNCONNECTED[31:0]),
        .M_AXI_IP_RID(NLW_U0_M_AXI_IP_RID_UNCONNECTED[0]),
        .M_AXI_IP_RLAST(NLW_U0_M_AXI_IP_RLAST_UNCONNECTED),
        .M_AXI_IP_RREADY(NLW_U0_M_AXI_IP_RREADY_UNCONNECTED),
        .M_AXI_IP_RRESP(NLW_U0_M_AXI_IP_RRESP_UNCONNECTED[1:0]),
        .M_AXI_IP_RVALID(NLW_U0_M_AXI_IP_RVALID_UNCONNECTED),
        .M_AXI_IP_WDATA(NLW_U0_M_AXI_IP_WDATA_UNCONNECTED[31:0]),
        .M_AXI_IP_WLAST(NLW_U0_M_AXI_IP_WLAST_UNCONNECTED),
        .M_AXI_IP_WREADY(NLW_U0_M_AXI_IP_WREADY_UNCONNECTED),
        .M_AXI_IP_WSTRB(NLW_U0_M_AXI_IP_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_IP_WVALID(NLW_U0_M_AXI_IP_WVALID_UNCONNECTED),
        .Mb_Reset(NLW_U0_Mb_Reset_UNCONNECTED),
        .Non_Secure(NLW_U0_Non_Secure_UNCONNECTED[0:3]),
        .Pause(NLW_U0_Pause_UNCONNECTED),
        .Pause_Ack(NLW_U0_Pause_Ack_UNCONNECTED),
        .RAM_From(NLW_U0_RAM_From_UNCONNECTED[255:0]),
        .RAM_To(NLW_U0_RAM_To_UNCONNECTED[255:0]),
        .Read_Strobe(Read_Strobe),
        .Reset(Reset),
        .Reset_Mode(NLW_U0_Reset_Mode_UNCONNECTED[0:1]),
        .S0_AXIS_TDATA(NLW_U0_S0_AXIS_TDATA_UNCONNECTED[31:0]),
        .S0_AXIS_TLAST(NLW_U0_S0_AXIS_TLAST_UNCONNECTED),
        .S0_AXIS_TREADY(NLW_U0_S0_AXIS_TREADY_UNCONNECTED),
        .S0_AXIS_TVALID(NLW_U0_S0_AXIS_TVALID_UNCONNECTED),
        .S10_AXIS_TDATA(NLW_U0_S10_AXIS_TDATA_UNCONNECTED[31:0]),
        .S10_AXIS_TLAST(NLW_U0_S10_AXIS_TLAST_UNCONNECTED),
        .S10_AXIS_TREADY(NLW_U0_S10_AXIS_TREADY_UNCONNECTED),
        .S10_AXIS_TVALID(NLW_U0_S10_AXIS_TVALID_UNCONNECTED),
        .S11_AXIS_TDATA(NLW_U0_S11_AXIS_TDATA_UNCONNECTED[31:0]),
        .S11_AXIS_TLAST(NLW_U0_S11_AXIS_TLAST_UNCONNECTED),
        .S11_AXIS_TREADY(NLW_U0_S11_AXIS_TREADY_UNCONNECTED),
        .S11_AXIS_TVALID(NLW_U0_S11_AXIS_TVALID_UNCONNECTED),
        .S12_AXIS_TDATA(NLW_U0_S12_AXIS_TDATA_UNCONNECTED[31:0]),
        .S12_AXIS_TLAST(NLW_U0_S12_AXIS_TLAST_UNCONNECTED),
        .S12_AXIS_TREADY(NLW_U0_S12_AXIS_TREADY_UNCONNECTED),
        .S12_AXIS_TVALID(NLW_U0_S12_AXIS_TVALID_UNCONNECTED),
        .S13_AXIS_TDATA(NLW_U0_S13_AXIS_TDATA_UNCONNECTED[31:0]),
        .S13_AXIS_TLAST(NLW_U0_S13_AXIS_TLAST_UNCONNECTED),
        .S13_AXIS_TREADY(NLW_U0_S13_AXIS_TREADY_UNCONNECTED),
        .S13_AXIS_TVALID(NLW_U0_S13_AXIS_TVALID_UNCONNECTED),
        .S14_AXIS_TDATA(NLW_U0_S14_AXIS_TDATA_UNCONNECTED[31:0]),
        .S14_AXIS_TLAST(NLW_U0_S14_AXIS_TLAST_UNCONNECTED),
        .S14_AXIS_TREADY(NLW_U0_S14_AXIS_TREADY_UNCONNECTED),
        .S14_AXIS_TVALID(NLW_U0_S14_AXIS_TVALID_UNCONNECTED),
        .S15_AXIS_TDATA(NLW_U0_S15_AXIS_TDATA_UNCONNECTED[31:0]),
        .S15_AXIS_TLAST(NLW_U0_S15_AXIS_TLAST_UNCONNECTED),
        .S15_AXIS_TREADY(NLW_U0_S15_AXIS_TREADY_UNCONNECTED),
        .S15_AXIS_TVALID(NLW_U0_S15_AXIS_TVALID_UNCONNECTED),
        .S1_AXIS_TDATA(NLW_U0_S1_AXIS_TDATA_UNCONNECTED[31:0]),
        .S1_AXIS_TLAST(NLW_U0_S1_AXIS_TLAST_UNCONNECTED),
        .S1_AXIS_TREADY(NLW_U0_S1_AXIS_TREADY_UNCONNECTED),
        .S1_AXIS_TVALID(NLW_U0_S1_AXIS_TVALID_UNCONNECTED),
        .S2_AXIS_TDATA(NLW_U0_S2_AXIS_TDATA_UNCONNECTED[31:0]),
        .S2_AXIS_TLAST(NLW_U0_S2_AXIS_TLAST_UNCONNECTED),
        .S2_AXIS_TREADY(NLW_U0_S2_AXIS_TREADY_UNCONNECTED),
        .S2_AXIS_TVALID(NLW_U0_S2_AXIS_TVALID_UNCONNECTED),
        .S3_AXIS_TDATA(NLW_U0_S3_AXIS_TDATA_UNCONNECTED[31:0]),
        .S3_AXIS_TLAST(NLW_U0_S3_AXIS_TLAST_UNCONNECTED),
        .S3_AXIS_TREADY(NLW_U0_S3_AXIS_TREADY_UNCONNECTED),
        .S3_AXIS_TVALID(NLW_U0_S3_AXIS_TVALID_UNCONNECTED),
        .S4_AXIS_TDATA(NLW_U0_S4_AXIS_TDATA_UNCONNECTED[31:0]),
        .S4_AXIS_TLAST(NLW_U0_S4_AXIS_TLAST_UNCONNECTED),
        .S4_AXIS_TREADY(NLW_U0_S4_AXIS_TREADY_UNCONNECTED),
        .S4_AXIS_TVALID(NLW_U0_S4_AXIS_TVALID_UNCONNECTED),
        .S5_AXIS_TDATA(NLW_U0_S5_AXIS_TDATA_UNCONNECTED[31:0]),
        .S5_AXIS_TLAST(NLW_U0_S5_AXIS_TLAST_UNCONNECTED),
        .S5_AXIS_TREADY(NLW_U0_S5_AXIS_TREADY_UNCONNECTED),
        .S5_AXIS_TVALID(NLW_U0_S5_AXIS_TVALID_UNCONNECTED),
        .S6_AXIS_TDATA(NLW_U0_S6_AXIS_TDATA_UNCONNECTED[31:0]),
        .S6_AXIS_TLAST(NLW_U0_S6_AXIS_TLAST_UNCONNECTED),
        .S6_AXIS_TREADY(NLW_U0_S6_AXIS_TREADY_UNCONNECTED),
        .S6_AXIS_TVALID(NLW_U0_S6_AXIS_TVALID_UNCONNECTED),
        .S7_AXIS_TDATA(NLW_U0_S7_AXIS_TDATA_UNCONNECTED[31:0]),
        .S7_AXIS_TLAST(NLW_U0_S7_AXIS_TLAST_UNCONNECTED),
        .S7_AXIS_TREADY(NLW_U0_S7_AXIS_TREADY_UNCONNECTED),
        .S7_AXIS_TVALID(NLW_U0_S7_AXIS_TVALID_UNCONNECTED),
        .S8_AXIS_TDATA(NLW_U0_S8_AXIS_TDATA_UNCONNECTED[31:0]),
        .S8_AXIS_TLAST(NLW_U0_S8_AXIS_TLAST_UNCONNECTED),
        .S8_AXIS_TREADY(NLW_U0_S8_AXIS_TREADY_UNCONNECTED),
        .S8_AXIS_TVALID(NLW_U0_S8_AXIS_TVALID_UNCONNECTED),
        .S9_AXIS_TDATA(NLW_U0_S9_AXIS_TDATA_UNCONNECTED[31:0]),
        .S9_AXIS_TLAST(NLW_U0_S9_AXIS_TLAST_UNCONNECTED),
        .S9_AXIS_TREADY(NLW_U0_S9_AXIS_TREADY_UNCONNECTED),
        .S9_AXIS_TVALID(NLW_U0_S9_AXIS_TVALID_UNCONNECTED),
        .Scan_En(NLW_U0_Scan_En_UNCONNECTED),
        .Scan_Reset(NLW_U0_Scan_Reset_UNCONNECTED),
        .Scan_Reset_Sel(NLW_U0_Scan_Reset_Sel_UNCONNECTED),
        .Sleep(NLW_U0_Sleep_UNCONNECTED),
        .Suspend(NLW_U0_Suspend_UNCONNECTED),
        .Trace_DCache_Hit(NLW_U0_Trace_DCache_Hit_UNCONNECTED),
        .Trace_DCache_Rdy(NLW_U0_Trace_DCache_Rdy_UNCONNECTED),
        .Trace_DCache_Read(NLW_U0_Trace_DCache_Read_UNCONNECTED),
        .Trace_DCache_Req(NLW_U0_Trace_DCache_Req_UNCONNECTED),
        .Trace_Data_Access(NLW_U0_Trace_Data_Access_UNCONNECTED),
        .Trace_Data_Address(NLW_U0_Trace_Data_Address_UNCONNECTED[0:31]),
        .Trace_Data_Byte_Enable(NLW_U0_Trace_Data_Byte_Enable_UNCONNECTED[0:3]),
        .Trace_Data_Read(NLW_U0_Trace_Data_Read_UNCONNECTED),
        .Trace_Data_Write(NLW_U0_Trace_Data_Write_UNCONNECTED),
        .Trace_Data_Write_Value(NLW_U0_Trace_Data_Write_Value_UNCONNECTED[0:31]),
        .Trace_Delay_Slot(NLW_U0_Trace_Delay_Slot_UNCONNECTED),
        .Trace_EX_PipeRun(NLW_U0_Trace_EX_PipeRun_UNCONNECTED),
        .Trace_Exception_Kind(NLW_U0_Trace_Exception_Kind_UNCONNECTED[0:4]),
        .Trace_Exception_Taken(NLW_U0_Trace_Exception_Taken_UNCONNECTED),
        .Trace_ICache_Hit(NLW_U0_Trace_ICache_Hit_UNCONNECTED),
        .Trace_ICache_Rdy(NLW_U0_Trace_ICache_Rdy_UNCONNECTED),
        .Trace_ICache_Req(NLW_U0_Trace_ICache_Req_UNCONNECTED),
        .Trace_Instruction(NLW_U0_Trace_Instruction_UNCONNECTED[0:31]),
        .Trace_Jump_Hit(NLW_U0_Trace_Jump_Hit_UNCONNECTED),
        .Trace_Jump_Taken(NLW_U0_Trace_Jump_Taken_UNCONNECTED),
        .Trace_MB_Halted(NLW_U0_Trace_MB_Halted_UNCONNECTED),
        .Trace_MEM_PipeRun(NLW_U0_Trace_MEM_PipeRun_UNCONNECTED),
        .Trace_MSR_Reg(NLW_U0_Trace_MSR_Reg_UNCONNECTED[0:14]),
        .Trace_New_Reg_Value(NLW_U0_Trace_New_Reg_Value_UNCONNECTED[0:31]),
        .Trace_OF_PipeRun(NLW_U0_Trace_OF_PipeRun_UNCONNECTED),
        .Trace_PC(NLW_U0_Trace_PC_UNCONNECTED[0:31]),
        .Trace_PID_Reg(NLW_U0_Trace_PID_Reg_UNCONNECTED[0:7]),
        .Trace_Reg_Addr(NLW_U0_Trace_Reg_Addr_UNCONNECTED[0:4]),
        .Trace_Reg_Write(NLW_U0_Trace_Reg_Write_UNCONNECTED),
        .Trace_Valid_Instr(NLW_U0_Trace_Valid_Instr_UNCONNECTED),
        .Wakeup(Wakeup),
        .Write_Strobe(Write_Strobe));
endmodule

(* CHECK_LICENSE_TYPE = "bd_3914_rst_0_0,proc_sys_reset,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "bd_3914_rst_0_0" *) 
(* X_CORE_INFO = "proc_sys_reset,Vivado 2018.3" *) 
module cpu_bd_3914_rst_0_0
   (slowest_sync_clk,
    ext_reset_in,
    aux_reset_in,
    mb_debug_sys_rst,
    dcm_locked,
    mb_reset,
    bus_struct_reset,
    peripheral_reset,
    interconnect_aresetn,
    peripheral_aresetn);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 clock CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME clock, ASSOCIATED_RESET mb_reset:bus_struct_reset:interconnect_aresetn:peripheral_aresetn:peripheral_reset, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input slowest_sync_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 ext_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ext_reset, BOARD.ASSOCIATED_PARAM RESET_BOARD_INTERFACE, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input ext_reset_in;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 aux_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME aux_reset, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input aux_reset_in;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 dbg_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME dbg_reset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input mb_debug_sys_rst;
  input dcm_locked;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 mb_rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME mb_rst, POLARITY ACTIVE_HIGH, TYPE PROCESSOR, INSERT_VIP 0" *) output mb_reset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 bus_struct_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME bus_struct_reset, POLARITY ACTIVE_HIGH, TYPE INTERCONNECT, INSERT_VIP 0" *) output [0:0]bus_struct_reset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 peripheral_high_rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME peripheral_high_rst, POLARITY ACTIVE_HIGH, TYPE PERIPHERAL, INSERT_VIP 0" *) output [0:0]peripheral_reset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 interconnect_low_rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME interconnect_low_rst, POLARITY ACTIVE_LOW, TYPE INTERCONNECT, INSERT_VIP 0" *) output [0:0]interconnect_aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 peripheral_low_rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME peripheral_low_rst, POLARITY ACTIVE_LOW, TYPE PERIPHERAL, INSERT_VIP 0" *) output [0:0]peripheral_aresetn;

  wire [0:0]bus_struct_reset;
  wire ext_reset_in;
  wire mb_debug_sys_rst;
  wire mb_reset;
  wire [0:0]peripheral_aresetn;
  wire [0:0]peripheral_reset;
  wire slowest_sync_clk;
  wire NLW_U0_aux_reset_in_UNCONNECTED;
  wire NLW_U0_dcm_locked_UNCONNECTED;
  wire [0:0]NLW_U0_interconnect_aresetn_UNCONNECTED;

  (* C_AUX_RESET_HIGH = "1'b0" *) 
  (* C_AUX_RST_WIDTH = "4" *) 
  (* C_EXT_RESET_HIGH = "1'b1" *) 
  (* C_EXT_RST_WIDTH = "4" *) 
  (* C_FAMILY = "virtex7" *) 
  (* C_NUM_BUS_RST = "1" *) 
  (* C_NUM_INTERCONNECT_ARESETN = "1" *) 
  (* C_NUM_PERP_ARESETN = "1" *) 
  (* C_NUM_PERP_RST = "1" *) 
  cpu_proc_sys_reset U0
       (.aux_reset_in(NLW_U0_aux_reset_in_UNCONNECTED),
        .bus_struct_reset(bus_struct_reset),
        .dcm_locked(NLW_U0_dcm_locked_UNCONNECTED),
        .ext_reset_in(ext_reset_in),
        .interconnect_aresetn(NLW_U0_interconnect_aresetn_UNCONNECTED[0]),
        .mb_debug_sys_rst(mb_debug_sys_rst),
        .mb_reset(mb_reset),
        .peripheral_aresetn(peripheral_aresetn),
        .peripheral_reset(peripheral_reset),
        .slowest_sync_clk(slowest_sync_clk));
endmodule

(* CHECK_LICENSE_TYPE = "bd_3914_xlconcat_0_0,xlconcat_v2_1_1_xlconcat,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "bd_3914_xlconcat_0_0" *) 
(* X_CORE_INFO = "xlconcat_v2_1_1_xlconcat,Vivado 2018.3" *) 
module cpu_bd_3914_xlconcat_0_0
   (In0,
    In1,
    dout);
  input [0:0]In0;
  input [0:0]In1;
  output [1:0]dout;

  wire [0:0]In0;
  wire [0:0]In1;

  assign dout[1] = In1;
  assign dout[0] = In0;
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module cpu_cdc_sync
   (lpf_exr_reg,
    scndry_out,
    lpf_exr,
    p_3_out,
    ext_reset_in,
    mb_debug_sys_rst,
    slowest_sync_clk);
  output lpf_exr_reg;
  output scndry_out;
  input lpf_exr;
  input [2:0]p_3_out;
  input ext_reset_in;
  input mb_debug_sys_rst;
  input slowest_sync_clk;

  wire exr_d1;
  wire ext_reset_in;
  wire lpf_exr;
  wire lpf_exr_reg;
  wire mb_debug_sys_rst;
  wire [2:0]p_3_out;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;
  wire slowest_sync_clk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(exr_d1),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_i_1 
       (.I0(ext_reset_in),
        .I1(mb_debug_sys_rst),
        .O(exr_d1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEAAAAAA8)) 
    lpf_exr_i_1
       (.I0(lpf_exr),
        .I1(p_3_out[1]),
        .I2(p_3_out[2]),
        .I3(scndry_out),
        .I4(p_3_out[0]),
        .O(lpf_exr_reg));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module cpu_cdc_sync_0
   (lpf_asr_reg,
    scndry_out,
    lpf_asr,
    p_1_in,
    p_2_in,
    asr_lpf,
    aux_reset_in,
    slowest_sync_clk);
  output lpf_asr_reg;
  output scndry_out;
  input lpf_asr;
  input p_1_in;
  input p_2_in;
  input [0:0]asr_lpf;
  input aux_reset_in;
  input slowest_sync_clk;

  wire [0:0]asr_lpf;
  wire lpf_asr;
  wire lpf_asr_reg;
  wire p_1_in;
  wire p_2_in;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;
  wire slowest_sync_clk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEAAAAAA8)) 
    lpf_asr_i_1
       (.I0(lpf_asr),
        .I1(p_1_in),
        .I2(p_2_in),
        .I3(scndry_out),
        .I4(asr_lpf),
        .O(lpf_asr_reg));
endmodule

(* C_AVOID_PRIMITIVES = "0" *) (* C_BASEADDR = "64'b0000000000000000000000000000000010000000000000000000000000000000" *) (* C_FAMILY = "virtex7" *) 
(* C_FIT1_INTERRUPT = "0" *) (* C_FIT1_No_CLOCKS = "6216" *) (* C_FIT2_INTERRUPT = "0" *) 
(* C_FIT2_No_CLOCKS = "6216" *) (* C_FIT3_INTERRUPT = "0" *) (* C_FIT3_No_CLOCKS = "6216" *) 
(* C_FIT4_INTERRUPT = "0" *) (* C_FIT4_No_CLOCKS = "6216" *) (* C_FREQ = "100000000" *) 
(* C_GPI1_INTERRUPT = "0" *) (* C_GPI1_SIZE = "32" *) (* C_GPI2_INTERRUPT = "0" *) 
(* C_GPI2_SIZE = "32" *) (* C_GPI3_INTERRUPT = "0" *) (* C_GPI3_SIZE = "32" *) 
(* C_GPI4_INTERRUPT = "0" *) (* C_GPI4_SIZE = "32" *) (* C_GPO1_INIT = "0" *) 
(* C_GPO1_SIZE = "32" *) (* C_GPO2_INIT = "0" *) (* C_GPO2_SIZE = "32" *) 
(* C_GPO3_INIT = "0" *) (* C_GPO3_SIZE = "32" *) (* C_GPO4_INIT = "0" *) 
(* C_GPO4_SIZE = "32" *) (* C_HIGHADDR = "64'b0000000000000000000000000000000010000000000000001111111111111111" *) (* C_INSTANCE = "iomodule" *) 
(* C_INTC_ADDR_WIDTH = "17" *) (* C_INTC_ASYNC_INTR = "16'b1111111111111111" *) (* C_INTC_BASE_VECTORS = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_INTC_HAS_FAST = "1" *) (* C_INTC_INTR_SIZE = "1" *) (* C_INTC_LEVEL_EDGE = "16'b0000000000000000" *) 
(* C_INTC_NUM_SYNC_FF = "2" *) (* C_INTC_POSITIVE = "16'b1111111111111111" *) (* C_INTC_USE_EXT_INTR = "0" *) 
(* C_IO_BASEADDR = "64'b0000000000000000000000000000000011000000000000000000000000000000" *) (* C_IO_HIGHADDR = "64'b0000000000000000000000000000000011111111111111111111111111111111" *) (* C_IO_MASK = "64'b0000000000000000000000000000000011000000000000000000000000000000" *) 
(* C_LMB_AWIDTH = "32" *) (* C_LMB_DWIDTH = "32" *) (* C_MASK = "64'b0000000000000000000000000000000011000000000000000000000000000000" *) 
(* C_PIT1_INTERRUPT = "0" *) (* C_PIT1_PRESCALER = "0" *) (* C_PIT1_READABLE = "1" *) 
(* C_PIT1_SIZE = "32" *) (* C_PIT2_INTERRUPT = "0" *) (* C_PIT2_PRESCALER = "0" *) 
(* C_PIT2_READABLE = "1" *) (* C_PIT2_SIZE = "32" *) (* C_PIT3_INTERRUPT = "0" *) 
(* C_PIT3_PRESCALER = "0" *) (* C_PIT3_READABLE = "1" *) (* C_PIT3_SIZE = "32" *) 
(* C_PIT4_INTERRUPT = "0" *) (* C_PIT4_PRESCALER = "0" *) (* C_PIT4_READABLE = "1" *) 
(* C_PIT4_SIZE = "32" *) (* C_TMR = "0" *) (* C_UART_BAUDRATE = "9600" *) 
(* C_UART_DATA_BITS = "8" *) (* C_UART_ERROR_INTERRUPT = "0" *) (* C_UART_ODD_PARITY = "0" *) 
(* C_UART_PROG_BAUDRATE = "0" *) (* C_UART_RX_INTERRUPT = "0" *) (* C_UART_TX_INTERRUPT = "0" *) 
(* C_UART_USE_PARITY = "0" *) (* C_USE_CONFIG_RESET = "0" *) (* C_USE_FIT1 = "0" *) 
(* C_USE_FIT2 = "0" *) (* C_USE_FIT3 = "0" *) (* C_USE_FIT4 = "0" *) 
(* C_USE_GPI1 = "0" *) (* C_USE_GPI2 = "0" *) (* C_USE_GPI3 = "0" *) 
(* C_USE_GPI4 = "0" *) (* C_USE_GPO1 = "0" *) (* C_USE_GPO2 = "0" *) 
(* C_USE_GPO3 = "0" *) (* C_USE_GPO4 = "0" *) (* C_USE_IO_BUS = "1" *) 
(* C_USE_PIT1 = "0" *) (* C_USE_PIT2 = "0" *) (* C_USE_PIT3 = "0" *) 
(* C_USE_PIT4 = "0" *) (* C_USE_TMR_DISABLE = "0" *) (* C_USE_UART_RX = "1" *) 
(* C_USE_UART_TX = "1" *) (* ORIG_REF_NAME = "iomodule" *) 
module cpu_iomodule
   (Clk,
    Rst,
    Config_Reset,
    TMR_Rst,
    TMR_Disable,
    ToVote,
    FromAVote,
    FromBVote,
    IO_Addr_Strobe,
    IO_Read_Strobe,
    IO_Write_Strobe,
    IO_Address,
    IO_Byte_Enable,
    IO_Write_Data,
    IO_Read_Data,
    IO_Ready,
    UART_Rx,
    UART_Tx,
    UART_Interrupt,
    FIT1_Interrupt,
    FIT1_Toggle,
    FIT2_Interrupt,
    FIT2_Toggle,
    FIT3_Interrupt,
    FIT3_Toggle,
    FIT4_Interrupt,
    FIT4_Toggle,
    PIT1_Enable,
    PIT1_Interrupt,
    PIT1_Toggle,
    PIT2_Enable,
    PIT2_Interrupt,
    PIT2_Toggle,
    PIT3_Enable,
    PIT3_Interrupt,
    PIT3_Toggle,
    PIT4_Enable,
    PIT4_Interrupt,
    PIT4_Toggle,
    GPO1,
    GPO2,
    GPO3,
    GPO4,
    GPI1,
    GPI1_Interrupt,
    GPI2,
    GPI2_Interrupt,
    GPI3,
    GPI3_Interrupt,
    GPI4,
    GPI4_Interrupt,
    INTC_Interrupt,
    INTC_IRQ,
    INTC_Processor_Ack,
    INTC_Interrupt_Address,
    INTC_IRQ_OUT,
    LMB_ABus,
    LMB_WriteDBus,
    LMB_AddrStrobe,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE);
  input Clk;
  input Rst;
  input Config_Reset;
  input TMR_Rst;
  input TMR_Disable;
  output [1023:0]ToVote;
  input [1023:0]FromAVote;
  input [1023:0]FromBVote;
  output IO_Addr_Strobe;
  output IO_Read_Strobe;
  output IO_Write_Strobe;
  output [31:0]IO_Address;
  output [3:0]IO_Byte_Enable;
  output [31:0]IO_Write_Data;
  input [31:0]IO_Read_Data;
  input IO_Ready;
  input UART_Rx;
  output UART_Tx;
  output UART_Interrupt;
  output FIT1_Interrupt;
  output FIT1_Toggle;
  output FIT2_Interrupt;
  output FIT2_Toggle;
  output FIT3_Interrupt;
  output FIT3_Toggle;
  output FIT4_Interrupt;
  output FIT4_Toggle;
  input PIT1_Enable;
  output PIT1_Interrupt;
  output PIT1_Toggle;
  input PIT2_Enable;
  output PIT2_Interrupt;
  output PIT2_Toggle;
  input PIT3_Enable;
  output PIT3_Interrupt;
  output PIT3_Toggle;
  input PIT4_Enable;
  output PIT4_Interrupt;
  output PIT4_Toggle;
  output [31:0]GPO1;
  output [31:0]GPO2;
  output [31:0]GPO3;
  output [31:0]GPO4;
  input [31:0]GPI1;
  output GPI1_Interrupt;
  input [31:0]GPI2;
  output GPI2_Interrupt;
  input [31:0]GPI3;
  output GPI3_Interrupt;
  input [31:0]GPI4;
  output GPI4_Interrupt;
  input [0:0]INTC_Interrupt;
  output INTC_IRQ;
  input [1:0]INTC_Processor_Ack;
  output [31:0]INTC_Interrupt_Address;
  output INTC_IRQ_OUT;
  input [0:31]LMB_ABus;
  input [0:31]LMB_WriteDBus;
  input LMB_AddrStrobe;
  input LMB_ReadStrobe;
  input LMB_WriteStrobe;
  input [0:3]LMB_BE;
  output [0:31]Sl_DBus;
  output Sl_Ready;
  output Sl_Wait;
  output Sl_UE;
  output Sl_CE;

  wire Clk;
  wire [31:0]IO_Address;
  wire [31:0]IO_Read_Data;
  wire IO_Read_Strobe;
  wire IO_Read_Strobe__0;
  wire [31:0]IO_Write_Data;
  wire IO_Write_Strobe;
  wire IO_Write_Strobe__0;
  wire [0:31]LMB_ABus;
  wire LMB_AddrStrobe;
  wire LMB_ReadStrobe;
  wire [0:31]LMB_WriteDBus;
  wire LMB_WriteStrobe;
  wire Rst;
  wire [0:31]Sl_DBus;
  wire Sl_Ready;
  wire Sl_Wait;
  wire \Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ;
  wire \Using_IO_Bus.io_read_keep_i_1_n_0 ;
  wire \Using_IO_Bus.io_read_keep_reg_n_0 ;
  wire \Using_IO_Bus.lmb_io_select_keep_i_1_n_0 ;
  wire [7:0]io_bus_read_data;
  wire io_ready_Q;
  wire \lmb_abus_Q_reg_n_0_[2] ;
  wire \lmb_abus_Q_reg_n_0_[3] ;
  wire \lmb_abus_Q_reg_n_0_[4] ;
  wire \lmb_abus_Q_reg_n_0_[5] ;
  wire \lmb_abus_Q_reg_n_0_[6] ;
  wire lmb_io_select_keep;
  wire lmb_reg_read;
  wire lmb_reg_read0;
  wire lmb_reg_read_Q;
  wire lmb_reg_write;
  wire lmb_reg_write0;
  wire p_0_in19_in;
  wire p_22_out;
  (* RTL_KEEP = "true" *) wire uart_tx_write;
  wire uart_tx_write_inferred_i_2_n_0;
  wire NLW_IOModule_Core_I1_UART_Interrupt_UNCONNECTED;
  wire NLW_IOModule_Core_I1_UART_Rx_UNCONNECTED;
  wire NLW_IOModule_Core_I1_UART_Tx_UNCONNECTED;
  wire [7:0]NLW_IOModule_Core_I1_D_UNCONNECTED;

  cpu_Iomodule_core IOModule_Core_I1
       (.Clk(Clk),
        .D(NLW_IOModule_Core_I1_D_UNCONNECTED[7:0]),
        .E(uart_tx_write),
        .Q({\lmb_abus_Q_reg_n_0_[2] ,\lmb_abus_Q_reg_n_0_[3] ,\lmb_abus_Q_reg_n_0_[4] ,\lmb_abus_Q_reg_n_0_[5] ,\lmb_abus_Q_reg_n_0_[6] }),
        .Rst(Rst),
        .Sl_DBus({Sl_DBus[24],Sl_DBus[25],Sl_DBus[26],Sl_DBus[27],Sl_DBus[28],Sl_DBus[29],Sl_DBus[30],Sl_DBus[31]}),
        .UART_Interrupt(NLW_IOModule_Core_I1_UART_Interrupt_UNCONNECTED),
        .UART_Rx(NLW_IOModule_Core_I1_UART_Rx_UNCONNECTED),
        .UART_Tx(NLW_IOModule_Core_I1_UART_Tx_UNCONNECTED),
        .io_bus_read_data(io_bus_read_data),
        .lmb_reg_read(lmb_reg_read));
  LUT3 #(
    .INIT(8'hFE)) 
    Sl_Ready_INST_0
       (.I0(lmb_reg_write),
        .I1(lmb_reg_read_Q),
        .I2(io_ready_Q),
        .O(Sl_Ready));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'hE)) 
    Sl_Wait_INST_0
       (.I0(lmb_reg_read),
        .I1(lmb_io_select_keep),
        .O(Sl_Wait));
  LUT3 #(
    .INIT(8'h80)) 
    \Using_IO_Bus.IO_Addr_Strobe_i_2 
       (.I0(LMB_ABus[0]),
        .I1(LMB_ABus[1]),
        .I2(LMB_AddrStrobe),
        .O(p_22_out));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[10] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[21]),
        .Q(IO_Address[10]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[11] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[20]),
        .Q(IO_Address[11]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[12] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[19]),
        .Q(IO_Address[12]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[23] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[8]),
        .Q(IO_Address[23]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[24] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[7]),
        .Q(IO_Address[24]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[25] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[6]),
        .Q(IO_Address[25]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[26] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[5]),
        .Q(IO_Address[26]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[27] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[4]),
        .Q(IO_Address[27]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[28] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[3]),
        .Q(IO_Address[28]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[29] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[2]),
        .Q(IO_Address[29]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[2] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[29]),
        .Q(IO_Address[2]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[30] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[1]),
        .Q(IO_Address[30]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[31] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[0]),
        .Q(IO_Address[31]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[3] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[28]),
        .Q(IO_Address[3]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[7] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[24]),
        .Q(IO_Address[7]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[8] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[23]),
        .Q(IO_Address[8]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Address_reg[9] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_ABus[22]),
        .Q(IO_Address[9]),
        .R(Rst));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_IO_Bus.IO_Read_Strobe_i_1 
       (.I0(LMB_AddrStrobe),
        .I1(LMB_ABus[1]),
        .I2(LMB_ABus[0]),
        .I3(LMB_ReadStrobe),
        .O(IO_Read_Strobe__0));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Read_Strobe_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Strobe__0),
        .Q(IO_Read_Strobe),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Write_Data_reg[0] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_WriteDBus[31]),
        .Q(IO_Write_Data[0]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Write_Data_reg[10] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_WriteDBus[21]),
        .Q(IO_Write_Data[10]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Write_Data_reg[1] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_WriteDBus[30]),
        .Q(IO_Write_Data[1]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Write_Data_reg[2] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_WriteDBus[29]),
        .Q(IO_Write_Data[2]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Write_Data_reg[3] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_WriteDBus[28]),
        .Q(IO_Write_Data[3]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Write_Data_reg[4] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_WriteDBus[27]),
        .Q(IO_Write_Data[4]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Write_Data_reg[5] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_WriteDBus[26]),
        .Q(IO_Write_Data[5]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Write_Data_reg[6] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_WriteDBus[25]),
        .Q(IO_Write_Data[6]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Write_Data_reg[7] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_WriteDBus[24]),
        .Q(IO_Write_Data[7]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Write_Data_reg[8] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_WriteDBus[23]),
        .Q(IO_Write_Data[8]),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Write_Data_reg[9] 
       (.C(Clk),
        .CE(p_22_out),
        .D(LMB_WriteDBus[22]),
        .Q(IO_Write_Data[9]),
        .R(Rst));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_IO_Bus.IO_Write_Strobe_i_1 
       (.I0(LMB_AddrStrobe),
        .I1(LMB_ABus[1]),
        .I2(LMB_ABus[0]),
        .I3(LMB_WriteStrobe),
        .O(IO_Write_Strobe__0));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.IO_Write_Strobe_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Write_Strobe__0),
        .Q(IO_Write_Strobe),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT1 #(
    .INIT(2'h1)) 
    \Using_IO_Bus.io_bus_read_data[31]_i_1 
       (.I0(\Using_IO_Bus.io_read_keep_reg_n_0 ),
        .O(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[0]),
        .Q(io_bus_read_data[0]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[10]),
        .Q(Sl_DBus[21]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[11]),
        .Q(Sl_DBus[20]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[12]),
        .Q(Sl_DBus[19]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[13]),
        .Q(Sl_DBus[18]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[14]),
        .Q(Sl_DBus[17]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[15]),
        .Q(Sl_DBus[16]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[16]),
        .Q(Sl_DBus[15]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[17]),
        .Q(Sl_DBus[14]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[18]),
        .Q(Sl_DBus[13]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[19]),
        .Q(Sl_DBus[12]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[1]),
        .Q(io_bus_read_data[1]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[20]),
        .Q(Sl_DBus[11]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[21]),
        .Q(Sl_DBus[10]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[22]),
        .Q(Sl_DBus[9]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[23]),
        .Q(Sl_DBus[8]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[24]),
        .Q(Sl_DBus[7]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[25]),
        .Q(Sl_DBus[6]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[26]),
        .Q(Sl_DBus[5]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[27]),
        .Q(Sl_DBus[4]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[28]),
        .Q(Sl_DBus[3]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[29]),
        .Q(Sl_DBus[2]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[2]),
        .Q(io_bus_read_data[2]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[30]),
        .Q(Sl_DBus[1]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[31]),
        .Q(Sl_DBus[0]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[3]),
        .Q(io_bus_read_data[3]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[4]),
        .Q(io_bus_read_data[4]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[5]),
        .Q(io_bus_read_data[5]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[6]),
        .Q(io_bus_read_data[6]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[7]),
        .Q(io_bus_read_data[7]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[8]),
        .Q(Sl_DBus[23]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_bus_read_data_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(IO_Read_Data[9]),
        .Q(Sl_DBus[22]),
        .R(\Using_IO_Bus.io_bus_read_data[31]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_IO_Bus.io_read_keep_i_1 
       (.I0(LMB_ReadStrobe),
        .I1(LMB_AddrStrobe),
        .I2(LMB_ABus[1]),
        .I3(LMB_ABus[0]),
        .O(\Using_IO_Bus.io_read_keep_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_read_keep_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_IO_Bus.io_read_keep_i_1_n_0 ),
        .Q(\Using_IO_Bus.io_read_keep_reg_n_0 ),
        .R(Rst));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.io_ready_Q_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(lmb_io_select_keep),
        .Q(io_ready_Q),
        .R(1'b0));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'h80)) 
    \Using_IO_Bus.lmb_io_select_keep_i_1 
       (.I0(LMB_AddrStrobe),
        .I1(LMB_ABus[1]),
        .I2(LMB_ABus[0]),
        .O(\Using_IO_Bus.lmb_io_select_keep_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_IO_Bus.lmb_io_select_keep_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_IO_Bus.lmb_io_select_keep_i_1_n_0 ),
        .Q(lmb_io_select_keep),
        .R(Rst));
  FDRE #(
    .INIT(1'b0)) 
    \lmb_abus_Q_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_ABus[24]),
        .Q(p_0_in19_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \lmb_abus_Q_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_ABus[25]),
        .Q(\lmb_abus_Q_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \lmb_abus_Q_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_ABus[26]),
        .Q(\lmb_abus_Q_reg_n_0_[3] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \lmb_abus_Q_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_ABus[27]),
        .Q(\lmb_abus_Q_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \lmb_abus_Q_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_ABus[28]),
        .Q(\lmb_abus_Q_reg_n_0_[5] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \lmb_abus_Q_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_ABus[29]),
        .Q(\lmb_abus_Q_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    lmb_reg_read_Q_reg
       (.C(Clk),
        .CE(1'b1),
        .D(lmb_reg_read),
        .Q(lmb_reg_read_Q),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    lmb_reg_read_i_1
       (.I0(LMB_ABus[0]),
        .I1(LMB_ABus[1]),
        .I2(LMB_AddrStrobe),
        .I3(LMB_ReadStrobe),
        .O(lmb_reg_read0));
  FDRE #(
    .INIT(1'b0)) 
    lmb_reg_read_reg
       (.C(Clk),
        .CE(1'b1),
        .D(lmb_reg_read0),
        .Q(lmb_reg_read),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    lmb_reg_write_i_1
       (.I0(LMB_ABus[0]),
        .I1(LMB_ABus[1]),
        .I2(LMB_AddrStrobe),
        .I3(LMB_WriteStrobe),
        .O(lmb_reg_write0));
  FDRE #(
    .INIT(1'b0)) 
    lmb_reg_write_reg
       (.C(Clk),
        .CE(1'b1),
        .D(lmb_reg_write0),
        .Q(lmb_reg_write),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000040000)) 
    uart_tx_write_inferred_i_1
       (.I0(p_0_in19_in),
        .I1(lmb_reg_write),
        .I2(\lmb_abus_Q_reg_n_0_[4] ),
        .I3(uart_tx_write_inferred_i_2_n_0),
        .I4(\lmb_abus_Q_reg_n_0_[6] ),
        .I5(\lmb_abus_Q_reg_n_0_[3] ),
        .O(uart_tx_write));
  LUT2 #(
    .INIT(4'hE)) 
    uart_tx_write_inferred_i_2
       (.I0(\lmb_abus_Q_reg_n_0_[2] ),
        .I1(\lmb_abus_Q_reg_n_0_[5] ),
        .O(uart_tx_write_inferred_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_FDRE" *) 
module cpu_iomodule_v3_1_4_MB_FDRE
   (tx_Data_Enable,
    p_3_out,
    p_7_out,
    \Using_FPGA.Native_0 ,
    en_16x_baud,
    div16,
    Clk,
    Q,
    tx_Start,
    tx_DataBits,
    tx_data_transmitted,
    out);
  output tx_Data_Enable;
  output p_3_out;
  output p_7_out;
  output \Using_FPGA.Native_0 ;
  input en_16x_baud;
  input div16;
  input Clk;
  input [2:0]Q;
  input tx_Start;
  input tx_DataBits;
  input tx_data_transmitted;
  input out;

  wire Clk;
  wire [2:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire div16;
  wire en_16x_baud;
  wire out;
  wire p_3_out;
  wire p_7_out;
  wire tx_DataBits;
  wire tx_Data_Enable;
  wire tx_Start;
  wire tx_data_transmitted;

  LUT4 #(
    .INIT(16'h0002)) 
    \TMR_No.data_is_sent_i_1 
       (.I0(tx_Data_Enable),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(p_3_out));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h00F8)) 
    \TMR_No.tx_DataBits_i_1 
       (.I0(tx_Start),
        .I1(tx_Data_Enable),
        .I2(tx_DataBits),
        .I3(tx_data_transmitted),
        .O(p_7_out));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h00F2)) 
    \TMR_No.tx_Start_i_1 
       (.I0(tx_Data_Enable),
        .I1(out),
        .I2(tx_Start),
        .I3(tx_DataBits),
        .O(\Using_FPGA.Native_0 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(div16),
        .Q(tx_Data_Enable),
        .R(tx_Data_Enable));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_FDRE" *) 
module cpu_iomodule_v3_1_4_MB_FDRE_875
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_FDRE" *) 
module cpu_iomodule_v3_1_4_MB_FDRE_876
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_FDRE" *) 
module cpu_iomodule_v3_1_4_MB_FDRE_877
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_FDRE" *) 
module cpu_iomodule_v3_1_4_MB_FDRE_878
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_FDRE" *) 
module cpu_iomodule_v3_1_4_MB_FDRE_879
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_FDRE" *) 
module cpu_iomodule_v3_1_4_MB_FDRE_880
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_FDRE" *) 
module cpu_iomodule_v3_1_4_MB_FDRE_881
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_FDSE" *) 
module cpu_iomodule_v3_1_4_MB_FDSE
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    D_0,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input D_0;
  input Clk;

  wire Clk;
  wire D_0;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(D_0),
        .Q(in0),
        .S(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_MUXCY" *) 
module cpu_iomodule_v3_1_4_MB_MUXCY_872
   (cnt_cy_1,
    \TMR_No.Counter[2].h_Cnt_reg ,
    CI,
    Q,
    tx_DataBits,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output cnt_cy_1;
  output \TMR_No.Counter[2].h_Cnt_reg ;
  output CI;
  input [0:0]Q;
  input tx_DataBits;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;

  wire CI;
  wire [0:0]Q;
  wire \TMR_No.Counter[2].h_Cnt_reg ;
  wire cnt_cy_1;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire lopt_5;
  wire tx_DataBits;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = lopt_4;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],cnt_cy_1}),
        .CYINIT(CI),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,Q}),
        .O({\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3],\^lopt_4 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [1:0]}),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_5,\^lopt_3 ,\TMR_No.Counter[2].h_Cnt_reg }));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__1 
       (.I0(Q),
        .O(\TMR_No.Counter[2].h_Cnt_reg ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__1 
       (.I0(tx_DataBits),
        .O(CI));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_XORCY" *) 
module cpu_iomodule_v3_1_4_MB_XORCY
   (D,
    cnt_cy_2,
    Q,
    lopt,
    lopt_1);
  output [0:0]D;
  input cnt_cy_2;
  input [0:0]Q;
  input lopt;
  output lopt_1;

  wire [0:0]D;
  wire [0:0]Q;
  wire \Using_FPGA.Native_i_1__10_n_0 ;

  assign D = lopt;
  assign lopt_1 = \Using_FPGA.Native_i_1__10_n_0 ;
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__10 
       (.I0(Q),
        .O(\Using_FPGA.Native_i_1__10_n_0 ));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_XORCY" *) 
module cpu_iomodule_v3_1_4_MB_XORCY_871
   (D,
    \TMR_No.mux_sel_reg[1] ,
    cnt_cy_1,
    Q);
  output [0:0]D;
  output \TMR_No.mux_sel_reg[1] ;
  input cnt_cy_1;
  input [0:0]Q;

  wire [0:0]D;
  wire [0:0]Q;
  wire \TMR_No.mux_sel_reg[1] ;
  wire cnt_cy_1;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO(\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(cnt_cy_1),
        .DI(\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:0]),
        .O({\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:1],D}),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],\TMR_No.mux_sel_reg[1] }));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__11 
       (.I0(Q),
        .O(\TMR_No.mux_sel_reg[1] ));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_4_MB_XORCY" *) 
module cpu_iomodule_v3_1_4_MB_XORCY_873
   (D,
    \TMR_No.Counter[2].h_Cnt_reg ,
    CI);
  output [0:0]D;
  input \TMR_No.Counter[2].h_Cnt_reg ;
  input CI;

  wire CI;
  wire [0:0]D;
  wire \TMR_No.Counter[2].h_Cnt_reg ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO(\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(CI),
        .DI(\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:0]),
        .O({\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:1],D}),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],\TMR_No.Counter[2].h_Cnt_reg }));
endmodule

(* ORIG_REF_NAME = "lmb_bram_if_cntlr" *) 
module cpu_lmb_bram_if_cntlr
   (BRAM_WEN_A,
    Sl_Ready,
    LMB_Rst,
    LMB_AddrStrobe,
    LMB_Clk,
    LMB_ABus,
    LMB_WriteStrobe,
    LMB_BE);
  output [0:3]BRAM_WEN_A;
  output Sl_Ready;
  input LMB_Rst;
  input LMB_AddrStrobe;
  input LMB_Clk;
  input [1:0]LMB_ABus;
  input LMB_WriteStrobe;
  input [0:3]LMB_BE;

  wire [0:3]BRAM_WEN_A;
  wire [1:0]LMB_ABus;
  wire LMB_AddrStrobe;
  wire [0:3]LMB_BE;
  wire LMB_Clk;
  wire LMB_Rst;
  wire LMB_WriteStrobe;
  wire Sl_Rdy;
  wire Sl_Ready;
  wire lmb_as;
  wire lmb_select;

  LUT4 #(
    .INIT(16'h0200)) 
    \BRAM_WEN_A[0]_INST_0 
       (.I0(LMB_BE[0]),
        .I1(LMB_ABus[0]),
        .I2(LMB_ABus[1]),
        .I3(LMB_WriteStrobe),
        .O(BRAM_WEN_A[0]));
  LUT4 #(
    .INIT(16'h1000)) 
    \BRAM_WEN_A[1]_INST_0 
       (.I0(LMB_ABus[0]),
        .I1(LMB_ABus[1]),
        .I2(LMB_WriteStrobe),
        .I3(LMB_BE[1]),
        .O(BRAM_WEN_A[1]));
  LUT4 #(
    .INIT(16'h1000)) 
    \BRAM_WEN_A[2]_INST_0 
       (.I0(LMB_ABus[0]),
        .I1(LMB_ABus[1]),
        .I2(LMB_WriteStrobe),
        .I3(LMB_BE[2]),
        .O(BRAM_WEN_A[2]));
  LUT4 #(
    .INIT(16'h1000)) 
    \BRAM_WEN_A[3]_INST_0 
       (.I0(LMB_ABus[0]),
        .I1(LMB_ABus[1]),
        .I2(LMB_WriteStrobe),
        .I3(LMB_BE[3]),
        .O(BRAM_WEN_A[3]));
  LUT2 #(
    .INIT(4'h1)) 
    \No_ECC.Sl_Rdy_i_1 
       (.I0(LMB_ABus[0]),
        .I1(LMB_ABus[1]),
        .O(lmb_select));
  FDRE #(
    .INIT(1'b0)) 
    \No_ECC.Sl_Rdy_reg 
       (.C(LMB_Clk),
        .CE(1'b1),
        .D(lmb_select),
        .Q(Sl_Rdy),
        .R(LMB_Rst));
  FDRE #(
    .INIT(1'b0)) 
    \No_ECC.lmb_as_reg 
       (.C(LMB_Clk),
        .CE(1'b1),
        .D(LMB_AddrStrobe),
        .Q(lmb_as),
        .R(LMB_Rst));
  LUT2 #(
    .INIT(4'h8)) 
    Sl_Ready_INST_0
       (.I0(Sl_Rdy),
        .I1(lmb_as),
        .O(Sl_Ready));
endmodule

(* ORIG_REF_NAME = "lmb_bram_if_cntlr" *) 
module cpu_lmb_bram_if_cntlr__parameterized1
   (BRAM_WEN_A,
    Sl_Ready,
    LMB_Rst,
    LMB_AddrStrobe,
    LMB_Clk,
    LMB_ABus,
    LMB_WriteStrobe,
    LMB_BE);
  output [0:3]BRAM_WEN_A;
  output Sl_Ready;
  input LMB_Rst;
  input LMB_AddrStrobe;
  input LMB_Clk;
  input [0:0]LMB_ABus;
  input LMB_WriteStrobe;
  input [0:3]LMB_BE;

  wire LMB_AddrStrobe;
  wire LMB_Clk;
  wire LMB_Rst;
  wire Sl_Rdy;
  wire Sl_Ready;
  wire ZERO;
  wire lmb_as;

  assign BRAM_WEN_A[0] = ZERO;
  assign BRAM_WEN_A[1] = ZERO;
  assign BRAM_WEN_A[2] = ZERO;
  assign BRAM_WEN_A[3] = ZERO;
  (* OPT_MODIFIED = "PROPCONST " *) 
  GND GND
       (.G(ZERO));
  FDRE #(
    .INIT(1'b0)) 
    \No_ECC.Sl_Rdy_reg 
       (.C(LMB_Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(Sl_Rdy),
        .R(LMB_Rst));
  FDRE #(
    .INIT(1'b0)) 
    \No_ECC.lmb_as_reg 
       (.C(LMB_Clk),
        .CE(1'b1),
        .D(LMB_AddrStrobe),
        .Q(lmb_as),
        .R(LMB_Rst));
  LUT2 #(
    .INIT(4'h8)) 
    Sl_Ready_INST_0
       (.I0(Sl_Rdy),
        .I1(lmb_as),
        .O(Sl_Ready));
endmodule

(* C_EXT_RESET_HIGH = "1" *) (* C_LMB_AWIDTH = "32" *) (* C_LMB_DWIDTH = "32" *) 
(* C_LMB_NUM_SLAVES = "2" *) (* ORIG_REF_NAME = "lmb_v10" *) 
module cpu_lmb_v10
   (LMB_Clk,
    SYS_Rst,
    LMB_Rst,
    M_ABus,
    M_ReadStrobe,
    M_WriteStrobe,
    M_AddrStrobe,
    M_DBus,
    M_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE,
    LMB_ABus,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_AddrStrobe,
    LMB_ReadDBus,
    LMB_WriteDBus,
    LMB_Ready,
    LMB_Wait,
    LMB_UE,
    LMB_CE,
    LMB_BE);
  input LMB_Clk;
  input SYS_Rst;
  output LMB_Rst;
  input [0:31]M_ABus;
  input M_ReadStrobe;
  input M_WriteStrobe;
  input M_AddrStrobe;
  input [0:31]M_DBus;
  input [0:3]M_BE;
  input [0:63]Sl_DBus;
  input [0:1]Sl_Ready;
  input [0:1]Sl_Wait;
  input [0:1]Sl_UE;
  input [0:1]Sl_CE;
  output [0:31]LMB_ABus;
  output LMB_ReadStrobe;
  output LMB_WriteStrobe;
  output LMB_AddrStrobe;
  output [0:31]LMB_ReadDBus;
  output [0:31]LMB_WriteDBus;
  output LMB_Ready;
  output LMB_Wait;
  output LMB_UE;
  output LMB_CE;
  output [0:3]LMB_BE;

  wire [0:31]LMB_ReadDBus;
  wire LMB_Ready;
  wire [0:31]M_ABus;
  wire M_AddrStrobe;
  wire [0:3]M_BE;
  wire [0:31]M_DBus;
  wire M_ReadStrobe;
  wire M_WriteStrobe;
  wire [0:63]Sl_DBus;
  wire [0:1]Sl_Ready;
  wire [0:1]Sl_Wait;

  assign LMB_ABus[0:8] = M_ABus[0:8];
  assign LMB_ABus[15:29] = M_ABus[15:29];
  assign LMB_AddrStrobe = M_AddrStrobe;
  assign LMB_BE[0:3] = M_BE;
  assign LMB_ReadStrobe = M_ReadStrobe;
  assign LMB_Wait = Sl_Wait[1];
  assign LMB_WriteDBus[0:31] = M_DBus;
  assign LMB_WriteStrobe = M_WriteStrobe;
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[0]_INST_0 
       (.I0(Sl_DBus[0]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[32]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[0]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[10]_INST_0 
       (.I0(Sl_DBus[10]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[42]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[10]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[11]_INST_0 
       (.I0(Sl_DBus[11]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[43]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[11]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[12]_INST_0 
       (.I0(Sl_DBus[12]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[44]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[12]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[13]_INST_0 
       (.I0(Sl_DBus[13]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[45]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[13]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[14]_INST_0 
       (.I0(Sl_DBus[14]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[46]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[14]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[15]_INST_0 
       (.I0(Sl_DBus[15]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[47]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[15]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[16]_INST_0 
       (.I0(Sl_DBus[16]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[48]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[16]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[17]_INST_0 
       (.I0(Sl_DBus[17]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[49]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[17]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[18]_INST_0 
       (.I0(Sl_DBus[18]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[50]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[18]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[19]_INST_0 
       (.I0(Sl_DBus[19]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[51]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[19]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[1]_INST_0 
       (.I0(Sl_DBus[1]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[33]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[1]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[20]_INST_0 
       (.I0(Sl_DBus[20]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[52]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[20]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[21]_INST_0 
       (.I0(Sl_DBus[21]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[53]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[21]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[22]_INST_0 
       (.I0(Sl_DBus[22]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[54]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[22]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[23]_INST_0 
       (.I0(Sl_DBus[23]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[55]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[23]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[24]_INST_0 
       (.I0(Sl_DBus[24]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[56]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[24]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[25]_INST_0 
       (.I0(Sl_DBus[25]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[57]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[25]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[26]_INST_0 
       (.I0(Sl_DBus[26]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[58]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[26]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[27]_INST_0 
       (.I0(Sl_DBus[27]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[59]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[27]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[28]_INST_0 
       (.I0(Sl_DBus[28]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[60]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[28]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[29]_INST_0 
       (.I0(Sl_DBus[29]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[61]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[29]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[2]_INST_0 
       (.I0(Sl_DBus[2]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[34]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[2]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[30]_INST_0 
       (.I0(Sl_DBus[30]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[62]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[30]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[31]_INST_0 
       (.I0(Sl_DBus[31]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[63]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[31]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[3]_INST_0 
       (.I0(Sl_DBus[3]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[35]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[3]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[4]_INST_0 
       (.I0(Sl_DBus[4]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[36]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[4]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[5]_INST_0 
       (.I0(Sl_DBus[5]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[37]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[5]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[6]_INST_0 
       (.I0(Sl_DBus[6]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[38]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[6]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[7]_INST_0 
       (.I0(Sl_DBus[7]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[39]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[7]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[8]_INST_0 
       (.I0(Sl_DBus[8]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[40]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[8]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[9]_INST_0 
       (.I0(Sl_DBus[9]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[41]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[9]));
  LUT2 #(
    .INIT(4'hE)) 
    LMB_Ready_INST_0
       (.I0(Sl_Ready[0]),
        .I1(Sl_Ready[1]),
        .O(LMB_Ready));
endmodule

(* C_EXT_RESET_HIGH = "1" *) (* C_LMB_AWIDTH = "32" *) (* C_LMB_DWIDTH = "32" *) 
(* C_LMB_NUM_SLAVES = "1" *) (* ORIG_REF_NAME = "lmb_v10" *) 
module cpu_lmb_v10__parameterized1
   (LMB_Clk,
    SYS_Rst,
    LMB_Rst,
    M_ABus,
    M_ReadStrobe,
    M_WriteStrobe,
    M_AddrStrobe,
    M_DBus,
    M_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE,
    LMB_ABus,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_AddrStrobe,
    LMB_ReadDBus,
    LMB_WriteDBus,
    LMB_Ready,
    LMB_Wait,
    LMB_UE,
    LMB_CE,
    LMB_BE);
  input LMB_Clk;
  input SYS_Rst;
  output LMB_Rst;
  input [0:31]M_ABus;
  input M_ReadStrobe;
  input M_WriteStrobe;
  input M_AddrStrobe;
  input [0:31]M_DBus;
  input [0:3]M_BE;
  input [0:31]Sl_DBus;
  input [0:0]Sl_Ready;
  input [0:0]Sl_Wait;
  input [0:0]Sl_UE;
  input [0:0]Sl_CE;
  output [0:31]LMB_ABus;
  output LMB_ReadStrobe;
  output LMB_WriteStrobe;
  output LMB_AddrStrobe;
  output [0:31]LMB_ReadDBus;
  output [0:31]LMB_WriteDBus;
  output LMB_Ready;
  output LMB_Wait;
  output LMB_UE;
  output LMB_CE;
  output [0:3]LMB_BE;

  wire [0:31]M_ABus;
  wire M_AddrStrobe;
  wire [0:31]M_DBus;
  wire [0:31]Sl_DBus;
  wire [0:0]Sl_Ready;

  assign LMB_ABus[15:29] = M_ABus[15:29];
  assign LMB_AddrStrobe = M_AddrStrobe;
  assign LMB_ReadDBus[0:31] = Sl_DBus;
  assign LMB_Ready = Sl_Ready;
  assign LMB_WriteDBus[0:31] = M_DBus;
endmodule

(* ORIG_REF_NAME = "lpf" *) 
module cpu_lpf
   (lpf_int,
    slowest_sync_clk,
    dcm_locked,
    ext_reset_in,
    mb_debug_sys_rst,
    aux_reset_in);
  output lpf_int;
  input slowest_sync_clk;
  input dcm_locked;
  input ext_reset_in;
  input mb_debug_sys_rst;
  input aux_reset_in;

  wire \ACTIVE_HIGH_EXT.ACT_HI_EXT_n_0 ;
  wire \ACTIVE_LOW_AUX.ACT_LO_AUX_n_0 ;
  wire Q;
  wire [0:0]asr_lpf;
  wire ext_reset_in;
  wire lpf_asr;
  wire lpf_exr;
  wire lpf_int;
  wire lpf_int0__0;
  wire mb_debug_sys_rst;
  wire p_1_in;
  wire p_2_in;
  wire p_3_in1_in;
  wire [3:0]p_3_out;
  wire slowest_sync_clk;
  wire \NLW_ACTIVE_LOW_AUX.ACT_LO_AUX_aux_reset_in_UNCONNECTED ;

  cpu_cdc_sync \ACTIVE_HIGH_EXT.ACT_HI_EXT 
       (.ext_reset_in(ext_reset_in),
        .lpf_exr(lpf_exr),
        .lpf_exr_reg(\ACTIVE_HIGH_EXT.ACT_HI_EXT_n_0 ),
        .mb_debug_sys_rst(mb_debug_sys_rst),
        .p_3_out(p_3_out[2:0]),
        .scndry_out(p_3_out[3]),
        .slowest_sync_clk(slowest_sync_clk));
  cpu_cdc_sync_0 \ACTIVE_LOW_AUX.ACT_LO_AUX 
       (.asr_lpf(asr_lpf),
        .aux_reset_in(\NLW_ACTIVE_LOW_AUX.ACT_LO_AUX_aux_reset_in_UNCONNECTED ),
        .lpf_asr(lpf_asr),
        .lpf_asr_reg(\ACTIVE_LOW_AUX.ACT_LO_AUX_n_0 ),
        .p_1_in(p_1_in),
        .p_2_in(p_2_in),
        .scndry_out(p_3_in1_in),
        .slowest_sync_clk(slowest_sync_clk));
  FDRE #(
    .INIT(1'b0)) 
    \AUX_LPF[1].asr_lpf_reg[1] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_in1_in),
        .Q(p_2_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \AUX_LPF[2].asr_lpf_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_2_in),
        .Q(p_1_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \AUX_LPF[3].asr_lpf_reg[3] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_1_in),
        .Q(asr_lpf),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \EXT_LPF[1].exr_lpf_reg[1] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_out[3]),
        .Q(p_3_out[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \EXT_LPF[2].exr_lpf_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_out[2]),
        .Q(p_3_out[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \EXT_LPF[3].exr_lpf_reg[3] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_out[1]),
        .Q(p_3_out[0]),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/rst_0/U0/\EXT_LPF/POR_SRL_I " *) 
  SRL16E #(
    .INIT(16'hFFFF)) 
    POR_SRL_I
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(slowest_sync_clk),
        .D(1'b0),
        .Q(Q));
  FDRE #(
    .INIT(1'b0)) 
    lpf_asr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(\ACTIVE_LOW_AUX.ACT_LO_AUX_n_0 ),
        .Q(lpf_asr),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    lpf_exr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(\ACTIVE_HIGH_EXT.ACT_HI_EXT_n_0 ),
        .Q(lpf_exr),
        .R(1'b0));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hFE)) 
    lpf_int0
       (.I0(lpf_exr),
        .I1(lpf_asr),
        .I2(Q),
        .O(lpf_int0__0));
  FDRE #(
    .INIT(1'b0)) 
    lpf_int_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(lpf_int0__0),
        .Q(lpf_int),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_FDRE" *) 
module cpu_mdm_v3_2_15_MB_FDRE_842
   (Addr,
    S,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    O,
    S_AXI_ACLK,
    \Using_FPGA.Native_2 ,
    FIFO_Write,
    \Using_FPGA.Native_3 );
  output [0:0]Addr;
  output S;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input O;
  input S_AXI_ACLK;
  input [2:0]\Using_FPGA.Native_2 ;
  input FIFO_Write;
  input \Using_FPGA.Native_3 ;

  wire [0:0]Addr;
  wire FIFO_Write;
  wire O;
  wire S;
  wire S_AXI_ACLK;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [2:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_1 ),
        .D(O),
        .Q(Addr),
        .R(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_I1_i_1 
       (.I0(Addr),
        .I1(\Using_FPGA.Native_2 [1]),
        .I2(\Using_FPGA.Native_2 [0]),
        .I3(\Using_FPGA.Native_2 [2]),
        .I4(FIFO_Write),
        .I5(\Using_FPGA.Native_3 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_FDRE" *) 
module cpu_mdm_v3_2_15_MB_FDRE_843
   (\Using_FPGA.Native_0 ,
    S,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    O,
    S_AXI_ACLK,
    Addr,
    FIFO_Write,
    \Using_FPGA.Native_3 );
  output [0:0]\Using_FPGA.Native_0 ;
  output S;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input O;
  input S_AXI_ACLK;
  input [2:0]Addr;
  input FIFO_Write;
  input \Using_FPGA.Native_3 ;

  wire [2:0]Addr;
  wire FIFO_Write;
  wire O;
  wire S;
  wire S_AXI_ACLK;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_2 ),
        .D(O),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_I1_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Addr[1]),
        .I2(Addr[0]),
        .I3(Addr[2]),
        .I4(FIFO_Write),
        .I5(\Using_FPGA.Native_3 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_FDRE" *) 
module cpu_mdm_v3_2_15_MB_FDRE_845
   (Addr,
    D,
    tx_Buffer_Full,
    S,
    CI,
    data_Exists_I_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    O,
    S_AXI_ACLK,
    Q,
    \Use_UART.tdo_reg_reg[6] ,
    \Use_UART.tdo_reg_reg[6]_0 ,
    Data_Out,
    \Use_UART.tdo_reg_reg[6]_1 ,
    \Using_FPGA.Native_2 ,
    FIFO_Write,
    data_Exists_I_reg_0,
    Bus_RNW_reg,
    \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ,
    out);
  output [0:0]Addr;
  output [0:0]D;
  output tx_Buffer_Full;
  output S;
  output CI;
  output data_Exists_I_reg;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input O;
  input S_AXI_ACLK;
  input [0:0]Q;
  input \Use_UART.tdo_reg_reg[6] ;
  input \Use_UART.tdo_reg_reg[6]_0 ;
  input [0:0]Data_Out;
  input \Use_UART.tdo_reg_reg[6]_1 ;
  input [2:0]\Using_FPGA.Native_2 ;
  input FIFO_Write;
  input data_Exists_I_reg_0;
  input Bus_RNW_reg;
  input \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  input out;

  wire [0:0]Addr;
  wire Bus_RNW_reg;
  wire CI;
  wire [0:0]D;
  wire [0:0]Data_Out;
  wire FIFO_Write;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  wire O;
  wire [0:0]Q;
  wire S;
  wire S_AXI_ACLK;
  wire \Use_UART.tdo_reg_reg[6] ;
  wire \Use_UART.tdo_reg_reg[6]_0 ;
  wire \Use_UART.tdo_reg_reg[6]_1 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [2:0]\Using_FPGA.Native_2 ;
  wire buffer_Empty__2;
  wire data_Exists_I_reg;
  wire data_Exists_I_reg_0;
  wire out;
  wire tx_Buffer_Full;

  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \Use_UART.tdo_reg[6]_i_1 
       (.I0(Q),
        .I1(\Use_UART.tdo_reg_reg[6] ),
        .I2(\Use_UART.tdo_reg_reg[6]_0 ),
        .I3(tx_Buffer_Full),
        .I4(Data_Out),
        .I5(\Use_UART.tdo_reg_reg[6]_1 ),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_1 ),
        .D(O),
        .Q(Addr),
        .R(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_I1_i_1__1 
       (.I0(Addr),
        .I1(\Using_FPGA.Native_2 [0]),
        .I2(\Using_FPGA.Native_2 [2]),
        .I3(\Using_FPGA.Native_2 [1]),
        .I4(FIFO_Write),
        .I5(data_Exists_I_reg_0),
        .O(S));
  LUT5 #(
    .INIT(32'h0B000000)) 
    \Using_FPGA.Native_I1_i_2 
       (.I0(data_Exists_I_reg_0),
        .I1(tx_Buffer_Full),
        .I2(Bus_RNW_reg),
        .I3(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .I4(out),
        .O(CI));
  LUT5 #(
    .INIT(32'h0000F2AA)) 
    data_Exists_I_i_1
       (.I0(\Using_FPGA.Native_1 ),
        .I1(data_Exists_I_reg_0),
        .I2(FIFO_Write),
        .I3(buffer_Empty__2),
        .I4(\Using_FPGA.Native_0 ),
        .O(data_Exists_I_reg));
  LUT4 #(
    .INIT(16'h0001)) 
    data_Exists_I_i_2__0
       (.I0(Addr),
        .I1(\Using_FPGA.Native_2 [0]),
        .I2(\Using_FPGA.Native_2 [2]),
        .I3(\Using_FPGA.Native_2 [1]),
        .O(buffer_Empty__2));
  LUT4 #(
    .INIT(16'h8000)) 
    \s_axi_rdata_i[3]_i_2 
       (.I0(Addr),
        .I1(\Using_FPGA.Native_2 [0]),
        .I2(\Using_FPGA.Native_2 [2]),
        .I3(\Using_FPGA.Native_2 [1]),
        .O(tx_Buffer_Full));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_FDRE" *) 
module cpu_mdm_v3_2_15_MB_FDRE_847
   (\Using_FPGA.Native_0 ,
    LI,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    sum_A_0,
    S_AXI_ACLK,
    Addr,
    FIFO_Write,
    \Using_FPGA.Native_3 );
  output [0:0]\Using_FPGA.Native_0 ;
  output LI;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input sum_A_0;
  input S_AXI_ACLK;
  input [2:0]Addr;
  input FIFO_Write;
  input \Using_FPGA.Native_3 ;

  wire [2:0]Addr;
  wire FIFO_Write;
  wire LI;
  wire S_AXI_ACLK;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire sum_A_0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_2 ),
        .D(sum_A_0),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Addr[0]),
        .I2(Addr[2]),
        .I3(Addr[1]),
        .I4(FIFO_Write),
        .I5(\Using_FPGA.Native_3 ),
        .O(LI));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_FDRE" *) 
module cpu_mdm_v3_2_15_MB_FDRE_855
   (Addr,
    S,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    O,
    S_AXI_ACLK,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    bus2ip_rdce);
  output [0:0]Addr;
  output S;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input O;
  input S_AXI_ACLK;
  input [2:0]\Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input [0:0]bus2ip_rdce;

  wire [0:0]Addr;
  wire O;
  wire S;
  wire S_AXI_ACLK;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [2:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [0:0]bus2ip_rdce;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_1 ),
        .D(O),
        .Q(Addr),
        .R(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_I1_i_1__2 
       (.I0(Addr),
        .I1(\Using_FPGA.Native_2 [1]),
        .I2(\Using_FPGA.Native_2 [0]),
        .I3(\Using_FPGA.Native_2 [2]),
        .I4(\Using_FPGA.Native_3 ),
        .I5(bus2ip_rdce),
        .O(S));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_FDRE" *) 
module cpu_mdm_v3_2_15_MB_FDRE_857
   (\Using_FPGA.Native_0 ,
    S,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    O,
    S_AXI_ACLK,
    Addr,
    \Using_FPGA.Native_3 ,
    bus2ip_rdce);
  output [0:0]\Using_FPGA.Native_0 ;
  output S;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input O;
  input S_AXI_ACLK;
  input [2:0]Addr;
  input \Using_FPGA.Native_3 ;
  input [0:0]bus2ip_rdce;

  wire [2:0]Addr;
  wire O;
  wire S;
  wire S_AXI_ACLK;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [0:0]bus2ip_rdce;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_2 ),
        .D(O),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_I1_i_1__3 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Addr[1]),
        .I2(Addr[0]),
        .I3(Addr[2]),
        .I4(\Using_FPGA.Native_3 ),
        .I5(bus2ip_rdce),
        .O(S));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_FDRE" *) 
module cpu_mdm_v3_2_15_MB_FDRE_859
   (Addr,
    D,
    RX_Buffer_Full,
    S,
    CI,
    data_Exists_I_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    O,
    S_AXI_ACLK,
    \Use_UART.tdo_reg_reg[4] ,
    \Use_UART.tdo_reg_reg[4]_0 ,
    \Use_UART.tdo_reg_reg[4]_1 ,
    Data_Out,
    \Use_UART.tdo_reg_reg[4]_2 ,
    \Using_FPGA.Native_2 ,
    data_Exists_I_reg_0,
    bus2ip_rdce,
    Bus_RNW_reg,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg );
  output [0:0]Addr;
  output [0:0]D;
  output RX_Buffer_Full;
  output S;
  output CI;
  output data_Exists_I_reg;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input O;
  input S_AXI_ACLK;
  input [0:0]\Use_UART.tdo_reg_reg[4] ;
  input \Use_UART.tdo_reg_reg[4]_0 ;
  input \Use_UART.tdo_reg_reg[4]_1 ;
  input [0:0]Data_Out;
  input \Use_UART.tdo_reg_reg[4]_2 ;
  input [2:0]\Using_FPGA.Native_2 ;
  input data_Exists_I_reg_0;
  input [0:0]bus2ip_rdce;
  input Bus_RNW_reg;
  input \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;

  wire [0:0]Addr;
  wire Bus_RNW_reg;
  wire CI;
  wire [0:0]D;
  wire [0:0]Data_Out;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  wire O;
  wire RX_Buffer_Full;
  wire S;
  wire S_AXI_ACLK;
  wire [0:0]\Use_UART.tdo_reg_reg[4] ;
  wire \Use_UART.tdo_reg_reg[4]_0 ;
  wire \Use_UART.tdo_reg_reg[4]_1 ;
  wire \Use_UART.tdo_reg_reg[4]_2 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [2:0]\Using_FPGA.Native_2 ;
  wire buffer_Empty__2;
  wire [0:0]bus2ip_rdce;
  wire data_Exists_I_reg;
  wire data_Exists_I_reg_0;

  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \Use_UART.tdo_reg[4]_i_1 
       (.I0(\Use_UART.tdo_reg_reg[4] ),
        .I1(\Use_UART.tdo_reg_reg[4]_0 ),
        .I2(\Use_UART.tdo_reg_reg[4]_1 ),
        .I3(RX_Buffer_Full),
        .I4(Data_Out),
        .I5(\Use_UART.tdo_reg_reg[4]_2 ),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_1 ),
        .D(O),
        .Q(Addr),
        .R(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_I1_i_1__4 
       (.I0(Addr),
        .I1(\Using_FPGA.Native_2 [0]),
        .I2(\Using_FPGA.Native_2 [2]),
        .I3(\Using_FPGA.Native_2 [1]),
        .I4(data_Exists_I_reg_0),
        .I5(bus2ip_rdce),
        .O(S));
  LUT6 #(
    .INIT(64'hBFFFFFFF00000000)) 
    \Using_FPGA.Native_I1_i_2__0 
       (.I0(bus2ip_rdce),
        .I1(Addr),
        .I2(\Using_FPGA.Native_2 [0]),
        .I3(\Using_FPGA.Native_2 [2]),
        .I4(\Using_FPGA.Native_2 [1]),
        .I5(data_Exists_I_reg_0),
        .O(CI));
  LUT6 #(
    .INIT(64'h00000000FF2AAAAA)) 
    data_Exists_I_i_1__0
       (.I0(\Using_FPGA.Native_1 ),
        .I1(Bus_RNW_reg),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .I3(data_Exists_I_reg_0),
        .I4(buffer_Empty__2),
        .I5(\Using_FPGA.Native_0 ),
        .O(data_Exists_I_reg));
  LUT4 #(
    .INIT(16'h0001)) 
    data_Exists_I_i_2
       (.I0(Addr),
        .I1(\Using_FPGA.Native_2 [0]),
        .I2(\Using_FPGA.Native_2 [2]),
        .I3(\Using_FPGA.Native_2 [1]),
        .O(buffer_Empty__2));
  LUT4 #(
    .INIT(16'h8000)) 
    \s_axi_rdata_i[1]_i_2 
       (.I0(Addr),
        .I1(\Using_FPGA.Native_2 [0]),
        .I2(\Using_FPGA.Native_2 [2]),
        .I3(\Using_FPGA.Native_2 [1]),
        .O(RX_Buffer_Full));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_FDRE" *) 
module cpu_mdm_v3_2_15_MB_FDRE_861
   (\Using_FPGA.Native_0 ,
    LI,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    sum_A_0,
    S_AXI_ACLK,
    Addr,
    \Using_FPGA.Native_3 ,
    bus2ip_rdce);
  output [0:0]\Using_FPGA.Native_0 ;
  output LI;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input sum_A_0;
  input S_AXI_ACLK;
  input [2:0]Addr;
  input \Using_FPGA.Native_3 ;
  input [0:0]bus2ip_rdce;

  wire [2:0]Addr;
  wire LI;
  wire S_AXI_ACLK;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [0:0]bus2ip_rdce;
  wire sum_A_0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_2 ),
        .D(sum_A_0),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_i_1__2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Addr[0]),
        .I2(Addr[2]),
        .I3(Addr[1]),
        .I4(\Using_FPGA.Native_3 ),
        .I5(bus2ip_rdce),
        .O(LI));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_MUXCY_XORCY" *) 
module cpu_mdm_v3_2_15_MB_MUXCY_XORCY
   (LO,
    O,
    S,
    Addr,
    CI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output LO;
  output O;
  input S;
  input [0:0]Addr;
  input CI;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;
  output lopt_8;
  input lopt_9;

  wire [0:0]Addr;
  wire CI;
  wire O;
  wire S;
  wire lopt_10;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [3:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt_10 = lopt_9;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_8 = \^lopt_9 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(1'b0),
        .CO(\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(CI),
        .DI({\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,Addr}),
        .O({\^lopt_9 ,\^lopt_8 ,\^lopt_7 ,O}),
        .S({lopt_10,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_MUXCY_XORCY" *) 
module cpu_mdm_v3_2_15_MB_MUXCY_XORCY_844
   (LO,
    O,
    S,
    \Using_FPGA.Native ,
    CI,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input [0:0]\Using_FPGA.Native ;
  input CI;
  input lopt;
  input lopt_1;

  wire O;

  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_MUXCY_XORCY" *) 
module cpu_mdm_v3_2_15_MB_MUXCY_XORCY_846
   (LO,
    O,
    S,
    Addr,
    CI,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input [0:0]Addr;
  input CI;
  input lopt;
  input lopt_1;

  wire O;

  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_MUXCY_XORCY" *) 
module cpu_mdm_v3_2_15_MB_MUXCY_XORCY_856
   (LO,
    O,
    S,
    Addr,
    CI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output LO;
  output O;
  input S;
  input [0:0]Addr;
  input CI;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;
  output lopt_8;
  input lopt_9;

  wire [0:0]Addr;
  wire CI;
  wire O;
  wire S;
  wire lopt_10;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [3:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt_10 = lopt_9;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_8 = \^lopt_9 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(1'b0),
        .CO(\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(CI),
        .DI({\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,Addr}),
        .O({\^lopt_9 ,\^lopt_8 ,\^lopt_7 ,O}),
        .S({lopt_10,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_MUXCY_XORCY" *) 
module cpu_mdm_v3_2_15_MB_MUXCY_XORCY_858
   (LO,
    O,
    S,
    \Using_FPGA.Native ,
    CI,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input [0:0]\Using_FPGA.Native ;
  input CI;
  input lopt;
  input lopt_1;

  wire O;

  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_MUXCY_XORCY" *) 
module cpu_mdm_v3_2_15_MB_MUXCY_XORCY_860
   (LO,
    O,
    S,
    Addr,
    CI,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input [0:0]Addr;
  input CI;
  input lopt;
  input lopt_1;

  wire O;

  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E
   (\shift_Count_reg[0] ,
    Q,
    \Use_E2.BSCANE2_I_i_8 );
  output \shift_Count_reg[0] ;
  input [3:0]Q;
  input \Use_E2.BSCANE2_I_i_8 ;

  wire [3:0]Q;
  wire \Use_E2.BSCANE2_I_i_8 ;
  wire \shift_Count_reg[0] ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_Config_SRL16E.SRL16E_1/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0167),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(\Use_E2.BSCANE2_I_i_8 ),
        .D(1'b0),
        .Q(\shift_Count_reg[0] ));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized0
   (config_TDO_2,
    Q,
    \Use_E2.BSCANE2_I_i_8 );
  output config_TDO_2;
  input [3:0]Q;
  input \Use_E2.BSCANE2_I_i_8 ;

  wire [3:0]Q;
  wire \Use_E2.BSCANE2_I_i_8 ;
  wire config_TDO_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_Config_SRL16E.SRL16E_2/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h42A7),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(\Use_E2.BSCANE2_I_i_8 ),
        .D(1'b0),
        .Q(config_TDO_2));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized1
   (Q0_out,
    Q,
    \Use_E2.BSCANE2_I_i_8 );
  output Q0_out;
  input [3:0]Q;
  input \Use_E2.BSCANE2_I_i_8 ;

  wire [3:0]Q;
  wire Q0_out;
  wire \Use_E2.BSCANE2_I_i_8 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_ID_SRL16E.SRL16E_ID_1/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h4443),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(\Use_E2.BSCANE2_I_i_8 ),
        .D(1'b0),
        .Q(Q0_out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized2
   (tdo,
    Q,
    \Use_E2.BSCANE2_I_i_8_0 ,
    sel_n_reg,
    sel_n_reg_0,
    sel_n_reg_1,
    sel_n_reg_2,
    sel_n_reg_3,
    Dbg_TDO_0,
    \Use_E2.BSCANE2_I_i_1_0 ,
    \Use_E2.BSCANE2_I_i_1_1 ,
    config_TDO_2,
    Q0_out,
    \Use_E2.BSCANE2_I_i_5_0 );
  output tdo;
  input [4:0]Q;
  input \Use_E2.BSCANE2_I_i_8_0 ;
  input sel_n_reg;
  input [0:0]sel_n_reg_0;
  input sel_n_reg_1;
  input [2:0]sel_n_reg_2;
  input sel_n_reg_3;
  input Dbg_TDO_0;
  input \Use_E2.BSCANE2_I_i_1_0 ;
  input \Use_E2.BSCANE2_I_i_1_1 ;
  input config_TDO_2;
  input Q0_out;
  input \Use_E2.BSCANE2_I_i_5_0 ;

  wire Dbg_TDO_0;
  wire ID_TDO_2;
  wire [4:0]Q;
  wire Q0_out;
  wire \Use_E2.BSCANE2_I_i_1_0 ;
  wire \Use_E2.BSCANE2_I_i_1_1 ;
  wire \Use_E2.BSCANE2_I_i_5_0 ;
  wire \Use_E2.BSCANE2_I_i_5_n_0 ;
  wire \Use_E2.BSCANE2_I_i_8_0 ;
  wire \Use_E2.BSCANE2_I_i_8_n_0 ;
  wire config_TDO_2;
  wire sel_n_reg;
  wire [0:0]sel_n_reg_0;
  wire sel_n_reg_1;
  wire [2:0]sel_n_reg_2;
  wire sel_n_reg_3;
  wire tdo;

  LUT6 #(
    .INIT(64'hEAEEEAEEEAEEEAEA)) 
    \Use_E2.BSCANE2_I_i_1 
       (.I0(sel_n_reg),
        .I1(sel_n_reg_0),
        .I2(sel_n_reg_1),
        .I3(sel_n_reg_2[2]),
        .I4(sel_n_reg_3),
        .I5(\Use_E2.BSCANE2_I_i_5_n_0 ),
        .O(tdo));
  LUT5 #(
    .INIT(32'h2A2A3F00)) 
    \Use_E2.BSCANE2_I_i_5 
       (.I0(Dbg_TDO_0),
        .I1(sel_n_reg_2[0]),
        .I2(\Use_E2.BSCANE2_I_i_1_0 ),
        .I3(\Use_E2.BSCANE2_I_i_8_n_0 ),
        .I4(\Use_E2.BSCANE2_I_i_1_1 ),
        .O(\Use_E2.BSCANE2_I_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hCACAFFF0CACA0F00)) 
    \Use_E2.BSCANE2_I_i_8 
       (.I0(ID_TDO_2),
        .I1(config_TDO_2),
        .I2(sel_n_reg_2[1]),
        .I3(Q0_out),
        .I4(Q[4]),
        .I5(\Use_E2.BSCANE2_I_i_5_0 ),
        .O(\Use_E2.BSCANE2_I_i_8_n_0 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_ID_SRL16E.SRL16E_ID_2/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h584D),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(\Use_E2.BSCANE2_I_i_8_0 ),
        .D(1'b0),
        .Q(ID_TDO_2));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3
   (D,
    CI,
    S_AXI_WDATA,
    Addr,
    S_AXI_ACLK,
    \Use_UART.tdo_reg_reg[0] );
  output [0:0]D;
  input CI;
  input [0:0]S_AXI_WDATA;
  input [0:3]Addr;
  input S_AXI_ACLK;
  input \Use_UART.tdo_reg_reg[0] ;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]D;
  wire [0:0]Data_Out;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;
  wire \Use_UART.tdo_reg_reg[0] ;

  LUT2 #(
    .INIT(4'h8)) 
    \Use_UART.tdo_reg[0]_i_2 
       (.I0(\Use_UART.tdo_reg_reg[0] ),
        .I1(Data_Out),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[0].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(Data_Out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_848
   (D,
    CI,
    S_AXI_WDATA,
    Addr,
    S_AXI_ACLK,
    \Use_UART.tdo_reg_reg[1] ,
    \Use_UART.tdo_reg_reg[1]_0 ,
    Q);
  output [0:0]D;
  input CI;
  input [0:0]S_AXI_WDATA;
  input [0:3]Addr;
  input S_AXI_ACLK;
  input \Use_UART.tdo_reg_reg[1] ;
  input \Use_UART.tdo_reg_reg[1]_0 ;
  input [0:0]Q;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]D;
  wire [1:1]Data_Out;
  wire [0:0]Q;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;
  wire \Use_UART.tdo_reg_reg[1] ;
  wire \Use_UART.tdo_reg_reg[1]_0 ;

  LUT4 #(
    .INIT(16'h8F88)) 
    \Use_UART.tdo_reg[1]_i_1 
       (.I0(Data_Out),
        .I1(\Use_UART.tdo_reg_reg[1] ),
        .I2(\Use_UART.tdo_reg_reg[1]_0 ),
        .I3(Q),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[1].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(Data_Out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_849
   (D,
    CI,
    S_AXI_WDATA,
    Addr,
    S_AXI_ACLK,
    \Use_UART.tdo_reg_reg[2] ,
    \Use_UART.tdo_reg_reg[2]_0 ,
    Q);
  output [0:0]D;
  input CI;
  input [0:0]S_AXI_WDATA;
  input [0:3]Addr;
  input S_AXI_ACLK;
  input \Use_UART.tdo_reg_reg[2] ;
  input \Use_UART.tdo_reg_reg[2]_0 ;
  input [0:0]Q;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]D;
  wire [2:2]Data_Out;
  wire [0:0]Q;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;
  wire \Use_UART.tdo_reg_reg[2] ;
  wire \Use_UART.tdo_reg_reg[2]_0 ;

  LUT4 #(
    .INIT(16'h8F88)) 
    \Use_UART.tdo_reg[2]_i_1 
       (.I0(Data_Out),
        .I1(\Use_UART.tdo_reg_reg[2] ),
        .I2(\Use_UART.tdo_reg_reg[2]_0 ),
        .I3(Q),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[2].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(Data_Out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_850
   (D,
    CI,
    S_AXI_WDATA,
    Addr,
    S_AXI_ACLK,
    \Use_UART.tdo_reg_reg[3] ,
    \Use_UART.tdo_reg_reg[3]_0 ,
    Q);
  output [0:0]D;
  input CI;
  input [0:0]S_AXI_WDATA;
  input [0:3]Addr;
  input S_AXI_ACLK;
  input \Use_UART.tdo_reg_reg[3] ;
  input \Use_UART.tdo_reg_reg[3]_0 ;
  input [0:0]Q;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]D;
  wire [3:3]Data_Out;
  wire [0:0]Q;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;
  wire \Use_UART.tdo_reg_reg[3] ;
  wire \Use_UART.tdo_reg_reg[3]_0 ;

  LUT4 #(
    .INIT(16'h8F88)) 
    \Use_UART.tdo_reg[3]_i_1 
       (.I0(Data_Out),
        .I1(\Use_UART.tdo_reg_reg[3] ),
        .I2(\Use_UART.tdo_reg_reg[3]_0 ),
        .I3(Q),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[3].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(Data_Out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_851
   (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ,
    CI,
    S_AXI_WDATA,
    Addr,
    S_AXI_ACLK);
  output [0:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  input CI;
  input [0:0]S_AXI_WDATA;
  input [0:3]Addr;
  input S_AXI_ACLK;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  wire [0:3]Addr;
  wire CI;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[4].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_852
   (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ,
    CI,
    S_AXI_WDATA,
    Addr,
    S_AXI_ACLK);
  output [0:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ;
  input CI;
  input [0:0]S_AXI_WDATA;
  input [0:3]Addr;
  input S_AXI_ACLK;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ;
  wire [0:3]Addr;
  wire CI;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[5].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_853
   (Data_Out,
    CI,
    S_AXI_WDATA,
    Addr,
    S_AXI_ACLK);
  output [0:0]Data_Out;
  input CI;
  input [0:0]S_AXI_WDATA;
  input [0:3]Addr;
  input S_AXI_ACLK;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]Data_Out;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[6].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(Data_Out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_854
   (D,
    CI,
    S_AXI_WDATA,
    Addr,
    S_AXI_ACLK,
    Q,
    \Use_UART.tdo_reg_reg[7] ,
    \Use_UART.tdo_reg_reg[7]_0 ,
    \Use_UART.tdo_reg_reg[7]_1 ,
    \Use_UART.tdo_reg_reg[7]_2 );
  output [0:0]D;
  input CI;
  input [0:0]S_AXI_WDATA;
  input [0:3]Addr;
  input S_AXI_ACLK;
  input [0:0]Q;
  input \Use_UART.tdo_reg_reg[7] ;
  input \Use_UART.tdo_reg_reg[7]_0 ;
  input \Use_UART.tdo_reg_reg[7]_1 ;
  input \Use_UART.tdo_reg_reg[7]_2 ;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]D;
  wire [7:7]Data_Out;
  wire [0:0]Q;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;
  wire \Use_UART.tdo_reg_reg[7] ;
  wire \Use_UART.tdo_reg_reg[7]_0 ;
  wire \Use_UART.tdo_reg_reg[7]_1 ;
  wire \Use_UART.tdo_reg_reg[7]_2 ;

  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \Use_UART.tdo_reg[7]_i_1 
       (.I0(Q),
        .I1(\Use_UART.tdo_reg_reg[7] ),
        .I2(\Use_UART.tdo_reg_reg[7]_0 ),
        .I3(\Use_UART.tdo_reg_reg[7]_1 ),
        .I4(Data_Out),
        .I5(\Use_UART.tdo_reg_reg[7]_2 ),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[7].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(Data_Out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_863
   (RX_Data,
    CI,
    Q,
    Addr,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input [0:3]Addr;
  input S_AXI_ACLK;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[0].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_864
   (RX_Data,
    CI,
    Q,
    Addr,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input [0:3]Addr;
  input S_AXI_ACLK;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[1].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_865
   (RX_Data,
    CI,
    Q,
    Addr,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input [0:3]Addr;
  input S_AXI_ACLK;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[2].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_866
   (RX_Data,
    CI,
    Q,
    Addr,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input [0:3]Addr;
  input S_AXI_ACLK;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[3].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_867
   (RX_Data,
    CI,
    Q,
    Addr,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input [0:3]Addr;
  input S_AXI_ACLK;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[4].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_868
   (RX_Data,
    CI,
    Q,
    Addr,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input [0:3]Addr;
  input S_AXI_ACLK;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[5].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_869
   (RX_Data,
    CI,
    Q,
    Addr,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input [0:3]Addr;
  input S_AXI_ACLK;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[6].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_SRL16E" *) 
module cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_870
   (RX_Data,
    CI,
    Q,
    Addr,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input [0:3]Addr;
  input S_AXI_ACLK;

  wire [0:3]Addr;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[7].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr[0]),
        .A1(Addr[1]),
        .A2(Addr[2]),
        .A3(Addr[3]),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_XORCY" *) 
module cpu_mdm_v3_2_15_MB_XORCY
   (sum_A_0,
    LI,
    LO,
    lopt);
  output sum_A_0;
  input LI;
  input LO;
  input lopt;

  wire sum_A_0;

  assign sum_A_0 = lopt;
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_MB_XORCY" *) 
module cpu_mdm_v3_2_15_MB_XORCY_862
   (sum_A_0,
    LI,
    LO,
    lopt);
  output sum_A_0;
  input LI;
  input LO;
  input lopt;

  wire sum_A_0;

  assign sum_A_0 = lopt;
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_SRL_FIFO" *) 
module cpu_mdm_v3_2_15_SRL_FIFO
   (data_Exists_I_reg_0,
    RX_Data,
    D,
    RX_Buffer_Full,
    \Using_FPGA.Native ,
    S_AXI_ACLK,
    Q,
    \Use_UART.tdo_reg_reg[4] ,
    \Use_UART.tdo_reg_reg[4]_0 ,
    \Use_UART.tdo_reg_reg[4]_1 ,
    Data_Out,
    \Use_UART.tdo_reg_reg[4]_2 ,
    data_Exists_I_reg_1,
    bus2ip_rdce,
    Bus_RNW_reg,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg );
  output data_Exists_I_reg_0;
  output [0:7]RX_Data;
  output [1:0]D;
  output RX_Buffer_Full;
  input \Using_FPGA.Native ;
  input S_AXI_ACLK;
  input [7:0]Q;
  input [1:0]\Use_UART.tdo_reg_reg[4] ;
  input \Use_UART.tdo_reg_reg[4]_0 ;
  input \Use_UART.tdo_reg_reg[4]_1 ;
  input [1:0]Data_Out;
  input \Use_UART.tdo_reg_reg[4]_2 ;
  input data_Exists_I_reg_1;
  input [0:0]bus2ip_rdce;
  input Bus_RNW_reg;
  input \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;

  wire [0:3]Addr;
  wire \Addr_Counters[2].FDRE_I_n_5 ;
  wire Bus_RNW_reg;
  wire CI;
  wire [1:0]D;
  wire [1:0]Data_Out;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  wire LI;
  wire [7:0]Q;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire S;
  wire S1_out;
  wire S2_out;
  wire S_AXI_ACLK;
  wire [1:0]\Use_UART.tdo_reg_reg[4] ;
  wire \Use_UART.tdo_reg_reg[4]_0 ;
  wire \Use_UART.tdo_reg_reg[4]_1 ;
  wire \Use_UART.tdo_reg_reg[4]_2 ;
  wire \Using_FPGA.Native ;
  wire [0:0]bus2ip_rdce;
  wire data_Exists_I_reg_0;
  wire data_Exists_I_reg_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire sum_A_0;
  wire sum_A_1;
  wire sum_A_2;
  wire sum_A_3;
  wire \NLW_Addr_Counters[0].Used_MuxCY.MUXCY_L_I_LO_UNCONNECTED ;
  wire \NLW_Addr_Counters[0].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ;
  wire \NLW_Addr_Counters[0].Used_MuxCY.MUXCY_L_I_lopt_3_UNCONNECTED ;
  wire \NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_CI_UNCONNECTED ;
  wire \NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_LO_UNCONNECTED ;
  wire \NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_S_UNCONNECTED ;
  wire \NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ;
  wire [0:0]\NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_Using_FPGA.Native_UNCONNECTED ;
  wire \NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_CI_UNCONNECTED ;
  wire \NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_LO_UNCONNECTED ;
  wire \NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_S_UNCONNECTED ;
  wire \NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ;
  wire [0:0]\NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_Addr_UNCONNECTED ;
  wire \NLW_Addr_Counters[3].No_MuxCY.XORCY_I_LI_UNCONNECTED ;
  wire \NLW_Addr_Counters[3].No_MuxCY.XORCY_I_LO_UNCONNECTED ;

  cpu_mdm_v3_2_15_MB_FDRE_855 \Addr_Counters[0].FDRE_I 
       (.Addr(Addr[0]),
        .O(sum_A_3),
        .S(S),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_2 ({Addr[1],Addr[2],Addr[3]}),
        .\Using_FPGA.Native_3 (data_Exists_I_reg_1),
        .bus2ip_rdce(bus2ip_rdce));
  cpu_mdm_v3_2_15_MB_MUXCY_XORCY_856 \Addr_Counters[0].Used_MuxCY.MUXCY_L_I 
       (.Addr(Addr[0]),
        .CI(CI),
        .LO(\NLW_Addr_Counters[0].Used_MuxCY.MUXCY_L_I_LO_UNCONNECTED ),
        .O(sum_A_3),
        .S(S),
        .lopt(\NLW_Addr_Counters[0].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ),
        .lopt_1(Addr[1]),
        .lopt_2(S2_out),
        .lopt_3(\NLW_Addr_Counters[0].Used_MuxCY.MUXCY_L_I_lopt_3_UNCONNECTED ),
        .lopt_4(Addr[2]),
        .lopt_5(S1_out),
        .lopt_6(lopt_2),
        .lopt_7(lopt_3),
        .lopt_8(lopt_4),
        .lopt_9(LI));
  cpu_mdm_v3_2_15_MB_FDRE_857 \Addr_Counters[1].FDRE_I 
       (.Addr({Addr[0],Addr[2],Addr[3]}),
        .O(sum_A_2),
        .S(S2_out),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (Addr[1]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_3 (data_Exists_I_reg_1),
        .bus2ip_rdce(bus2ip_rdce));
  cpu_mdm_v3_2_15_MB_MUXCY_XORCY_858 \Addr_Counters[1].Used_MuxCY.MUXCY_L_I 
       (.CI(\NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_CI_UNCONNECTED ),
        .LO(\NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_LO_UNCONNECTED ),
        .O(sum_A_2),
        .S(\NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_Using_FPGA.Native_UNCONNECTED [0]),
        .lopt(\NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_2));
  cpu_mdm_v3_2_15_MB_FDRE_859 \Addr_Counters[2].FDRE_I 
       (.Addr(Addr[2]),
        .Bus_RNW_reg(Bus_RNW_reg),
        .CI(CI),
        .D(D[1]),
        .Data_Out(Data_Out[1]),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg (\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .O(sum_A_1),
        .RX_Buffer_Full(RX_Buffer_Full),
        .S(S1_out),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Use_UART.tdo_reg_reg[4] (\Use_UART.tdo_reg_reg[4] [1]),
        .\Use_UART.tdo_reg_reg[4]_0 (\Use_UART.tdo_reg_reg[4]_0 ),
        .\Use_UART.tdo_reg_reg[4]_1 (\Use_UART.tdo_reg_reg[4]_1 ),
        .\Use_UART.tdo_reg_reg[4]_2 (\Use_UART.tdo_reg_reg[4]_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_2 ({Addr[0],Addr[1],Addr[3]}),
        .bus2ip_rdce(bus2ip_rdce),
        .data_Exists_I_reg(\Addr_Counters[2].FDRE_I_n_5 ),
        .data_Exists_I_reg_0(data_Exists_I_reg_1));
  cpu_mdm_v3_2_15_MB_MUXCY_XORCY_860 \Addr_Counters[2].Used_MuxCY.MUXCY_L_I 
       (.Addr(\NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_Addr_UNCONNECTED [0]),
        .CI(\NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_CI_UNCONNECTED ),
        .LO(\NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_LO_UNCONNECTED ),
        .O(sum_A_1),
        .S(\NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_S_UNCONNECTED ),
        .lopt(\NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_3));
  cpu_mdm_v3_2_15_MB_FDRE_861 \Addr_Counters[3].FDRE_I 
       (.Addr({Addr[0],Addr[1],Addr[2]}),
        .LI(LI),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (Addr[3]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_3 (data_Exists_I_reg_1),
        .bus2ip_rdce(bus2ip_rdce),
        .sum_A_0(sum_A_0));
  cpu_mdm_v3_2_15_MB_XORCY_862 \Addr_Counters[3].No_MuxCY.XORCY_I 
       (.LI(\NLW_Addr_Counters[3].No_MuxCY.XORCY_I_LI_UNCONNECTED ),
        .LO(\NLW_Addr_Counters[3].No_MuxCY.XORCY_I_LO_UNCONNECTED ),
        .lopt(lopt_4),
        .sum_A_0(sum_A_0));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_863 \FIFO_RAM[0].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .Q(Q[7]),
        .RX_Data(RX_Data[0]),
        .S_AXI_ACLK(S_AXI_ACLK));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_864 \FIFO_RAM[1].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .Q(Q[6]),
        .RX_Data(RX_Data[1]),
        .S_AXI_ACLK(S_AXI_ACLK));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_865 \FIFO_RAM[2].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .Q(Q[5]),
        .RX_Data(RX_Data[2]),
        .S_AXI_ACLK(S_AXI_ACLK));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_866 \FIFO_RAM[3].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .Q(Q[4]),
        .RX_Data(RX_Data[3]),
        .S_AXI_ACLK(S_AXI_ACLK));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_867 \FIFO_RAM[4].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .Q(Q[3]),
        .RX_Data(RX_Data[4]),
        .S_AXI_ACLK(S_AXI_ACLK));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_868 \FIFO_RAM[5].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .Q(Q[2]),
        .RX_Data(RX_Data[5]),
        .S_AXI_ACLK(S_AXI_ACLK));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_869 \FIFO_RAM[6].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .Q(Q[1]),
        .RX_Data(RX_Data[6]),
        .S_AXI_ACLK(S_AXI_ACLK));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_870 \FIFO_RAM[7].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .Q(Q[0]),
        .RX_Data(RX_Data[7]),
        .S_AXI_ACLK(S_AXI_ACLK));
  LUT6 #(
    .INIT(64'hFFFF22F222F222F2)) 
    \Use_UART.tdo_reg[5]_i_1 
       (.I0(\Use_UART.tdo_reg_reg[4] [0]),
        .I1(\Use_UART.tdo_reg_reg[4]_0 ),
        .I2(\Use_UART.tdo_reg_reg[4]_1 ),
        .I3(data_Exists_I_reg_0),
        .I4(Data_Out[0]),
        .I5(\Use_UART.tdo_reg_reg[4]_2 ),
        .O(D[0]));
  FDRE #(
    .INIT(1'b0)) 
    data_Exists_I_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\Addr_Counters[2].FDRE_I_n_5 ),
        .Q(data_Exists_I_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_15_SRL_FIFO" *) 
module cpu_mdm_v3_2_15_SRL_FIFO_841
   (data_Exists_I_reg_0,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ,
    D,
    tx_Buffer_Full,
    tx_Buffer_Empty,
    Interrupt,
    \Using_FPGA.Native ,
    S_AXI_ACLK,
    S_AXI_WDATA,
    Q,
    \Use_UART.tdo_reg_reg[7] ,
    \Use_UART.tdo_reg_reg[7]_0 ,
    \Use_UART.tdo_reg_reg[7]_1 ,
    FIFO_Write,
    data_Exists_I_reg_1,
    Bus_RNW_reg,
    \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ,
    out,
    Q_0,
    Interrupt_INST_0_0,
    enable_interrupts);
  output data_Exists_I_reg_0;
  output [1:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  output [5:0]D;
  output tx_Buffer_Full;
  output tx_Buffer_Empty;
  output Interrupt;
  input \Using_FPGA.Native ;
  input S_AXI_ACLK;
  input [7:0]S_AXI_WDATA;
  input [4:0]Q;
  input \Use_UART.tdo_reg_reg[7] ;
  input \Use_UART.tdo_reg_reg[7]_0 ;
  input \Use_UART.tdo_reg_reg[7]_1 ;
  input FIFO_Write;
  input data_Exists_I_reg_1;
  input Bus_RNW_reg;
  input \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  input out;
  input Q_0;
  input Interrupt_INST_0_0;
  input enable_interrupts;

  wire [1:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  wire [0:3]Addr;
  wire \Addr_Counters[2].FDRE_I_n_5 ;
  wire Bus_RNW_reg;
  wire CI;
  wire [5:0]D;
  wire [6:6]Data_Out;
  wire FIFO_Write;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  wire LI;
  wire [4:0]Q;
  wire S;
  wire S1_out;
  wire S2_out;
  wire S_AXI_ACLK;
  wire [7:0]S_AXI_WDATA;
  wire \Use_UART.tdo_reg_reg[7] ;
  wire \Use_UART.tdo_reg_reg[7]_0 ;
  wire \Use_UART.tdo_reg_reg[7]_1 ;
  wire \Using_FPGA.Native ;
  wire data_Exists_I_reg_0;
  wire data_Exists_I_reg_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire out;
  wire sum_A_0;
  wire sum_A_1;
  wire sum_A_2;
  wire sum_A_3;
  wire tx_Buffer_Full;
  wire \NLW_Addr_Counters[0].Used_MuxCY.MUXCY_L_I_LO_UNCONNECTED ;
  wire \NLW_Addr_Counters[0].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ;
  wire \NLW_Addr_Counters[0].Used_MuxCY.MUXCY_L_I_lopt_3_UNCONNECTED ;
  wire \NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_CI_UNCONNECTED ;
  wire \NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_LO_UNCONNECTED ;
  wire \NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_S_UNCONNECTED ;
  wire \NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ;
  wire [0:0]\NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_Using_FPGA.Native_UNCONNECTED ;
  wire \NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_CI_UNCONNECTED ;
  wire \NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_LO_UNCONNECTED ;
  wire \NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_S_UNCONNECTED ;
  wire \NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ;
  wire [0:0]\NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_Addr_UNCONNECTED ;
  wire \NLW_Addr_Counters[3].No_MuxCY.XORCY_I_LI_UNCONNECTED ;
  wire \NLW_Addr_Counters[3].No_MuxCY.XORCY_I_LO_UNCONNECTED ;

  cpu_mdm_v3_2_15_MB_FDRE_842 \Addr_Counters[0].FDRE_I 
       (.Addr(Addr[0]),
        .FIFO_Write(FIFO_Write),
        .O(sum_A_3),
        .S(S),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_2 ({Addr[1],Addr[2],Addr[3]}),
        .\Using_FPGA.Native_3 (data_Exists_I_reg_1));
  cpu_mdm_v3_2_15_MB_MUXCY_XORCY \Addr_Counters[0].Used_MuxCY.MUXCY_L_I 
       (.Addr(Addr[0]),
        .CI(CI),
        .LO(\NLW_Addr_Counters[0].Used_MuxCY.MUXCY_L_I_LO_UNCONNECTED ),
        .O(sum_A_3),
        .S(S),
        .lopt(\NLW_Addr_Counters[0].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ),
        .lopt_1(Addr[1]),
        .lopt_2(S2_out),
        .lopt_3(\NLW_Addr_Counters[0].Used_MuxCY.MUXCY_L_I_lopt_3_UNCONNECTED ),
        .lopt_4(Addr[2]),
        .lopt_5(S1_out),
        .lopt_6(lopt_2),
        .lopt_7(lopt_3),
        .lopt_8(lopt_4),
        .lopt_9(LI));
  cpu_mdm_v3_2_15_MB_FDRE_843 \Addr_Counters[1].FDRE_I 
       (.Addr({Addr[0],Addr[2],Addr[3]}),
        .FIFO_Write(FIFO_Write),
        .O(sum_A_2),
        .S(S2_out),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (Addr[1]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_3 (data_Exists_I_reg_1));
  cpu_mdm_v3_2_15_MB_MUXCY_XORCY_844 \Addr_Counters[1].Used_MuxCY.MUXCY_L_I 
       (.CI(\NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_CI_UNCONNECTED ),
        .LO(\NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_LO_UNCONNECTED ),
        .O(sum_A_2),
        .S(\NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_Using_FPGA.Native_UNCONNECTED [0]),
        .lopt(\NLW_Addr_Counters[1].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_2));
  cpu_mdm_v3_2_15_MB_FDRE_845 \Addr_Counters[2].FDRE_I 
       (.Addr(Addr[2]),
        .Bus_RNW_reg(Bus_RNW_reg),
        .CI(CI),
        .D(D[1]),
        .Data_Out(Data_Out),
        .FIFO_Write(FIFO_Write),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .O(sum_A_1),
        .Q(Q[1]),
        .S(S1_out),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Use_UART.tdo_reg_reg[6] (\Use_UART.tdo_reg_reg[7] ),
        .\Use_UART.tdo_reg_reg[6]_0 (\Use_UART.tdo_reg_reg[7]_0 ),
        .\Use_UART.tdo_reg_reg[6]_1 (\Use_UART.tdo_reg_reg[7]_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_2 ({Addr[0],Addr[1],Addr[3]}),
        .data_Exists_I_reg(\Addr_Counters[2].FDRE_I_n_5 ),
        .data_Exists_I_reg_0(data_Exists_I_reg_1),
        .out(out),
        .tx_Buffer_Full(tx_Buffer_Full));
  cpu_mdm_v3_2_15_MB_MUXCY_XORCY_846 \Addr_Counters[2].Used_MuxCY.MUXCY_L_I 
       (.Addr(\NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_Addr_UNCONNECTED [0]),
        .CI(\NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_CI_UNCONNECTED ),
        .LO(\NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_LO_UNCONNECTED ),
        .O(sum_A_1),
        .S(\NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_S_UNCONNECTED ),
        .lopt(\NLW_Addr_Counters[2].Used_MuxCY.MUXCY_L_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_3));
  cpu_mdm_v3_2_15_MB_FDRE_847 \Addr_Counters[3].FDRE_I 
       (.Addr({Addr[0],Addr[1],Addr[2]}),
        .FIFO_Write(FIFO_Write),
        .LI(LI),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (Addr[3]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_3 (data_Exists_I_reg_1),
        .sum_A_0(sum_A_0));
  cpu_mdm_v3_2_15_MB_XORCY \Addr_Counters[3].No_MuxCY.XORCY_I 
       (.LI(\NLW_Addr_Counters[3].No_MuxCY.XORCY_I_LI_UNCONNECTED ),
        .LO(\NLW_Addr_Counters[3].No_MuxCY.XORCY_I_LO_UNCONNECTED ),
        .lopt(lopt_4),
        .sum_A_0(sum_A_0));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3 \FIFO_RAM[0].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .D(D[5]),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[7]),
        .\Use_UART.tdo_reg_reg[0] (\Use_UART.tdo_reg_reg[7]_1 ));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_848 \FIFO_RAM[1].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .D(D[4]),
        .Q(Q[4]),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[6]),
        .\Use_UART.tdo_reg_reg[1] (\Use_UART.tdo_reg_reg[7]_1 ),
        .\Use_UART.tdo_reg_reg[1]_0 (\Use_UART.tdo_reg_reg[7] ));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_849 \FIFO_RAM[2].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .D(D[3]),
        .Q(Q[3]),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[5]),
        .\Use_UART.tdo_reg_reg[2] (\Use_UART.tdo_reg_reg[7]_1 ),
        .\Use_UART.tdo_reg_reg[2]_0 (\Use_UART.tdo_reg_reg[7] ));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_850 \FIFO_RAM[3].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .D(D[2]),
        .Q(Q[2]),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[4]),
        .\Use_UART.tdo_reg_reg[3] (\Use_UART.tdo_reg_reg[7]_1 ),
        .\Use_UART.tdo_reg_reg[3]_0 (\Use_UART.tdo_reg_reg[7] ));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_851 \FIFO_RAM[4].D16.SRL16E_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [1]),
        .Addr(Addr),
        .CI(CI),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[3]));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_852 \FIFO_RAM[5].D16.SRL16E_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [0]),
        .Addr(Addr),
        .CI(CI),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[2]));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_853 \FIFO_RAM[6].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .Data_Out(Data_Out),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[1]));
  cpu_mdm_v3_2_15_MB_SRL16E__parameterized3_854 \FIFO_RAM[7].D16.SRL16E_I 
       (.Addr(Addr),
        .CI(CI),
        .D(D[0]),
        .Q(Q[0]),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[0]),
        .\Use_UART.tdo_reg_reg[7] (\Use_UART.tdo_reg_reg[7] ),
        .\Use_UART.tdo_reg_reg[7]_0 (\Use_UART.tdo_reg_reg[7]_0 ),
        .\Use_UART.tdo_reg_reg[7]_1 (data_Exists_I_reg_0),
        .\Use_UART.tdo_reg_reg[7]_2 (\Use_UART.tdo_reg_reg[7]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    data_Exists_I_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\Addr_Counters[2].FDRE_I_n_5 ),
        .Q(data_Exists_I_reg_0),
        .R(1'b0));
endmodule

(* C_AUX_RESET_HIGH = "1'b0" *) (* C_AUX_RST_WIDTH = "4" *) (* C_EXT_RESET_HIGH = "1'b1" *) 
(* C_EXT_RST_WIDTH = "4" *) (* C_FAMILY = "virtex7" *) (* C_NUM_BUS_RST = "1" *) 
(* C_NUM_INTERCONNECT_ARESETN = "1" *) (* C_NUM_PERP_ARESETN = "1" *) (* C_NUM_PERP_RST = "1" *) 
(* ORIG_REF_NAME = "proc_sys_reset" *) 
module cpu_proc_sys_reset
   (slowest_sync_clk,
    ext_reset_in,
    aux_reset_in,
    mb_debug_sys_rst,
    dcm_locked,
    mb_reset,
    bus_struct_reset,
    peripheral_reset,
    interconnect_aresetn,
    peripheral_aresetn);
  input slowest_sync_clk;
  input ext_reset_in;
  input aux_reset_in;
  input mb_debug_sys_rst;
  input dcm_locked;
  output mb_reset;
  output [0:0]bus_struct_reset;
  output [0:0]peripheral_reset;
  output [0:0]interconnect_aresetn;
  output [0:0]peripheral_aresetn;

  wire Bsr_out;
  wire MB_out;
  wire Pr_out;
  wire SEQ_n_4;
  wire [0:0]bus_struct_reset;
  wire ext_reset_in;
  wire lpf_int;
  wire mb_debug_sys_rst;
  wire mb_reset;
  wire [0:0]peripheral_aresetn;
  wire [0:0]peripheral_reset;
  wire slowest_sync_clk;
  wire NLW_EXT_LPF_aux_reset_in_UNCONNECTED;
  wire NLW_EXT_LPF_dcm_locked_UNCONNECTED;
  wire NLW_SEQ_bsr_reg_0_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(SEQ_n_4),
        .Q(peripheral_aresetn),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \BSR_OUT_DFF[0].FDRE_BSR 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(Bsr_out),
        .Q(bus_struct_reset),
        .R(1'b0));
  cpu_lpf EXT_LPF
       (.aux_reset_in(NLW_EXT_LPF_aux_reset_in_UNCONNECTED),
        .dcm_locked(NLW_EXT_LPF_dcm_locked_UNCONNECTED),
        .ext_reset_in(ext_reset_in),
        .lpf_int(lpf_int),
        .mb_debug_sys_rst(mb_debug_sys_rst),
        .slowest_sync_clk(slowest_sync_clk));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    FDRE_inst
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(MB_out),
        .Q(mb_reset),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \PR_OUT_DFF[0].FDRE_PER 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(Pr_out),
        .Q(peripheral_reset),
        .R(1'b0));
  cpu_sequence_psr SEQ
       (.Bsr_out(Bsr_out),
        .MB_out(MB_out),
        .Pr_out(Pr_out),
        .bsr_reg_0(NLW_SEQ_bsr_reg_0_UNCONNECTED),
        .lpf_int(lpf_int),
        .pr_reg_0(SEQ_n_4),
        .slowest_sync_clk(slowest_sync_clk));
endmodule

(* ORIG_REF_NAME = "pselect_f" *) 
module cpu_pselect_f
   (ce_expnd_i_3,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 );
  output ce_expnd_i_3;
  input \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ;
  input \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ;

  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ;
  wire ce_expnd_i_3;

  LUT2 #(
    .INIT(4'h1)) 
    CS
       (.I0(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ),
        .I1(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .O(ce_expnd_i_3));
endmodule

(* ORIG_REF_NAME = "pselect_f" *) 
module cpu_pselect_f__parameterized1
   (ce_expnd_i_1,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 );
  output ce_expnd_i_1;
  input \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ;
  input \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ;

  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ;
  wire ce_expnd_i_1;

  LUT2 #(
    .INIT(4'h2)) 
    CS
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ),
        .I1(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ),
        .O(ce_expnd_i_1));
endmodule

(* ORIG_REF_NAME = "sequence_psr" *) 
module cpu_sequence_psr
   (MB_out,
    Bsr_out,
    Pr_out,
    bsr_reg_0,
    pr_reg_0,
    lpf_int,
    slowest_sync_clk);
  output MB_out;
  output Bsr_out;
  output Pr_out;
  output bsr_reg_0;
  output pr_reg_0;
  input lpf_int;
  input slowest_sync_clk;

  wire Bsr_out;
  wire Core_i_1_n_0;
  wire MB_out;
  wire Pr_out;
  wire \bsr_dec_reg_n_0_[0] ;
  wire \bsr_dec_reg_n_0_[2] ;
  wire bsr_i_1_n_0;
  wire \core_dec[0]_i_1_n_0 ;
  wire \core_dec[2]_i_1_n_0 ;
  wire \core_dec_reg_n_0_[0] ;
  wire \core_dec_reg_n_0_[1] ;
  wire from_sys_i_1_n_0;
  wire lpf_int;
  wire p_0_in;
  wire [2:0]p_3_out;
  wire [2:0]p_5_out;
  wire pr_dec0__0;
  wire \pr_dec_reg_n_0_[0] ;
  wire \pr_dec_reg_n_0_[2] ;
  wire pr_i_1_n_0;
  wire pr_reg_0;
  wire seq_clr;
  wire [5:0]seq_cnt;
  wire seq_cnt_en;
  wire slowest_sync_clk;

  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N_i_1 
       (.I0(Pr_out),
        .O(pr_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT2 #(
    .INIT(4'h2)) 
    Core_i_1
       (.I0(MB_out),
        .I1(p_0_in),
        .O(Core_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    Core_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(Core_i_1_n_0),
        .Q(MB_out),
        .S(lpf_int));
  cpu_upcnt_n SEQ_COUNTER
       (.Q(seq_cnt),
        .seq_clr(seq_clr),
        .seq_cnt_en(seq_cnt_en),
        .slowest_sync_clk(slowest_sync_clk));
  LUT4 #(
    .INIT(16'h0090)) 
    \bsr_dec[0]_i_1 
       (.I0(seq_cnt_en),
        .I1(seq_cnt[4]),
        .I2(seq_cnt[3]),
        .I3(seq_cnt[5]),
        .O(p_5_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \bsr_dec[2]_i_1 
       (.I0(\core_dec_reg_n_0_[1] ),
        .I1(\bsr_dec_reg_n_0_[0] ),
        .O(p_5_out[2]));
  FDRE #(
    .INIT(1'b0)) 
    \bsr_dec_reg[0] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_5_out[0]),
        .Q(\bsr_dec_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bsr_dec_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_5_out[2]),
        .Q(\bsr_dec_reg_n_0_[2] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT2 #(
    .INIT(4'h2)) 
    bsr_i_1
       (.I0(Bsr_out),
        .I1(\bsr_dec_reg_n_0_[2] ),
        .O(bsr_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    bsr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(bsr_i_1_n_0),
        .Q(Bsr_out),
        .S(lpf_int));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT4 #(
    .INIT(16'h9000)) 
    \core_dec[0]_i_1 
       (.I0(seq_cnt_en),
        .I1(seq_cnt[4]),
        .I2(seq_cnt[3]),
        .I3(seq_cnt[5]),
        .O(\core_dec[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \core_dec[2]_i_1 
       (.I0(\core_dec_reg_n_0_[1] ),
        .I1(\core_dec_reg_n_0_[0] ),
        .O(\core_dec[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[0] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(\core_dec[0]_i_1_n_0 ),
        .Q(\core_dec_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[1] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(pr_dec0__0),
        .Q(\core_dec_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(\core_dec[2]_i_1_n_0 ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT2 #(
    .INIT(4'h8)) 
    from_sys_i_1
       (.I0(MB_out),
        .I1(seq_cnt_en),
        .O(from_sys_i_1_n_0));
  FDSE #(
    .INIT(1'b0)) 
    from_sys_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(from_sys_i_1_n_0),
        .Q(seq_cnt_en),
        .S(lpf_int));
  LUT4 #(
    .INIT(16'h0018)) 
    pr_dec0
       (.I0(seq_cnt_en),
        .I1(seq_cnt[0]),
        .I2(seq_cnt[2]),
        .I3(seq_cnt[1]),
        .O(pr_dec0__0));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT4 #(
    .INIT(16'h0480)) 
    \pr_dec[0]_i_1 
       (.I0(seq_cnt_en),
        .I1(seq_cnt[3]),
        .I2(seq_cnt[5]),
        .I3(seq_cnt[4]),
        .O(p_3_out[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \pr_dec[2]_i_1 
       (.I0(\core_dec_reg_n_0_[1] ),
        .I1(\pr_dec_reg_n_0_[0] ),
        .O(p_3_out[2]));
  FDRE #(
    .INIT(1'b0)) 
    \pr_dec_reg[0] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_out[0]),
        .Q(\pr_dec_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \pr_dec_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_out[2]),
        .Q(\pr_dec_reg_n_0_[2] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT2 #(
    .INIT(4'h2)) 
    pr_i_1
       (.I0(Pr_out),
        .I1(\pr_dec_reg_n_0_[2] ),
        .O(pr_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    pr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(pr_i_1_n_0),
        .Q(Pr_out),
        .S(lpf_int));
  FDRE #(
    .INIT(1'b0)) 
    seq_clr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(seq_clr),
        .R(lpf_int));
endmodule

(* ORIG_REF_NAME = "slave_attachment" *) 
module cpu_slave_attachment
   (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] ,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ,
    S_AXI_RRESP,
    Bus_RNW_reg_reg,
    S_AXI_RVALID,
    S_AXI_BVALID,
    S_AXI_BRESP,
    \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ,
    FIFO_Write,
    bus2ip_wrce,
    clear_Ext_BRK,
    reset_RX_FIFO,
    reset_TX_FIFO,
    bus2ip_rdce,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ,
    S_AXI_RDATA,
    rst_reg_0,
    S_AXI_ACLK,
    S_AXI_AWVALID,
    S_AXI_WVALID,
    S_AXI_ARVALID,
    out,
    tx_Buffer_Full,
    rx_Data_Present,
    S_AXI_WDATA,
    RX_Data,
    RX_Buffer_Full,
    fifo_Data_Present,
    enable_interrupts,
    S_AXI_RREADY,
    S_AXI_BREADY,
    S_AXI_ARESETN,
    S_AXI_ARADDR,
    S_AXI_AWADDR);
  output \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] ;
  output \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ;
  output [0:0]S_AXI_RRESP;
  output Bus_RNW_reg_reg;
  output S_AXI_RVALID;
  output S_AXI_BVALID;
  output [0:0]S_AXI_BRESP;
  output \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ;
  output \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ;
  output FIFO_Write;
  output [0:0]bus2ip_wrce;
  output clear_Ext_BRK;
  output reset_RX_FIFO;
  output reset_TX_FIFO;
  output [0:0]bus2ip_rdce;
  output \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  output [7:0]S_AXI_RDATA;
  input rst_reg_0;
  input S_AXI_ACLK;
  input S_AXI_AWVALID;
  input S_AXI_WVALID;
  input S_AXI_ARVALID;
  input out;
  input tx_Buffer_Full;
  input rx_Data_Present;
  input [3:0]S_AXI_WDATA;
  input [0:7]RX_Data;
  input RX_Buffer_Full;
  input fifo_Data_Present;
  input enable_interrupts;
  input S_AXI_RREADY;
  input S_AXI_BREADY;
  input S_AXI_ARESETN;
  input [1:0]S_AXI_ARADDR;
  input [1:0]S_AXI_AWADDR;

  wire \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  wire Bus_RNW_reg_reg;
  wire FIFO_Write;
  wire \FSM_onehot_state[1]_i_1_n_0 ;
  wire \FSM_onehot_state_reg_n_0_[0] ;
  wire \FSM_onehot_state_reg_n_0_[1] ;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ;
  wire \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ;
  wire I_DECODER_n_24;
  wire I_DECODER_n_25;
  wire I_DECODER_n_3;
  wire I_DECODER_n_4;
  wire I_DECODER_n_5;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire S_AXI_ACLK;
  wire [1:0]S_AXI_ARADDR;
  wire S_AXI_ARESETN;
  wire S_AXI_ARVALID;
  wire S_AXI_AWVALID;
  wire S_AXI_BVALID;
  wire [7:0]S_AXI_RDATA;
  wire S_AXI_RVALID;
  wire [3:0]S_AXI_WDATA;
  wire S_AXI_WVALID;
  wire \bus2ip_addr_i[2]_i_1_n_0 ;
  wire \bus2ip_addr_i[3]_i_1_n_0 ;
  wire \bus2ip_addr_i_reg_n_0_[2] ;
  wire \bus2ip_addr_i_reg_n_0_[3] ;
  wire [0:0]bus2ip_rdce;
  wire bus2ip_rnw_i;
  wire bus2ip_rnw_i_i_1_n_0;
  wire enable_interrupts;
  wire fifo_Data_Present;
  wire out;
  wire reset_RX_FIFO;
  wire reset_TX_FIFO;
  wire rst;
  wire rst_reg_0;
  wire rx_Data_Present;
  wire s_axi_bresp_i;
  wire s_axi_rresp_i;
  wire start2;
  wire start2_i_1_n_0;
  wire state1__2;
  wire tx_Buffer_Full;
  wire [7:0]uart_ip2bus_data;
  wire \NLW_I_DECODER_FSM_onehot_state_reg[2]_0_UNCONNECTED ;
  wire NLW_I_DECODER_S_AXI_BREADY_UNCONNECTED;
  wire NLW_I_DECODER_S_AXI_BVALID_UNCONNECTED;
  wire NLW_I_DECODER_S_AXI_RREADY_UNCONNECTED;
  wire NLW_I_DECODER_S_AXI_RVALID_UNCONNECTED;
  wire NLW_I_DECODER_clear_Ext_BRK_UNCONNECTED;
  wire NLW_I_DECODER_ip2bus_error_UNCONNECTED;
  wire [0:0]NLW_I_DECODER_S_AXI_BRESP_UNCONNECTED;
  wire [2:2]NLW_I_DECODER_S_AXI_WDATA_UNCONNECTED;
  wire [0:0]NLW_I_DECODER_bus2ip_wrce_UNCONNECTED;

  LUT6 #(
    .INIT(64'hFFFF007000700070)) 
    \FSM_onehot_state[1]_i_1 
       (.I0(S_AXI_AWVALID),
        .I1(S_AXI_WVALID),
        .I2(\FSM_onehot_state_reg_n_0_[1] ),
        .I3(S_AXI_ARVALID),
        .I4(state1__2),
        .I5(\FSM_onehot_state_reg_n_0_[0] ),
        .O(\FSM_onehot_state[1]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_state[1]_i_2 
       (.I0(S_AXI_RVALID),
        .I1(S_AXI_BVALID),
        .O(state1__2));
  (* FSM_ENCODED_STATES = "sm_read:1000,sm_write:0100,sm_resp:0001,sm_idle:0010" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[0] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(I_DECODER_n_5),
        .Q(\FSM_onehot_state_reg_n_0_[0] ),
        .R(rst));
  (* FSM_ENCODED_STATES = "sm_read:1000,sm_write:0100,sm_resp:0001,sm_idle:0010" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_state_reg[1] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\FSM_onehot_state[1]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[1] ),
        .S(rst));
  (* FSM_ENCODED_STATES = "sm_read:1000,sm_write:0100,sm_resp:0001,sm_idle:0010" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[2] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(I_DECODER_n_4),
        .Q(s_axi_bresp_i),
        .R(rst));
  (* FSM_ENCODED_STATES = "sm_read:1000,sm_write:0100,sm_resp:0001,sm_idle:0010" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[3] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(I_DECODER_n_3),
        .Q(s_axi_rresp_i),
        .R(rst));
  cpu_address_decoder I_DECODER
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ),
        .Bus_RNW_reg_reg_0(Bus_RNW_reg_reg),
        .D({I_DECODER_n_3,I_DECODER_n_4,I_DECODER_n_5}),
        .FIFO_Write(FIFO_Write),
        .\FSM_onehot_state_reg[2] (I_DECODER_n_25),
        .\FSM_onehot_state_reg[2]_0 (\NLW_I_DECODER_FSM_onehot_state_reg[2]_0_UNCONNECTED ),
        .\FSM_onehot_state_reg[3] (I_DECODER_n_24),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 (\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] ),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 (\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 (uart_ip2bus_data),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 (\bus2ip_addr_i_reg_n_0_[3] ),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 (\bus2ip_addr_i_reg_n_0_[2] ),
        .\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 (\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ),
        .Q({s_axi_rresp_i,s_axi_bresp_i,\FSM_onehot_state_reg_n_0_[1] ,\FSM_onehot_state_reg_n_0_[0] }),
        .RX_Buffer_Full(RX_Buffer_Full),
        .RX_Data(RX_Data),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_ARESETN(S_AXI_ARESETN),
        .S_AXI_ARVALID(S_AXI_ARVALID),
        .S_AXI_AWVALID(S_AXI_AWVALID),
        .S_AXI_BREADY(NLW_I_DECODER_S_AXI_BREADY_UNCONNECTED),
        .S_AXI_BRESP(NLW_I_DECODER_S_AXI_BRESP_UNCONNECTED[0]),
        .S_AXI_BVALID(NLW_I_DECODER_S_AXI_BVALID_UNCONNECTED),
        .S_AXI_RREADY(NLW_I_DECODER_S_AXI_RREADY_UNCONNECTED),
        .S_AXI_RVALID(NLW_I_DECODER_S_AXI_RVALID_UNCONNECTED),
        .S_AXI_WDATA({S_AXI_WDATA[3],NLW_I_DECODER_S_AXI_WDATA_UNCONNECTED[2],S_AXI_WDATA[1:0]}),
        .S_AXI_WVALID(S_AXI_WVALID),
        .bus2ip_rdce(bus2ip_rdce),
        .bus2ip_rnw_i(bus2ip_rnw_i),
        .bus2ip_wrce(NLW_I_DECODER_bus2ip_wrce_UNCONNECTED[0]),
        .clear_Ext_BRK(NLW_I_DECODER_clear_Ext_BRK_UNCONNECTED),
        .enable_interrupts(enable_interrupts),
        .fifo_Data_Present(fifo_Data_Present),
        .ip2bus_error(NLW_I_DECODER_ip2bus_error_UNCONNECTED),
        .out(out),
        .reset_RX_FIFO(reset_RX_FIFO),
        .reset_TX_FIFO(reset_TX_FIFO),
        .rx_Data_Present(rx_Data_Present),
        .start2(start2),
        .state1__2(state1__2),
        .tx_Buffer_Full(tx_Buffer_Full));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bus2ip_addr_i[2]_i_1 
       (.I0(S_AXI_ARADDR[0]),
        .I1(start2_i_1_n_0),
        .I2(\bus2ip_addr_i_reg_n_0_[2] ),
        .O(\bus2ip_addr_i[2]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bus2ip_addr_i[3]_i_1 
       (.I0(S_AXI_ARADDR[1]),
        .I1(start2_i_1_n_0),
        .I2(\bus2ip_addr_i_reg_n_0_[3] ),
        .O(\bus2ip_addr_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \bus2ip_addr_i_reg[2] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\bus2ip_addr_i[2]_i_1_n_0 ),
        .Q(\bus2ip_addr_i_reg_n_0_[2] ),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \bus2ip_addr_i_reg[3] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\bus2ip_addr_i[3]_i_1_n_0 ),
        .Q(\bus2ip_addr_i_reg_n_0_[3] ),
        .R(rst));
  LUT5 #(
    .INIT(32'hF7FFF000)) 
    bus2ip_rnw_i_i_1
       (.I0(S_AXI_AWVALID),
        .I1(S_AXI_WVALID),
        .I2(S_AXI_ARVALID),
        .I3(\FSM_onehot_state_reg_n_0_[1] ),
        .I4(bus2ip_rnw_i),
        .O(bus2ip_rnw_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    bus2ip_rnw_i_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(bus2ip_rnw_i_i_1_n_0),
        .Q(bus2ip_rnw_i),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    rst_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(rst_reg_0),
        .Q(rst),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    s_axi_bvalid_i_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(I_DECODER_n_25),
        .Q(S_AXI_BVALID),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[0] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[0]),
        .Q(S_AXI_RDATA[0]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[1] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[1]),
        .Q(S_AXI_RDATA[1]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[2] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[2]),
        .Q(S_AXI_RDATA[2]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[3] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[3]),
        .Q(S_AXI_RDATA[3]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[4] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[4]),
        .Q(S_AXI_RDATA[4]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[5] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[5]),
        .Q(S_AXI_RDATA[5]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[6] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[6]),
        .Q(S_AXI_RDATA[6]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[7] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[7]),
        .Q(S_AXI_RDATA[7]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    s_axi_rvalid_i_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(I_DECODER_n_24),
        .Q(S_AXI_RVALID),
        .R(rst));
  LUT4 #(
    .INIT(16'hF800)) 
    start2_i_1
       (.I0(S_AXI_AWVALID),
        .I1(S_AXI_WVALID),
        .I2(S_AXI_ARVALID),
        .I3(\FSM_onehot_state_reg_n_0_[1] ),
        .O(start2_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    start2_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(start2_i_1_n_0),
        .Q(start2),
        .R(rst));
endmodule

(* ORIG_REF_NAME = "upcnt_n" *) 
module cpu_upcnt_n
   (Q,
    seq_clr,
    seq_cnt_en,
    slowest_sync_clk);
  output [5:0]Q;
  input seq_clr;
  input seq_cnt_en;
  input slowest_sync_clk;

  wire [5:0]Q;
  wire clear;
  wire [5:0]q_int0;
  wire seq_clr;
  wire seq_cnt_en;
  wire slowest_sync_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \q_int[0]_i_1 
       (.I0(Q[0]),
        .O(q_int0[0]));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \q_int[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(q_int0[1]));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \q_int[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(q_int0[2]));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \q_int[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(q_int0[3]));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \q_int[4]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(q_int0[4]));
  LUT1 #(
    .INIT(2'h1)) 
    \q_int[5]_i_1 
       (.I0(seq_clr),
        .O(clear));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \q_int[5]_i_2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(Q[5]),
        .O(q_int0[5]));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[0] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[0]),
        .Q(Q[0]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[1] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[1]),
        .Q(Q[1]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[2] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[2]),
        .Q(Q[2]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[3] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[3]),
        .Q(Q[3]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[4] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[4]),
        .Q(Q[4]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[5] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[5]),
        .Q(Q[5]),
        .R(clear));
endmodule

module fifo
   (in0,
    out,
    full_logic_reg,
    \w_ptr_logic_reg[0] ,
    \w_ptr_logic_reg[0]_0 ,
    r_data_inferred_i_1);
  output [8:0]in0;
  input out;
  input full_logic_reg;
  input \w_ptr_logic_reg[0] ;
  input \w_ptr_logic_reg[0]_0 ;
  input [7:0]r_data_inferred_i_1;

  (* DONT_TOUCH *) wire full_logic_reg;
  (* DONT_TOUCH *) wire full_tmp;
  (* DONT_TOUCH *) wire [8:0]in0;
  (* DONT_TOUCH *) wire out;
  wire [7:0]r_addr;
  (* DONT_TOUCH *) wire [7:0]r_data_inferred_i_1;
  wire [7:0]w_addr;
  (* DONT_TOUCH *) wire \w_ptr_logic_reg[0] ;
  (* DONT_TOUCH *) wire \w_ptr_logic_reg[0]_0 ;
  wire wr_en;

  fifo_ctrl_1 c_unit
       (.empty(in0[8]),
        .full(full_tmp),
        .full_logic_reg_0(out),
        .in0(wr_en),
        .out(full_logic_reg),
        .\r_ptr_logic_reg[7]_0 (r_addr),
        .\w_ptr_logic_reg[0]_0 (\w_ptr_logic_reg[0] ),
        .\w_ptr_logic_reg[0]_1 (\w_ptr_logic_reg[0]_0 ),
        .\w_ptr_logic_reg[7]_0 (w_addr));
  reg_file_2 f_unit
       (.array_reg_reg_0_63_6_6_0(w_addr),
        .in0(wr_en),
        .mmio_rd_data_inferred_i_64(r_addr),
        .out(out),
        .r_data(in0[7:0]),
        .r_data_inferred_i_1_0(r_data_inferred_i_1));
endmodule

(* ORIG_REF_NAME = "fifo" *) 
module fifo_0
   (in0,
    out,
    empty_logic_reg,
    full_logic_reg,
    full_logic_reg_0,
    \w_ptr_logic_reg[0] ,
    \w_ptr_logic_reg[0]_0 ,
    D);
  output [0:0]in0;
  output [7:0]out;
  output empty_logic_reg;
  input full_logic_reg;
  input full_logic_reg_0;
  input \w_ptr_logic_reg[0] ;
  input \w_ptr_logic_reg[0]_0 ;
  input [7:0]D;

  (* DONT_TOUCH *) wire [7:0]D;
  wire empty_logic_reg;
  (* DONT_TOUCH *) wire full_logic_reg;
  (* DONT_TOUCH *) wire full_logic_reg_0;
  (* DONT_TOUCH *) wire [0:0]in0;
  (* DONT_TOUCH *) wire [7:0]out;
  wire [7:0]r_addr;
  (* DONT_TOUCH *) wire tx_empty;
  wire [7:0]w_addr;
  (* DONT_TOUCH *) wire \w_ptr_logic_reg[0] ;
  (* DONT_TOUCH *) wire \w_ptr_logic_reg[0]_0 ;
  wire wr_en;

  fifo_ctrl c_unit
       (.empty(tx_empty),
        .full(in0),
        .full_logic_reg_0(full_logic_reg),
        .in0(wr_en),
        .out(full_logic_reg_0),
        .\r_ptr_logic_reg[7]_0 (r_addr),
        .\w_ptr_logic_reg[0]_0 (\w_ptr_logic_reg[0] ),
        .\w_ptr_logic_reg[0]_1 (\w_ptr_logic_reg[0]_0 ),
        .\w_ptr_logic_reg[7]_0 (w_addr));
  reg_file f_unit
       (.array_reg_reg_0_63_6_6_0(w_addr),
        .\b_reg_reg[7] (r_addr),
        .in0(wr_en),
        .out(full_logic_reg),
        .r_data(out),
        .r_data_inferred_i_1__0_0(D));
  LUT1 #(
    .INIT(2'h1)) 
    tx_start_inferred_i_1
       (.I0(tx_empty),
        .O(empty_logic_reg));
endmodule

(* ORIG_REF_NAME = "fifo" *) 
module fifo__parameterized0
   (out,
    ps2_rx_data,
    full_logic_reg,
    full_logic_reg_0,
    \w_ptr_logic_reg[0] ,
    \w_ptr_logic_reg[0]_0 ,
    mmio_rd_data_inferred_i_25);
  output out;
  output [7:0]ps2_rx_data;
  input full_logic_reg;
  input full_logic_reg_0;
  input \w_ptr_logic_reg[0] ;
  input \w_ptr_logic_reg[0]_0 ;
  input [7:0]mmio_rd_data_inferred_i_25;

  (* DONT_TOUCH *) wire full_logic_reg;
  (* DONT_TOUCH *) wire full_logic_reg_0;
  (* DONT_TOUCH *) wire full_tmp;
  (* DONT_TOUCH *) wire [7:0]mmio_rd_data_inferred_i_25;
  (* DONT_TOUCH *) wire out;
  (* DONT_TOUCH *) wire [7:0]ps2_rx_data;
  wire [5:0]r_addr;
  wire [5:0]w_addr;
  (* DONT_TOUCH *) wire \w_ptr_logic_reg[0] ;
  (* DONT_TOUCH *) wire \w_ptr_logic_reg[0]_0 ;
  wire wr_en;

  fifo_ctrl__parameterized0 c_unit
       (.empty(out),
        .full(full_tmp),
        .full_logic_reg_0(full_logic_reg),
        .in0(wr_en),
        .out(full_logic_reg_0),
        .\r_ptr_logic_reg[5]_0 (r_addr),
        .\w_ptr_logic_reg[0]_0 (\w_ptr_logic_reg[0] ),
        .\w_ptr_logic_reg[0]_1 (\w_ptr_logic_reg[0]_0 ),
        .\w_ptr_logic_reg[5]_0 (w_addr));
  reg_file__parameterized0 f_unit
       (.in0(wr_en),
        .mmio_rd_data_inferred_i_25(r_addr),
        .mmio_rd_data_inferred_i_25_0(w_addr),
        .mmio_rd_data_inferred_i_25_1(mmio_rd_data_inferred_i_25),
        .out(full_logic_reg),
        .r_data(ps2_rx_data));
endmodule

module fifo_ctrl
   (empty,
    full,
    \w_ptr_logic_reg[7]_0 ,
    \r_ptr_logic_reg[7]_0 ,
    in0,
    out,
    \w_ptr_logic_reg[0]_0 ,
    \w_ptr_logic_reg[0]_1 ,
    full_logic_reg_0);
  output empty;
  output full;
  output [7:0]\w_ptr_logic_reg[7]_0 ;
  output [7:0]\r_ptr_logic_reg[7]_0 ;
  output in0;
  input out;
  input \w_ptr_logic_reg[0]_0 ;
  input \w_ptr_logic_reg[0]_1 ;
  input full_logic_reg_0;

  (* DONT_TOUCH *) wire empty;
  wire empty_logic_i_1__0_n_0;
  wire empty_logic_i_2__0_n_0;
  wire empty_logic_i_3__0_n_0;
  wire empty_logic_i_4__0_n_0;
  wire empty_logic_i_5__0_n_0;
  (* DONT_TOUCH *) wire full;
  wire full_logic_i_1__0_n_0;
  wire full_logic_i_2__0_n_0;
  wire full_logic_i_3__0_n_0;
  wire full_logic_i_4__0_n_0;
  wire full_logic_i_5__0_n_0;
  (* DONT_TOUCH *) wire full_logic_reg_0;
  wire in0;
  (* DONT_TOUCH *) wire out;
  wire \r_ptr_logic[7]_i_1__0_n_0 ;
  wire \r_ptr_logic[7]_i_3__0_n_0 ;
  wire [7:0]r_ptr_logic_reg0__0;
  (* DONT_TOUCH *) wire [7:0]\r_ptr_logic_reg[7]_0 ;
  wire \w_ptr_logic[0]_i_1__0_n_0 ;
  wire \w_ptr_logic[1]_i_1__0_n_0 ;
  wire \w_ptr_logic[2]_i_1__0_n_0 ;
  wire \w_ptr_logic[3]_i_1__0_n_0 ;
  wire \w_ptr_logic[4]_i_1__0_n_0 ;
  wire \w_ptr_logic[5]_i_1__0_n_0 ;
  wire \w_ptr_logic[6]_i_1__0_n_0 ;
  wire \w_ptr_logic[7]_i_1__0_n_0 ;
  wire \w_ptr_logic[7]_i_2__0_n_0 ;
  wire \w_ptr_logic[7]_i_3__0_n_0 ;
  (* DONT_TOUCH *) wire \w_ptr_logic_reg[0]_0 ;
  (* DONT_TOUCH *) wire \w_ptr_logic_reg[0]_1 ;
  (* DONT_TOUCH *) wire [7:0]\w_ptr_logic_reg[7]_0 ;

  LUT6 #(
    .INIT(64'hFAFF0000FAFF0030)) 
    empty_logic_i_1__0
       (.I0(full),
        .I1(empty_logic_i_2__0_n_0),
        .I2(\w_ptr_logic_reg[0]_0 ),
        .I3(\w_ptr_logic_reg[0]_1 ),
        .I4(empty),
        .I5(empty_logic_i_3__0_n_0),
        .O(empty_logic_i_1__0_n_0));
  LUT5 #(
    .INIT(32'hF66F9FF6)) 
    empty_logic_i_2__0
       (.I0(\r_ptr_logic_reg[7]_0 [7]),
        .I1(\w_ptr_logic_reg[7]_0 [7]),
        .I2(\r_ptr_logic[7]_i_3__0_n_0 ),
        .I3(\r_ptr_logic_reg[7]_0 [6]),
        .I4(\w_ptr_logic_reg[7]_0 [6]),
        .O(empty_logic_i_2__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFF6FFFFF6)) 
    empty_logic_i_3__0
       (.I0(r_ptr_logic_reg0__0[5]),
        .I1(\w_ptr_logic_reg[7]_0 [5]),
        .I2(empty_logic_i_4__0_n_0),
        .I3(r_ptr_logic_reg0__0[4]),
        .I4(\w_ptr_logic_reg[7]_0 [4]),
        .I5(empty_logic_i_5__0_n_0),
        .O(empty_logic_i_3__0_n_0));
  LUT6 #(
    .INIT(64'hE7777BBBBDDDDEEE)) 
    empty_logic_i_4__0
       (.I0(\w_ptr_logic_reg[7]_0 [2]),
        .I1(\w_ptr_logic_reg[7]_0 [3]),
        .I2(\r_ptr_logic_reg[7]_0 [1]),
        .I3(\r_ptr_logic_reg[7]_0 [0]),
        .I4(\r_ptr_logic_reg[7]_0 [2]),
        .I5(\r_ptr_logic_reg[7]_0 [3]),
        .O(empty_logic_i_4__0_n_0));
  LUT4 #(
    .INIT(16'hF96F)) 
    empty_logic_i_5__0
       (.I0(\w_ptr_logic_reg[7]_0 [1]),
        .I1(\r_ptr_logic_reg[7]_0 [1]),
        .I2(\w_ptr_logic_reg[7]_0 [0]),
        .I3(\r_ptr_logic_reg[7]_0 [0]),
        .O(empty_logic_i_5__0_n_0));
  FDPE #(
    .INIT(1'b1)) 
    empty_logic_reg
       (.C(full_logic_reg_0),
        .CE(1'b1),
        .D(empty_logic_i_1__0_n_0),
        .PRE(out),
        .Q(empty));
  LUT6 #(
    .INIT(64'hCCCDCCCCCCCD00CC)) 
    full_logic_i_1__0
       (.I0(full_logic_i_2__0_n_0),
        .I1(full),
        .I2(full_logic_i_3__0_n_0),
        .I3(\w_ptr_logic_reg[0]_0 ),
        .I4(\w_ptr_logic_reg[0]_1 ),
        .I5(empty),
        .O(full_logic_i_1__0_n_0));
  LUT5 #(
    .INIT(32'hF66F9FF6)) 
    full_logic_i_2__0
       (.I0(\w_ptr_logic_reg[7]_0 [7]),
        .I1(\r_ptr_logic_reg[7]_0 [7]),
        .I2(\w_ptr_logic[7]_i_3__0_n_0 ),
        .I3(\w_ptr_logic_reg[7]_0 [6]),
        .I4(\r_ptr_logic_reg[7]_0 [6]),
        .O(full_logic_i_2__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFF6FFFFF6)) 
    full_logic_i_3__0
       (.I0(\r_ptr_logic_reg[7]_0 [5]),
        .I1(\w_ptr_logic[5]_i_1__0_n_0 ),
        .I2(full_logic_i_4__0_n_0),
        .I3(\r_ptr_logic_reg[7]_0 [4]),
        .I4(\w_ptr_logic[4]_i_1__0_n_0 ),
        .I5(full_logic_i_5__0_n_0),
        .O(full_logic_i_3__0_n_0));
  LUT6 #(
    .INIT(64'hD56ABFFFBFFFD56A)) 
    full_logic_i_4__0
       (.I0(\r_ptr_logic_reg[7]_0 [2]),
        .I1(\w_ptr_logic_reg[7]_0 [1]),
        .I2(\w_ptr_logic_reg[7]_0 [0]),
        .I3(\w_ptr_logic_reg[7]_0 [2]),
        .I4(\w_ptr_logic_reg[7]_0 [3]),
        .I5(\r_ptr_logic_reg[7]_0 [3]),
        .O(full_logic_i_4__0_n_0));
  LUT4 #(
    .INIT(16'hF69F)) 
    full_logic_i_5__0
       (.I0(\w_ptr_logic_reg[7]_0 [1]),
        .I1(\r_ptr_logic_reg[7]_0 [1]),
        .I2(\w_ptr_logic_reg[7]_0 [0]),
        .I3(\r_ptr_logic_reg[7]_0 [0]),
        .O(full_logic_i_5__0_n_0));
  FDCE #(
    .INIT(1'b0)) 
    full_logic_reg
       (.C(full_logic_reg_0),
        .CE(1'b1),
        .CLR(out),
        .D(full_logic_i_1__0_n_0),
        .Q(full));
  LUT1 #(
    .INIT(2'h1)) 
    \r_ptr_logic[0]_i_1__0 
       (.I0(\r_ptr_logic_reg[7]_0 [0]),
        .O(r_ptr_logic_reg0__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_ptr_logic[1]_i_1__0 
       (.I0(\r_ptr_logic_reg[7]_0 [0]),
        .I1(\r_ptr_logic_reg[7]_0 [1]),
        .O(r_ptr_logic_reg0__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \r_ptr_logic[2]_i_1__0 
       (.I0(\r_ptr_logic_reg[7]_0 [0]),
        .I1(\r_ptr_logic_reg[7]_0 [1]),
        .I2(\r_ptr_logic_reg[7]_0 [2]),
        .O(r_ptr_logic_reg0__0[2]));
  LUT4 #(
    .INIT(16'h7F80)) 
    \r_ptr_logic[3]_i_1__0 
       (.I0(\r_ptr_logic_reg[7]_0 [1]),
        .I1(\r_ptr_logic_reg[7]_0 [0]),
        .I2(\r_ptr_logic_reg[7]_0 [2]),
        .I3(\r_ptr_logic_reg[7]_0 [3]),
        .O(r_ptr_logic_reg0__0[3]));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \r_ptr_logic[4]_i_1__0 
       (.I0(\r_ptr_logic_reg[7]_0 [2]),
        .I1(\r_ptr_logic_reg[7]_0 [0]),
        .I2(\r_ptr_logic_reg[7]_0 [1]),
        .I3(\r_ptr_logic_reg[7]_0 [3]),
        .I4(\r_ptr_logic_reg[7]_0 [4]),
        .O(r_ptr_logic_reg0__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_ptr_logic[5]_i_1__0 
       (.I0(\r_ptr_logic_reg[7]_0 [3]),
        .I1(\r_ptr_logic_reg[7]_0 [1]),
        .I2(\r_ptr_logic_reg[7]_0 [0]),
        .I3(\r_ptr_logic_reg[7]_0 [2]),
        .I4(\r_ptr_logic_reg[7]_0 [4]),
        .I5(\r_ptr_logic_reg[7]_0 [5]),
        .O(r_ptr_logic_reg0__0[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_ptr_logic[6]_i_1__0 
       (.I0(\r_ptr_logic[7]_i_3__0_n_0 ),
        .I1(\r_ptr_logic_reg[7]_0 [6]),
        .O(r_ptr_logic_reg0__0[6]));
  LUT3 #(
    .INIT(8'hD0)) 
    \r_ptr_logic[7]_i_1__0 
       (.I0(empty),
        .I1(\w_ptr_logic_reg[0]_1 ),
        .I2(\w_ptr_logic_reg[0]_0 ),
        .O(\r_ptr_logic[7]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \r_ptr_logic[7]_i_2__0 
       (.I0(\r_ptr_logic[7]_i_3__0_n_0 ),
        .I1(\r_ptr_logic_reg[7]_0 [6]),
        .I2(\r_ptr_logic_reg[7]_0 [7]),
        .O(r_ptr_logic_reg0__0[7]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \r_ptr_logic[7]_i_3__0 
       (.I0(\r_ptr_logic_reg[7]_0 [5]),
        .I1(\r_ptr_logic_reg[7]_0 [3]),
        .I2(\r_ptr_logic_reg[7]_0 [1]),
        .I3(\r_ptr_logic_reg[7]_0 [0]),
        .I4(\r_ptr_logic_reg[7]_0 [2]),
        .I5(\r_ptr_logic_reg[7]_0 [4]),
        .O(\r_ptr_logic[7]_i_3__0_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[0] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0__0[0]),
        .Q(\r_ptr_logic_reg[7]_0 [0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[1] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0__0[1]),
        .Q(\r_ptr_logic_reg[7]_0 [1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[2] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0__0[2]),
        .Q(\r_ptr_logic_reg[7]_0 [2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[3] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0__0[3]),
        .Q(\r_ptr_logic_reg[7]_0 [3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[4] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0__0[4]),
        .Q(\r_ptr_logic_reg[7]_0 [4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[5] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0__0[5]),
        .Q(\r_ptr_logic_reg[7]_0 [5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[6] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0__0[6]),
        .Q(\r_ptr_logic_reg[7]_0 [6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[7] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0__0[7]),
        .Q(\r_ptr_logic_reg[7]_0 [7]));
  LUT1 #(
    .INIT(2'h1)) 
    \w_ptr_logic[0]_i_1__0 
       (.I0(\w_ptr_logic_reg[7]_0 [0]),
        .O(\w_ptr_logic[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \w_ptr_logic[1]_i_1__0 
       (.I0(\w_ptr_logic_reg[7]_0 [0]),
        .I1(\w_ptr_logic_reg[7]_0 [1]),
        .O(\w_ptr_logic[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \w_ptr_logic[2]_i_1__0 
       (.I0(\w_ptr_logic_reg[7]_0 [0]),
        .I1(\w_ptr_logic_reg[7]_0 [1]),
        .I2(\w_ptr_logic_reg[7]_0 [2]),
        .O(\w_ptr_logic[2]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h7F80)) 
    \w_ptr_logic[3]_i_1__0 
       (.I0(\w_ptr_logic_reg[7]_0 [1]),
        .I1(\w_ptr_logic_reg[7]_0 [0]),
        .I2(\w_ptr_logic_reg[7]_0 [2]),
        .I3(\w_ptr_logic_reg[7]_0 [3]),
        .O(\w_ptr_logic[3]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \w_ptr_logic[4]_i_1__0 
       (.I0(\w_ptr_logic_reg[7]_0 [2]),
        .I1(\w_ptr_logic_reg[7]_0 [0]),
        .I2(\w_ptr_logic_reg[7]_0 [1]),
        .I3(\w_ptr_logic_reg[7]_0 [3]),
        .I4(\w_ptr_logic_reg[7]_0 [4]),
        .O(\w_ptr_logic[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \w_ptr_logic[5]_i_1__0 
       (.I0(\w_ptr_logic_reg[7]_0 [3]),
        .I1(\w_ptr_logic_reg[7]_0 [1]),
        .I2(\w_ptr_logic_reg[7]_0 [0]),
        .I3(\w_ptr_logic_reg[7]_0 [2]),
        .I4(\w_ptr_logic_reg[7]_0 [4]),
        .I5(\w_ptr_logic_reg[7]_0 [5]),
        .O(\w_ptr_logic[5]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \w_ptr_logic[6]_i_1__0 
       (.I0(\w_ptr_logic[7]_i_3__0_n_0 ),
        .I1(\w_ptr_logic_reg[7]_0 [6]),
        .O(\w_ptr_logic[6]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB0)) 
    \w_ptr_logic[7]_i_1__0 
       (.I0(\w_ptr_logic_reg[0]_0 ),
        .I1(full),
        .I2(\w_ptr_logic_reg[0]_1 ),
        .O(\w_ptr_logic[7]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \w_ptr_logic[7]_i_2__0 
       (.I0(\w_ptr_logic[7]_i_3__0_n_0 ),
        .I1(\w_ptr_logic_reg[7]_0 [6]),
        .I2(\w_ptr_logic_reg[7]_0 [7]),
        .O(\w_ptr_logic[7]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \w_ptr_logic[7]_i_3__0 
       (.I0(\w_ptr_logic_reg[7]_0 [5]),
        .I1(\w_ptr_logic_reg[7]_0 [3]),
        .I2(\w_ptr_logic_reg[7]_0 [1]),
        .I3(\w_ptr_logic_reg[7]_0 [0]),
        .I4(\w_ptr_logic_reg[7]_0 [2]),
        .I5(\w_ptr_logic_reg[7]_0 [4]),
        .O(\w_ptr_logic[7]_i_3__0_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[0] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(\w_ptr_logic[0]_i_1__0_n_0 ),
        .Q(\w_ptr_logic_reg[7]_0 [0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[1] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(\w_ptr_logic[1]_i_1__0_n_0 ),
        .Q(\w_ptr_logic_reg[7]_0 [1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[2] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(\w_ptr_logic[2]_i_1__0_n_0 ),
        .Q(\w_ptr_logic_reg[7]_0 [2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[3] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(\w_ptr_logic[3]_i_1__0_n_0 ),
        .Q(\w_ptr_logic_reg[7]_0 [3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[4] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(\w_ptr_logic[4]_i_1__0_n_0 ),
        .Q(\w_ptr_logic_reg[7]_0 [4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[5] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(\w_ptr_logic[5]_i_1__0_n_0 ),
        .Q(\w_ptr_logic_reg[7]_0 [5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[6] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(\w_ptr_logic[6]_i_1__0_n_0 ),
        .Q(\w_ptr_logic_reg[7]_0 [6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[7] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1__0_n_0 ),
        .CLR(out),
        .D(\w_ptr_logic[7]_i_2__0_n_0 ),
        .Q(\w_ptr_logic_reg[7]_0 [7]));
  LUT2 #(
    .INIT(4'h2)) 
    wr_en_inferred_i_1__0
       (.I0(\w_ptr_logic_reg[0]_1 ),
        .I1(full),
        .O(in0));
endmodule

(* ORIG_REF_NAME = "fifo_ctrl" *) 
module fifo_ctrl_1
   (empty,
    full,
    \w_ptr_logic_reg[7]_0 ,
    \r_ptr_logic_reg[7]_0 ,
    in0,
    out,
    \w_ptr_logic_reg[0]_0 ,
    \w_ptr_logic_reg[0]_1 ,
    full_logic_reg_0);
  output empty;
  output full;
  output [7:0]\w_ptr_logic_reg[7]_0 ;
  output [7:0]\r_ptr_logic_reg[7]_0 ;
  output in0;
  input out;
  input \w_ptr_logic_reg[0]_0 ;
  input \w_ptr_logic_reg[0]_1 ;
  input full_logic_reg_0;

  (* DONT_TOUCH *) wire empty;
  wire empty_logic_i_1_n_0;
  wire empty_logic_i_2_n_0;
  wire empty_logic_i_3_n_0;
  wire empty_logic_i_4_n_0;
  wire empty_logic_i_5_n_0;
  (* DONT_TOUCH *) wire full;
  wire full_logic_i_1_n_0;
  wire full_logic_i_2_n_0;
  wire full_logic_i_3_n_0;
  wire full_logic_i_4_n_0;
  wire full_logic_i_5_n_0;
  (* DONT_TOUCH *) wire full_logic_reg_0;
  wire in0;
  (* DONT_TOUCH *) wire out;
  wire \r_ptr_logic[7]_i_1_n_0 ;
  wire \r_ptr_logic[7]_i_3_n_0 ;
  wire [7:0]r_ptr_logic_reg0;
  (* DONT_TOUCH *) wire [7:0]\r_ptr_logic_reg[7]_0 ;
  wire \w_ptr_logic[7]_i_1_n_0 ;
  wire \w_ptr_logic[7]_i_3_n_0 ;
  wire [7:0]w_ptr_logic_reg0;
  (* DONT_TOUCH *) wire \w_ptr_logic_reg[0]_0 ;
  (* DONT_TOUCH *) wire \w_ptr_logic_reg[0]_1 ;
  (* DONT_TOUCH *) wire [7:0]\w_ptr_logic_reg[7]_0 ;

  LUT6 #(
    .INIT(64'hFAFF0000FAFF0030)) 
    empty_logic_i_1
       (.I0(full),
        .I1(empty_logic_i_2_n_0),
        .I2(\w_ptr_logic_reg[0]_0 ),
        .I3(\w_ptr_logic_reg[0]_1 ),
        .I4(empty),
        .I5(empty_logic_i_3_n_0),
        .O(empty_logic_i_1_n_0));
  LUT5 #(
    .INIT(32'hF66F9FF6)) 
    empty_logic_i_2
       (.I0(\r_ptr_logic_reg[7]_0 [7]),
        .I1(\w_ptr_logic_reg[7]_0 [7]),
        .I2(\r_ptr_logic[7]_i_3_n_0 ),
        .I3(\r_ptr_logic_reg[7]_0 [6]),
        .I4(\w_ptr_logic_reg[7]_0 [6]),
        .O(empty_logic_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFF6FFFFF6)) 
    empty_logic_i_3
       (.I0(r_ptr_logic_reg0[5]),
        .I1(\w_ptr_logic_reg[7]_0 [5]),
        .I2(empty_logic_i_4_n_0),
        .I3(r_ptr_logic_reg0[4]),
        .I4(\w_ptr_logic_reg[7]_0 [4]),
        .I5(empty_logic_i_5_n_0),
        .O(empty_logic_i_3_n_0));
  LUT6 #(
    .INIT(64'hE7777BBBBDDDDEEE)) 
    empty_logic_i_4
       (.I0(\w_ptr_logic_reg[7]_0 [2]),
        .I1(\w_ptr_logic_reg[7]_0 [3]),
        .I2(\r_ptr_logic_reg[7]_0 [1]),
        .I3(\r_ptr_logic_reg[7]_0 [0]),
        .I4(\r_ptr_logic_reg[7]_0 [2]),
        .I5(\r_ptr_logic_reg[7]_0 [3]),
        .O(empty_logic_i_4_n_0));
  LUT4 #(
    .INIT(16'hF96F)) 
    empty_logic_i_5
       (.I0(\w_ptr_logic_reg[7]_0 [1]),
        .I1(\r_ptr_logic_reg[7]_0 [1]),
        .I2(\w_ptr_logic_reg[7]_0 [0]),
        .I3(\r_ptr_logic_reg[7]_0 [0]),
        .O(empty_logic_i_5_n_0));
  FDPE #(
    .INIT(1'b1)) 
    empty_logic_reg
       (.C(full_logic_reg_0),
        .CE(1'b1),
        .D(empty_logic_i_1_n_0),
        .PRE(out),
        .Q(empty));
  LUT6 #(
    .INIT(64'hCCCDCCCCCCCD00CC)) 
    full_logic_i_1
       (.I0(full_logic_i_2_n_0),
        .I1(full),
        .I2(full_logic_i_3_n_0),
        .I3(\w_ptr_logic_reg[0]_0 ),
        .I4(\w_ptr_logic_reg[0]_1 ),
        .I5(empty),
        .O(full_logic_i_1_n_0));
  LUT5 #(
    .INIT(32'hF66F9FF6)) 
    full_logic_i_2
       (.I0(\w_ptr_logic_reg[7]_0 [7]),
        .I1(\r_ptr_logic_reg[7]_0 [7]),
        .I2(\w_ptr_logic[7]_i_3_n_0 ),
        .I3(\w_ptr_logic_reg[7]_0 [6]),
        .I4(\r_ptr_logic_reg[7]_0 [6]),
        .O(full_logic_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFF6FFFFF6)) 
    full_logic_i_3
       (.I0(\r_ptr_logic_reg[7]_0 [5]),
        .I1(w_ptr_logic_reg0[5]),
        .I2(full_logic_i_4_n_0),
        .I3(\r_ptr_logic_reg[7]_0 [4]),
        .I4(w_ptr_logic_reg0[4]),
        .I5(full_logic_i_5_n_0),
        .O(full_logic_i_3_n_0));
  LUT6 #(
    .INIT(64'hD56ABFFFBFFFD56A)) 
    full_logic_i_4
       (.I0(\r_ptr_logic_reg[7]_0 [2]),
        .I1(\w_ptr_logic_reg[7]_0 [1]),
        .I2(\w_ptr_logic_reg[7]_0 [0]),
        .I3(\w_ptr_logic_reg[7]_0 [2]),
        .I4(\w_ptr_logic_reg[7]_0 [3]),
        .I5(\r_ptr_logic_reg[7]_0 [3]),
        .O(full_logic_i_4_n_0));
  LUT4 #(
    .INIT(16'hF69F)) 
    full_logic_i_5
       (.I0(\w_ptr_logic_reg[7]_0 [1]),
        .I1(\r_ptr_logic_reg[7]_0 [1]),
        .I2(\w_ptr_logic_reg[7]_0 [0]),
        .I3(\r_ptr_logic_reg[7]_0 [0]),
        .O(full_logic_i_5_n_0));
  FDCE #(
    .INIT(1'b0)) 
    full_logic_reg
       (.C(full_logic_reg_0),
        .CE(1'b1),
        .CLR(out),
        .D(full_logic_i_1_n_0),
        .Q(full));
  LUT1 #(
    .INIT(2'h1)) 
    \r_ptr_logic[0]_i_1 
       (.I0(\r_ptr_logic_reg[7]_0 [0]),
        .O(r_ptr_logic_reg0[0]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_ptr_logic[1]_i_1 
       (.I0(\r_ptr_logic_reg[7]_0 [0]),
        .I1(\r_ptr_logic_reg[7]_0 [1]),
        .O(r_ptr_logic_reg0[1]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \r_ptr_logic[2]_i_1 
       (.I0(\r_ptr_logic_reg[7]_0 [0]),
        .I1(\r_ptr_logic_reg[7]_0 [1]),
        .I2(\r_ptr_logic_reg[7]_0 [2]),
        .O(r_ptr_logic_reg0[2]));
  LUT4 #(
    .INIT(16'h7F80)) 
    \r_ptr_logic[3]_i_1 
       (.I0(\r_ptr_logic_reg[7]_0 [1]),
        .I1(\r_ptr_logic_reg[7]_0 [0]),
        .I2(\r_ptr_logic_reg[7]_0 [2]),
        .I3(\r_ptr_logic_reg[7]_0 [3]),
        .O(r_ptr_logic_reg0[3]));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \r_ptr_logic[4]_i_1 
       (.I0(\r_ptr_logic_reg[7]_0 [2]),
        .I1(\r_ptr_logic_reg[7]_0 [0]),
        .I2(\r_ptr_logic_reg[7]_0 [1]),
        .I3(\r_ptr_logic_reg[7]_0 [3]),
        .I4(\r_ptr_logic_reg[7]_0 [4]),
        .O(r_ptr_logic_reg0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_ptr_logic[5]_i_1 
       (.I0(\r_ptr_logic_reg[7]_0 [3]),
        .I1(\r_ptr_logic_reg[7]_0 [1]),
        .I2(\r_ptr_logic_reg[7]_0 [0]),
        .I3(\r_ptr_logic_reg[7]_0 [2]),
        .I4(\r_ptr_logic_reg[7]_0 [4]),
        .I5(\r_ptr_logic_reg[7]_0 [5]),
        .O(r_ptr_logic_reg0[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_ptr_logic[6]_i_1 
       (.I0(\r_ptr_logic[7]_i_3_n_0 ),
        .I1(\r_ptr_logic_reg[7]_0 [6]),
        .O(r_ptr_logic_reg0[6]));
  LUT3 #(
    .INIT(8'hD0)) 
    \r_ptr_logic[7]_i_1 
       (.I0(empty),
        .I1(\w_ptr_logic_reg[0]_1 ),
        .I2(\w_ptr_logic_reg[0]_0 ),
        .O(\r_ptr_logic[7]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \r_ptr_logic[7]_i_2 
       (.I0(\r_ptr_logic[7]_i_3_n_0 ),
        .I1(\r_ptr_logic_reg[7]_0 [6]),
        .I2(\r_ptr_logic_reg[7]_0 [7]),
        .O(r_ptr_logic_reg0[7]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \r_ptr_logic[7]_i_3 
       (.I0(\r_ptr_logic_reg[7]_0 [5]),
        .I1(\r_ptr_logic_reg[7]_0 [3]),
        .I2(\r_ptr_logic_reg[7]_0 [1]),
        .I3(\r_ptr_logic_reg[7]_0 [0]),
        .I4(\r_ptr_logic_reg[7]_0 [2]),
        .I5(\r_ptr_logic_reg[7]_0 [4]),
        .O(\r_ptr_logic[7]_i_3_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[0] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[0]),
        .Q(\r_ptr_logic_reg[7]_0 [0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[1] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[1]),
        .Q(\r_ptr_logic_reg[7]_0 [1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[2] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[2]),
        .Q(\r_ptr_logic_reg[7]_0 [2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[3] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[3]),
        .Q(\r_ptr_logic_reg[7]_0 [3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[4] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[4]),
        .Q(\r_ptr_logic_reg[7]_0 [4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[5] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[5]),
        .Q(\r_ptr_logic_reg[7]_0 [5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[6] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[6]),
        .Q(\r_ptr_logic_reg[7]_0 [6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[7] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[7]),
        .Q(\r_ptr_logic_reg[7]_0 [7]));
  LUT1 #(
    .INIT(2'h1)) 
    \w_ptr_logic[0]_i_1 
       (.I0(\w_ptr_logic_reg[7]_0 [0]),
        .O(w_ptr_logic_reg0[0]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \w_ptr_logic[1]_i_1 
       (.I0(\w_ptr_logic_reg[7]_0 [0]),
        .I1(\w_ptr_logic_reg[7]_0 [1]),
        .O(w_ptr_logic_reg0[1]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \w_ptr_logic[2]_i_1 
       (.I0(\w_ptr_logic_reg[7]_0 [0]),
        .I1(\w_ptr_logic_reg[7]_0 [1]),
        .I2(\w_ptr_logic_reg[7]_0 [2]),
        .O(w_ptr_logic_reg0[2]));
  LUT4 #(
    .INIT(16'h7F80)) 
    \w_ptr_logic[3]_i_1 
       (.I0(\w_ptr_logic_reg[7]_0 [1]),
        .I1(\w_ptr_logic_reg[7]_0 [0]),
        .I2(\w_ptr_logic_reg[7]_0 [2]),
        .I3(\w_ptr_logic_reg[7]_0 [3]),
        .O(w_ptr_logic_reg0[3]));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \w_ptr_logic[4]_i_1 
       (.I0(\w_ptr_logic_reg[7]_0 [2]),
        .I1(\w_ptr_logic_reg[7]_0 [0]),
        .I2(\w_ptr_logic_reg[7]_0 [1]),
        .I3(\w_ptr_logic_reg[7]_0 [3]),
        .I4(\w_ptr_logic_reg[7]_0 [4]),
        .O(w_ptr_logic_reg0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \w_ptr_logic[5]_i_1 
       (.I0(\w_ptr_logic_reg[7]_0 [3]),
        .I1(\w_ptr_logic_reg[7]_0 [1]),
        .I2(\w_ptr_logic_reg[7]_0 [0]),
        .I3(\w_ptr_logic_reg[7]_0 [2]),
        .I4(\w_ptr_logic_reg[7]_0 [4]),
        .I5(\w_ptr_logic_reg[7]_0 [5]),
        .O(w_ptr_logic_reg0[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \w_ptr_logic[6]_i_1 
       (.I0(\w_ptr_logic[7]_i_3_n_0 ),
        .I1(\w_ptr_logic_reg[7]_0 [6]),
        .O(w_ptr_logic_reg0[6]));
  LUT3 #(
    .INIT(8'hB0)) 
    \w_ptr_logic[7]_i_1 
       (.I0(\w_ptr_logic_reg[0]_0 ),
        .I1(full),
        .I2(\w_ptr_logic_reg[0]_1 ),
        .O(\w_ptr_logic[7]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \w_ptr_logic[7]_i_2 
       (.I0(\w_ptr_logic[7]_i_3_n_0 ),
        .I1(\w_ptr_logic_reg[7]_0 [6]),
        .I2(\w_ptr_logic_reg[7]_0 [7]),
        .O(w_ptr_logic_reg0[7]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \w_ptr_logic[7]_i_3 
       (.I0(\w_ptr_logic_reg[7]_0 [5]),
        .I1(\w_ptr_logic_reg[7]_0 [3]),
        .I2(\w_ptr_logic_reg[7]_0 [1]),
        .I3(\w_ptr_logic_reg[7]_0 [0]),
        .I4(\w_ptr_logic_reg[7]_0 [2]),
        .I5(\w_ptr_logic_reg[7]_0 [4]),
        .O(\w_ptr_logic[7]_i_3_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[0] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[0]),
        .Q(\w_ptr_logic_reg[7]_0 [0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[1] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[1]),
        .Q(\w_ptr_logic_reg[7]_0 [1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[2] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[2]),
        .Q(\w_ptr_logic_reg[7]_0 [2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[3] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[3]),
        .Q(\w_ptr_logic_reg[7]_0 [3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[4] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[4]),
        .Q(\w_ptr_logic_reg[7]_0 [4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[5] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[5]),
        .Q(\w_ptr_logic_reg[7]_0 [5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[6] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[6]),
        .Q(\w_ptr_logic_reg[7]_0 [6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[7] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[7]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[7]),
        .Q(\w_ptr_logic_reg[7]_0 [7]));
  LUT2 #(
    .INIT(4'h2)) 
    wr_en_inferred_i_1
       (.I0(\w_ptr_logic_reg[0]_1 ),
        .I1(full),
        .O(in0));
endmodule

(* ORIG_REF_NAME = "fifo_ctrl" *) 
module fifo_ctrl__parameterized0
   (empty,
    full,
    \w_ptr_logic_reg[5]_0 ,
    \r_ptr_logic_reg[5]_0 ,
    in0,
    out,
    \w_ptr_logic_reg[0]_0 ,
    \w_ptr_logic_reg[0]_1 ,
    full_logic_reg_0);
  output empty;
  output full;
  output [5:0]\w_ptr_logic_reg[5]_0 ;
  output [5:0]\r_ptr_logic_reg[5]_0 ;
  output in0;
  input out;
  input \w_ptr_logic_reg[0]_0 ;
  input \w_ptr_logic_reg[0]_1 ;
  input full_logic_reg_0;

  (* DONT_TOUCH *) wire empty;
  wire empty_logic_i_1_n_0;
  wire empty_logic_i_3_n_0;
  wire empty_logic_i_4_n_0;
  wire empty_next0__10;
  (* DONT_TOUCH *) wire full;
  wire full_logic_i_1_n_0;
  wire full_logic_i_3_n_0;
  wire full_logic_i_4_n_0;
  (* DONT_TOUCH *) wire full_logic_reg_0;
  wire full_next0__10;
  wire in0;
  (* DONT_TOUCH *) wire out;
  wire \r_ptr_logic[5]_i_1_n_0 ;
  wire [5:0]r_ptr_logic_reg0;
  (* DONT_TOUCH *) wire [5:0]\r_ptr_logic_reg[5]_0 ;
  wire \w_ptr_logic[5]_i_1_n_0 ;
  wire [5:0]w_ptr_logic_reg0;
  (* DONT_TOUCH *) wire \w_ptr_logic_reg[0]_0 ;
  (* DONT_TOUCH *) wire \w_ptr_logic_reg[0]_1 ;
  (* DONT_TOUCH *) wire [5:0]\w_ptr_logic_reg[5]_0 ;

  LUT5 #(
    .INIT(32'hAAEAA0EA)) 
    empty_logic_i_1
       (.I0(empty),
        .I1(empty_next0__10),
        .I2(\w_ptr_logic_reg[0]_0 ),
        .I3(\w_ptr_logic_reg[0]_1 ),
        .I4(full),
        .O(empty_logic_i_1_n_0));
  LUT6 #(
    .INIT(64'h8008000000008008)) 
    empty_logic_i_2
       (.I0(empty_logic_i_3_n_0),
        .I1(empty_logic_i_4_n_0),
        .I2(r_ptr_logic_reg0[5]),
        .I3(\w_ptr_logic_reg[5]_0 [5]),
        .I4(\w_ptr_logic_reg[5]_0 [3]),
        .I5(r_ptr_logic_reg0[3]),
        .O(empty_next0__10));
  LUT6 #(
    .INIT(64'h0041820014000082)) 
    empty_logic_i_3
       (.I0(\w_ptr_logic_reg[5]_0 [0]),
        .I1(\w_ptr_logic_reg[5]_0 [2]),
        .I2(\r_ptr_logic_reg[5]_0 [2]),
        .I3(\r_ptr_logic_reg[5]_0 [1]),
        .I4(\r_ptr_logic_reg[5]_0 [0]),
        .I5(\w_ptr_logic_reg[5]_0 [1]),
        .O(empty_logic_i_3_n_0));
  LUT6 #(
    .INIT(64'h6999999999999999)) 
    empty_logic_i_4
       (.I0(\w_ptr_logic_reg[5]_0 [4]),
        .I1(\r_ptr_logic_reg[5]_0 [4]),
        .I2(\r_ptr_logic_reg[5]_0 [3]),
        .I3(\r_ptr_logic_reg[5]_0 [1]),
        .I4(\r_ptr_logic_reg[5]_0 [0]),
        .I5(\r_ptr_logic_reg[5]_0 [2]),
        .O(empty_logic_i_4_n_0));
  FDPE #(
    .INIT(1'b1)) 
    empty_logic_reg
       (.C(full_logic_reg_0),
        .CE(1'b1),
        .D(empty_logic_i_1_n_0),
        .PRE(out),
        .Q(empty));
  LUT5 #(
    .INIT(32'hFB30FB00)) 
    full_logic_i_1
       (.I0(empty),
        .I1(\w_ptr_logic_reg[0]_0 ),
        .I2(\w_ptr_logic_reg[0]_1 ),
        .I3(full),
        .I4(full_next0__10),
        .O(full_logic_i_1_n_0));
  LUT6 #(
    .INIT(64'h8008000000008008)) 
    full_logic_i_2
       (.I0(full_logic_i_3_n_0),
        .I1(full_logic_i_4_n_0),
        .I2(w_ptr_logic_reg0[5]),
        .I3(\r_ptr_logic_reg[5]_0 [5]),
        .I4(\r_ptr_logic_reg[5]_0 [3]),
        .I5(w_ptr_logic_reg0[3]),
        .O(full_next0__10));
  LUT6 #(
    .INIT(64'h0041820014000082)) 
    full_logic_i_3
       (.I0(\r_ptr_logic_reg[5]_0 [0]),
        .I1(\r_ptr_logic_reg[5]_0 [2]),
        .I2(\w_ptr_logic_reg[5]_0 [2]),
        .I3(\w_ptr_logic_reg[5]_0 [1]),
        .I4(\w_ptr_logic_reg[5]_0 [0]),
        .I5(\r_ptr_logic_reg[5]_0 [1]),
        .O(full_logic_i_3_n_0));
  LUT6 #(
    .INIT(64'h6999999999999999)) 
    full_logic_i_4
       (.I0(\r_ptr_logic_reg[5]_0 [4]),
        .I1(\w_ptr_logic_reg[5]_0 [4]),
        .I2(\w_ptr_logic_reg[5]_0 [3]),
        .I3(\w_ptr_logic_reg[5]_0 [1]),
        .I4(\w_ptr_logic_reg[5]_0 [0]),
        .I5(\w_ptr_logic_reg[5]_0 [2]),
        .O(full_logic_i_4_n_0));
  FDCE #(
    .INIT(1'b0)) 
    full_logic_reg
       (.C(full_logic_reg_0),
        .CE(1'b1),
        .CLR(out),
        .D(full_logic_i_1_n_0),
        .Q(full));
  LUT1 #(
    .INIT(2'h1)) 
    \r_ptr_logic[0]_i_1 
       (.I0(\r_ptr_logic_reg[5]_0 [0]),
        .O(r_ptr_logic_reg0[0]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_ptr_logic[1]_i_1 
       (.I0(\r_ptr_logic_reg[5]_0 [0]),
        .I1(\r_ptr_logic_reg[5]_0 [1]),
        .O(r_ptr_logic_reg0[1]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \r_ptr_logic[2]_i_1 
       (.I0(\r_ptr_logic_reg[5]_0 [0]),
        .I1(\r_ptr_logic_reg[5]_0 [1]),
        .I2(\r_ptr_logic_reg[5]_0 [2]),
        .O(r_ptr_logic_reg0[2]));
  LUT4 #(
    .INIT(16'h7F80)) 
    \r_ptr_logic[3]_i_1 
       (.I0(\r_ptr_logic_reg[5]_0 [1]),
        .I1(\r_ptr_logic_reg[5]_0 [0]),
        .I2(\r_ptr_logic_reg[5]_0 [2]),
        .I3(\r_ptr_logic_reg[5]_0 [3]),
        .O(r_ptr_logic_reg0[3]));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \r_ptr_logic[4]_i_1 
       (.I0(\r_ptr_logic_reg[5]_0 [2]),
        .I1(\r_ptr_logic_reg[5]_0 [0]),
        .I2(\r_ptr_logic_reg[5]_0 [1]),
        .I3(\r_ptr_logic_reg[5]_0 [3]),
        .I4(\r_ptr_logic_reg[5]_0 [4]),
        .O(r_ptr_logic_reg0[4]));
  LUT3 #(
    .INIT(8'hA2)) 
    \r_ptr_logic[5]_i_1 
       (.I0(\w_ptr_logic_reg[0]_0 ),
        .I1(empty),
        .I2(\w_ptr_logic_reg[0]_1 ),
        .O(\r_ptr_logic[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_ptr_logic[5]_i_2 
       (.I0(\r_ptr_logic_reg[5]_0 [3]),
        .I1(\r_ptr_logic_reg[5]_0 [1]),
        .I2(\r_ptr_logic_reg[5]_0 [0]),
        .I3(\r_ptr_logic_reg[5]_0 [2]),
        .I4(\r_ptr_logic_reg[5]_0 [4]),
        .I5(\r_ptr_logic_reg[5]_0 [5]),
        .O(r_ptr_logic_reg0[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[0] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[5]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[0]),
        .Q(\r_ptr_logic_reg[5]_0 [0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[1] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[5]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[1]),
        .Q(\r_ptr_logic_reg[5]_0 [1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[2] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[5]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[2]),
        .Q(\r_ptr_logic_reg[5]_0 [2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[3] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[5]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[3]),
        .Q(\r_ptr_logic_reg[5]_0 [3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[4] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[5]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[4]),
        .Q(\r_ptr_logic_reg[5]_0 [4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_ptr_logic_reg[5] 
       (.C(full_logic_reg_0),
        .CE(\r_ptr_logic[5]_i_1_n_0 ),
        .CLR(out),
        .D(r_ptr_logic_reg0[5]),
        .Q(\r_ptr_logic_reg[5]_0 [5]));
  LUT1 #(
    .INIT(2'h1)) 
    \w_ptr_logic[0]_i_1 
       (.I0(\w_ptr_logic_reg[5]_0 [0]),
        .O(w_ptr_logic_reg0[0]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \w_ptr_logic[1]_i_1 
       (.I0(\w_ptr_logic_reg[5]_0 [0]),
        .I1(\w_ptr_logic_reg[5]_0 [1]),
        .O(w_ptr_logic_reg0[1]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \w_ptr_logic[2]_i_1 
       (.I0(\w_ptr_logic_reg[5]_0 [0]),
        .I1(\w_ptr_logic_reg[5]_0 [1]),
        .I2(\w_ptr_logic_reg[5]_0 [2]),
        .O(w_ptr_logic_reg0[2]));
  LUT4 #(
    .INIT(16'h7F80)) 
    \w_ptr_logic[3]_i_1 
       (.I0(\w_ptr_logic_reg[5]_0 [1]),
        .I1(\w_ptr_logic_reg[5]_0 [0]),
        .I2(\w_ptr_logic_reg[5]_0 [2]),
        .I3(\w_ptr_logic_reg[5]_0 [3]),
        .O(w_ptr_logic_reg0[3]));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \w_ptr_logic[4]_i_1 
       (.I0(\w_ptr_logic_reg[5]_0 [2]),
        .I1(\w_ptr_logic_reg[5]_0 [0]),
        .I2(\w_ptr_logic_reg[5]_0 [1]),
        .I3(\w_ptr_logic_reg[5]_0 [3]),
        .I4(\w_ptr_logic_reg[5]_0 [4]),
        .O(w_ptr_logic_reg0[4]));
  LUT3 #(
    .INIT(8'hA2)) 
    \w_ptr_logic[5]_i_1 
       (.I0(\w_ptr_logic_reg[0]_1 ),
        .I1(full),
        .I2(\w_ptr_logic_reg[0]_0 ),
        .O(\w_ptr_logic[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \w_ptr_logic[5]_i_2 
       (.I0(\w_ptr_logic_reg[5]_0 [3]),
        .I1(\w_ptr_logic_reg[5]_0 [1]),
        .I2(\w_ptr_logic_reg[5]_0 [0]),
        .I3(\w_ptr_logic_reg[5]_0 [2]),
        .I4(\w_ptr_logic_reg[5]_0 [4]),
        .I5(\w_ptr_logic_reg[5]_0 [5]),
        .O(w_ptr_logic_reg0[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[0] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[5]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[0]),
        .Q(\w_ptr_logic_reg[5]_0 [0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[1] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[5]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[1]),
        .Q(\w_ptr_logic_reg[5]_0 [1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[2] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[5]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[2]),
        .Q(\w_ptr_logic_reg[5]_0 [2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[3] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[5]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[3]),
        .Q(\w_ptr_logic_reg[5]_0 [3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[4] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[5]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[4]),
        .Q(\w_ptr_logic_reg[5]_0 [4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \w_ptr_logic_reg[5] 
       (.C(full_logic_reg_0),
        .CE(\w_ptr_logic[5]_i_1_n_0 ),
        .CLR(out),
        .D(w_ptr_logic_reg0[5]),
        .Q(\w_ptr_logic_reg[5]_0 [5]));
  LUT2 #(
    .INIT(4'h2)) 
    wr_en_inferred_i_1
       (.I0(\w_ptr_logic_reg[0]_1 ),
        .I1(full),
        .O(in0));
endmodule

(* BRG_BASE = "-1073741824" *) (* ECO_CHECKSUM = "fc28bdfa" *) (* POWER_OPT_BRAM_CDC = "0" *) 
(* POWER_OPT_BRAM_SR_ADDR = "0" *) (* POWER_OPT_LOOPED_NET_PERCENTAGE = "0" *) 
(* NotValidForBitStream *)
module mcs_top_heat_arty_a7
   (sysclk_p,
    sysclk_n,
    reset,
    rx,
    tx,
    ps2c,
    ps2d);
  (* dont_touch = "true" *) input sysclk_p;
  (* dont_touch = "true" *) input sysclk_n;
  (* dont_touch = "true" *) input reset;
  (* dont_touch = "true" *) input rx;
  (* dont_touch = "true" *) output tx;
  inout ps2c;
  inout ps2d;

  wire clk_100M;
  wire clk_100M_BUFG;
  wire clk_100M_i_1_n_0;
  wire clk_200M;
  wire clk_200M_BUFG;
  wire [31:0]fp_rd_data;
  wire [31:0]io_address;
  wire io_read_strobe;
  wire [31:0]io_write_data;
  wire io_write_strobe;
  wire ps2c;
  wire ps2d;
  wire reset;
  (* DONT_TOUCH *) wire reset_IBUF;
  wire rx;
  (* DONT_TOUCH *) wire rx_IBUF;
  (* DIFF_TERM = 0 *) (* DONT_TOUCH *) (* IBUF_LOW_PWR *) wire sysclk_n;
  (* DIFF_TERM = 0 *) (* DONT_TOUCH *) (* IBUF_LOW_PWR *) wire sysclk_p;
  wire tx;
  (* DONT_TOUCH *) wire tx_OBUF;
  wire NLW_cpu_unit_IO_addr_strobe_UNCONNECTED;
  wire NLW_cpu_unit_IO_ready_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_data_access_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_data_read_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_data_write_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_dcache_hit_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_dcache_rdy_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_dcache_read_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_dcache_req_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_delay_slot_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_ex_piperun_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_exception_taken_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_icache_hit_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_icache_rdy_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_icache_req_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_jump_hit_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_jump_taken_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_mb_halted_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_mem_piperun_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_of_piperun_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_reg_write_UNCONNECTED;
  wire NLW_cpu_unit_TRACE_valid_instr_UNCONNECTED;
  wire NLW_cpu_unit_UART_rxd_UNCONNECTED;
  wire NLW_cpu_unit_UART_txd_UNCONNECTED;
  wire [22:0]NLW_cpu_unit_IO_address_UNCONNECTED;
  wire [3:0]NLW_cpu_unit_IO_byte_enable_UNCONNECTED;
  wire [31:11]NLW_cpu_unit_IO_write_data_UNCONNECTED;
  wire [0:31]NLW_cpu_unit_TRACE_data_address_UNCONNECTED;
  wire [0:3]NLW_cpu_unit_TRACE_data_byte_enable_UNCONNECTED;
  wire [0:31]NLW_cpu_unit_TRACE_data_write_value_UNCONNECTED;
  wire [0:4]NLW_cpu_unit_TRACE_exception_kind_UNCONNECTED;
  wire [0:31]NLW_cpu_unit_TRACE_instruction_UNCONNECTED;
  wire [0:14]NLW_cpu_unit_TRACE_msr_reg_UNCONNECTED;
  wire [0:31]NLW_cpu_unit_TRACE_new_reg_value_UNCONNECTED;
  wire [0:31]NLW_cpu_unit_TRACE_pc_UNCONNECTED;
  wire [0:7]NLW_cpu_unit_TRACE_pid_reg_UNCONNECTED;
  wire [0:4]NLW_cpu_unit_TRACE_reg_addr_UNCONNECTED;
  wire [20:2]NLW_mmio_unit_IO_address_UNCONNECTED;
  wire [31:11]NLW_mmio_unit_IO_write_data_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CAPACITANCE = "DONT_CARE" *) 
  (* IBUF_DELAY_VALUE = "0" *) 
  (* XILINX_LEGACY_PRIM = "IBUFGDS" *) 
  IBUFDS #(
    .IOSTANDARD("DEFAULT")) 
    IBUFGDS_inst
       (.I(sysclk_p),
        .IB(sysclk_n),
        .O(clk_200M));
  (* LOPT_BUFG_CLOCK *) 
  (* OPT_MODIFIED = "BUFG_OPT " *) 
  BUFG clk_100M_BUFG_inst
       (.I(clk_100M),
        .O(clk_100M_BUFG));
  LUT1 #(
    .INIT(2'h1)) 
    clk_100M_i_1
       (.I0(clk_100M_BUFG),
        .O(clk_100M_i_1_n_0));
  (* OPT_MODIFIED = "BUFG_OPT " *) 
  FDRE #(
    .INIT(1'b0)) 
    clk_100M_reg
       (.C(clk_200M_BUFG),
        .CE(1'b1),
        .D(clk_100M_i_1_n_0),
        .Q(clk_100M),
        .R(reset_IBUF));
  BUFG clk_200M_BUFG_inst
       (.I(clk_200M),
        .O(clk_200M_BUFG));
  (* X_CORE_INFO = "bd_3914,Vivado 2018.3" *) 
  cpu cpu_unit
       (.Clk(clk_100M_BUFG),
        .IO_addr_strobe(NLW_cpu_unit_IO_addr_strobe_UNCONNECTED),
        .IO_address({io_address[31:23],NLW_cpu_unit_IO_address_UNCONNECTED[22:13],io_address[12:7],NLW_cpu_unit_IO_address_UNCONNECTED[6:4],io_address[3:2],NLW_cpu_unit_IO_address_UNCONNECTED[1:0]}),
        .IO_byte_enable(NLW_cpu_unit_IO_byte_enable_UNCONNECTED[3:0]),
        .IO_read_data(fp_rd_data),
        .IO_read_strobe(io_read_strobe),
        .IO_ready(NLW_cpu_unit_IO_ready_UNCONNECTED),
        .IO_write_data({NLW_cpu_unit_IO_write_data_UNCONNECTED[31:11],io_write_data[10:0]}),
        .IO_write_strobe(io_write_strobe),
        .Reset(reset_IBUF),
        .TRACE_data_access(NLW_cpu_unit_TRACE_data_access_UNCONNECTED),
        .TRACE_data_address(NLW_cpu_unit_TRACE_data_address_UNCONNECTED[0:31]),
        .TRACE_data_byte_enable(NLW_cpu_unit_TRACE_data_byte_enable_UNCONNECTED[0:3]),
        .TRACE_data_read(NLW_cpu_unit_TRACE_data_read_UNCONNECTED),
        .TRACE_data_write(NLW_cpu_unit_TRACE_data_write_UNCONNECTED),
        .TRACE_data_write_value(NLW_cpu_unit_TRACE_data_write_value_UNCONNECTED[0:31]),
        .TRACE_dcache_hit(NLW_cpu_unit_TRACE_dcache_hit_UNCONNECTED),
        .TRACE_dcache_rdy(NLW_cpu_unit_TRACE_dcache_rdy_UNCONNECTED),
        .TRACE_dcache_read(NLW_cpu_unit_TRACE_dcache_read_UNCONNECTED),
        .TRACE_dcache_req(NLW_cpu_unit_TRACE_dcache_req_UNCONNECTED),
        .TRACE_delay_slot(NLW_cpu_unit_TRACE_delay_slot_UNCONNECTED),
        .TRACE_ex_piperun(NLW_cpu_unit_TRACE_ex_piperun_UNCONNECTED),
        .TRACE_exception_kind(NLW_cpu_unit_TRACE_exception_kind_UNCONNECTED[0:4]),
        .TRACE_exception_taken(NLW_cpu_unit_TRACE_exception_taken_UNCONNECTED),
        .TRACE_icache_hit(NLW_cpu_unit_TRACE_icache_hit_UNCONNECTED),
        .TRACE_icache_rdy(NLW_cpu_unit_TRACE_icache_rdy_UNCONNECTED),
        .TRACE_icache_req(NLW_cpu_unit_TRACE_icache_req_UNCONNECTED),
        .TRACE_instruction(NLW_cpu_unit_TRACE_instruction_UNCONNECTED[0:31]),
        .TRACE_jump_hit(NLW_cpu_unit_TRACE_jump_hit_UNCONNECTED),
        .TRACE_jump_taken(NLW_cpu_unit_TRACE_jump_taken_UNCONNECTED),
        .TRACE_mb_halted(NLW_cpu_unit_TRACE_mb_halted_UNCONNECTED),
        .TRACE_mem_piperun(NLW_cpu_unit_TRACE_mem_piperun_UNCONNECTED),
        .TRACE_msr_reg(NLW_cpu_unit_TRACE_msr_reg_UNCONNECTED[0:14]),
        .TRACE_new_reg_value(NLW_cpu_unit_TRACE_new_reg_value_UNCONNECTED[0:31]),
        .TRACE_of_piperun(NLW_cpu_unit_TRACE_of_piperun_UNCONNECTED),
        .TRACE_pc(NLW_cpu_unit_TRACE_pc_UNCONNECTED[0:31]),
        .TRACE_pid_reg(NLW_cpu_unit_TRACE_pid_reg_UNCONNECTED[0:7]),
        .TRACE_reg_addr(NLW_cpu_unit_TRACE_reg_addr_UNCONNECTED[0:4]),
        .TRACE_reg_write(NLW_cpu_unit_TRACE_reg_write_UNCONNECTED),
        .TRACE_valid_instr(NLW_cpu_unit_TRACE_valid_instr_UNCONNECTED),
        .UART_rxd(NLW_cpu_unit_UART_rxd_UNCONNECTED),
        .UART_txd(NLW_cpu_unit_UART_txd_UNCONNECTED));
  mmio_sys_sampler_arty_a7 mmio_unit
       (.IO_address({io_address[31:23],NLW_mmio_unit_IO_address_UNCONNECTED[20:11],io_address[12:7],NLW_mmio_unit_IO_address_UNCONNECTED[4:2],io_address[3:2]}),
        .IO_read_strobe(io_read_strobe),
        .IO_write_data({NLW_mmio_unit_IO_write_data_UNCONNECTED[31:11],io_write_data[10:0]}),
        .IO_write_strobe(io_write_strobe),
        .\b_reg_reg[7] (rx_IBUF),
        .in0(clk_100M_BUFG),
        .\n_reg_reg[0] (reset_IBUF),
        .out(fp_rd_data),
        .ps2c(ps2c),
        .ps2d(ps2d),
        .tx(tx_OBUF));
  (* DONT_TOUCH *) 
  IBUF reset_IBUF_inst
       (.I(reset),
        .O(reset_IBUF));
  (* DONT_TOUCH *) 
  IBUF rx_IBUF_inst
       (.I(rx),
        .O(rx_IBUF));
  (* DONT_TOUCH *) 
  OBUF tx_OBUF_inst
       (.I(tx_OBUF),
        .O(tx));
endmodule

module mmio_sys_sampler_arty_a7
   (out,
    tx,
    ps2d,
    ps2c,
    in0,
    \n_reg_reg[0] ,
    IO_write_strobe,
    IO_read_strobe,
    IO_address,
    IO_write_data,
    \b_reg_reg[7] );
  output [31:0]out;
  output tx;
  inout ps2d;
  inout ps2c;
  input in0;
  input \n_reg_reg[0] ;
  input IO_write_strobe;
  input IO_read_strobe;
  input [29:0]IO_address;
  input [31:0]IO_write_data;
  input \b_reg_reg[7] ;

  wire [29:0]IO_address;
  (* DONT_TOUCH *) wire IO_read_strobe;
  (* DONT_TOUCH *) wire [31:0]IO_write_data;
  (* DONT_TOUCH *) wire IO_write_strobe;
  (* DONT_TOUCH *) wire \b_reg_reg[7] ;
  wire [31:16]count_reg;
  wire [11:11]cs_array;
  (* DONT_TOUCH *) wire fp_mmio_cs;
  (* DONT_TOUCH *) wire in0;
  wire mmio_cs_inferred_i_2_n_0;
  (* DONT_TOUCH *) wire \n_reg_reg[0] ;
  (* DONT_TOUCH *) wire [31:0]out;
  wire ps2_slot11_i_2_n_0;
  wire ps2c;
  wire ps2d;
  wire [31:0]\rd_data_array[11]_1 ;
  wire [15:0]\rd_data_array[1]_0 ;
  (* DONT_TOUCH *) wire tx;
  wire uart_slot1_n_33;

  LUT6 #(
    .INIT(64'h0000000000000001)) 
    mmio_cs_inferred_i_1
       (.I0(mmio_cs_inferred_i_2_n_0),
        .I1(IO_address[27]),
        .I2(IO_address[26]),
        .I3(IO_address[25]),
        .I4(IO_address[24]),
        .I5(IO_address[21]),
        .O(fp_mmio_cs));
  LUT4 #(
    .INIT(16'hFFF7)) 
    mmio_cs_inferred_i_2
       (.I0(IO_address[28]),
        .I1(IO_address[29]),
        .I2(IO_address[23]),
        .I3(IO_address[22]),
        .O(mmio_cs_inferred_i_2_n_0));
  (* W_SIZE = "6" *) 
  chu_ps2_core ps2_slot11
       (.addr(IO_address[4:0]),
        .clk(in0),
        .cs(cs_array),
        .ps2c(ps2c),
        .ps2d(ps2d),
        .rd_data(\rd_data_array[11]_1 ),
        .read(IO_read_strobe),
        .reset(\n_reg_reg[0] ),
        .wr_data(IO_write_data),
        .write(IO_write_strobe));
  LUT3 #(
    .INIT(8'h02)) 
    ps2_slot11_i_1
       (.I0(fp_mmio_cs),
        .I1(IO_address[10]),
        .I2(ps2_slot11_i_2_n_0),
        .O(cs_array));
  LUT5 #(
    .INIT(32'hFFFFF7FF)) 
    ps2_slot11_i_2
       (.I0(IO_address[5]),
        .I1(IO_address[6]),
        .I2(IO_address[7]),
        .I3(IO_address[8]),
        .I4(IO_address[9]),
        .O(ps2_slot11_i_2_n_0));
  chu_timer timer_slot0
       (.Q(count_reg),
        .\count_reg_reg[0]_0 (\n_reg_reg[0] ),
        .\count_reg_reg[0]_1 (IO_write_data[1:0]),
        .\count_reg_reg[0]_2 (IO_write_strobe),
        .ctrl_reg_reg_0({IO_address[10:5],IO_address[1:0]}),
        .ctrl_reg_reg_1(uart_slot1_n_33),
        .ctrl_reg_reg_2(fp_mmio_cs),
        .\dvsr_reg_reg[10] (ps2_slot11_i_2_n_0),
        .in0(out[15:0]),
        .mmio_rd_data_inferred_i_17_0(\rd_data_array[1]_0 ),
        .out(in0),
        .rd_data(\rd_data_array[11]_1 [15:0]));
  chu_uart uart_slot1
       (.Q(count_reg),
        .UNCONN_IN(IO_write_data),
        .UNCONN_IN_0(IO_read_strobe),
        .\b_reg_reg[7] (\b_reg_reg[7] ),
        .\bbstub_IO_address[10] (uart_slot1_n_33),
        .\dvsr_reg_reg[0]_0 (IO_write_strobe),
        .\dvsr_reg_reg[0]_1 (fp_mmio_cs),
        .\dvsr_reg_reg[10]_0 (IO_address[10:0]),
        .\dvsr_reg_reg[10]_1 (ps2_slot11_i_2_n_0),
        .in0(out[31:16]),
        .\n_reg_reg[0] (\n_reg_reg[0] ),
        .\n_reg_reg[2] (in0),
        .out(\rd_data_array[1]_0 ),
        .rd_data(\rd_data_array[11]_1 [31:16]),
        .tx(tx));
endmodule

(* W_SIZE = "6" *) 
module ps2_top
   (clk,
    reset,
    wr_ps2,
    rd_ps2_packet,
    ps2_tx_data,
    ps2_rx_data,
    ps2_tx_idle,
    ps2_rx_buf_empty,
    ps2d,
    ps2c);
  (* dont_touch = "true" *) input clk;
  (* dont_touch = "true" *) input reset;
  (* dont_touch = "true" *) input wr_ps2;
  (* dont_touch = "true" *) input rd_ps2_packet;
  (* dont_touch = "true" *) input [7:0]ps2_tx_data;
  (* dont_touch = "true" *) output [7:0]ps2_rx_data;
  (* dont_touch = "true" *) output ps2_tx_idle;
  (* dont_touch = "true" *) output ps2_rx_buf_empty;
  inout ps2d;
  inout ps2c;

  (* DONT_TOUCH *) wire clk;
  (* DONT_TOUCH *) wire ps2_rx_buf_empty;
  (* DONT_TOUCH *) wire [7:0]ps2_rx_data;
  (* DONT_TOUCH *) wire [7:0]ps2_tx_data;
  (* DONT_TOUCH *) wire ps2_tx_idle;
  wire ps2c;
  wire ps2c_IBUF;
  wire ps2c_OBUF;
  wire ps2c_TRI;
  wire ps2d;
  wire ps2d_IBUF;
  wire ps2d_OBUF;
  wire ps2d_TRI;
  (* DONT_TOUCH *) wire rd_ps2_packet;
  (* DONT_TOUCH *) wire reset;
  wire [7:0]rx_data;
  wire rx_done_tick;
  wire rx_idle;
  (* DONT_TOUCH *) wire wr_ps2;

  fifo__parameterized0 fifo_unit
       (.full_logic_reg(clk),
        .full_logic_reg_0(reset),
        .mmio_rd_data_inferred_i_25(rx_data),
        .out(ps2_rx_buf_empty),
        .ps2_rx_data(ps2_rx_data),
        .\w_ptr_logic_reg[0] (rd_ps2_packet),
        .\w_ptr_logic_reg[0]_0 (rx_done_tick));
  ps2rx ps2_rx_unit
       (.D(ps2c_IBUF),
        .\FSM_onehot_state_reg_reg[0]_0 (rx_done_tick),
        .\b_reg_reg[10]_0 (ps2d_IBUF),
        .\b_reg_reg[1]_0 (ps2_tx_idle),
        .\b_reg_reg[8]_0 (rx_data),
        .\n_reg_reg[0]_0 (reset),
        .\n_reg_reg[3]_0 (clk),
        .out(rx_idle));
  ps2tx ps2_tx_unit
       (.D(ps2c_IBUF),
        .\FSM_onehot_state_reg_reg[2]_0 (reset),
        .\FSM_onehot_state_reg_reg[2]_1 (clk),
        .\FSM_onehot_state_reg_reg[2]_2 (rx_idle),
        .\b_reg_reg[7]_0 (ps2_tx_data),
        .\c_reg_reg[0]_0 (wr_ps2),
        .out(ps2_tx_idle),
        .ps2c_OBUF(ps2c_OBUF),
        .ps2c_TRI(ps2c_TRI),
        .ps2d_OBUF(ps2d_OBUF),
        .ps2d_TRI(ps2d_TRI));
  IOBUF ps2c_IOBUF_inst
       (.I(ps2c_OBUF),
        .IO(ps2c),
        .O(ps2c_IBUF),
        .T(ps2c_TRI));
  IOBUF ps2d_IOBUF_inst
       (.I(ps2d_OBUF),
        .IO(ps2d),
        .O(ps2d_IBUF),
        .T(ps2d_TRI));
endmodule

module ps2rx
   (out,
    \FSM_onehot_state_reg_reg[0]_0 ,
    \b_reg_reg[8]_0 ,
    \n_reg_reg[0]_0 ,
    \b_reg_reg[1]_0 ,
    \n_reg_reg[3]_0 ,
    D,
    \b_reg_reg[10]_0 );
  output out;
  output \FSM_onehot_state_reg_reg[0]_0 ;
  output [7:0]\b_reg_reg[8]_0 ;
  input \n_reg_reg[0]_0 ;
  input \b_reg_reg[1]_0 ;
  input \n_reg_reg[3]_0 ;
  input [0:0]D;
  input [0:0]\b_reg_reg[10]_0 ;

  wire [0:0]D;
  wire \FSM_onehot_state_reg[0]_i_1_n_0 ;
  wire \FSM_onehot_state_reg[1]_i_1_n_0 ;
  wire \FSM_onehot_state_reg[1]_i_2_n_0 ;
  wire \FSM_onehot_state_reg[1]_i_3_n_0 ;
  wire \FSM_onehot_state_reg[1]_i_4_n_0 ;
  (* DONT_TOUCH *) wire \FSM_onehot_state_reg_reg[0]_0 ;
  wire b_next;
  wire [0:0]\b_reg_reg[10]_0 ;
  (* DONT_TOUCH *) wire \b_reg_reg[1]_0 ;
  (* DONT_TOUCH *) wire [7:0]\b_reg_reg[8]_0 ;
  wire f_ps2c_reg;
  wire f_ps2c_reg_i_1__0_n_0;
  wire f_ps2c_reg_i_2__0_n_0;
  wire [6:0]filter_next__0;
  wire \filter_reg_reg_n_0_[0] ;
  wire n_next;
  wire [3:0]n_reg;
  wire \n_reg[0]_i_1__0_n_0 ;
  wire \n_reg[1]_i_1__0_n_0 ;
  wire \n_reg[2]_i_1__0_n_0 ;
  wire \n_reg[3]_i_2__0_n_0 ;
  (* DONT_TOUCH *) wire \n_reg_reg[0]_0 ;
  (* DONT_TOUCH *) wire \n_reg_reg[3]_0 ;
  (* DONT_TOUCH *) wire out;
  wire [9:8]p_2_in;
  wire [1:1]state_reg;

  LUT6 #(
    .INIT(64'hFF33FF330B33FF33)) 
    \FSM_onehot_state_reg[0]_i_1 
       (.I0(\FSM_onehot_state_reg[1]_i_2_n_0 ),
        .I1(state_reg),
        .I2(\b_reg_reg[1]_0 ),
        .I3(out),
        .I4(f_ps2c_reg),
        .I5(\FSM_onehot_state_reg[1]_i_3_n_0 ),
        .O(\FSM_onehot_state_reg[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCCCCCFC88CCCC)) 
    \FSM_onehot_state_reg[1]_i_1 
       (.I0(\FSM_onehot_state_reg[1]_i_2_n_0 ),
        .I1(state_reg),
        .I2(\b_reg_reg[1]_0 ),
        .I3(out),
        .I4(f_ps2c_reg),
        .I5(\FSM_onehot_state_reg[1]_i_3_n_0 ),
        .O(\FSM_onehot_state_reg[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \FSM_onehot_state_reg[1]_i_2 
       (.I0(n_reg[2]),
        .I1(n_reg[0]),
        .I2(n_reg[1]),
        .I3(n_reg[3]),
        .O(\FSM_onehot_state_reg[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \FSM_onehot_state_reg[1]_i_3 
       (.I0(filter_next__0[1]),
        .I1(filter_next__0[2]),
        .I2(\filter_reg_reg_n_0_[0] ),
        .I3(filter_next__0[0]),
        .I4(\FSM_onehot_state_reg[1]_i_4_n_0 ),
        .O(\FSM_onehot_state_reg[1]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \FSM_onehot_state_reg[1]_i_4 
       (.I0(filter_next__0[4]),
        .I1(filter_next__0[3]),
        .I2(filter_next__0[6]),
        .I3(filter_next__0[5]),
        .O(\FSM_onehot_state_reg[1]_i_4_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:100,idle:001,dps:010," *) 
  FDPE #(
    .INIT(1'b1)) 
    \FSM_onehot_state_reg_reg[0] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(1'b1),
        .D(\FSM_onehot_state_reg[0]_i_1_n_0 ),
        .PRE(\n_reg_reg[0]_0 ),
        .Q(out));
  (* FSM_ENCODED_STATES = "iSTATE:100,idle:001,dps:010," *) 
  FDCE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg_reg[1] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\FSM_onehot_state_reg[1]_i_1_n_0 ),
        .Q(state_reg));
  LUT5 #(
    .INIT(32'h0000AA80)) 
    \b_reg[10]_i_1 
       (.I0(f_ps2c_reg),
        .I1(\b_reg_reg[1]_0 ),
        .I2(out),
        .I3(state_reg),
        .I4(\FSM_onehot_state_reg[1]_i_3_n_0 ),
        .O(b_next));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[10] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[10]_0 ),
        .Q(p_2_in[9]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[1] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[8]_0 [1]),
        .Q(\b_reg_reg[8]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[2] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[8]_0 [2]),
        .Q(\b_reg_reg[8]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[3] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[8]_0 [3]),
        .Q(\b_reg_reg[8]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[4] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[8]_0 [4]),
        .Q(\b_reg_reg[8]_0 [3]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[5] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[8]_0 [5]),
        .Q(\b_reg_reg[8]_0 [4]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[6] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[8]_0 [6]),
        .Q(\b_reg_reg[8]_0 [5]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[7] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[8]_0 [7]),
        .Q(\b_reg_reg[8]_0 [6]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[8] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(p_2_in[8]),
        .Q(\b_reg_reg[8]_0 [7]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[9] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(p_2_in[9]),
        .Q(p_2_in[8]));
  LUT5 #(
    .INIT(32'hF8888888)) 
    f_ps2c_reg_i_1__0
       (.I0(f_ps2c_reg),
        .I1(\FSM_onehot_state_reg[1]_i_3_n_0 ),
        .I2(f_ps2c_reg_i_2__0_n_0),
        .I3(\filter_reg_reg_n_0_[0] ),
        .I4(filter_next__0[0]),
        .O(f_ps2c_reg_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    f_ps2c_reg_i_2__0
       (.I0(filter_next__0[3]),
        .I1(filter_next__0[4]),
        .I2(filter_next__0[1]),
        .I3(filter_next__0[2]),
        .I4(filter_next__0[6]),
        .I5(filter_next__0[5]),
        .O(f_ps2c_reg_i_2__0_n_0));
  FDCE #(
    .INIT(1'b0)) 
    f_ps2c_reg_reg
       (.C(\n_reg_reg[3]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(f_ps2c_reg_i_1__0_n_0),
        .Q(f_ps2c_reg));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[0] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(filter_next__0[0]),
        .Q(\filter_reg_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[1] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(filter_next__0[1]),
        .Q(filter_next__0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[2] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(filter_next__0[2]),
        .Q(filter_next__0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[3] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(filter_next__0[3]),
        .Q(filter_next__0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[4] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(filter_next__0[4]),
        .Q(filter_next__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[5] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(filter_next__0[5]),
        .Q(filter_next__0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[6] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(filter_next__0[6]),
        .Q(filter_next__0[5]));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[7] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(D),
        .Q(filter_next__0[6]));
  LUT2 #(
    .INIT(4'hB)) 
    \n_reg[0]_i_1__0 
       (.I0(out),
        .I1(n_reg[0]),
        .O(\n_reg[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \n_reg[1]_i_1__0 
       (.I0(n_reg[0]),
        .I1(n_reg[1]),
        .I2(state_reg),
        .O(\n_reg[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'hE100)) 
    \n_reg[2]_i_1__0 
       (.I0(n_reg[1]),
        .I1(n_reg[0]),
        .I2(n_reg[2]),
        .I3(state_reg),
        .O(\n_reg[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h4444400040004000)) 
    \n_reg[3]_i_1__0 
       (.I0(\FSM_onehot_state_reg[1]_i_3_n_0 ),
        .I1(f_ps2c_reg),
        .I2(out),
        .I3(\b_reg_reg[1]_0 ),
        .I4(\FSM_onehot_state_reg[1]_i_2_n_0 ),
        .I5(state_reg),
        .O(n_next));
  LUT5 #(
    .INIT(32'hEEEEEEEB)) 
    \n_reg[3]_i_2__0 
       (.I0(out),
        .I1(n_reg[3]),
        .I2(n_reg[1]),
        .I3(n_reg[0]),
        .I4(n_reg[2]),
        .O(\n_reg[3]_i_2__0_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[0] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(n_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\n_reg[0]_i_1__0_n_0 ),
        .Q(n_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[1] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(n_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\n_reg[1]_i_1__0_n_0 ),
        .Q(n_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[2] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(n_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\n_reg[2]_i_1__0_n_0 ),
        .Q(n_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[3] 
       (.C(\n_reg_reg[3]_0 ),
        .CE(n_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\n_reg[3]_i_2__0_n_0 ),
        .Q(n_reg[3]));
  LUT2 #(
    .INIT(4'h1)) 
    rx_done_tick_inferred_i_1
       (.I0(out),
        .I1(state_reg),
        .O(\FSM_onehot_state_reg_reg[0]_0 ));
endmodule

module ps2tx
   (out,
    ps2d_TRI,
    ps2c_TRI,
    ps2c_OBUF,
    ps2d_OBUF,
    \FSM_onehot_state_reg_reg[2]_0 ,
    \FSM_onehot_state_reg_reg[2]_1 ,
    \c_reg_reg[0]_0 ,
    \b_reg_reg[7]_0 ,
    \FSM_onehot_state_reg_reg[2]_2 ,
    D);
  output out;
  output ps2d_TRI;
  output ps2c_TRI;
  output ps2c_OBUF;
  output ps2d_OBUF;
  input \FSM_onehot_state_reg_reg[2]_0 ;
  input \FSM_onehot_state_reg_reg[2]_1 ;
  input \c_reg_reg[0]_0 ;
  input [7:0]\b_reg_reg[7]_0 ;
  input \FSM_onehot_state_reg_reg[2]_2 ;
  input [0:0]D;

  wire [0:0]D;
  wire \FSM_onehot_state_reg[2]_i_1_n_0 ;
  wire \FSM_onehot_state_reg[4]_i_1_n_0 ;
  wire \FSM_onehot_state_reg[4]_i_2_n_0 ;
  wire \FSM_onehot_state_reg[4]_i_3_n_0 ;
  wire \FSM_onehot_state_reg[4]_i_4_n_0 ;
  wire \FSM_onehot_state_reg[4]_i_5_n_0 ;
  wire \FSM_onehot_state_reg[4]_i_6_n_0 ;
  (* DONT_TOUCH *) wire \FSM_onehot_state_reg_reg[2]_0 ;
  (* DONT_TOUCH *) wire \FSM_onehot_state_reg_reg[2]_1 ;
  (* DONT_TOUCH *) wire \FSM_onehot_state_reg_reg[2]_2 ;
  wire b_next;
  wire [0:0]b_reg;
  wire \b_reg[0]_i_1_n_0 ;
  wire \b_reg[1]_i_1_n_0 ;
  wire \b_reg[2]_i_1_n_0 ;
  wire \b_reg[3]_i_1_n_0 ;
  wire \b_reg[4]_i_1_n_0 ;
  wire \b_reg[5]_i_1_n_0 ;
  wire \b_reg[6]_i_1_n_0 ;
  wire \b_reg[7]_i_1_n_0 ;
  wire \b_reg[8]_i_2_n_0 ;
  wire \b_reg[8]_i_3_n_0 ;
  wire \b_reg[8]_i_4_n_0 ;
  wire \b_reg[8]_i_5_n_0 ;
  (* DONT_TOUCH *) wire [7:0]\b_reg_reg[7]_0 ;
  wire \b_reg_reg_n_0_[1] ;
  wire \b_reg_reg_n_0_[2] ;
  wire \b_reg_reg_n_0_[3] ;
  wire \b_reg_reg_n_0_[4] ;
  wire \b_reg_reg_n_0_[5] ;
  wire \b_reg_reg_n_0_[6] ;
  wire \b_reg_reg_n_0_[7] ;
  wire \b_reg_reg_n_0_[8] ;
  wire c_next;
  wire c_next0_carry__0_i_1_n_0;
  wire c_next0_carry__0_i_2_n_0;
  wire c_next0_carry__0_i_3_n_0;
  wire c_next0_carry__0_i_4_n_0;
  wire c_next0_carry__0_n_0;
  wire c_next0_carry__1_i_1_n_0;
  wire c_next0_carry__1_i_2_n_0;
  wire c_next0_carry__1_i_3_n_0;
  wire c_next0_carry__1_i_4_n_0;
  wire c_next0_carry_i_1_n_0;
  wire c_next0_carry_i_2_n_0;
  wire c_next0_carry_i_3_n_0;
  wire c_next0_carry_i_4_n_0;
  wire c_next0_carry_n_0;
  wire [12:0]c_reg;
  wire \c_reg[0]_i_1_n_0 ;
  wire \c_reg[10]_i_1_n_0 ;
  wire \c_reg[11]_i_1_n_0 ;
  wire \c_reg[12]_i_2_n_0 ;
  wire \c_reg[1]_i_1_n_0 ;
  wire \c_reg[2]_i_1_n_0 ;
  wire \c_reg[3]_i_1_n_0 ;
  wire \c_reg[4]_i_1_n_0 ;
  wire \c_reg[5]_i_1_n_0 ;
  wire \c_reg[6]_i_1_n_0 ;
  wire \c_reg[7]_i_1_n_0 ;
  wire \c_reg[8]_i_1_n_0 ;
  wire \c_reg[9]_i_1_n_0 ;
  (* DONT_TOUCH *) wire \c_reg_reg[0]_0 ;
  wire f_ps2c_reg;
  wire f_ps2c_reg_i_1_n_0;
  wire f_ps2c_reg_i_2_n_0;
  wire f_ps2c_reg_i_3_n_0;
  wire [6:0]filter_next;
  wire \filter_reg_reg_n_0_[0] ;
  wire [12:1]in9;
  wire n_next;
  wire [3:0]n_reg;
  wire \n_reg[0]_i_1_n_0 ;
  wire \n_reg[1]_i_1_n_0 ;
  wire \n_reg[2]_i_1_n_0 ;
  wire \n_reg[3]_i_2_n_0 ;
  wire \n_reg[3]_i_3_n_0 ;
  (* DONT_TOUCH *) wire out;
  wire ps2c_OBUF;
  wire ps2c_TRI;
  wire ps2d_OBUF;
  wire ps2d_TRI;
  wire [0:0]state_next__0;
  wire [4:1]state_reg;
  wire tri_c;
  (* DONT_TOUCH *) wire tx_done_tick_inferred_i_1_n_0;
  wire tx_done_tick_inferred_i_2_n_0;
  wire tx_done_tick_inferred_i_3_n_0;
  wire [2:0]NLW_c_next0_carry_CO_UNCONNECTED;
  wire [2:0]NLW_c_next0_carry__0_CO_UNCONNECTED;
  wire [3:0]NLW_c_next0_carry__1_CO_UNCONNECTED;

  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    \FSM_onehot_state_reg[0]_i_1__0 
       (.I0(ps2c_TRI),
        .I1(out),
        .I2(state_reg[1]),
        .I3(state_reg[4]),
        .I4(state_reg[3]),
        .O(state_next__0));
  LUT1 #(
    .INIT(2'h1)) 
    \FSM_onehot_state_reg[2]_i_1 
       (.I0(state_reg[1]),
        .O(\FSM_onehot_state_reg[2]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \FSM_onehot_state_reg[3]_i_1 
       (.I0(ps2c_TRI),
        .O(tri_c));
  LUT6 #(
    .INIT(64'hFFFFFFEAFFEAFFEA)) 
    \FSM_onehot_state_reg[4]_i_1 
       (.I0(\FSM_onehot_state_reg[4]_i_2_n_0 ),
        .I1(\FSM_onehot_state_reg_reg[2]_2 ),
        .I2(state_reg[1]),
        .I3(\FSM_onehot_state_reg[4]_i_3_n_0 ),
        .I4(tx_done_tick_inferred_i_2_n_0),
        .I5(\FSM_onehot_state_reg[4]_i_4_n_0 ),
        .O(\FSM_onehot_state_reg[4]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_state_reg[4]_i_2 
       (.I0(\c_reg_reg[0]_0 ),
        .I1(out),
        .O(\FSM_onehot_state_reg[4]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0200)) 
    \FSM_onehot_state_reg[4]_i_3 
       (.I0(\FSM_onehot_state_reg[4]_i_5_n_0 ),
        .I1(c_reg[0]),
        .I2(c_reg[1]),
        .I3(\FSM_onehot_state_reg[4]_i_6_n_0 ),
        .O(\FSM_onehot_state_reg[4]_i_3_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT6 #(
    .INIT(64'hDCDCDCDCDCDCDFDC)) 
    \FSM_onehot_state_reg[4]_i_4 
       (.I0(\n_reg[3]_i_3_n_0 ),
        .I1(state_reg[3]),
        .I2(state_reg[4]),
        .I3(ps2c_TRI),
        .I4(state_reg[1]),
        .I5(out),
        .O(\FSM_onehot_state_reg[4]_i_4_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \FSM_onehot_state_reg[4]_i_5 
       (.I0(c_reg[10]),
        .I1(c_reg[11]),
        .I2(c_reg[8]),
        .I3(c_reg[9]),
        .I4(c_reg[12]),
        .I5(ps2c_TRI),
        .O(\FSM_onehot_state_reg[4]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \FSM_onehot_state_reg[4]_i_6 
       (.I0(c_reg[4]),
        .I1(c_reg[5]),
        .I2(c_reg[2]),
        .I3(c_reg[3]),
        .I4(c_reg[7]),
        .I5(c_reg[6]),
        .O(\FSM_onehot_state_reg[4]_i_6_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:100000,idle:000001,waitr:000010,rts:000100,start:001000,data:010000," *) 
  FDPE #(
    .INIT(1'b1)) 
    \FSM_onehot_state_reg_reg[0] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(\FSM_onehot_state_reg[4]_i_1_n_0 ),
        .D(state_next__0),
        .PRE(\FSM_onehot_state_reg_reg[2]_0 ),
        .Q(out));
  (* FSM_ENCODED_STATES = "iSTATE:100000,idle:000001,waitr:000010,rts:000100,start:001000,data:010000," *) 
  FDCE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg_reg[1] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(\FSM_onehot_state_reg[4]_i_1_n_0 ),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(out),
        .Q(state_reg[1]));
  (* FSM_ENCODED_STATES = "iSTATE:100000,idle:000001,waitr:000010,rts:000100,start:001000,data:010000," *) 
  FDPE #(
    .INIT(1'b1)) 
    \FSM_onehot_state_reg_reg[2] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(\FSM_onehot_state_reg[4]_i_1_n_0 ),
        .D(\FSM_onehot_state_reg[2]_i_1_n_0 ),
        .PRE(\FSM_onehot_state_reg_reg[2]_0 ),
        .Q(ps2c_TRI));
  (* FSM_ENCODED_STATES = "iSTATE:100000,idle:000001,waitr:000010,rts:000100,start:001000,data:010000," *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  FDCE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg_reg[3] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(\FSM_onehot_state_reg[4]_i_1_n_0 ),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(tri_c),
        .Q(state_reg[3]));
  (* FSM_ENCODED_STATES = "iSTATE:100000,idle:000001,waitr:000010,rts:000100,start:001000,data:010000," *) 
  FDCE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg_reg[4] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(\FSM_onehot_state_reg[4]_i_1_n_0 ),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(state_reg[3]),
        .Q(state_reg[4]));
  LUT4 #(
    .INIT(16'hF888)) 
    \b_reg[0]_i_1 
       (.I0(out),
        .I1(\b_reg_reg[7]_0 [0]),
        .I2(state_reg[4]),
        .I3(\b_reg_reg_n_0_[1] ),
        .O(\b_reg[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \b_reg[1]_i_1 
       (.I0(out),
        .I1(\b_reg_reg[7]_0 [1]),
        .I2(state_reg[4]),
        .I3(\b_reg_reg_n_0_[2] ),
        .O(\b_reg[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \b_reg[2]_i_1 
       (.I0(out),
        .I1(\b_reg_reg[7]_0 [2]),
        .I2(state_reg[4]),
        .I3(\b_reg_reg_n_0_[3] ),
        .O(\b_reg[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \b_reg[3]_i_1 
       (.I0(out),
        .I1(\b_reg_reg[7]_0 [3]),
        .I2(state_reg[4]),
        .I3(\b_reg_reg_n_0_[4] ),
        .O(\b_reg[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \b_reg[4]_i_1 
       (.I0(out),
        .I1(\b_reg_reg[7]_0 [4]),
        .I2(state_reg[4]),
        .I3(\b_reg_reg_n_0_[5] ),
        .O(\b_reg[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \b_reg[5]_i_1 
       (.I0(out),
        .I1(\b_reg_reg[7]_0 [5]),
        .I2(state_reg[4]),
        .I3(\b_reg_reg_n_0_[6] ),
        .O(\b_reg[5]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \b_reg[6]_i_1 
       (.I0(out),
        .I1(\b_reg_reg[7]_0 [6]),
        .I2(state_reg[4]),
        .I3(\b_reg_reg_n_0_[7] ),
        .O(\b_reg[6]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \b_reg[7]_i_1 
       (.I0(out),
        .I1(\b_reg_reg[7]_0 [7]),
        .I2(state_reg[4]),
        .I3(\b_reg_reg_n_0_[8] ),
        .O(\b_reg[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \b_reg[8]_i_1 
       (.I0(state_reg[4]),
        .I1(tx_done_tick_inferred_i_2_n_0),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(b_next));
  LUT6 #(
    .INIT(64'h6996966900000000)) 
    \b_reg[8]_i_2 
       (.I0(\b_reg[8]_i_3_n_0 ),
        .I1(\b_reg[8]_i_4_n_0 ),
        .I2(\b_reg_reg[7]_0 [5]),
        .I3(\b_reg_reg[7]_0 [4]),
        .I4(\b_reg[8]_i_5_n_0 ),
        .I5(out),
        .O(\b_reg[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \b_reg[8]_i_3 
       (.I0(\b_reg_reg[7]_0 [2]),
        .I1(\b_reg_reg[7]_0 [3]),
        .O(\b_reg[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \b_reg[8]_i_4 
       (.I0(\b_reg_reg[7]_0 [0]),
        .I1(\b_reg_reg[7]_0 [1]),
        .O(\b_reg[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \b_reg[8]_i_5 
       (.I0(\b_reg_reg[7]_0 [6]),
        .I1(\b_reg_reg[7]_0 [7]),
        .O(\b_reg[8]_i_5_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[0] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(b_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\b_reg[0]_i_1_n_0 ),
        .Q(b_reg));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[1] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(b_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\b_reg[1]_i_1_n_0 ),
        .Q(\b_reg_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[2] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(b_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\b_reg[2]_i_1_n_0 ),
        .Q(\b_reg_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[3] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(b_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\b_reg[3]_i_1_n_0 ),
        .Q(\b_reg_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[4] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(b_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\b_reg[4]_i_1_n_0 ),
        .Q(\b_reg_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[5] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(b_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\b_reg[5]_i_1_n_0 ),
        .Q(\b_reg_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[6] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(b_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\b_reg[6]_i_1_n_0 ),
        .Q(\b_reg_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[7] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(b_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\b_reg[7]_i_1_n_0 ),
        .Q(\b_reg_reg_n_0_[7] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[8] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(b_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\b_reg[8]_i_2_n_0 ),
        .Q(\b_reg_reg_n_0_[8] ));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 c_next0_carry
       (.CI(1'b0),
        .CO({c_next0_carry_n_0,NLW_c_next0_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(c_reg[0]),
        .DI(c_reg[4:1]),
        .O(in9[4:1]),
        .S({c_next0_carry_i_1_n_0,c_next0_carry_i_2_n_0,c_next0_carry_i_3_n_0,c_next0_carry_i_4_n_0}));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 c_next0_carry__0
       (.CI(c_next0_carry_n_0),
        .CO({c_next0_carry__0_n_0,NLW_c_next0_carry__0_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI(c_reg[8:5]),
        .O(in9[8:5]),
        .S({c_next0_carry__0_i_1_n_0,c_next0_carry__0_i_2_n_0,c_next0_carry__0_i_3_n_0,c_next0_carry__0_i_4_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    c_next0_carry__0_i_1
       (.I0(c_reg[8]),
        .O(c_next0_carry__0_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    c_next0_carry__0_i_2
       (.I0(c_reg[7]),
        .O(c_next0_carry__0_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    c_next0_carry__0_i_3
       (.I0(c_reg[6]),
        .O(c_next0_carry__0_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    c_next0_carry__0_i_4
       (.I0(c_reg[5]),
        .O(c_next0_carry__0_i_4_n_0));
  (* OPT_MODIFIED = "SWEEP " *) 
  CARRY4 c_next0_carry__1
       (.CI(c_next0_carry__0_n_0),
        .CO(NLW_c_next0_carry__1_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,c_reg[11:9]}),
        .O(in9[12:9]),
        .S({c_next0_carry__1_i_1_n_0,c_next0_carry__1_i_2_n_0,c_next0_carry__1_i_3_n_0,c_next0_carry__1_i_4_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    c_next0_carry__1_i_1
       (.I0(c_reg[12]),
        .O(c_next0_carry__1_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    c_next0_carry__1_i_2
       (.I0(c_reg[11]),
        .O(c_next0_carry__1_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    c_next0_carry__1_i_3
       (.I0(c_reg[10]),
        .O(c_next0_carry__1_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    c_next0_carry__1_i_4
       (.I0(c_reg[9]),
        .O(c_next0_carry__1_i_4_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    c_next0_carry_i_1
       (.I0(c_reg[4]),
        .O(c_next0_carry_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    c_next0_carry_i_2
       (.I0(c_reg[3]),
        .O(c_next0_carry_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    c_next0_carry_i_3
       (.I0(c_reg[2]),
        .O(c_next0_carry_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    c_next0_carry_i_4
       (.I0(c_reg[1]),
        .O(c_next0_carry_i_4_n_0));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF111)) 
    \c_reg[0]_i_1 
       (.I0(c_reg[0]),
        .I1(ps2c_TRI),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[0]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \c_reg[10]_i_1 
       (.I0(ps2c_TRI),
        .I1(in9[10]),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[10]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \c_reg[11]_i_1 
       (.I0(ps2c_TRI),
        .I1(in9[11]),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[11]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'h8F)) 
    \c_reg[12]_i_1 
       (.I0(out),
        .I1(\c_reg_reg[0]_0 ),
        .I2(ps2c_TRI),
        .O(c_next));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \c_reg[12]_i_2 
       (.I0(ps2c_TRI),
        .I1(in9[12]),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[12]_i_2_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \c_reg[1]_i_1 
       (.I0(ps2c_TRI),
        .I1(in9[1]),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[1]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \c_reg[2]_i_1 
       (.I0(ps2c_TRI),
        .I1(in9[2]),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[2]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \c_reg[3]_i_1 
       (.I0(ps2c_TRI),
        .I1(in9[3]),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[3]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \c_reg[4]_i_1 
       (.I0(ps2c_TRI),
        .I1(in9[4]),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[4]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \c_reg[5]_i_1 
       (.I0(ps2c_TRI),
        .I1(in9[5]),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[5]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \c_reg[6]_i_1 
       (.I0(ps2c_TRI),
        .I1(in9[6]),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[6]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \c_reg[7]_i_1 
       (.I0(ps2c_TRI),
        .I1(in9[7]),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[7]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \c_reg[8]_i_1 
       (.I0(ps2c_TRI),
        .I1(in9[8]),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[8]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \c_reg[9]_i_1 
       (.I0(ps2c_TRI),
        .I1(in9[9]),
        .I2(out),
        .I3(\c_reg_reg[0]_0 ),
        .O(\c_reg[9]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[0] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[0]_i_1_n_0 ),
        .Q(c_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[10] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[10]_i_1_n_0 ),
        .Q(c_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[11] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[11]_i_1_n_0 ),
        .Q(c_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[12] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[12]_i_2_n_0 ),
        .Q(c_reg[12]));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[1] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[1]_i_1_n_0 ),
        .Q(c_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[2] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[2]_i_1_n_0 ),
        .Q(c_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[3] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[3]_i_1_n_0 ),
        .Q(c_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[4] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[4]_i_1_n_0 ),
        .Q(c_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[5] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[5]_i_1_n_0 ),
        .Q(c_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[6] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[6]_i_1_n_0 ),
        .Q(c_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[7] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[7]_i_1_n_0 ),
        .Q(c_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[8] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[8]_i_1_n_0 ),
        .Q(c_reg[8]));
  FDCE #(
    .INIT(1'b0)) 
    \c_reg_reg[9] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(c_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\c_reg[9]_i_1_n_0 ),
        .Q(c_reg[9]));
  LUT5 #(
    .INIT(32'hF8888888)) 
    f_ps2c_reg_i_1
       (.I0(f_ps2c_reg),
        .I1(f_ps2c_reg_i_2_n_0),
        .I2(f_ps2c_reg_i_3_n_0),
        .I3(\filter_reg_reg_n_0_[0] ),
        .I4(filter_next[0]),
        .O(f_ps2c_reg_i_1_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    f_ps2c_reg_i_2
       (.I0(filter_next[1]),
        .I1(filter_next[2]),
        .I2(\filter_reg_reg_n_0_[0] ),
        .I3(filter_next[0]),
        .I4(tx_done_tick_inferred_i_3_n_0),
        .O(f_ps2c_reg_i_2_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    f_ps2c_reg_i_3
       (.I0(filter_next[3]),
        .I1(filter_next[4]),
        .I2(filter_next[1]),
        .I3(filter_next[2]),
        .I4(filter_next[6]),
        .I5(filter_next[5]),
        .O(f_ps2c_reg_i_3_n_0));
  FDCE #(
    .INIT(1'b0)) 
    f_ps2c_reg_reg
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(1'b1),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(f_ps2c_reg_i_1_n_0),
        .Q(f_ps2c_reg));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[0] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(1'b1),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(filter_next[0]),
        .Q(\filter_reg_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[1] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(1'b1),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(filter_next[1]),
        .Q(filter_next[0]));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[2] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(1'b1),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(filter_next[2]),
        .Q(filter_next[1]));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[3] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(1'b1),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(filter_next[3]),
        .Q(filter_next[2]));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[4] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(1'b1),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(filter_next[4]),
        .Q(filter_next[3]));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[5] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(1'b1),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(filter_next[5]),
        .Q(filter_next[4]));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[6] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(1'b1),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(filter_next[6]),
        .Q(filter_next[5]));
  FDCE #(
    .INIT(1'b0)) 
    \filter_reg_reg[7] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(1'b1),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(D),
        .Q(filter_next[6]));
  LUT2 #(
    .INIT(4'h2)) 
    \n_reg[0]_i_1 
       (.I0(state_reg[4]),
        .I1(n_reg[0]),
        .O(\n_reg[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \n_reg[1]_i_1 
       (.I0(n_reg[0]),
        .I1(n_reg[1]),
        .I2(state_reg[4]),
        .O(\n_reg[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'hE100)) 
    \n_reg[2]_i_1 
       (.I0(n_reg[1]),
        .I1(n_reg[0]),
        .I2(n_reg[2]),
        .I3(state_reg[4]),
        .O(\n_reg[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA888)) 
    \n_reg[3]_i_1 
       (.I0(tx_done_tick_inferred_i_2_n_0),
        .I1(state_reg[3]),
        .I2(\n_reg[3]_i_3_n_0 ),
        .I3(state_reg[4]),
        .O(n_next));
  LUT5 #(
    .INIT(32'hEEEEEEEB)) 
    \n_reg[3]_i_2 
       (.I0(state_reg[3]),
        .I1(n_reg[3]),
        .I2(n_reg[1]),
        .I3(n_reg[0]),
        .I4(n_reg[2]),
        .O(\n_reg[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \n_reg[3]_i_3 
       (.I0(n_reg[2]),
        .I1(n_reg[0]),
        .I2(n_reg[1]),
        .I3(n_reg[3]),
        .O(\n_reg[3]_i_3_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[0] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(n_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\n_reg[0]_i_1_n_0 ),
        .Q(n_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[1] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(n_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\n_reg[1]_i_1_n_0 ),
        .Q(n_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[2] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(n_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\n_reg[2]_i_1_n_0 ),
        .Q(n_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[3] 
       (.C(\FSM_onehot_state_reg_reg[2]_1 ),
        .CE(n_next),
        .CLR(\FSM_onehot_state_reg_reg[2]_0 ),
        .D(\n_reg[3]_i_2_n_0 ),
        .Q(n_reg[3]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    ps2c_IOBUF_inst_i_1
       (.I0(ps2c_TRI),
        .I1(state_reg[3]),
        .I2(state_reg[4]),
        .I3(state_reg[1]),
        .I4(out),
        .O(ps2c_OBUF));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFD1FF)) 
    ps2d_IOBUF_inst_i_1
       (.I0(state_reg[3]),
        .I1(state_reg[4]),
        .I2(b_reg),
        .I3(ps2c_TRI),
        .I4(out),
        .I5(state_reg[1]),
        .O(ps2d_OBUF));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h1)) 
    ps2d_IOBUF_inst_i_3
       (.I0(state_reg[3]),
        .I1(state_reg[4]),
        .O(ps2d_TRI));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    tx_done_tick_inferred_i_1
       (.I0(state_reg[3]),
        .I1(state_reg[4]),
        .I2(state_reg[1]),
        .I3(out),
        .I4(ps2c_TRI),
        .I5(tx_done_tick_inferred_i_2_n_0),
        .O(tx_done_tick_inferred_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    tx_done_tick_inferred_i_2
       (.I0(f_ps2c_reg),
        .I1(tx_done_tick_inferred_i_3_n_0),
        .I2(filter_next[0]),
        .I3(\filter_reg_reg_n_0_[0] ),
        .I4(filter_next[2]),
        .I5(filter_next[1]),
        .O(tx_done_tick_inferred_i_2_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    tx_done_tick_inferred_i_3
       (.I0(filter_next[4]),
        .I1(filter_next[3]),
        .I2(filter_next[6]),
        .I3(filter_next[5]),
        .O(tx_done_tick_inferred_i_3_n_0));
endmodule

module reg_file
   (r_data,
    \b_reg_reg[7] ,
    in0,
    out,
    array_reg_reg_0_63_6_6_0,
    r_data_inferred_i_1__0_0);
  output [7:0]r_data;
  input [7:0]\b_reg_reg[7] ;
  input in0;
  input out;
  input [7:0]array_reg_reg_0_63_6_6_0;
  input [7:0]r_data_inferred_i_1__0_0;

  wire array_reg_reg_0_63_0_2_i_1__0_n_0;
  wire array_reg_reg_0_63_0_2_n_0;
  wire array_reg_reg_0_63_0_2_n_1;
  wire array_reg_reg_0_63_0_2_n_2;
  wire array_reg_reg_0_63_3_5_n_0;
  wire array_reg_reg_0_63_3_5_n_1;
  wire array_reg_reg_0_63_3_5_n_2;
  (* DONT_TOUCH *) wire [7:0]array_reg_reg_0_63_6_6_0;
  wire array_reg_reg_0_63_6_6_n_0;
  wire array_reg_reg_0_63_7_7_n_0;
  wire array_reg_reg_128_191_0_2_i_1__0_n_0;
  wire array_reg_reg_128_191_0_2_n_0;
  wire array_reg_reg_128_191_0_2_n_1;
  wire array_reg_reg_128_191_0_2_n_2;
  wire array_reg_reg_128_191_3_5_n_0;
  wire array_reg_reg_128_191_3_5_n_1;
  wire array_reg_reg_128_191_3_5_n_2;
  wire array_reg_reg_128_191_6_6_n_0;
  wire array_reg_reg_128_191_7_7_n_0;
  wire array_reg_reg_192_255_0_2_i_1__0_n_0;
  wire array_reg_reg_192_255_0_2_n_0;
  wire array_reg_reg_192_255_0_2_n_1;
  wire array_reg_reg_192_255_0_2_n_2;
  wire array_reg_reg_192_255_3_5_n_0;
  wire array_reg_reg_192_255_3_5_n_1;
  wire array_reg_reg_192_255_3_5_n_2;
  wire array_reg_reg_192_255_6_6_n_0;
  wire array_reg_reg_192_255_7_7_n_0;
  wire array_reg_reg_64_127_0_2_i_1__0_n_0;
  wire array_reg_reg_64_127_0_2_n_0;
  wire array_reg_reg_64_127_0_2_n_1;
  wire array_reg_reg_64_127_0_2_n_2;
  wire array_reg_reg_64_127_3_5_n_0;
  wire array_reg_reg_64_127_3_5_n_1;
  wire array_reg_reg_64_127_3_5_n_2;
  wire array_reg_reg_64_127_6_6_n_0;
  wire array_reg_reg_64_127_7_7_n_0;
  (* DONT_TOUCH *) wire [7:0]\b_reg_reg[7] ;
  (* DONT_TOUCH *) wire in0;
  (* DONT_TOUCH *) wire out;
  (* DONT_TOUCH *) wire [7:0]r_data;
  (* DONT_TOUCH *) wire [7:0]r_data_inferred_i_1__0_0;
  wire NLW_array_reg_reg_0_63_0_2_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_0_63_3_5_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_0_63_6_6_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_0_63_7_7_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_128_191_0_2_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_128_191_3_5_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_128_191_6_6_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_128_191_7_7_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_192_255_0_2_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_192_255_3_5_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_192_255_6_6_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_192_255_7_7_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_64_127_0_2_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_64_127_3_5_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_64_127_6_6_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_64_127_7_7_SPO_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_0_63_0_2
       (.ADDRA(\b_reg_reg[7] [5:0]),
        .ADDRB(\b_reg_reg[7] [5:0]),
        .ADDRC(\b_reg_reg[7] [5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1__0_0[0]),
        .DIB(r_data_inferred_i_1__0_0[1]),
        .DIC(r_data_inferred_i_1__0_0[2]),
        .DID(1'b0),
        .DOA(array_reg_reg_0_63_0_2_n_0),
        .DOB(array_reg_reg_0_63_0_2_n_1),
        .DOC(array_reg_reg_0_63_0_2_n_2),
        .DOD(NLW_array_reg_reg_0_63_0_2_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_0_63_0_2_i_1__0_n_0));
  LUT3 #(
    .INIT(8'h02)) 
    array_reg_reg_0_63_0_2_i_1__0
       (.I0(in0),
        .I1(array_reg_reg_0_63_6_6_0[6]),
        .I2(array_reg_reg_0_63_6_6_0[7]),
        .O(array_reg_reg_0_63_0_2_i_1__0_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_0_63_3_5
       (.ADDRA(\b_reg_reg[7] [5:0]),
        .ADDRB(\b_reg_reg[7] [5:0]),
        .ADDRC(\b_reg_reg[7] [5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1__0_0[3]),
        .DIB(r_data_inferred_i_1__0_0[4]),
        .DIC(r_data_inferred_i_1__0_0[5]),
        .DID(1'b0),
        .DOA(array_reg_reg_0_63_3_5_n_0),
        .DOB(array_reg_reg_0_63_3_5_n_1),
        .DOC(array_reg_reg_0_63_3_5_n_2),
        .DOD(NLW_array_reg_reg_0_63_3_5_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_0_63_0_2_i_1__0_n_0));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_0_63_6_6
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1__0_0[6]),
        .DPO(array_reg_reg_0_63_6_6_n_0),
        .DPRA0(\b_reg_reg[7] [0]),
        .DPRA1(\b_reg_reg[7] [1]),
        .DPRA2(\b_reg_reg[7] [2]),
        .DPRA3(\b_reg_reg[7] [3]),
        .DPRA4(\b_reg_reg[7] [4]),
        .DPRA5(\b_reg_reg[7] [5]),
        .SPO(NLW_array_reg_reg_0_63_6_6_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_0_63_0_2_i_1__0_n_0));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_0_63_7_7
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1__0_0[7]),
        .DPO(array_reg_reg_0_63_7_7_n_0),
        .DPRA0(\b_reg_reg[7] [0]),
        .DPRA1(\b_reg_reg[7] [1]),
        .DPRA2(\b_reg_reg[7] [2]),
        .DPRA3(\b_reg_reg[7] [3]),
        .DPRA4(\b_reg_reg[7] [4]),
        .DPRA5(\b_reg_reg[7] [5]),
        .SPO(NLW_array_reg_reg_0_63_7_7_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_0_63_0_2_i_1__0_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "128" *) 
  (* ram_addr_end = "191" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_128_191_0_2
       (.ADDRA(\b_reg_reg[7] [5:0]),
        .ADDRB(\b_reg_reg[7] [5:0]),
        .ADDRC(\b_reg_reg[7] [5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1__0_0[0]),
        .DIB(r_data_inferred_i_1__0_0[1]),
        .DIC(r_data_inferred_i_1__0_0[2]),
        .DID(1'b0),
        .DOA(array_reg_reg_128_191_0_2_n_0),
        .DOB(array_reg_reg_128_191_0_2_n_1),
        .DOC(array_reg_reg_128_191_0_2_n_2),
        .DOD(NLW_array_reg_reg_128_191_0_2_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_128_191_0_2_i_1__0_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    array_reg_reg_128_191_0_2_i_1__0
       (.I0(array_reg_reg_0_63_6_6_0[6]),
        .I1(array_reg_reg_0_63_6_6_0[7]),
        .I2(in0),
        .O(array_reg_reg_128_191_0_2_i_1__0_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "128" *) 
  (* ram_addr_end = "191" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_128_191_3_5
       (.ADDRA(\b_reg_reg[7] [5:0]),
        .ADDRB(\b_reg_reg[7] [5:0]),
        .ADDRC(\b_reg_reg[7] [5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1__0_0[3]),
        .DIB(r_data_inferred_i_1__0_0[4]),
        .DIC(r_data_inferred_i_1__0_0[5]),
        .DID(1'b0),
        .DOA(array_reg_reg_128_191_3_5_n_0),
        .DOB(array_reg_reg_128_191_3_5_n_1),
        .DOC(array_reg_reg_128_191_3_5_n_2),
        .DOD(NLW_array_reg_reg_128_191_3_5_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_128_191_0_2_i_1__0_n_0));
  (* ram_addr_begin = "128" *) 
  (* ram_addr_end = "191" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_128_191_6_6
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1__0_0[6]),
        .DPO(array_reg_reg_128_191_6_6_n_0),
        .DPRA0(\b_reg_reg[7] [0]),
        .DPRA1(\b_reg_reg[7] [1]),
        .DPRA2(\b_reg_reg[7] [2]),
        .DPRA3(\b_reg_reg[7] [3]),
        .DPRA4(\b_reg_reg[7] [4]),
        .DPRA5(\b_reg_reg[7] [5]),
        .SPO(NLW_array_reg_reg_128_191_6_6_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_128_191_0_2_i_1__0_n_0));
  (* ram_addr_begin = "128" *) 
  (* ram_addr_end = "191" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_128_191_7_7
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1__0_0[7]),
        .DPO(array_reg_reg_128_191_7_7_n_0),
        .DPRA0(\b_reg_reg[7] [0]),
        .DPRA1(\b_reg_reg[7] [1]),
        .DPRA2(\b_reg_reg[7] [2]),
        .DPRA3(\b_reg_reg[7] [3]),
        .DPRA4(\b_reg_reg[7] [4]),
        .DPRA5(\b_reg_reg[7] [5]),
        .SPO(NLW_array_reg_reg_128_191_7_7_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_128_191_0_2_i_1__0_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "192" *) 
  (* ram_addr_end = "255" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_192_255_0_2
       (.ADDRA(\b_reg_reg[7] [5:0]),
        .ADDRB(\b_reg_reg[7] [5:0]),
        .ADDRC(\b_reg_reg[7] [5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1__0_0[0]),
        .DIB(r_data_inferred_i_1__0_0[1]),
        .DIC(r_data_inferred_i_1__0_0[2]),
        .DID(1'b0),
        .DOA(array_reg_reg_192_255_0_2_n_0),
        .DOB(array_reg_reg_192_255_0_2_n_1),
        .DOC(array_reg_reg_192_255_0_2_n_2),
        .DOD(NLW_array_reg_reg_192_255_0_2_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_192_255_0_2_i_1__0_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    array_reg_reg_192_255_0_2_i_1__0
       (.I0(in0),
        .I1(array_reg_reg_0_63_6_6_0[6]),
        .I2(array_reg_reg_0_63_6_6_0[7]),
        .O(array_reg_reg_192_255_0_2_i_1__0_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "192" *) 
  (* ram_addr_end = "255" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_192_255_3_5
       (.ADDRA(\b_reg_reg[7] [5:0]),
        .ADDRB(\b_reg_reg[7] [5:0]),
        .ADDRC(\b_reg_reg[7] [5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1__0_0[3]),
        .DIB(r_data_inferred_i_1__0_0[4]),
        .DIC(r_data_inferred_i_1__0_0[5]),
        .DID(1'b0),
        .DOA(array_reg_reg_192_255_3_5_n_0),
        .DOB(array_reg_reg_192_255_3_5_n_1),
        .DOC(array_reg_reg_192_255_3_5_n_2),
        .DOD(NLW_array_reg_reg_192_255_3_5_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_192_255_0_2_i_1__0_n_0));
  (* ram_addr_begin = "192" *) 
  (* ram_addr_end = "255" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_192_255_6_6
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1__0_0[6]),
        .DPO(array_reg_reg_192_255_6_6_n_0),
        .DPRA0(\b_reg_reg[7] [0]),
        .DPRA1(\b_reg_reg[7] [1]),
        .DPRA2(\b_reg_reg[7] [2]),
        .DPRA3(\b_reg_reg[7] [3]),
        .DPRA4(\b_reg_reg[7] [4]),
        .DPRA5(\b_reg_reg[7] [5]),
        .SPO(NLW_array_reg_reg_192_255_6_6_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_192_255_0_2_i_1__0_n_0));
  (* ram_addr_begin = "192" *) 
  (* ram_addr_end = "255" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_192_255_7_7
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1__0_0[7]),
        .DPO(array_reg_reg_192_255_7_7_n_0),
        .DPRA0(\b_reg_reg[7] [0]),
        .DPRA1(\b_reg_reg[7] [1]),
        .DPRA2(\b_reg_reg[7] [2]),
        .DPRA3(\b_reg_reg[7] [3]),
        .DPRA4(\b_reg_reg[7] [4]),
        .DPRA5(\b_reg_reg[7] [5]),
        .SPO(NLW_array_reg_reg_192_255_7_7_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_192_255_0_2_i_1__0_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "127" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_64_127_0_2
       (.ADDRA(\b_reg_reg[7] [5:0]),
        .ADDRB(\b_reg_reg[7] [5:0]),
        .ADDRC(\b_reg_reg[7] [5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1__0_0[0]),
        .DIB(r_data_inferred_i_1__0_0[1]),
        .DIC(r_data_inferred_i_1__0_0[2]),
        .DID(1'b0),
        .DOA(array_reg_reg_64_127_0_2_n_0),
        .DOB(array_reg_reg_64_127_0_2_n_1),
        .DOC(array_reg_reg_64_127_0_2_n_2),
        .DOD(NLW_array_reg_reg_64_127_0_2_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_64_127_0_2_i_1__0_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    array_reg_reg_64_127_0_2_i_1__0
       (.I0(array_reg_reg_0_63_6_6_0[7]),
        .I1(array_reg_reg_0_63_6_6_0[6]),
        .I2(in0),
        .O(array_reg_reg_64_127_0_2_i_1__0_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "127" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_64_127_3_5
       (.ADDRA(\b_reg_reg[7] [5:0]),
        .ADDRB(\b_reg_reg[7] [5:0]),
        .ADDRC(\b_reg_reg[7] [5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1__0_0[3]),
        .DIB(r_data_inferred_i_1__0_0[4]),
        .DIC(r_data_inferred_i_1__0_0[5]),
        .DID(1'b0),
        .DOA(array_reg_reg_64_127_3_5_n_0),
        .DOB(array_reg_reg_64_127_3_5_n_1),
        .DOC(array_reg_reg_64_127_3_5_n_2),
        .DOD(NLW_array_reg_reg_64_127_3_5_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_64_127_0_2_i_1__0_n_0));
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "127" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_64_127_6_6
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1__0_0[6]),
        .DPO(array_reg_reg_64_127_6_6_n_0),
        .DPRA0(\b_reg_reg[7] [0]),
        .DPRA1(\b_reg_reg[7] [1]),
        .DPRA2(\b_reg_reg[7] [2]),
        .DPRA3(\b_reg_reg[7] [3]),
        .DPRA4(\b_reg_reg[7] [4]),
        .DPRA5(\b_reg_reg[7] [5]),
        .SPO(NLW_array_reg_reg_64_127_6_6_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_64_127_0_2_i_1__0_n_0));
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "127" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_64_127_7_7
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1__0_0[7]),
        .DPO(array_reg_reg_64_127_7_7_n_0),
        .DPRA0(\b_reg_reg[7] [0]),
        .DPRA1(\b_reg_reg[7] [1]),
        .DPRA2(\b_reg_reg[7] [2]),
        .DPRA3(\b_reg_reg[7] [3]),
        .DPRA4(\b_reg_reg[7] [4]),
        .DPRA5(\b_reg_reg[7] [5]),
        .SPO(NLW_array_reg_reg_64_127_7_7_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_64_127_0_2_i_1__0_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_1__0
       (.I0(array_reg_reg_192_255_7_7_n_0),
        .I1(array_reg_reg_128_191_7_7_n_0),
        .I2(\b_reg_reg[7] [7]),
        .I3(array_reg_reg_64_127_7_7_n_0),
        .I4(\b_reg_reg[7] [6]),
        .I5(array_reg_reg_0_63_7_7_n_0),
        .O(r_data[7]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_2__0
       (.I0(array_reg_reg_192_255_6_6_n_0),
        .I1(array_reg_reg_128_191_6_6_n_0),
        .I2(\b_reg_reg[7] [7]),
        .I3(array_reg_reg_64_127_6_6_n_0),
        .I4(\b_reg_reg[7] [6]),
        .I5(array_reg_reg_0_63_6_6_n_0),
        .O(r_data[6]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_3__0
       (.I0(array_reg_reg_192_255_3_5_n_2),
        .I1(array_reg_reg_128_191_3_5_n_2),
        .I2(\b_reg_reg[7] [7]),
        .I3(array_reg_reg_64_127_3_5_n_2),
        .I4(\b_reg_reg[7] [6]),
        .I5(array_reg_reg_0_63_3_5_n_2),
        .O(r_data[5]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_4__0
       (.I0(array_reg_reg_192_255_3_5_n_1),
        .I1(array_reg_reg_128_191_3_5_n_1),
        .I2(\b_reg_reg[7] [7]),
        .I3(array_reg_reg_64_127_3_5_n_1),
        .I4(\b_reg_reg[7] [6]),
        .I5(array_reg_reg_0_63_3_5_n_1),
        .O(r_data[4]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_5__0
       (.I0(array_reg_reg_192_255_3_5_n_0),
        .I1(array_reg_reg_128_191_3_5_n_0),
        .I2(\b_reg_reg[7] [7]),
        .I3(array_reg_reg_64_127_3_5_n_0),
        .I4(\b_reg_reg[7] [6]),
        .I5(array_reg_reg_0_63_3_5_n_0),
        .O(r_data[3]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_6__0
       (.I0(array_reg_reg_192_255_0_2_n_2),
        .I1(array_reg_reg_128_191_0_2_n_2),
        .I2(\b_reg_reg[7] [7]),
        .I3(array_reg_reg_64_127_0_2_n_2),
        .I4(\b_reg_reg[7] [6]),
        .I5(array_reg_reg_0_63_0_2_n_2),
        .O(r_data[2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_7__0
       (.I0(array_reg_reg_192_255_0_2_n_1),
        .I1(array_reg_reg_128_191_0_2_n_1),
        .I2(\b_reg_reg[7] [7]),
        .I3(array_reg_reg_64_127_0_2_n_1),
        .I4(\b_reg_reg[7] [6]),
        .I5(array_reg_reg_0_63_0_2_n_1),
        .O(r_data[1]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_8__0
       (.I0(array_reg_reg_192_255_0_2_n_0),
        .I1(array_reg_reg_128_191_0_2_n_0),
        .I2(\b_reg_reg[7] [7]),
        .I3(array_reg_reg_64_127_0_2_n_0),
        .I4(\b_reg_reg[7] [6]),
        .I5(array_reg_reg_0_63_0_2_n_0),
        .O(r_data[0]));
endmodule

(* ORIG_REF_NAME = "reg_file" *) 
module reg_file_2
   (r_data,
    mmio_rd_data_inferred_i_64,
    in0,
    out,
    array_reg_reg_0_63_6_6_0,
    r_data_inferred_i_1_0);
  output [7:0]r_data;
  input [7:0]mmio_rd_data_inferred_i_64;
  input in0;
  input out;
  input [7:0]array_reg_reg_0_63_6_6_0;
  input [7:0]r_data_inferred_i_1_0;

  wire array_reg_reg_0_63_0_2_i_1_n_0;
  wire array_reg_reg_0_63_0_2_n_0;
  wire array_reg_reg_0_63_0_2_n_1;
  wire array_reg_reg_0_63_0_2_n_2;
  wire array_reg_reg_0_63_3_5_n_0;
  wire array_reg_reg_0_63_3_5_n_1;
  wire array_reg_reg_0_63_3_5_n_2;
  (* DONT_TOUCH *) wire [7:0]array_reg_reg_0_63_6_6_0;
  wire array_reg_reg_0_63_6_6_n_0;
  wire array_reg_reg_0_63_7_7_n_0;
  wire array_reg_reg_128_191_0_2_i_1_n_0;
  wire array_reg_reg_128_191_0_2_n_0;
  wire array_reg_reg_128_191_0_2_n_1;
  wire array_reg_reg_128_191_0_2_n_2;
  wire array_reg_reg_128_191_3_5_n_0;
  wire array_reg_reg_128_191_3_5_n_1;
  wire array_reg_reg_128_191_3_5_n_2;
  wire array_reg_reg_128_191_6_6_n_0;
  wire array_reg_reg_128_191_7_7_n_0;
  wire array_reg_reg_192_255_0_2_i_1_n_0;
  wire array_reg_reg_192_255_0_2_n_0;
  wire array_reg_reg_192_255_0_2_n_1;
  wire array_reg_reg_192_255_0_2_n_2;
  wire array_reg_reg_192_255_3_5_n_0;
  wire array_reg_reg_192_255_3_5_n_1;
  wire array_reg_reg_192_255_3_5_n_2;
  wire array_reg_reg_192_255_6_6_n_0;
  wire array_reg_reg_192_255_7_7_n_0;
  wire array_reg_reg_64_127_0_2_i_1_n_0;
  wire array_reg_reg_64_127_0_2_n_0;
  wire array_reg_reg_64_127_0_2_n_1;
  wire array_reg_reg_64_127_0_2_n_2;
  wire array_reg_reg_64_127_3_5_n_0;
  wire array_reg_reg_64_127_3_5_n_1;
  wire array_reg_reg_64_127_3_5_n_2;
  wire array_reg_reg_64_127_6_6_n_0;
  wire array_reg_reg_64_127_7_7_n_0;
  (* DONT_TOUCH *) wire in0;
  (* DONT_TOUCH *) wire [7:0]mmio_rd_data_inferred_i_64;
  (* DONT_TOUCH *) wire out;
  (* DONT_TOUCH *) wire [7:0]r_data;
  (* DONT_TOUCH *) wire [7:0]r_data_inferred_i_1_0;
  wire NLW_array_reg_reg_0_63_0_2_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_0_63_3_5_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_0_63_6_6_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_0_63_7_7_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_128_191_0_2_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_128_191_3_5_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_128_191_6_6_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_128_191_7_7_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_192_255_0_2_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_192_255_3_5_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_192_255_6_6_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_192_255_7_7_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_64_127_0_2_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_64_127_3_5_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_64_127_6_6_SPO_UNCONNECTED;
  wire NLW_array_reg_reg_64_127_7_7_SPO_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_0_63_0_2
       (.ADDRA(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRB(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRC(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1_0[0]),
        .DIB(r_data_inferred_i_1_0[1]),
        .DIC(r_data_inferred_i_1_0[2]),
        .DID(1'b0),
        .DOA(array_reg_reg_0_63_0_2_n_0),
        .DOB(array_reg_reg_0_63_0_2_n_1),
        .DOC(array_reg_reg_0_63_0_2_n_2),
        .DOD(NLW_array_reg_reg_0_63_0_2_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_0_63_0_2_i_1_n_0));
  LUT3 #(
    .INIT(8'h02)) 
    array_reg_reg_0_63_0_2_i_1
       (.I0(in0),
        .I1(array_reg_reg_0_63_6_6_0[6]),
        .I2(array_reg_reg_0_63_6_6_0[7]),
        .O(array_reg_reg_0_63_0_2_i_1_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_0_63_3_5
       (.ADDRA(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRB(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRC(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1_0[3]),
        .DIB(r_data_inferred_i_1_0[4]),
        .DIC(r_data_inferred_i_1_0[5]),
        .DID(1'b0),
        .DOA(array_reg_reg_0_63_3_5_n_0),
        .DOB(array_reg_reg_0_63_3_5_n_1),
        .DOC(array_reg_reg_0_63_3_5_n_2),
        .DOD(NLW_array_reg_reg_0_63_3_5_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_0_63_0_2_i_1_n_0));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_0_63_6_6
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1_0[6]),
        .DPO(array_reg_reg_0_63_6_6_n_0),
        .DPRA0(mmio_rd_data_inferred_i_64[0]),
        .DPRA1(mmio_rd_data_inferred_i_64[1]),
        .DPRA2(mmio_rd_data_inferred_i_64[2]),
        .DPRA3(mmio_rd_data_inferred_i_64[3]),
        .DPRA4(mmio_rd_data_inferred_i_64[4]),
        .DPRA5(mmio_rd_data_inferred_i_64[5]),
        .SPO(NLW_array_reg_reg_0_63_6_6_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_0_63_0_2_i_1_n_0));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_0_63_7_7
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1_0[7]),
        .DPO(array_reg_reg_0_63_7_7_n_0),
        .DPRA0(mmio_rd_data_inferred_i_64[0]),
        .DPRA1(mmio_rd_data_inferred_i_64[1]),
        .DPRA2(mmio_rd_data_inferred_i_64[2]),
        .DPRA3(mmio_rd_data_inferred_i_64[3]),
        .DPRA4(mmio_rd_data_inferred_i_64[4]),
        .DPRA5(mmio_rd_data_inferred_i_64[5]),
        .SPO(NLW_array_reg_reg_0_63_7_7_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_0_63_0_2_i_1_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "128" *) 
  (* ram_addr_end = "191" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_128_191_0_2
       (.ADDRA(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRB(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRC(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1_0[0]),
        .DIB(r_data_inferred_i_1_0[1]),
        .DIC(r_data_inferred_i_1_0[2]),
        .DID(1'b0),
        .DOA(array_reg_reg_128_191_0_2_n_0),
        .DOB(array_reg_reg_128_191_0_2_n_1),
        .DOC(array_reg_reg_128_191_0_2_n_2),
        .DOD(NLW_array_reg_reg_128_191_0_2_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_128_191_0_2_i_1_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    array_reg_reg_128_191_0_2_i_1
       (.I0(array_reg_reg_0_63_6_6_0[6]),
        .I1(array_reg_reg_0_63_6_6_0[7]),
        .I2(in0),
        .O(array_reg_reg_128_191_0_2_i_1_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "128" *) 
  (* ram_addr_end = "191" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_128_191_3_5
       (.ADDRA(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRB(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRC(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1_0[3]),
        .DIB(r_data_inferred_i_1_0[4]),
        .DIC(r_data_inferred_i_1_0[5]),
        .DID(1'b0),
        .DOA(array_reg_reg_128_191_3_5_n_0),
        .DOB(array_reg_reg_128_191_3_5_n_1),
        .DOC(array_reg_reg_128_191_3_5_n_2),
        .DOD(NLW_array_reg_reg_128_191_3_5_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_128_191_0_2_i_1_n_0));
  (* ram_addr_begin = "128" *) 
  (* ram_addr_end = "191" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_128_191_6_6
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1_0[6]),
        .DPO(array_reg_reg_128_191_6_6_n_0),
        .DPRA0(mmio_rd_data_inferred_i_64[0]),
        .DPRA1(mmio_rd_data_inferred_i_64[1]),
        .DPRA2(mmio_rd_data_inferred_i_64[2]),
        .DPRA3(mmio_rd_data_inferred_i_64[3]),
        .DPRA4(mmio_rd_data_inferred_i_64[4]),
        .DPRA5(mmio_rd_data_inferred_i_64[5]),
        .SPO(NLW_array_reg_reg_128_191_6_6_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_128_191_0_2_i_1_n_0));
  (* ram_addr_begin = "128" *) 
  (* ram_addr_end = "191" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_128_191_7_7
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1_0[7]),
        .DPO(array_reg_reg_128_191_7_7_n_0),
        .DPRA0(mmio_rd_data_inferred_i_64[0]),
        .DPRA1(mmio_rd_data_inferred_i_64[1]),
        .DPRA2(mmio_rd_data_inferred_i_64[2]),
        .DPRA3(mmio_rd_data_inferred_i_64[3]),
        .DPRA4(mmio_rd_data_inferred_i_64[4]),
        .DPRA5(mmio_rd_data_inferred_i_64[5]),
        .SPO(NLW_array_reg_reg_128_191_7_7_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_128_191_0_2_i_1_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "192" *) 
  (* ram_addr_end = "255" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_192_255_0_2
       (.ADDRA(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRB(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRC(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1_0[0]),
        .DIB(r_data_inferred_i_1_0[1]),
        .DIC(r_data_inferred_i_1_0[2]),
        .DID(1'b0),
        .DOA(array_reg_reg_192_255_0_2_n_0),
        .DOB(array_reg_reg_192_255_0_2_n_1),
        .DOC(array_reg_reg_192_255_0_2_n_2),
        .DOD(NLW_array_reg_reg_192_255_0_2_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_192_255_0_2_i_1_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    array_reg_reg_192_255_0_2_i_1
       (.I0(in0),
        .I1(array_reg_reg_0_63_6_6_0[6]),
        .I2(array_reg_reg_0_63_6_6_0[7]),
        .O(array_reg_reg_192_255_0_2_i_1_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "192" *) 
  (* ram_addr_end = "255" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_192_255_3_5
       (.ADDRA(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRB(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRC(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1_0[3]),
        .DIB(r_data_inferred_i_1_0[4]),
        .DIC(r_data_inferred_i_1_0[5]),
        .DID(1'b0),
        .DOA(array_reg_reg_192_255_3_5_n_0),
        .DOB(array_reg_reg_192_255_3_5_n_1),
        .DOC(array_reg_reg_192_255_3_5_n_2),
        .DOD(NLW_array_reg_reg_192_255_3_5_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_192_255_0_2_i_1_n_0));
  (* ram_addr_begin = "192" *) 
  (* ram_addr_end = "255" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_192_255_6_6
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1_0[6]),
        .DPO(array_reg_reg_192_255_6_6_n_0),
        .DPRA0(mmio_rd_data_inferred_i_64[0]),
        .DPRA1(mmio_rd_data_inferred_i_64[1]),
        .DPRA2(mmio_rd_data_inferred_i_64[2]),
        .DPRA3(mmio_rd_data_inferred_i_64[3]),
        .DPRA4(mmio_rd_data_inferred_i_64[4]),
        .DPRA5(mmio_rd_data_inferred_i_64[5]),
        .SPO(NLW_array_reg_reg_192_255_6_6_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_192_255_0_2_i_1_n_0));
  (* ram_addr_begin = "192" *) 
  (* ram_addr_end = "255" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_192_255_7_7
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1_0[7]),
        .DPO(array_reg_reg_192_255_7_7_n_0),
        .DPRA0(mmio_rd_data_inferred_i_64[0]),
        .DPRA1(mmio_rd_data_inferred_i_64[1]),
        .DPRA2(mmio_rd_data_inferred_i_64[2]),
        .DPRA3(mmio_rd_data_inferred_i_64[3]),
        .DPRA4(mmio_rd_data_inferred_i_64[4]),
        .DPRA5(mmio_rd_data_inferred_i_64[5]),
        .SPO(NLW_array_reg_reg_192_255_7_7_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_192_255_0_2_i_1_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "127" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_64_127_0_2
       (.ADDRA(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRB(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRC(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1_0[0]),
        .DIB(r_data_inferred_i_1_0[1]),
        .DIC(r_data_inferred_i_1_0[2]),
        .DID(1'b0),
        .DOA(array_reg_reg_64_127_0_2_n_0),
        .DOB(array_reg_reg_64_127_0_2_n_1),
        .DOC(array_reg_reg_64_127_0_2_n_2),
        .DOD(NLW_array_reg_reg_64_127_0_2_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_64_127_0_2_i_1_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    array_reg_reg_64_127_0_2_i_1
       (.I0(array_reg_reg_0_63_6_6_0[7]),
        .I1(array_reg_reg_0_63_6_6_0[6]),
        .I2(in0),
        .O(array_reg_reg_64_127_0_2_i_1_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "127" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_64_127_3_5
       (.ADDRA(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRB(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRC(mmio_rd_data_inferred_i_64[5:0]),
        .ADDRD(array_reg_reg_0_63_6_6_0[5:0]),
        .DIA(r_data_inferred_i_1_0[3]),
        .DIB(r_data_inferred_i_1_0[4]),
        .DIC(r_data_inferred_i_1_0[5]),
        .DID(1'b0),
        .DOA(array_reg_reg_64_127_3_5_n_0),
        .DOB(array_reg_reg_64_127_3_5_n_1),
        .DOC(array_reg_reg_64_127_3_5_n_2),
        .DOD(NLW_array_reg_reg_64_127_3_5_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_64_127_0_2_i_1_n_0));
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "127" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_64_127_6_6
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1_0[6]),
        .DPO(array_reg_reg_64_127_6_6_n_0),
        .DPRA0(mmio_rd_data_inferred_i_64[0]),
        .DPRA1(mmio_rd_data_inferred_i_64[1]),
        .DPRA2(mmio_rd_data_inferred_i_64[2]),
        .DPRA3(mmio_rd_data_inferred_i_64[3]),
        .DPRA4(mmio_rd_data_inferred_i_64[4]),
        .DPRA5(mmio_rd_data_inferred_i_64[5]),
        .SPO(NLW_array_reg_reg_64_127_6_6_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_64_127_0_2_i_1_n_0));
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "127" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM64X1D #(
    .INIT(64'h0000000000000000)) 
    array_reg_reg_64_127_7_7
       (.A0(array_reg_reg_0_63_6_6_0[0]),
        .A1(array_reg_reg_0_63_6_6_0[1]),
        .A2(array_reg_reg_0_63_6_6_0[2]),
        .A3(array_reg_reg_0_63_6_6_0[3]),
        .A4(array_reg_reg_0_63_6_6_0[4]),
        .A5(array_reg_reg_0_63_6_6_0[5]),
        .D(r_data_inferred_i_1_0[7]),
        .DPO(array_reg_reg_64_127_7_7_n_0),
        .DPRA0(mmio_rd_data_inferred_i_64[0]),
        .DPRA1(mmio_rd_data_inferred_i_64[1]),
        .DPRA2(mmio_rd_data_inferred_i_64[2]),
        .DPRA3(mmio_rd_data_inferred_i_64[3]),
        .DPRA4(mmio_rd_data_inferred_i_64[4]),
        .DPRA5(mmio_rd_data_inferred_i_64[5]),
        .SPO(NLW_array_reg_reg_64_127_7_7_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(array_reg_reg_64_127_0_2_i_1_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_1
       (.I0(array_reg_reg_192_255_7_7_n_0),
        .I1(array_reg_reg_128_191_7_7_n_0),
        .I2(mmio_rd_data_inferred_i_64[7]),
        .I3(array_reg_reg_64_127_7_7_n_0),
        .I4(mmio_rd_data_inferred_i_64[6]),
        .I5(array_reg_reg_0_63_7_7_n_0),
        .O(r_data[7]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_2
       (.I0(array_reg_reg_192_255_6_6_n_0),
        .I1(array_reg_reg_128_191_6_6_n_0),
        .I2(mmio_rd_data_inferred_i_64[7]),
        .I3(array_reg_reg_64_127_6_6_n_0),
        .I4(mmio_rd_data_inferred_i_64[6]),
        .I5(array_reg_reg_0_63_6_6_n_0),
        .O(r_data[6]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_3
       (.I0(array_reg_reg_192_255_3_5_n_2),
        .I1(array_reg_reg_128_191_3_5_n_2),
        .I2(mmio_rd_data_inferred_i_64[7]),
        .I3(array_reg_reg_64_127_3_5_n_2),
        .I4(mmio_rd_data_inferred_i_64[6]),
        .I5(array_reg_reg_0_63_3_5_n_2),
        .O(r_data[5]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_4
       (.I0(array_reg_reg_192_255_3_5_n_1),
        .I1(array_reg_reg_128_191_3_5_n_1),
        .I2(mmio_rd_data_inferred_i_64[7]),
        .I3(array_reg_reg_64_127_3_5_n_1),
        .I4(mmio_rd_data_inferred_i_64[6]),
        .I5(array_reg_reg_0_63_3_5_n_1),
        .O(r_data[4]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_5
       (.I0(array_reg_reg_192_255_3_5_n_0),
        .I1(array_reg_reg_128_191_3_5_n_0),
        .I2(mmio_rd_data_inferred_i_64[7]),
        .I3(array_reg_reg_64_127_3_5_n_0),
        .I4(mmio_rd_data_inferred_i_64[6]),
        .I5(array_reg_reg_0_63_3_5_n_0),
        .O(r_data[3]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_6
       (.I0(array_reg_reg_192_255_0_2_n_2),
        .I1(array_reg_reg_128_191_0_2_n_2),
        .I2(mmio_rd_data_inferred_i_64[7]),
        .I3(array_reg_reg_64_127_0_2_n_2),
        .I4(mmio_rd_data_inferred_i_64[6]),
        .I5(array_reg_reg_0_63_0_2_n_2),
        .O(r_data[2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_7
       (.I0(array_reg_reg_192_255_0_2_n_1),
        .I1(array_reg_reg_128_191_0_2_n_1),
        .I2(mmio_rd_data_inferred_i_64[7]),
        .I3(array_reg_reg_64_127_0_2_n_1),
        .I4(mmio_rd_data_inferred_i_64[6]),
        .I5(array_reg_reg_0_63_0_2_n_1),
        .O(r_data[1]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    r_data_inferred_i_8
       (.I0(array_reg_reg_192_255_0_2_n_0),
        .I1(array_reg_reg_128_191_0_2_n_0),
        .I2(mmio_rd_data_inferred_i_64[7]),
        .I3(array_reg_reg_64_127_0_2_n_0),
        .I4(mmio_rd_data_inferred_i_64[6]),
        .I5(array_reg_reg_0_63_0_2_n_0),
        .O(r_data[0]));
endmodule

(* ORIG_REF_NAME = "reg_file" *) 
module reg_file__parameterized0
   (r_data,
    mmio_rd_data_inferred_i_25,
    in0,
    out,
    mmio_rd_data_inferred_i_25_0,
    mmio_rd_data_inferred_i_25_1);
  output [7:0]r_data;
  input [5:0]mmio_rd_data_inferred_i_25;
  input in0;
  input out;
  input [5:0]mmio_rd_data_inferred_i_25_0;
  input [7:0]mmio_rd_data_inferred_i_25_1;

  (* DONT_TOUCH *) wire in0;
  (* DONT_TOUCH *) wire [5:0]mmio_rd_data_inferred_i_25;
  (* DONT_TOUCH *) wire [5:0]mmio_rd_data_inferred_i_25_0;
  (* DONT_TOUCH *) wire [7:0]mmio_rd_data_inferred_i_25_1;
  (* DONT_TOUCH *) wire out;
  (* DONT_TOUCH *) wire [7:0]r_data;
  wire NLW_array_reg_reg_0_63_0_2_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_0_63_3_5_DOD_UNCONNECTED;
  wire NLW_array_reg_reg_0_63_6_7_DOC_UNCONNECTED;
  wire NLW_array_reg_reg_0_63_6_7_DOD_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_0_63_0_2
       (.ADDRA(mmio_rd_data_inferred_i_25),
        .ADDRB(mmio_rd_data_inferred_i_25),
        .ADDRC(mmio_rd_data_inferred_i_25),
        .ADDRD(mmio_rd_data_inferred_i_25_0),
        .DIA(mmio_rd_data_inferred_i_25_1[0]),
        .DIB(mmio_rd_data_inferred_i_25_1[1]),
        .DIC(mmio_rd_data_inferred_i_25_1[2]),
        .DID(1'b0),
        .DOA(r_data[0]),
        .DOB(r_data[1]),
        .DOC(r_data[2]),
        .DOD(NLW_array_reg_reg_0_63_0_2_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(in0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_0_63_3_5
       (.ADDRA(mmio_rd_data_inferred_i_25),
        .ADDRB(mmio_rd_data_inferred_i_25),
        .ADDRC(mmio_rd_data_inferred_i_25),
        .ADDRD(mmio_rd_data_inferred_i_25_0),
        .DIA(mmio_rd_data_inferred_i_25_1[3]),
        .DIB(mmio_rd_data_inferred_i_25_1[4]),
        .DIC(mmio_rd_data_inferred_i_25_1[5]),
        .DID(1'b0),
        .DOA(r_data[3]),
        .DOB(r_data[4]),
        .DOC(r_data[5]),
        .DOD(NLW_array_reg_reg_0_63_3_5_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(in0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "7" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    array_reg_reg_0_63_6_7
       (.ADDRA(mmio_rd_data_inferred_i_25),
        .ADDRB(mmio_rd_data_inferred_i_25),
        .ADDRC(mmio_rd_data_inferred_i_25),
        .ADDRD(mmio_rd_data_inferred_i_25_0),
        .DIA(mmio_rd_data_inferred_i_25_1[6]),
        .DIB(mmio_rd_data_inferred_i_25_1[7]),
        .DIC(1'b0),
        .DID(1'b0),
        .DOA(r_data[6]),
        .DOB(r_data[7]),
        .DOC(NLW_array_reg_reg_0_63_6_7_DOC_UNCONNECTED),
        .DOD(NLW_array_reg_reg_0_63_6_7_DOD_UNCONNECTED),
        .WCLK(out),
        .WE(in0));
endmodule

module uart
   (tx,
    in0,
    out,
    \n_reg_reg[0] ,
    Q,
    \b_reg_reg[7] ,
    \w_ptr_logic_reg[0] ,
    \w_ptr_logic_reg[0]_0 ,
    D);
  output tx;
  output [9:0]in0;
  input out;
  input \n_reg_reg[0] ;
  input [10:0]Q;
  input \b_reg_reg[7] ;
  input \w_ptr_logic_reg[0] ;
  input \w_ptr_logic_reg[0]_0 ;
  input [7:0]D;

  wire [7:0]D;
  wire [10:0]Q;
  wire \b_reg_reg[7] ;
  wire [9:0]in0;
  wire \n_reg_reg[0] ;
  wire out;
  wire [7:0]rx_data_out;
  wire rx_done_tick;
  wire tick;
  wire tx;
  wire tx_done_tick;
  wire tx_fifo_not_empty;
  wire [7:0]tx_fifo_out;
  wire \w_ptr_logic_reg[0] ;
  wire \w_ptr_logic_reg[0]_0 ;

  baud_gen baud_gen_unit
       (.Q(Q),
        .out(out),
        .\r_reg_reg[10]_0 (\n_reg_reg[0] ),
        .\r_reg_reg[3]_0 (tick));
  fifo fifo_rx_unit
       (.full_logic_reg(\n_reg_reg[0] ),
        .in0(in0[8:0]),
        .out(out),
        .r_data_inferred_i_1(rx_data_out),
        .\w_ptr_logic_reg[0] (\w_ptr_logic_reg[0] ),
        .\w_ptr_logic_reg[0]_0 (rx_done_tick));
  fifo_0 fifo_tx_unit
       (.D(D),
        .empty_logic_reg(tx_fifo_not_empty),
        .full_logic_reg(out),
        .full_logic_reg_0(\n_reg_reg[0] ),
        .in0(in0[9]),
        .out(tx_fifo_out),
        .\w_ptr_logic_reg[0] (tx_done_tick),
        .\w_ptr_logic_reg[0]_0 (\w_ptr_logic_reg[0]_0 ));
  uart_rx uart_rx_unit
       (.\b_reg_reg[7]_0 (rx_data_out),
        .\b_reg_reg[7]_1 (\b_reg_reg[7] ),
        .\n_reg_reg[0]_0 (\n_reg_reg[0] ),
        .\n_reg_reg[2]_0 (out),
        .out(rx_done_tick),
        .\s_reg_reg[0]_0 (tick));
  uart_tx uart_tx_unit
       (.\FSM_sequential_state_reg_reg[1]_0 (tick),
        .\b_reg_reg[0]_0 (tx_fifo_not_empty),
        .\b_reg_reg[7]_0 (tx_fifo_out),
        .\n_reg_reg[0]_0 (\n_reg_reg[0] ),
        .\n_reg_reg[2]_0 (out),
        .out(tx_done_tick),
        .tx_reg_reg_0(tx));
endmodule

module uart_rx
   (out,
    \b_reg_reg[7]_0 ,
    \n_reg_reg[0]_0 ,
    \n_reg_reg[2]_0 ,
    \s_reg_reg[0]_0 ,
    \b_reg_reg[7]_1 );
  output out;
  output [7:0]\b_reg_reg[7]_0 ;
  input \n_reg_reg[0]_0 ;
  input \n_reg_reg[2]_0 ;
  input \s_reg_reg[0]_0 ;
  input \b_reg_reg[7]_1 ;

  wire \FSM_sequential_state_reg[0]_i_1_n_0 ;
  wire \FSM_sequential_state_reg[1]_i_1_n_0 ;
  wire \FSM_sequential_state_reg[1]_i_2_n_0 ;
  wire \FSM_sequential_state_reg[1]_i_3_n_0 ;
  wire b_next;
  (* DONT_TOUCH *) wire [7:0]\b_reg_reg[7]_0 ;
  (* DONT_TOUCH *) wire \b_reg_reg[7]_1 ;
  wire n_next;
  wire \n_reg[0]_i_1_n_0 ;
  wire \n_reg[1]_i_1_n_0 ;
  wire \n_reg[2]_i_1_n_0 ;
  (* DONT_TOUCH *) wire \n_reg_reg[0]_0 ;
  (* DONT_TOUCH *) wire \n_reg_reg[2]_0 ;
  (* DONT_TOUCH *) wire out;
  wire rx_done_tick_inferred_i_2_n_0;
  wire s_next;
  wire [3:0]s_reg;
  wire \s_reg[0]_i_1_n_0 ;
  wire \s_reg[1]_i_1_n_0 ;
  wire \s_reg[2]_i_1_n_0 ;
  wire \s_reg[3]_i_2_n_0 ;
  wire \s_reg[3]_i_3_n_0 ;
  (* DONT_TOUCH *) wire \s_reg_reg[0]_0 ;
  wire [2:0]sel0;
  wire [1:0]state_reg;

  LUT6 #(
    .INIT(64'h07070707F8F8F8FF)) 
    \FSM_sequential_state_reg[0]_i_1 
       (.I0(rx_done_tick_inferred_i_2_n_0),
        .I1(\FSM_sequential_state_reg[1]_i_3_n_0 ),
        .I2(\FSM_sequential_state_reg[1]_i_2_n_0 ),
        .I3(state_reg[1]),
        .I4(\b_reg_reg[7]_1 ),
        .I5(state_reg[0]),
        .O(\FSM_sequential_state_reg[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h666C6C6C)) 
    \FSM_sequential_state_reg[1]_i_1 
       (.I0(state_reg[0]),
        .I1(state_reg[1]),
        .I2(\FSM_sequential_state_reg[1]_i_2_n_0 ),
        .I3(\FSM_sequential_state_reg[1]_i_3_n_0 ),
        .I4(rx_done_tick_inferred_i_2_n_0),
        .O(\FSM_sequential_state_reg[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000020)) 
    \FSM_sequential_state_reg[1]_i_2 
       (.I0(state_reg[0]),
        .I1(state_reg[1]),
        .I2(\s_reg_reg[0]_0 ),
        .I3(s_reg[3]),
        .I4(\s_reg[3]_i_3_n_0 ),
        .O(\FSM_sequential_state_reg[1]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hEAAA)) 
    \FSM_sequential_state_reg[1]_i_3 
       (.I0(state_reg[0]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(sel0[1]),
        .O(\FSM_sequential_state_reg[1]_i_3_n_0 ));
  (* FSM_ENCODED_STATES = "idle:00,start:01,data:10,stop:11," *) 
  FDCE #(
    .INIT(1'b0)) 
    \FSM_sequential_state_reg_reg[0] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\FSM_sequential_state_reg[0]_i_1_n_0 ),
        .Q(state_reg[0]));
  (* FSM_ENCODED_STATES = "idle:00,start:01,data:10,stop:11," *) 
  FDCE #(
    .INIT(1'b0)) 
    \FSM_sequential_state_reg_reg[1] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\FSM_sequential_state_reg[1]_i_1_n_0 ),
        .Q(state_reg[1]));
  LUT2 #(
    .INIT(4'h2)) 
    \b_reg[7]_i_1 
       (.I0(rx_done_tick_inferred_i_2_n_0),
        .I1(state_reg[0]),
        .O(b_next));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[0] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[7]_0 [1]),
        .Q(\b_reg_reg[7]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[1] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[7]_0 [2]),
        .Q(\b_reg_reg[7]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[2] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[7]_0 [3]),
        .Q(\b_reg_reg[7]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[3] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[7]_0 [4]),
        .Q(\b_reg_reg[7]_0 [3]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[4] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[7]_0 [5]),
        .Q(\b_reg_reg[7]_0 [4]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[5] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[7]_0 [6]),
        .Q(\b_reg_reg[7]_0 [5]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[6] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[7]_0 [7]),
        .Q(\b_reg_reg[7]_0 [6]));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[7] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg_reg[7]_1 ),
        .Q(\b_reg_reg[7]_0 [7]));
  LUT3 #(
    .INIT(8'h38)) 
    \n_reg[0]_i_1 
       (.I0(state_reg[1]),
        .I1(n_next),
        .I2(sel0[0]),
        .O(\n_reg[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'h2F80)) 
    \n_reg[1]_i_1 
       (.I0(state_reg[1]),
        .I1(sel0[0]),
        .I2(n_next),
        .I3(sel0[1]),
        .O(\n_reg[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT5 #(
    .INIT(32'h70FF8000)) 
    \n_reg[2]_i_1 
       (.I0(sel0[0]),
        .I1(sel0[1]),
        .I2(state_reg[1]),
        .I3(n_next),
        .I4(sel0[2]),
        .O(\n_reg[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1000030010000000)) 
    \n_reg[2]_i_2 
       (.I0(\FSM_sequential_state_reg[1]_i_3_n_0 ),
        .I1(\s_reg[3]_i_3_n_0 ),
        .I2(s_reg[3]),
        .I3(\s_reg_reg[0]_0 ),
        .I4(state_reg[1]),
        .I5(state_reg[0]),
        .O(n_next));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[0] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\n_reg[0]_i_1_n_0 ),
        .Q(sel0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[1] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\n_reg[1]_i_1_n_0 ),
        .Q(sel0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[2] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\n_reg[2]_i_1_n_0 ),
        .Q(sel0[2]));
  LUT2 #(
    .INIT(4'h8)) 
    rx_done_tick_inferred_i_1
       (.I0(rx_done_tick_inferred_i_2_n_0),
        .I1(state_reg[0]),
        .O(out));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    rx_done_tick_inferred_i_2
       (.I0(\s_reg_reg[0]_0 ),
        .I1(state_reg[1]),
        .I2(s_reg[3]),
        .I3(s_reg[1]),
        .I4(s_reg[0]),
        .I5(s_reg[2]),
        .O(rx_done_tick_inferred_i_2_n_0));
  LUT4 #(
    .INIT(16'h5754)) 
    \s_reg[0]_i_1 
       (.I0(s_reg[0]),
        .I1(state_reg[0]),
        .I2(state_reg[1]),
        .I3(\b_reg_reg[7]_1 ),
        .O(\s_reg[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h02FEFE02)) 
    \s_reg[1]_i_1 
       (.I0(\b_reg_reg[7]_1 ),
        .I1(state_reg[0]),
        .I2(state_reg[1]),
        .I3(s_reg[1]),
        .I4(s_reg[0]),
        .O(\s_reg[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h02FEFEFEFE020202)) 
    \s_reg[2]_i_1 
       (.I0(\b_reg_reg[7]_1 ),
        .I1(state_reg[0]),
        .I2(state_reg[1]),
        .I3(s_reg[1]),
        .I4(s_reg[0]),
        .I5(s_reg[2]),
        .O(\s_reg[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCC50CC5CCC5CCC5)) 
    \s_reg[3]_i_1 
       (.I0(\b_reg_reg[7]_1 ),
        .I1(\s_reg_reg[0]_0 ),
        .I2(state_reg[1]),
        .I3(state_reg[0]),
        .I4(\s_reg[3]_i_3_n_0 ),
        .I5(s_reg[3]),
        .O(s_next));
  LUT5 #(
    .INIT(32'hCCCA303A)) 
    \s_reg[3]_i_2 
       (.I0(\b_reg_reg[7]_1 ),
        .I1(\s_reg[3]_i_3_n_0 ),
        .I2(state_reg[1]),
        .I3(state_reg[0]),
        .I4(s_reg[3]),
        .O(\s_reg[3]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h7F)) 
    \s_reg[3]_i_3 
       (.I0(s_reg[1]),
        .I1(s_reg[0]),
        .I2(s_reg[2]),
        .O(\s_reg[3]_i_3_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \s_reg_reg[0] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(s_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\s_reg[0]_i_1_n_0 ),
        .Q(s_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \s_reg_reg[1] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(s_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\s_reg[1]_i_1_n_0 ),
        .Q(s_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \s_reg_reg[2] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(s_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\s_reg[2]_i_1_n_0 ),
        .Q(s_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \s_reg_reg[3] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(s_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\s_reg[3]_i_2_n_0 ),
        .Q(s_reg[3]));
endmodule

module uart_tx
   (out,
    tx_reg_reg_0,
    \n_reg_reg[0]_0 ,
    \n_reg_reg[2]_0 ,
    \FSM_sequential_state_reg_reg[1]_0 ,
    \b_reg_reg[0]_0 ,
    \b_reg_reg[7]_0 );
  output out;
  output tx_reg_reg_0;
  input \n_reg_reg[0]_0 ;
  input \n_reg_reg[2]_0 ;
  input \FSM_sequential_state_reg_reg[1]_0 ;
  input \b_reg_reg[0]_0 ;
  input [7:0]\b_reg_reg[7]_0 ;

  wire \FSM_sequential_state_reg[0]_i_1__0_n_0 ;
  wire \FSM_sequential_state_reg[0]_i_2_n_0 ;
  wire \FSM_sequential_state_reg[1]_i_1__0_n_0 ;
  (* DONT_TOUCH *) wire \FSM_sequential_state_reg_reg[1]_0 ;
  wire [6:0]b_next;
  wire b_next_0;
  wire [0:0]b_reg;
  wire \b_reg[7]_i_2_n_0 ;
  (* DONT_TOUCH *) wire \b_reg_reg[0]_0 ;
  (* DONT_TOUCH *) wire [7:0]\b_reg_reg[7]_0 ;
  wire \b_reg_reg_n_0_[1] ;
  wire \b_reg_reg_n_0_[2] ;
  wire \b_reg_reg_n_0_[3] ;
  wire \b_reg_reg_n_0_[4] ;
  wire \b_reg_reg_n_0_[5] ;
  wire \b_reg_reg_n_0_[6] ;
  wire \b_reg_reg_n_0_[7] ;
  wire n_next;
  wire \n_reg[0]_i_1_n_0 ;
  wire \n_reg[1]_i_1_n_0 ;
  wire \n_reg[2]_i_1_n_0 ;
  (* DONT_TOUCH *) wire \n_reg_reg[0]_0 ;
  (* DONT_TOUCH *) wire \n_reg_reg[2]_0 ;
  (* DONT_TOUCH *) wire out;
  wire s_next;
  wire [3:0]s_reg;
  wire \s_reg[0]_i_1__0_n_0 ;
  wire \s_reg[1]_i_1__0_n_0 ;
  wire \s_reg[2]_i_1__0_n_0 ;
  wire \s_reg[3]_i_2__0_n_0 ;
  wire [2:0]sel0__0;
  wire [1:0]state_reg;
  wire tx_done_tick_inferred_i_2_n_0;
  wire tx_next;
  (* DONT_TOUCH *) wire tx_reg_reg_0;

  LUT6 #(
    .INIT(64'hBBBBBBBB0F4F0040)) 
    \FSM_sequential_state_reg[0]_i_1__0 
       (.I0(tx_done_tick_inferred_i_2_n_0),
        .I1(\FSM_sequential_state_reg_reg[1]_0 ),
        .I2(state_reg[1]),
        .I3(\FSM_sequential_state_reg[0]_i_2_n_0 ),
        .I4(\b_reg_reg[0]_0 ),
        .I5(state_reg[0]),
        .O(\FSM_sequential_state_reg[0]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h7F)) 
    \FSM_sequential_state_reg[0]_i_2 
       (.I0(sel0__0[1]),
        .I1(sel0__0[0]),
        .I2(sel0__0[2]),
        .O(\FSM_sequential_state_reg[0]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \FSM_sequential_state_reg[1]_i_1__0 
       (.I0(state_reg[1]),
        .I1(\FSM_sequential_state_reg_reg[1]_0 ),
        .I2(tx_done_tick_inferred_i_2_n_0),
        .I3(state_reg[0]),
        .O(\FSM_sequential_state_reg[1]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "idle:00,start:01,data:10,stop:11," *) 
  FDCE #(
    .INIT(1'b0)) 
    \FSM_sequential_state_reg_reg[0] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\FSM_sequential_state_reg[0]_i_1__0_n_0 ),
        .Q(state_reg[0]));
  (* FSM_ENCODED_STATES = "idle:00,start:01,data:10,stop:11," *) 
  FDCE #(
    .INIT(1'b0)) 
    \FSM_sequential_state_reg_reg[1] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\FSM_sequential_state_reg[1]_i_1__0_n_0 ),
        .Q(state_reg[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \b_reg[0]_i_1 
       (.I0(\b_reg_reg_n_0_[1] ),
        .I1(state_reg[1]),
        .I2(\b_reg_reg[7]_0 [0]),
        .O(b_next[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \b_reg[1]_i_1 
       (.I0(\b_reg_reg_n_0_[2] ),
        .I1(state_reg[1]),
        .I2(\b_reg_reg[7]_0 [1]),
        .O(b_next[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \b_reg[2]_i_1 
       (.I0(\b_reg_reg_n_0_[3] ),
        .I1(state_reg[1]),
        .I2(\b_reg_reg[7]_0 [2]),
        .O(b_next[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \b_reg[3]_i_1 
       (.I0(\b_reg_reg_n_0_[4] ),
        .I1(state_reg[1]),
        .I2(\b_reg_reg[7]_0 [3]),
        .O(b_next[3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \b_reg[4]_i_1 
       (.I0(\b_reg_reg_n_0_[5] ),
        .I1(state_reg[1]),
        .I2(\b_reg_reg[7]_0 [4]),
        .O(b_next[4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \b_reg[5]_i_1 
       (.I0(\b_reg_reg_n_0_[6] ),
        .I1(state_reg[1]),
        .I2(\b_reg_reg[7]_0 [5]),
        .O(b_next[5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \b_reg[6]_i_1 
       (.I0(\b_reg_reg_n_0_[7] ),
        .I1(state_reg[1]),
        .I2(\b_reg_reg[7]_0 [6]),
        .O(b_next[6]));
  LUT5 #(
    .INIT(32'h000030AA)) 
    \b_reg[7]_i_1__0 
       (.I0(\b_reg_reg[0]_0 ),
        .I1(tx_done_tick_inferred_i_2_n_0),
        .I2(\FSM_sequential_state_reg_reg[1]_0 ),
        .I3(state_reg[1]),
        .I4(state_reg[0]),
        .O(b_next_0));
  LUT2 #(
    .INIT(4'h2)) 
    \b_reg[7]_i_2 
       (.I0(\b_reg_reg[7]_0 [7]),
        .I1(state_reg[1]),
        .O(\b_reg[7]_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[0] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next_0),
        .CLR(\n_reg_reg[0]_0 ),
        .D(b_next[0]),
        .Q(b_reg));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[1] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next_0),
        .CLR(\n_reg_reg[0]_0 ),
        .D(b_next[1]),
        .Q(\b_reg_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[2] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next_0),
        .CLR(\n_reg_reg[0]_0 ),
        .D(b_next[2]),
        .Q(\b_reg_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[3] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next_0),
        .CLR(\n_reg_reg[0]_0 ),
        .D(b_next[3]),
        .Q(\b_reg_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[4] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next_0),
        .CLR(\n_reg_reg[0]_0 ),
        .D(b_next[4]),
        .Q(\b_reg_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[5] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next_0),
        .CLR(\n_reg_reg[0]_0 ),
        .D(b_next[5]),
        .Q(\b_reg_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[6] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next_0),
        .CLR(\n_reg_reg[0]_0 ),
        .D(b_next[6]),
        .Q(\b_reg_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \b_reg_reg[7] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(b_next_0),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\b_reg[7]_i_2_n_0 ),
        .Q(\b_reg_reg_n_0_[7] ));
  LUT3 #(
    .INIT(8'h38)) 
    \n_reg[0]_i_1 
       (.I0(state_reg[1]),
        .I1(n_next),
        .I2(sel0__0[0]),
        .O(\n_reg[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h4F80)) 
    \n_reg[1]_i_1 
       (.I0(sel0__0[0]),
        .I1(state_reg[1]),
        .I2(n_next),
        .I3(sel0__0[1]),
        .O(\n_reg[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT5 #(
    .INIT(32'h2AFF8000)) 
    \n_reg[2]_i_1 
       (.I0(state_reg[1]),
        .I1(sel0__0[0]),
        .I2(sel0__0[1]),
        .I3(n_next),
        .I4(sel0__0[2]),
        .O(\n_reg[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h14000400)) 
    \n_reg[2]_i_2__0 
       (.I0(tx_done_tick_inferred_i_2_n_0),
        .I1(state_reg[0]),
        .I2(state_reg[1]),
        .I3(\FSM_sequential_state_reg_reg[1]_0 ),
        .I4(\FSM_sequential_state_reg[0]_i_2_n_0 ),
        .O(n_next));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[0] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\n_reg[0]_i_1_n_0 ),
        .Q(sel0__0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[1] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\n_reg[1]_i_1_n_0 ),
        .Q(sel0__0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \n_reg_reg[2] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\n_reg[2]_i_1_n_0 ),
        .Q(sel0__0[2]));
  LUT3 #(
    .INIT(8'h0E)) 
    \s_reg[0]_i_1__0 
       (.I0(state_reg[1]),
        .I1(state_reg[0]),
        .I2(s_reg[0]),
        .O(\s_reg[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'h0EE0)) 
    \s_reg[1]_i_1__0 
       (.I0(state_reg[0]),
        .I1(state_reg[1]),
        .I2(s_reg[1]),
        .I3(s_reg[0]),
        .O(\s_reg[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT5 #(
    .INIT(32'h0EE0E0E0)) 
    \s_reg[2]_i_1__0 
       (.I0(state_reg[0]),
        .I1(state_reg[1]),
        .I2(s_reg[2]),
        .I3(s_reg[0]),
        .I4(s_reg[1]),
        .O(\s_reg[2]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hF0E230E2)) 
    \s_reg[3]_i_1__0 
       (.I0(\b_reg_reg[0]_0 ),
        .I1(state_reg[1]),
        .I2(\FSM_sequential_state_reg_reg[1]_0 ),
        .I3(state_reg[0]),
        .I4(tx_done_tick_inferred_i_2_n_0),
        .O(s_next));
  LUT6 #(
    .INIT(64'h0EE0E0E0E0E0E0E0)) 
    \s_reg[3]_i_2__0 
       (.I0(state_reg[0]),
        .I1(state_reg[1]),
        .I2(s_reg[3]),
        .I3(s_reg[1]),
        .I4(s_reg[0]),
        .I5(s_reg[2]),
        .O(\s_reg[3]_i_2__0_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \s_reg_reg[0] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(s_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\s_reg[0]_i_1__0_n_0 ),
        .Q(s_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \s_reg_reg[1] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(s_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\s_reg[1]_i_1__0_n_0 ),
        .Q(s_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \s_reg_reg[2] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(s_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\s_reg[2]_i_1__0_n_0 ),
        .Q(s_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \s_reg_reg[3] 
       (.C(\n_reg_reg[2]_0 ),
        .CE(s_next),
        .CLR(\n_reg_reg[0]_0 ),
        .D(\s_reg[3]_i_2__0_n_0 ),
        .Q(s_reg[3]));
  LUT4 #(
    .INIT(16'h0080)) 
    tx_done_tick_inferred_i_1
       (.I0(\FSM_sequential_state_reg_reg[1]_0 ),
        .I1(state_reg[1]),
        .I2(state_reg[0]),
        .I3(tx_done_tick_inferred_i_2_n_0),
        .O(out));
  LUT4 #(
    .INIT(16'h7FFF)) 
    tx_done_tick_inferred_i_2
       (.I0(s_reg[2]),
        .I1(s_reg[0]),
        .I2(s_reg[1]),
        .I3(s_reg[3]),
        .O(tx_done_tick_inferred_i_2_n_0));
  LUT3 #(
    .INIT(8'hCB)) 
    tx_reg_i_1
       (.I0(b_reg),
        .I1(state_reg[1]),
        .I2(state_reg[0]),
        .O(tx_next));
  FDPE #(
    .INIT(1'b1)) 
    tx_reg_reg
       (.C(\n_reg_reg[2]_0 ),
        .CE(1'b1),
        .D(tx_next),
        .PRE(\n_reg_reg[0]_0 ),
        .Q(tx_reg_reg_0));
endmodule

(* ORIG_REF_NAME = "ALU" *) 
module cpu_ALU
   (LO,
    \Using_FPGA.Native ,
    raw_Data_Addr,
    carry_In,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ,
    Unsigned_Op,
    op2_C,
    alu_Op,
    Op1_Logic,
    S,
    EX_Op2,
    EX_Op1,
    \Using_FPGA.Native_I2 ,
    \Using_FPGA.Native_I2_0 ,
    Op2,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output LO;
  output [29:0]\Using_FPGA.Native ;
  output [1:0]raw_Data_Addr;
  input carry_In;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  input Unsigned_Op;
  input [27:0]op2_C;
  input [0:1]alu_Op;
  input Op1_Logic;
  input S;
  input EX_Op2;
  input EX_Op1;
  input \Using_FPGA.Native_I2 ;
  input \Using_FPGA.Native_I2_0 ;
  input Op2;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  wire EX_Op1;
  wire EX_Op2;
  wire Op1_Logic;
  wire Op2;
  wire S;
  wire Unsigned_Op;
  wire [29:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_I2 ;
  wire \Using_FPGA.Native_I2_0 ;
  wire [0:1]alu_Op;
  wire alu_carry_11;
  wire alu_carry_15;
  wire alu_carry_19;
  wire alu_carry_23;
  wire alu_carry_27;
  wire alu_carry_3;
  wire alu_carry_31;
  wire alu_carry_7;
  wire carry_In;
  wire control_carry;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_100;
  wire lopt_101;
  wire lopt_11;
  wire lopt_13;
  wire lopt_14;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire \^lopt_2 ;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_25;
  wire lopt_26;
  wire lopt_28;
  wire lopt_29;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_37;
  wire lopt_38;
  wire \^lopt_4 ;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_49;
  wire \^lopt_5 ;
  wire lopt_50;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_61;
  wire lopt_62;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_73;
  wire lopt_74;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_85;
  wire lopt_86;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire lopt_98;
  wire lopt_99;
  wire [27:0]op2_C;
  wire [1:0]raw_Data_Addr;
  wire \NLW_No_Carry_Decoding.CarryIn_MUXCY_CI_UNCONNECTED ;
  wire \NLW_No_Carry_Decoding.CarryIn_MUXCY_lopt_UNCONNECTED ;
  wire \NLW_No_Carry_Decoding.CarryIn_MUXCY_lopt_3_UNCONNECTED ;
  wire \NLW_No_Carry_Decoding.alu_carry_select_LUT_carry_In_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[0].ALU_Bit_I1_Using_FPGA.Native_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[10].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[10].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[10].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[11].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[11].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[11].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[12].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[12].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[12].ALU_Bit_I1_lopt_3_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[13].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[14].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[14].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[14].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[15].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[15].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[15].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[16].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[16].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[16].ALU_Bit_I1_lopt_3_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[17].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[18].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[18].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[18].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[19].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[19].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[19].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[1].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[20].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[20].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[20].ALU_Bit_I1_lopt_3_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[21].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[22].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[22].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[22].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[23].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[23].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[23].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[24].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[24].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[24].ALU_Bit_I1_lopt_3_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[25].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[26].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[26].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[26].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[27].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[27].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[27].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[28].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[28].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[28].ALU_Bit_I1_lopt_3_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[29].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[2].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[2].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[2].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[30].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[30].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[30].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[31].ALU_Bit_I1_EX_CarryIn_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[31].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[31].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[3].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[3].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[3].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[4].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[4].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[4].ALU_Bit_I1_lopt_3_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[5].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[6].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[6].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[6].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[7].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[7].ALU_Bit_I1_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[7].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[8].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[8].ALU_Bit_I1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[8].ALU_Bit_I1_lopt_3_UNCONNECTED ;
  wire \NLW_Using_FPGA.ALL_Bits[9].ALU_Bit_I1_EX_CarryIn_UNCONNECTED ;

  assign lopt = lopt_96;
  assign lopt_100 = lopt_4;
  assign lopt_101 = lopt_5;
  assign lopt_3 = lopt_99;
  assign lopt_97 = lopt_1;
  assign lopt_98 = lopt_2;
  cpu_microblaze_v11_0_0_MB_MUXCY_734 \No_Carry_Decoding.CarryIn_MUXCY 
       (.CI(\NLW_No_Carry_Decoding.CarryIn_MUXCY_CI_UNCONNECTED ),
        .carry_In(carry_In),
        .control_carry(control_carry),
        .lopt(\NLW_No_Carry_Decoding.CarryIn_MUXCY_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\NLW_No_Carry_Decoding.CarryIn_MUXCY_lopt_3_UNCONNECTED ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(\^lopt_5 ),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  cpu_microblaze_v11_0_0_MB_LUT3__parameterized3 \No_Carry_Decoding.alu_carry_select_LUT 
       (.carry_In(\NLW_No_Carry_Decoding.alu_carry_select_LUT_carry_In_UNCONNECTED ),
        .control_carry(control_carry));
  cpu_ALU_Bit__parameterized2 \Using_FPGA.ALL_Bits[0].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ),
        .LO(alu_carry_31),
        .Op1_Logic(Op1_Logic),
        .S(S),
        .Unsigned_Op(Unsigned_Op),
        .\Using_FPGA.Native (\NLW_Using_FPGA.ALL_Bits[0].ALU_Bit_I1_Using_FPGA.Native_UNCONNECTED ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native [29]),
        .alu_Op(alu_Op),
        .lopt(lopt_96),
        .lopt_1(lopt_97),
        .lopt_2(lopt_98),
        .lopt_3(lopt_99),
        .lopt_4(lopt_100),
        .lopt_5(lopt_101),
        .op2_C(op2_C[27]));
  cpu_ALU_Bit \Using_FPGA.ALL_Bits[10].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[10].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[10].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [19]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[10].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_64),
        .lopt_2(lopt_65),
        .lopt_3(lopt_70),
        .op2_C(op2_C[17]));
  cpu_ALU_Bit_735 \Using_FPGA.ALL_Bits[11].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[11].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[11].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [18]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[11].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_61),
        .lopt_2(lopt_62),
        .lopt_3(lopt_69),
        .op2_C(op2_C[16]));
  cpu_ALU_Bit_736 \Using_FPGA.ALL_Bits[12].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[12].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(alu_carry_19),
        .\Using_FPGA.Native (\Using_FPGA.Native [17]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[12].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_61),
        .lopt_10(lopt_70),
        .lopt_11(lopt_71),
        .lopt_2(lopt_62),
        .lopt_3(\NLW_Using_FPGA.ALL_Bits[12].ALU_Bit_I1_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_64),
        .lopt_5(lopt_65),
        .lopt_6(lopt_66),
        .lopt_7(lopt_67),
        .lopt_8(lopt_68),
        .lopt_9(lopt_69),
        .op2_C(op2_C[15]));
  cpu_ALU_Bit_737 \Using_FPGA.ALL_Bits[13].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ),
        .EX_CarryOut(alu_carry_19),
        .LO(\NLW_Using_FPGA.ALL_Bits[13].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [16]),
        .alu_Op(alu_Op),
        .lopt(lopt_54),
        .lopt_1(lopt_55),
        .lopt_2(lopt_56),
        .lopt_3(lopt_59),
        .op2_C(op2_C[14]));
  cpu_ALU_Bit_738 \Using_FPGA.ALL_Bits[14].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[14].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[14].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [15]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[14].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_52),
        .lopt_2(lopt_53),
        .lopt_3(lopt_58),
        .op2_C(op2_C[13]));
  cpu_ALU_Bit_739 \Using_FPGA.ALL_Bits[15].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[15].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[15].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [14]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[15].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_49),
        .lopt_2(lopt_50),
        .lopt_3(lopt_57),
        .op2_C(op2_C[12]));
  cpu_ALU_Bit_740 \Using_FPGA.ALL_Bits[16].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[16].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(alu_carry_15),
        .\Using_FPGA.Native (\Using_FPGA.Native [13]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[16].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_49),
        .lopt_10(lopt_58),
        .lopt_11(lopt_59),
        .lopt_2(lopt_50),
        .lopt_3(\NLW_Using_FPGA.ALL_Bits[16].ALU_Bit_I1_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_52),
        .lopt_5(lopt_53),
        .lopt_6(lopt_54),
        .lopt_7(lopt_55),
        .lopt_8(lopt_56),
        .lopt_9(lopt_57),
        .op2_C(op2_C[11]));
  cpu_ALU_Bit_741 \Using_FPGA.ALL_Bits[17].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ),
        .EX_CarryOut(alu_carry_15),
        .LO(\NLW_Using_FPGA.ALL_Bits[17].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [12]),
        .alu_Op(alu_Op),
        .lopt(lopt_42),
        .lopt_1(lopt_43),
        .lopt_2(lopt_44),
        .lopt_3(lopt_47),
        .op2_C(op2_C[10]));
  cpu_ALU_Bit_742 \Using_FPGA.ALL_Bits[18].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[18].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[18].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [11]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[18].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_40),
        .lopt_2(lopt_41),
        .lopt_3(lopt_46),
        .op2_C(op2_C[9]));
  cpu_ALU_Bit_743 \Using_FPGA.ALL_Bits[19].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[19].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[19].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [10]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[19].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_37),
        .lopt_2(lopt_38),
        .lopt_3(lopt_45),
        .op2_C(op2_C[8]));
  cpu_ALU_Bit_744 \Using_FPGA.ALL_Bits[1].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ),
        .EX_CarryOut(alu_carry_31),
        .LO(\NLW_Using_FPGA.ALL_Bits[1].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [28]),
        .alu_Op(alu_Op),
        .lopt(lopt_90),
        .lopt_1(lopt_91),
        .lopt_2(lopt_92),
        .lopt_3(lopt_95),
        .op2_C(op2_C[26]));
  cpu_ALU_Bit_745 \Using_FPGA.ALL_Bits[20].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[20].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(alu_carry_11),
        .\Using_FPGA.Native (\Using_FPGA.Native [9]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[20].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_37),
        .lopt_10(lopt_46),
        .lopt_11(lopt_47),
        .lopt_2(lopt_38),
        .lopt_3(\NLW_Using_FPGA.ALL_Bits[20].ALU_Bit_I1_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_40),
        .lopt_5(lopt_41),
        .lopt_6(lopt_42),
        .lopt_7(lopt_43),
        .lopt_8(lopt_44),
        .lopt_9(lopt_45),
        .op2_C(op2_C[7]));
  cpu_ALU_Bit_746 \Using_FPGA.ALL_Bits[21].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ),
        .EX_CarryOut(alu_carry_11),
        .LO(\NLW_Using_FPGA.ALL_Bits[21].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [8]),
        .alu_Op(alu_Op),
        .lopt(lopt_30),
        .lopt_1(lopt_31),
        .lopt_2(lopt_32),
        .lopt_3(lopt_35),
        .op2_C(op2_C[6]));
  cpu_ALU_Bit_747 \Using_FPGA.ALL_Bits[22].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[22].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[22].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [7]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[22].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_28),
        .lopt_2(lopt_29),
        .lopt_3(lopt_34),
        .op2_C(op2_C[5]));
  cpu_ALU_Bit_748 \Using_FPGA.ALL_Bits[23].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[23].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[23].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [6]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[23].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_25),
        .lopt_2(lopt_26),
        .lopt_3(lopt_33),
        .op2_C(op2_C[4]));
  cpu_ALU_Bit_749 \Using_FPGA.ALL_Bits[24].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[24].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(alu_carry_7),
        .\Using_FPGA.Native (\Using_FPGA.Native [5]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[24].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_25),
        .lopt_10(lopt_34),
        .lopt_11(lopt_35),
        .lopt_2(lopt_26),
        .lopt_3(\NLW_Using_FPGA.ALL_Bits[24].ALU_Bit_I1_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_28),
        .lopt_5(lopt_29),
        .lopt_6(lopt_30),
        .lopt_7(lopt_31),
        .lopt_8(lopt_32),
        .lopt_9(lopt_33),
        .op2_C(op2_C[3]));
  cpu_ALU_Bit_750 \Using_FPGA.ALL_Bits[25].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ),
        .EX_CarryOut(alu_carry_7),
        .LO(\NLW_Using_FPGA.ALL_Bits[25].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [4]),
        .alu_Op(alu_Op),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(lopt_20),
        .lopt_3(lopt_23),
        .op2_C(op2_C[2]));
  cpu_ALU_Bit_751 \Using_FPGA.ALL_Bits[26].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[26].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[26].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [3]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[26].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_16),
        .lopt_2(lopt_17),
        .lopt_3(lopt_22),
        .op2_C(op2_C[1]));
  cpu_ALU_Bit_752 \Using_FPGA.ALL_Bits[27].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[27].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[27].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [2]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[27].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14),
        .lopt_3(lopt_21),
        .op2_C(op2_C[0]));
  cpu_ALU_Bit_753 \Using_FPGA.ALL_Bits[28].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[28].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(alu_carry_3),
        .\Using_FPGA.Native (\Using_FPGA.Native [1]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[28].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_13),
        .lopt_10(lopt_22),
        .lopt_11(lopt_23),
        .lopt_2(lopt_14),
        .lopt_3(\NLW_Using_FPGA.ALL_Bits[28].ALU_Bit_I1_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_16),
        .lopt_5(lopt_17),
        .lopt_6(lopt_18),
        .lopt_7(lopt_19),
        .lopt_8(lopt_20),
        .lopt_9(lopt_21));
  cpu_ALU_Bit_754 \Using_FPGA.ALL_Bits[29].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ),
        .EX_CarryOut(alu_carry_3),
        .LO(\NLW_Using_FPGA.ALL_Bits[29].ALU_Bit_I1_LO_UNCONNECTED ),
        .Op2(Op2),
        .\Using_FPGA.Native (\Using_FPGA.Native [0]),
        .alu_Op(alu_Op),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_11));
  cpu_ALU_Bit_755 \Using_FPGA.ALL_Bits[2].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[2].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[2].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [27]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[2].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_88),
        .lopt_2(lopt_89),
        .lopt_3(lopt_94),
        .op2_C(op2_C[25]));
  cpu_ALU_Bit_756 \Using_FPGA.ALL_Bits[30].ALU_Bit_I1 
       (.EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[30].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[30].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native_I2 (\Using_FPGA.Native_I2 ),
        .\Using_FPGA.Native_I2_0 (\Using_FPGA.Native_I2_0 ),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[30].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_4 ),
        .lopt_2(\^lopt_5 ),
        .lopt_3(lopt_10),
        .raw_Data_Addr(raw_Data_Addr[1]));
  cpu_ALU_Bit_757 \Using_FPGA.ALL_Bits[31].ALU_Bit_I1 
       (.EX_CarryIn(\NLW_Using_FPGA.ALL_Bits[31].ALU_Bit_I1_EX_CarryIn_UNCONNECTED ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[31].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .EX_Op1(EX_Op1),
        .EX_Op2(EX_Op2),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[31].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(lopt_9),
        .raw_Data_Addr(raw_Data_Addr[0]));
  cpu_ALU_Bit_758 \Using_FPGA.ALL_Bits[3].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[3].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[3].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [26]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[3].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_85),
        .lopt_2(lopt_86),
        .lopt_3(lopt_93),
        .op2_C(op2_C[24]));
  cpu_ALU_Bit_759 \Using_FPGA.ALL_Bits[4].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[4].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(alu_carry_27),
        .\Using_FPGA.Native (\Using_FPGA.Native [25]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[4].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_85),
        .lopt_10(lopt_94),
        .lopt_11(lopt_95),
        .lopt_2(lopt_86),
        .lopt_3(\NLW_Using_FPGA.ALL_Bits[4].ALU_Bit_I1_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_88),
        .lopt_5(lopt_89),
        .lopt_6(lopt_90),
        .lopt_7(lopt_91),
        .lopt_8(lopt_92),
        .lopt_9(lopt_93),
        .op2_C(op2_C[23]));
  cpu_ALU_Bit_760 \Using_FPGA.ALL_Bits[5].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ),
        .EX_CarryOut(alu_carry_27),
        .LO(\NLW_Using_FPGA.ALL_Bits[5].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [24]),
        .alu_Op(alu_Op),
        .lopt(lopt_78),
        .lopt_1(lopt_79),
        .lopt_2(lopt_80),
        .lopt_3(lopt_83),
        .op2_C(op2_C[22]));
  cpu_ALU_Bit_761 \Using_FPGA.ALL_Bits[6].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[6].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[6].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [23]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[6].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_76),
        .lopt_2(lopt_77),
        .lopt_3(lopt_82),
        .op2_C(op2_C[21]));
  cpu_ALU_Bit_762 \Using_FPGA.ALL_Bits[7].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[7].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Using_FPGA.ALL_Bits[7].ALU_Bit_I1_LO_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native [22]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[7].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_73),
        .lopt_2(lopt_74),
        .lopt_3(lopt_81),
        .op2_C(op2_C[20]));
  cpu_ALU_Bit_763 \Using_FPGA.ALL_Bits[8].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ),
        .EX_CarryOut(\NLW_Using_FPGA.ALL_Bits[8].ALU_Bit_I1_EX_CarryOut_UNCONNECTED ),
        .LO(alu_carry_23),
        .\Using_FPGA.Native (\Using_FPGA.Native [21]),
        .alu_Op(alu_Op),
        .lopt(\NLW_Using_FPGA.ALL_Bits[8].ALU_Bit_I1_lopt_UNCONNECTED ),
        .lopt_1(lopt_73),
        .lopt_10(lopt_82),
        .lopt_11(lopt_83),
        .lopt_2(lopt_74),
        .lopt_3(\NLW_Using_FPGA.ALL_Bits[8].ALU_Bit_I1_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_76),
        .lopt_5(lopt_77),
        .lopt_6(lopt_78),
        .lopt_7(lopt_79),
        .lopt_8(lopt_80),
        .lopt_9(lopt_81),
        .op2_C(op2_C[19]));
  cpu_ALU_Bit_764 \Using_FPGA.ALL_Bits[9].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ),
        .EX_CarryIn(\NLW_Using_FPGA.ALL_Bits[9].ALU_Bit_I1_EX_CarryIn_UNCONNECTED ),
        .EX_CarryOut(alu_carry_23),
        .\Using_FPGA.Native (\Using_FPGA.Native [20]),
        .alu_Op(alu_Op),
        .lopt(lopt_66),
        .lopt_1(lopt_67),
        .lopt_2(lopt_68),
        .lopt_3(lopt_71),
        .op2_C(op2_C[18]));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_824 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_825 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_735
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_822 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_823 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_736
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ;

  cpu_MB_LUT6_2__parameterized2_820 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_821 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_737
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_818 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_819 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(EX_CarryOut),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_738
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_816 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_817 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_739
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_814 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_815 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_740
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ;

  cpu_MB_LUT6_2__parameterized2_812 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_813 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_741
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_810 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_811 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(EX_CarryOut),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_742
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_808 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_809 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_743
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_806 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_807 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_744
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_804 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_805 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(EX_CarryOut),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_745
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ;

  cpu_MB_LUT6_2__parameterized2_802 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_803 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_746
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_800 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_801 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(EX_CarryOut),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_747
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_798 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_799 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_748
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_796 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_797 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_749
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ;

  cpu_MB_LUT6_2__parameterized2_794 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_795 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_750
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_792 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_793 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(EX_CarryOut),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_751
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_790 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_791 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_752
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_788 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_789 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_753
   (EX_CarryOut,
    \Using_FPGA.Native ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ;

  cpu_MB_LUT6_2__parameterized2_786 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_787 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_754
   (EX_CarryOut,
    \Using_FPGA.Native ,
    Op2,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input Op2;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ;
  wire EX_CarryOut;
  wire Op2;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_784 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ),
        .DI(op2_is_1),
        .Op2(Op2),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_785 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(EX_CarryOut),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_755
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_782 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_783 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_756
   (EX_CarryOut,
    raw_Data_Addr,
    \Using_FPGA.Native_I2 ,
    alu_Op,
    \Using_FPGA.Native_I2_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]raw_Data_Addr;
  input \Using_FPGA.Native_I2 ;
  input [0:1]alu_Op;
  input \Using_FPGA.Native_I2_0 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Using_FPGA.Native_I2 ;
  wire \Using_FPGA.Native_I2_0 ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire op2_is_1;
  wire [0:0]raw_Data_Addr;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_780 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .S(alu_AddSub),
        .\Using_FPGA.Native_I2 (\Using_FPGA.Native_I2 ),
        .\Using_FPGA.Native_I2_0 (\Using_FPGA.Native_I2_0 ),
        .alu_Op(alu_Op));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_781 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ),
        .raw_Data_Addr(raw_Data_Addr));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_757
   (EX_CarryOut,
    raw_Data_Addr,
    EX_Op2,
    alu_Op,
    EX_Op1,
    EX_CarryIn,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]raw_Data_Addr;
  input EX_Op2;
  input [0:1]alu_Op;
  input EX_Op1;
  input EX_CarryIn;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_Op1;
  wire EX_Op2;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire op2_is_1;
  wire [0:0]raw_Data_Addr;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryIn_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_778 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Op1(EX_Op1),
        .EX_Op2(EX_Op2),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_779 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryIn(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryIn_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ),
        .raw_Data_Addr(raw_Data_Addr));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_758
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_776 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_777 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_759
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ;

  cpu_MB_LUT6_2__parameterized2_774 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_775 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_760
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_772 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_773 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(EX_CarryOut),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_761
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_770 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_771 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_762
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2_768 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_769 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(\NLW_Not_Last_Bit.MUXCY_XOR_I_LO_UNCONNECTED ),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_763
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ;

  cpu_MB_LUT6_2__parameterized2_766 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_767 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryOut_UNCONNECTED ),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(\NLW_Not_Last_Bit.MUXCY_XOR_I_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit_764
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ,
    EX_CarryIn,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  input EX_CarryIn;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryIn_UNCONNECTED ;
  wire \NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  cpu_MB_LUT6_2__parameterized2 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_765 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(\NLW_Not_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .EX_CarryIn(\NLW_Not_Last_Bit.MUXCY_XOR_I_EX_CarryIn_UNCONNECTED ),
        .EX_CarryOut(EX_CarryOut),
        .S(\NLW_Not_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module cpu_ALU_Bit__parameterized2
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ,
    Unsigned_Op,
    LO,
    op2_C,
    alu_Op,
    Op1_Logic,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  input Unsigned_Op;
  input LO;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input Op1_Logic;
  input S;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  wire LO;
  wire Op1_Logic;
  wire S;
  wire Unsigned_Op;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire alu_AddSub;
  wire alu_AddSub_1;
  wire [0:1]alu_Op;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire [0:0]op2_C;
  wire op2_is_1;
  wire [0:0]\NLW_Last_Bit.I_ALU_LUT_2_alu_Op_UNCONNECTED ;
  wire \NLW_Last_Bit.MUXCY_XOR_I_CI_UNCONNECTED ;
  wire \NLW_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ;
  wire \NLW_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Last_Bit.MUXCY_XOR_I_Using_FPGA.Native_UNCONNECTED ;
  wire \NLW_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ;
  wire \NLW_Last_Bit.Pre_MUXCY_I_CI_UNCONNECTED ;
  wire \NLW_Last_Bit.Pre_MUXCY_I_lopt_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  cpu_MB_LUT4__parameterized13 \Last_Bit.I_ALU_LUT_2 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] (S),
        .S(alu_AddSub),
        .alu_AddSub_1(alu_AddSub_1),
        .alu_Op(\NLW_Last_Bit.I_ALU_LUT_2_alu_Op_UNCONNECTED [0]),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_LUT6 \Last_Bit.I_ALU_LUT_V5 
       (.Op1_Logic(Op1_Logic),
        .alu_AddSub_1(alu_AddSub_1),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MULT_AND_826 \Last_Bit.MULT_AND_I 
       (.DI(op2_is_1),
        .alu_Op(alu_Op[0]),
        .op2_C(op2_C));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_827 \Last_Bit.MUXCY_XOR_I 
       (.CI(\NLW_Last_Bit.MUXCY_XOR_I_CI_UNCONNECTED ),
        .DI(\NLW_Last_Bit.MUXCY_XOR_I_DI_UNCONNECTED ),
        .S(\NLW_Last_Bit.MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\NLW_Last_Bit.MUXCY_XOR_I_Using_FPGA.Native_UNCONNECTED ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(\NLW_Last_Bit.MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_7));
  cpu_microblaze_v11_0_0_MB_MUXCY_828 \Last_Bit.Pre_MUXCY_I 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ),
        .CI(\NLW_Last_Bit.Pre_MUXCY_I_CI_UNCONNECTED ),
        .LO(LO),
        .Unsigned_Op(Unsigned_Op),
        .lopt(\NLW_Last_Bit.Pre_MUXCY_I_lopt_UNCONNECTED ),
        .lopt_1(op2_is_1),
        .lopt_2(alu_AddSub),
        .lopt_3(\^lopt_1 ),
        .lopt_4(\^lopt_2 ),
        .lopt_5(\^lopt_3 ),
        .lopt_6(\^lopt_4 ),
        .lopt_7(\^lopt_5 ),
        .lopt_8(lopt_6),
        .lopt_9(lopt_7));
endmodule

(* ORIG_REF_NAME = "Byte_Doublet_Handle" *) 
module cpu_Byte_Doublet_Handle
   (D,
    O,
    extend_Data_Read,
    EX_Op2,
    Op1_Low,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] ,
    isbyte,
    isdoublet,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ,
    \Using_FPGA.Native ,
    DReady,
    Q,
    Data_Read);
  output [29:0]D;
  output O;
  output [7:0]extend_Data_Read;
  input EX_Op2;
  input [1:0]Op1_Low;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] ;
  input isbyte;
  input isdoublet;
  input [0:31]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  input [7:0]\Using_FPGA.Native ;
  input DReady;
  input [15:0]Q;
  input [15:0]Data_Read;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] ;
  wire [0:31]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  wire [29:0]D;
  wire DReady;
  wire [15:0]Data_Read;
  wire EX_Op2;
  wire O;
  wire [1:0]Op1_Low;
  wire [15:0]Q;
  wire \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_RIGHT_I_n_0 ;
  wire [7:0]\Using_FPGA.Native ;
  wire byte_selects_0;
  wire byte_selects_1;
  wire [7:0]extend_Data_Read;
  wire isbyte;
  wire isdoublet;
  wire [1:0]sel_Write_Mux_MSB;
  wire [15:8]\NLW_Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_LEFT_I_Q_UNCONNECTED ;

  cpu_MB_LUT6_2__parameterized8 \Not_Using_Long.BYTE_0_1_I 
       (.D(D[1:0]),
        .byte_selects_0(byte_selects_0),
        .byte_selects_1(byte_selects_1),
        .isbyte(isbyte),
        .isdoublet(isdoublet));
  cpu_MB_LUT6_2__parameterized10 \Not_Using_Long.BYTE_2_3_I 
       (.D(D[3:2]),
        .byte_selects_0(byte_selects_0),
        .byte_selects_1(byte_selects_1),
        .isbyte(isbyte),
        .isdoublet(isdoublet));
  cpu_MB_LUT6_2__parameterized6 \Not_Using_Long.byte_selects_i_INST 
       (.\Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[2] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] ),
        .EX_Op2(EX_Op2),
        .Op1_Low(Op1_Low),
        .byte_selects_0(byte_selects_0),
        .byte_selects_1(byte_selects_1));
  cpu_mux4_8 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.EXT_DATA_WRITE_MUX_MSB_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ),
        .D(D[27:12]),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  cpu_MB_LUT6_2__parameterized16_829 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.GEN4_LOOP[0].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [16],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [20],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [24],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [28]}),
        .D({D[11],D[7]}),
        .isbyte(isbyte));
  cpu_MB_LUT6_2__parameterized16_830 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.GEN4_LOOP[1].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [17],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [21],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [25],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [29]}),
        .D({D[10],D[6]}),
        .isbyte(isbyte));
  cpu_MB_LUT6_2__parameterized16_831 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.GEN4_LOOP[2].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [18],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [22],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [26],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [30]}),
        .D({D[9],D[5]}),
        .isbyte(isbyte));
  cpu_MB_LUT6_2__parameterized16_832 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.GEN4_LOOP[3].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [19],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [23],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [27],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [31]}),
        .D({D[8],D[4]}),
        .isbyte(isbyte));
  cpu_microblaze_v11_0_0_MB_LUT3__parameterized4 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_LEFT_I 
       (.DReady(DReady),
        .Data_Read(Data_Read),
        .Q({\NLW_Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_LEFT_I_Q_UNCONNECTED [15:8],Q[7:0]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_RIGHT_I_n_0 ),
        .byte_i_reg(O),
        .byte_selects_1(byte_selects_1),
        .extend_Data_Read(extend_Data_Read),
        .isbyte(isbyte),
        .isdoublet(isdoublet));
  cpu_MB_LUT2 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_RIGHT_I 
       (.byte_i_reg(\Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_RIGHT_I_n_0 ),
        .byte_selects_0(byte_selects_0),
        .isbyte(isbyte));
  cpu_MB_LUT6_2__parameterized14 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.WRITE_MSB_SEL_I 
       (.isbyte(isbyte),
        .isdoublet(isdoublet),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
endmodule

(* ORIG_REF_NAME = "DAXI_interface" *) 
module cpu_DAXI_interface
   (MEM_DAXI_Data_Strobe,
    D,
    mem_access_completed_reg_0,
    DReady0_out,
    extend_Data_Read,
    Q,
    Data_Read0_out,
    sync_reset,
    Clk,
    M_AXI_DP_RVALID,
    M_AXI_DP_BVALID,
    active_access_reg_0,
    M_AXI_DP_WVALID_i_reg_0,
    M_AXI_DP_WREADY,
    M_AXI_DP_AWREADY,
    M_AXI_DP_ARREADY,
    DReady,
    of_PipeRun,
    DWait,
    mem_access,
    Data_Read,
    O,
    M_AXI_DP_RDATA,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 );
  output MEM_DAXI_Data_Strobe;
  output [70:0]D;
  output mem_access_completed_reg_0;
  output DReady0_out;
  output [7:0]extend_Data_Read;
  output [15:0]Q;
  output [15:0]Data_Read0_out;
  input sync_reset;
  input Clk;
  input M_AXI_DP_RVALID;
  input M_AXI_DP_BVALID;
  input active_access_reg_0;
  input [0:0]M_AXI_DP_WVALID_i_reg_0;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_ARREADY;
  input DReady;
  input of_PipeRun;
  input DWait;
  input mem_access;
  input [23:0]Data_Read;
  input O;
  input [31:0]M_AXI_DP_RDATA;
  input [67:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 ;

  wire [67:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 ;
  wire Clk;
  wire [70:0]D;
  wire DReady;
  wire DReady0_out;
  wire DWait;
  wire [23:0]Data_Read;
  wire [15:0]Data_Read0_out;
  wire MEM_DAXI_Data_Strobe;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID_i_i_1_n_0;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID_i1;
  wire M_AXI_DP_AWVALID_i_i_1_n_0;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire M_AXI_DP_WREADY;
  wire M_AXI_DP_WVALID_i_i_1_n_0;
  wire [0:0]M_AXI_DP_WVALID_i_reg_0;
  wire O;
  wire [15:0]Q;
  wire active_access;
  wire active_access_d1;
  wire active_access_i_1_n_0;
  wire active_access_reg_0;
  wire [7:0]extend_Data_Read;
  wire mem_access;
  wire mem_access_completed0;
  wire mem_access_completed_reg_0;
  wire of_PipeRun;
  wire sync_reset;

  LUT4 #(
    .INIT(16'h0004)) 
    \Add_Output_DFFs.M_AXI_DP_AWADDR[31]_i_1 
       (.I0(DWait),
        .I1(mem_access),
        .I2(DReady),
        .I3(active_access_d1),
        .O(M_AXI_DP_AWVALID_i1));
  FDRE #(
    .INIT(1'b0)) 
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] 
       (.C(Clk),
        .CE(M_AXI_DP_AWVALID_i1),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [38]),
        .Q(D[41]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] 
       (.C(Clk),
        .CE(M_AXI_DP_AWVALID_i1),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [39]),
        .Q(D[42]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] 
       (.C(Clk),
        .CE(M_AXI_DP_AWVALID_i1),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [4]),
        .Q(D[6]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] 
       (.C(Clk),
        .CE(M_AXI_DP_AWVALID_i1),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [5]),
        .Q(D[7]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] 
       (.C(Clk),
        .CE(M_AXI_DP_AWVALID_i1),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [6]),
        .Q(D[8]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] 
       (.C(Clk),
        .CE(M_AXI_DP_AWVALID_i1),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [7]),
        .Q(D[9]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] 
       (.C(Clk),
        .CE(M_AXI_DP_AWVALID_i1),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [8]),
        .Q(D[10]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] 
       (.C(Clk),
        .CE(M_AXI_DP_AWVALID_i1),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [9]),
        .Q(D[11]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] 
       (.C(Clk),
        .CE(M_AXI_DP_AWVALID_i1),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [10]),
        .Q(D[12]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] 
       (.C(Clk),
        .CE(M_AXI_DP_AWVALID_i1),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [11]),
        .Q(D[13]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h00551010)) 
    M_AXI_DP_ARVALID_i_i_1
       (.I0(sync_reset),
        .I1(M_AXI_DP_WVALID_i_reg_0),
        .I2(M_AXI_DP_AWVALID_i1),
        .I3(M_AXI_DP_ARREADY),
        .I4(D[0]),
        .O(M_AXI_DP_ARVALID_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    M_AXI_DP_ARVALID_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARVALID_i_i_1_n_0),
        .Q(D[0]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00554040)) 
    M_AXI_DP_AWVALID_i_i_1
       (.I0(sync_reset),
        .I1(M_AXI_DP_AWVALID_i1),
        .I2(M_AXI_DP_WVALID_i_reg_0),
        .I3(M_AXI_DP_AWREADY),
        .I4(D[38]),
        .O(M_AXI_DP_AWVALID_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    M_AXI_DP_AWVALID_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWVALID_i_i_1_n_0),
        .Q(D[38]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00554040)) 
    M_AXI_DP_WVALID_i_i_1
       (.I0(sync_reset),
        .I1(M_AXI_DP_AWVALID_i1),
        .I2(M_AXI_DP_WVALID_i_reg_0),
        .I3(M_AXI_DP_WREADY),
        .I4(D[1]),
        .O(M_AXI_DP_WVALID_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    M_AXI_DP_WVALID_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WVALID_i_i_1_n_0),
        .Q(D[1]),
        .R(1'b0));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__100 
       (.I0(Data_Read[14]),
        .I1(DReady),
        .O(Data_Read0_out[6]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__101 
       (.I0(Data_Read[13]),
        .I1(DReady),
        .O(Data_Read0_out[5]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__102 
       (.I0(Data_Read[12]),
        .I1(DReady),
        .O(Data_Read0_out[4]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__103 
       (.I0(Data_Read[11]),
        .I1(DReady),
        .O(Data_Read0_out[3]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__104 
       (.I0(Data_Read[10]),
        .I1(DReady),
        .O(Data_Read0_out[2]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__105 
       (.I0(Data_Read[9]),
        .I1(DReady),
        .O(Data_Read0_out[1]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'hCA00)) 
    \Using_FPGA.Native_i_1__77 
       (.I0(Data_Read[23]),
        .I1(Data_Read[7]),
        .I2(O),
        .I3(DReady),
        .O(extend_Data_Read[7]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__78 
       (.I0(Data_Read[23]),
        .I1(DReady),
        .O(Data_Read0_out[15]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__8 
       (.I0(MEM_DAXI_Data_Strobe),
        .I1(DReady),
        .O(DReady0_out));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'hCA00)) 
    \Using_FPGA.Native_i_1__80 
       (.I0(Data_Read[22]),
        .I1(Data_Read[6]),
        .I2(O),
        .I3(DReady),
        .O(extend_Data_Read[6]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__81 
       (.I0(Data_Read[22]),
        .I1(DReady),
        .O(Data_Read0_out[14]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'hCA00)) 
    \Using_FPGA.Native_i_1__83 
       (.I0(Data_Read[21]),
        .I1(Data_Read[5]),
        .I2(O),
        .I3(DReady),
        .O(extend_Data_Read[5]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__84 
       (.I0(Data_Read[21]),
        .I1(DReady),
        .O(Data_Read0_out[13]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'hCA00)) 
    \Using_FPGA.Native_i_1__86 
       (.I0(Data_Read[20]),
        .I1(Data_Read[4]),
        .I2(O),
        .I3(DReady),
        .O(extend_Data_Read[4]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__87 
       (.I0(Data_Read[20]),
        .I1(DReady),
        .O(Data_Read0_out[12]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'hCA00)) 
    \Using_FPGA.Native_i_1__89 
       (.I0(Data_Read[19]),
        .I1(Data_Read[3]),
        .I2(O),
        .I3(DReady),
        .O(extend_Data_Read[3]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__90 
       (.I0(Data_Read[19]),
        .I1(DReady),
        .O(Data_Read0_out[11]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'hCA00)) 
    \Using_FPGA.Native_i_1__92 
       (.I0(Data_Read[18]),
        .I1(Data_Read[2]),
        .I2(O),
        .I3(DReady),
        .O(extend_Data_Read[2]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__93 
       (.I0(Data_Read[18]),
        .I1(DReady),
        .O(Data_Read0_out[10]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'hCA00)) 
    \Using_FPGA.Native_i_1__95 
       (.I0(Data_Read[17]),
        .I1(Data_Read[1]),
        .I2(O),
        .I3(DReady),
        .O(extend_Data_Read[1]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__96 
       (.I0(Data_Read[17]),
        .I1(DReady),
        .O(Data_Read0_out[9]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__98 
       (.I0(Data_Read[16]),
        .I1(DReady),
        .O(Data_Read0_out[8]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__99 
       (.I0(Data_Read[15]),
        .I1(DReady),
        .O(Data_Read0_out[7]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'hCA00)) 
    \Using_FPGA.Native_i_2__38 
       (.I0(Data_Read[16]),
        .I1(Data_Read[0]),
        .I2(O),
        .I3(DReady),
        .O(extend_Data_Read[0]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_2__47 
       (.I0(Data_Read[8]),
        .I1(DReady),
        .O(Data_Read0_out[0]));
  LUT3 #(
    .INIT(8'h01)) 
    \Using_LWX_SWX_instr.reservation_i_3 
       (.I0(DReady),
        .I1(MEM_DAXI_Data_Strobe),
        .I2(of_PipeRun),
        .O(mem_access_completed_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    \WB_DAXI_Read_Data_reg[24] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[7]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \WB_DAXI_Read_Data_reg[25] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[6]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \WB_DAXI_Read_Data_reg[26] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[5]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \WB_DAXI_Read_Data_reg[27] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[4]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \WB_DAXI_Read_Data_reg[28] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[3]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \WB_DAXI_Read_Data_reg[29] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[2]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \WB_DAXI_Read_Data_reg[30] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[1]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \WB_DAXI_Read_Data_reg[31] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[0]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    active_access_d1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_access),
        .Q(active_access_d1),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h00001F1000000000)) 
    active_access_i_1
       (.I0(M_AXI_DP_RVALID),
        .I1(M_AXI_DP_BVALID),
        .I2(active_access),
        .I3(M_AXI_DP_AWVALID_i1),
        .I4(sync_reset),
        .I5(active_access_reg_0),
        .O(active_access_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    active_access_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_access_i_1_n_0),
        .Q(active_access),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hE0)) 
    mem_access_completed_i_1
       (.I0(M_AXI_DP_RVALID),
        .I1(M_AXI_DP_BVALID),
        .I2(active_access),
        .O(mem_access_completed0));
  FDRE #(
    .INIT(1'b0)) 
    mem_access_completed_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mem_access_completed0),
        .Q(MEM_DAXI_Data_Strobe),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "Data_Flow" *) 
module cpu_Data_Flow
   (Op1_Low,
    EX_Op2,
    \Using_FPGA.Native ,
    Op1_Shift,
    \Using_FPGA.Native_0 ,
    Address,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    msr_I,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_1 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_2 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_3 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_4 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_5 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_6 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_7 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_8 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_9 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_10 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_11 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_12 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_13 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_14 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_15 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_16 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_17 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_18 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_19 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_20 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_21 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_22 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_23 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_24 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_25 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_26 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_27 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_28 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_29 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_30 ,
    D,
    PC_EX_i,
    \Using_FPGA.Native_5 ,
    LO,
    Reg_zero,
    \Size_17to32.imm_Reg_reg[0] ,
    Data_Write,
    sync_reset,
    of_PipeRun,
    Clk,
    D_0,
    res_Forward1,
    opsel1_SPR,
    D_1,
    D_2,
    D_3,
    D_4,
    D_5,
    D_6,
    D_7,
    D_8,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    D_17,
    D_18,
    D_19,
    D_20,
    D_21,
    D_22,
    D_23,
    D_24,
    D_25,
    D_26,
    D_27,
    D_28,
    D_29,
    D_30,
    D_31,
    carry_In,
    Unsigned_Op,
    alu_Op,
    MSR_Rst,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_dynamic_instr_Address.old_IE_value_reg ,
    compare_Instr,
    \Using_FPGA.Native_12 ,
    sext16,
    sext8,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    \data_rd_reg_reg[29] ,
    \data_rd_reg_reg[29]_0 ,
    register_write,
    Logic_Oper,
    Shift_Oper,
    Select_Logic,
    Shifted,
    Q,
    extend_Data_Read,
    data_Read_Mask,
    Data_Read0_out,
    Reg_Test_Equal,
    reg_Test_Equal_N,
    jump,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_13 ,
    PC_Write,
    E,
    imm_Value,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ,
    reg1_Addr,
    DI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:2]Op1_Low;
  output EX_Op2;
  output \Using_FPGA.Native ;
  output Op1_Shift;
  output \Using_FPGA.Native_0 ;
  output [14:0]Address;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output [2:0]msr_I;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_2 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_3 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_4 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_5 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_6 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_7 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_8 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_9 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_10 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_11 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_12 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_13 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_14 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_15 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_16 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_17 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_18 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_19 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_20 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_21 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_22 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_23 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_24 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_25 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_26 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_27 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_28 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_29 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_30 ;
  output [1:0]D;
  output [14:0]PC_EX_i;
  output [84:0]\Using_FPGA.Native_5 ;
  output LO;
  output Reg_zero;
  output [15:0]\Size_17to32.imm_Reg_reg[0] ;
  output [23:0]Data_Write;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_0;
  input res_Forward1;
  input opsel1_SPR;
  input D_1;
  input D_2;
  input D_3;
  input D_4;
  input D_5;
  input D_6;
  input D_7;
  input D_8;
  input D_9;
  input D_10;
  input D_11;
  input D_12;
  input D_13;
  input D_14;
  input D_15;
  input D_16;
  input D_17;
  input D_18;
  input D_19;
  input D_20;
  input D_21;
  input D_22;
  input D_23;
  input D_24;
  input D_25;
  input D_26;
  input D_27;
  input D_28;
  input D_29;
  input D_30;
  input D_31;
  input carry_In;
  input Unsigned_Op;
  input [0:1]alu_Op;
  input MSR_Rst;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_dynamic_instr_Address.old_IE_value_reg ;
  input compare_Instr;
  input \Using_FPGA.Native_12 ;
  input sext16;
  input sext8;
  input [0:31]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input \data_rd_reg_reg[29] ;
  input \data_rd_reg_reg[29]_0 ;
  input register_write;
  input [0:1]Logic_Oper;
  input Shift_Oper;
  input Select_Logic;
  input Shifted;
  input [1:0]Q;
  input [15:0]extend_Data_Read;
  input [1:0]data_Read_Mask;
  input [15:0]Data_Read0_out;
  input Reg_Test_Equal;
  input reg_Test_Equal_N;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_13 ;
  input PC_Write;
  input [0:0]E;
  input [0:15]imm_Value;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  input [0:4]reg1_Addr;
  input DI;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  wire [14:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire [1:0]D;
  wire DI;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_17;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_31;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire [15:0]Data_Read0_out;
  wire [23:0]Data_Write;
  wire [0:0]E;
  wire EX_Op2;
  wire IReady;
  wire [0:1]Logic_Oper;
  wire MSR_Rst;
  wire [0:2]Op1_Low;
  wire Op1_Shift;
  wire \OpSelect_Bits[0].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[24].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[25].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[26].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[27].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[28].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[29].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[30].Operand_Select_Bit_I/I3 ;
  wire Operand_Select_I_n_10;
  wire Operand_Select_I_n_11;
  wire Operand_Select_I_n_40;
  wire Operand_Select_I_n_41;
  wire Operand_Select_I_n_42;
  wire Operand_Select_I_n_43;
  wire Operand_Select_I_n_45;
  wire Operand_Select_I_n_46;
  wire Operand_Select_I_n_47;
  wire Operand_Select_I_n_48;
  wire Operand_Select_I_n_49;
  wire Operand_Select_I_n_5;
  wire Operand_Select_I_n_50;
  wire Operand_Select_I_n_51;
  wire Operand_Select_I_n_52;
  wire Operand_Select_I_n_53;
  wire Operand_Select_I_n_54;
  wire Operand_Select_I_n_55;
  wire Operand_Select_I_n_56;
  wire Operand_Select_I_n_57;
  wire Operand_Select_I_n_58;
  wire Operand_Select_I_n_59;
  wire Operand_Select_I_n_6;
  wire Operand_Select_I_n_61;
  wire Operand_Select_I_n_62;
  wire Operand_Select_I_n_63;
  wire Operand_Select_I_n_64;
  wire Operand_Select_I_n_65;
  wire Operand_Select_I_n_66;
  wire Operand_Select_I_n_67;
  wire Operand_Select_I_n_68;
  wire Operand_Select_I_n_69;
  wire Operand_Select_I_n_70;
  wire Operand_Select_I_n_71;
  wire Operand_Select_I_n_72;
  wire Operand_Select_I_n_73;
  wire Operand_Select_I_n_74;
  wire Operand_Select_I_n_75;
  wire Operand_Select_I_n_76;
  wire Operand_Select_I_n_77;
  wire Operand_Select_I_n_78;
  wire Operand_Select_I_n_79;
  wire Operand_Select_I_n_8;
  wire Operand_Select_I_n_80;
  wire Operand_Select_I_n_81;
  wire Operand_Select_I_n_82;
  wire Operand_Select_I_n_83;
  wire Operand_Select_I_n_84;
  wire Operand_Select_I_n_85;
  wire Operand_Select_I_n_86;
  wire Operand_Select_I_n_87;
  wire Operand_Select_I_n_88;
  wire Operand_Select_I_n_89;
  wire Operand_Select_I_n_9;
  wire Operand_Select_I_n_90;
  wire Operand_Select_I_n_91;
  wire Operand_Select_I_n_95;
  wire Operand_Select_I_n_97;
  wire Operand_Select_I_n_98;
  wire [14:0]PC_EX_i;
  wire PC_Write;
  wire [1:0]Q;
  wire Reg_Test_Equal;
  wire Reg_Write;
  wire Select_Logic;
  wire Shift_Logic_Module_I_n_31;
  wire Shift_Logic_Res;
  wire Shift_Logic_Res0_out;
  wire Shift_Logic_Res10_out;
  wire Shift_Logic_Res11_out;
  wire Shift_Logic_Res12_out;
  wire Shift_Logic_Res13_out;
  wire Shift_Logic_Res14_out;
  wire Shift_Logic_Res15_out;
  wire Shift_Logic_Res17_out;
  wire Shift_Logic_Res18_out;
  wire Shift_Logic_Res19_out;
  wire Shift_Logic_Res1_out;
  wire Shift_Logic_Res20_out;
  wire Shift_Logic_Res21_out;
  wire Shift_Logic_Res22_out;
  wire Shift_Logic_Res23_out;
  wire Shift_Logic_Res24_out;
  wire Shift_Logic_Res26_out;
  wire Shift_Logic_Res27_out;
  wire Shift_Logic_Res28_out;
  wire Shift_Logic_Res29_out;
  wire Shift_Logic_Res2_out;
  wire Shift_Logic_Res30_out;
  wire Shift_Logic_Res31_out;
  wire Shift_Logic_Res3_out;
  wire Shift_Logic_Res4_out;
  wire Shift_Logic_Res5_out;
  wire Shift_Logic_Res6_out;
  wire Shift_Logic_Res7_out;
  wire Shift_Logic_Res8_out;
  wire Shift_Logic_Res9_out;
  wire Shift_Oper;
  wire Shifted;
  wire [15:0]\Size_17to32.imm_Reg_reg[0] ;
  wire Unsigned_Op;
  wire \Using_FPGA.ALL_Bits[0].ALU_Bit_I1/S ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [84:0]\^Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_10 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_11 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_12 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_13 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_14 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_15 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_16 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_17 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_18 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_19 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_20 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_21 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_22 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_23 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_24 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_25 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_26 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_27 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_28 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_29 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_3 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_30 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_4 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_5 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_6 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_7 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_8 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_9 ;
  wire [0:1]alu_Op;
  wire carry_In;
  wire compare_Instr;
  wire [1:0]data_Read_Mask;
  wire \data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[29]_0 ;
  wire [0:31]ex_Result;
  wire [0:0]exception_kind;
  wire [15:0]extend_Data_Read;
  wire [0:15]imm_Value;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire [2:0]msr_I;
  wire of_PipeRun;
  wire [0:27]op2_C;
  wire opsel1_SPR;
  wire [30:31]raw_Data_Addr;
  wire [0:4]reg1_Addr;
  wire [0:31]reg1_Data;
  wire [0:31]reg2_Data;
  wire reg_Test_Equal_N;
  wire register_write;
  wire res_Forward1;
  wire res_Forward2;
  wire [0:0]sext;
  wire sext16;
  wire sext8;
  wire sync_reset;
  wire NLW_ALU_I_LO_UNCONNECTED;
  wire \NLW_MSR_Reg_I_Using_FPGA.Native_UNCONNECTED ;
  wire \NLW_MSR_Reg_I_Using_dynamic_instr_Address.old_IE_value_reg_UNCONNECTED ;
  wire [1:0]NLW_PC_Module_I_PC_EX_i_UNCONNECTED;
  wire [0:31]NLW_Result_Mux_I_Interrupt_Address_UNCONNECTED;
  wire NLW_Zero_Detect_I_Reg_zero_UNCONNECTED;

  assign \Using_FPGA.Native_5 [84:61] = \^Using_FPGA.Native_5 [84:61];
  assign \Using_FPGA.Native_5 [54:4] = \^Using_FPGA.Native_5 [54:4];
  assign \Using_FPGA.Native_5 [1:0] = \^Using_FPGA.Native_5 [1:0];
  cpu_ALU ALU_I
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] (Operand_Select_I_n_50),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] (Operand_Select_I_n_52),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] (Operand_Select_I_n_54),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] (Operand_Select_I_n_56),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] (Operand_Select_I_n_58),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] (\Using_FPGA.Native_1 ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] (Operand_Select_I_n_62),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] (Operand_Select_I_n_64),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] (Operand_Select_I_n_66),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] (Operand_Select_I_n_68),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] (Operand_Select_I_n_70),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] (Operand_Select_I_n_72),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] (Operand_Select_I_n_74),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] (Operand_Select_I_n_76),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] (Operand_Select_I_n_78),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] (Operand_Select_I_n_80),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] (Operand_Select_I_n_82),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] (Operand_Select_I_n_84),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] (Operand_Select_I_n_86),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] (Operand_Select_I_n_88),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] (Op1_Low[0]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] (Operand_Select_I_n_90),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] (Operand_Select_I_n_97),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] (Operand_Select_I_n_9),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 (Op1_Shift),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] (Operand_Select_I_n_10),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] (Operand_Select_I_n_40),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] (Operand_Select_I_n_42),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] (\Using_FPGA.Native_0 ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] (Operand_Select_I_n_46),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] (Operand_Select_I_n_48),
        .EX_Op1(Op1_Low[2]),
        .EX_Op2(EX_Op2),
        .LO(NLW_ALU_I_LO_UNCONNECTED),
        .Op1_Logic(\Using_FPGA.Native_2 ),
        .Op2(Operand_Select_I_n_6),
        .S(\Using_FPGA.ALL_Bits[0].ALU_Bit_I1/S ),
        .Unsigned_Op(Unsigned_Op),
        .\Using_FPGA.Native (\^Using_FPGA.Native_5 [69:40]),
        .\Using_FPGA.Native_I2 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_I2_0 (Op1_Low[1]),
        .alu_Op(alu_Op),
        .carry_In(carry_In),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .op2_C({op2_C[0],op2_C[1],op2_C[2],op2_C[3],op2_C[4],op2_C[5],op2_C[6],op2_C[7],op2_C[8],op2_C[9],op2_C[10],op2_C[11],op2_C[12],op2_C[13],op2_C[14],op2_C[15],op2_C[16],op2_C[17],op2_C[18],op2_C[19],op2_C[20],op2_C[21],op2_C[22],op2_C[23],op2_C[24],op2_C[25],op2_C[26],op2_C[27]}),
        .raw_Data_Addr({raw_Data_Addr[30],raw_Data_Addr[31]}));
  cpu_MSR_Reg MSR_Reg_I
       (.Address(Address[1:0]),
        .Clk(Clk),
        .I3(\OpSelect_Bits[0].Operand_Select_Bit_I/I3 ),
        .I3_0(\OpSelect_Bits[30].Operand_Select_Bit_I/I3 ),
        .I3_1(\OpSelect_Bits[28].Operand_Select_Bit_I/I3 ),
        .I3_2(\OpSelect_Bits[29].Operand_Select_Bit_I/I3 ),
        .MSR_Rst(MSR_Rst),
        .\Using_FPGA.Native (\NLW_MSR_Reg_I_Using_FPGA.Native_UNCONNECTED ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_11 ),
        .\Using_dynamic_instr_Address.old_IE_value_reg (\NLW_MSR_Reg_I_Using_dynamic_instr_Address.old_IE_value_reg_UNCONNECTED ),
        .msr_I(msr_I));
  cpu_Operand_Select Operand_Select_I
       (.Address(Address[14:6]),
        .Clk(Clk),
        .Compare_Instr_reg(Operand_Select_I_n_97),
        .D_0(D_0),
        .D_1(D_1),
        .D_10(D_10),
        .D_11(D_11),
        .D_12(D_12),
        .D_13(D_13),
        .D_14(D_14),
        .D_15(D_15),
        .D_16(D_16),
        .D_17(D_17),
        .D_18(D_18),
        .D_19(D_19),
        .D_2(D_2),
        .D_20(D_20),
        .D_21(D_21),
        .D_22(D_22),
        .D_23(D_23),
        .D_24(D_24),
        .D_25(D_25),
        .D_26(D_26),
        .D_27(D_27),
        .D_28(D_28),
        .D_29(D_29),
        .D_3(D_3),
        .D_30(D_30),
        .D_31(D_31),
        .D_4(D_4),
        .D_5(D_5),
        .D_6(D_6),
        .D_7(D_7),
        .D_8(D_8),
        .D_9(D_9),
        .E(E),
        .EX_Op2(EX_Op2),
        .I3(\OpSelect_Bits[30].Operand_Select_Bit_I/I3 ),
        .I3_0(\OpSelect_Bits[29].Operand_Select_Bit_I/I3 ),
        .I3_1(\OpSelect_Bits[28].Operand_Select_Bit_I/I3 ),
        .I3_2(\OpSelect_Bits[27].Operand_Select_Bit_I/I3 ),
        .I3_3(\OpSelect_Bits[26].Operand_Select_Bit_I/I3 ),
        .I3_4(\OpSelect_Bits[25].Operand_Select_Bit_I/I3 ),
        .I3_5(\OpSelect_Bits[24].Operand_Select_Bit_I/I3 ),
        .I3_6(\OpSelect_Bits[0].Operand_Select_Bit_I/I3 ),
        .Op1_Logic(Op1_Low[2]),
        .Op2(Operand_Select_I_n_6),
        .Reg1_Data(reg1_Data),
        .S(\Using_FPGA.ALL_Bits[0].ALU_Bit_I1/S ),
        .Sext(Operand_Select_I_n_95),
        .Shifted(Op1_Shift),
        .\Size_17to32.imm_Reg_reg[0]_0 (\Size_17to32.imm_Reg_reg[0] ),
        .\Using_FPGA.Native (Op1_Low[1]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (Op1_Low[0]),
        .\Using_FPGA.Native_10 (Operand_Select_I_n_43),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_12 (Operand_Select_I_n_45),
        .\Using_FPGA.Native_13 (Operand_Select_I_n_46),
        .\Using_FPGA.Native_14 (Operand_Select_I_n_47),
        .\Using_FPGA.Native_15 (Operand_Select_I_n_48),
        .\Using_FPGA.Native_16 (Operand_Select_I_n_49),
        .\Using_FPGA.Native_17 (Operand_Select_I_n_50),
        .\Using_FPGA.Native_18 (Operand_Select_I_n_51),
        .\Using_FPGA.Native_19 (Operand_Select_I_n_52),
        .\Using_FPGA.Native_2 (Operand_Select_I_n_5),
        .\Using_FPGA.Native_20 (Operand_Select_I_n_53),
        .\Using_FPGA.Native_21 (Operand_Select_I_n_54),
        .\Using_FPGA.Native_22 (Operand_Select_I_n_55),
        .\Using_FPGA.Native_23 (Operand_Select_I_n_56),
        .\Using_FPGA.Native_24 (Operand_Select_I_n_57),
        .\Using_FPGA.Native_25 (Operand_Select_I_n_58),
        .\Using_FPGA.Native_26 (Operand_Select_I_n_59),
        .\Using_FPGA.Native_27 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_28 (Operand_Select_I_n_61),
        .\Using_FPGA.Native_29 (Operand_Select_I_n_62),
        .\Using_FPGA.Native_3 (Operand_Select_I_n_8),
        .\Using_FPGA.Native_30 (Operand_Select_I_n_63),
        .\Using_FPGA.Native_31 (Operand_Select_I_n_64),
        .\Using_FPGA.Native_32 (Operand_Select_I_n_65),
        .\Using_FPGA.Native_33 (Operand_Select_I_n_66),
        .\Using_FPGA.Native_34 (Operand_Select_I_n_67),
        .\Using_FPGA.Native_35 (Operand_Select_I_n_68),
        .\Using_FPGA.Native_36 (Operand_Select_I_n_69),
        .\Using_FPGA.Native_37 (Operand_Select_I_n_70),
        .\Using_FPGA.Native_38 (Operand_Select_I_n_71),
        .\Using_FPGA.Native_39 (Operand_Select_I_n_72),
        .\Using_FPGA.Native_4 (Operand_Select_I_n_9),
        .\Using_FPGA.Native_40 (Operand_Select_I_n_73),
        .\Using_FPGA.Native_41 (Operand_Select_I_n_74),
        .\Using_FPGA.Native_42 (Operand_Select_I_n_75),
        .\Using_FPGA.Native_43 (Operand_Select_I_n_76),
        .\Using_FPGA.Native_44 (Operand_Select_I_n_77),
        .\Using_FPGA.Native_45 (Operand_Select_I_n_78),
        .\Using_FPGA.Native_46 (Operand_Select_I_n_79),
        .\Using_FPGA.Native_47 (Operand_Select_I_n_80),
        .\Using_FPGA.Native_48 (Operand_Select_I_n_81),
        .\Using_FPGA.Native_49 (Operand_Select_I_n_82),
        .\Using_FPGA.Native_5 (Operand_Select_I_n_10),
        .\Using_FPGA.Native_50 (Operand_Select_I_n_83),
        .\Using_FPGA.Native_51 (Operand_Select_I_n_84),
        .\Using_FPGA.Native_52 (Operand_Select_I_n_85),
        .\Using_FPGA.Native_53 (Operand_Select_I_n_86),
        .\Using_FPGA.Native_54 (Operand_Select_I_n_87),
        .\Using_FPGA.Native_55 (Operand_Select_I_n_88),
        .\Using_FPGA.Native_56 (Operand_Select_I_n_89),
        .\Using_FPGA.Native_57 (Operand_Select_I_n_90),
        .\Using_FPGA.Native_58 (Operand_Select_I_n_91),
        .\Using_FPGA.Native_59 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_6 (Operand_Select_I_n_11),
        .\Using_FPGA.Native_60 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_61 (sext),
        .\Using_FPGA.Native_62 (Operand_Select_I_n_98),
        .\Using_FPGA.Native_63 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_7 (Operand_Select_I_n_40),
        .\Using_FPGA.Native_8 (Operand_Select_I_n_41),
        .\Using_FPGA.Native_9 (Operand_Select_I_n_42),
        .compare_Instr(compare_Instr),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .of_PipeRun(of_PipeRun),
        .op2_C({op2_C[0],op2_C[1],op2_C[2],op2_C[3],op2_C[4],op2_C[5],op2_C[6],op2_C[7],op2_C[8],op2_C[9],op2_C[10],op2_C[11],op2_C[12],op2_C[13],op2_C[14],op2_C[15],op2_C[16],op2_C[17],op2_C[18],op2_C[19],op2_C[20],op2_C[21],op2_C[22],op2_C[23],op2_C[24],op2_C[25],op2_C[26],op2_C[27]}),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset));
  cpu_PC_Module PC_Module_I
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .D(D),
        .DI(DI),
        .I3(\OpSelect_Bits[24].Operand_Select_Bit_I/I3 ),
        .I3_0(\OpSelect_Bits[25].Operand_Select_Bit_I/I3 ),
        .I3_1(\OpSelect_Bits[26].Operand_Select_Bit_I/I3 ),
        .I3_2(\OpSelect_Bits[27].Operand_Select_Bit_I/I3 ),
        .IReady(IReady),
        .PC_EX_i({PC_EX_i[14:2],NLW_PC_Module_I_PC_EX_i_UNCONNECTED[1:0]}),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\^Using_FPGA.Native_5 [84:70]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_1 ({\^Using_FPGA.Native_5 [54:40],\^Using_FPGA.Native_5 [3:2]}),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_13 ),
        .\data_rd_reg_reg[29] (\data_rd_reg_reg[29] ),
        .\data_rd_reg_reg[29]_0 (\data_rd_reg_reg[29]_0 ),
        .jump(jump),
        .msr_I(msr_I[2:1]),
        .register_write(register_write),
        .sync_reset(sync_reset));
  cpu_Register_File Register_File_I
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(\^Using_FPGA.Native_5 [39:32]),
        .Data_Write(Data_Write),
        .Reg1_Data(reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .imm_Value({imm_Value[0],imm_Value[1],imm_Value[2],imm_Value[3],imm_Value[4]}),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data));
  cpu_Result_Mux Result_Mux_I
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Result_Mux_I_Interrupt_Address_UNCONNECTED[0:31]),
        .Q(Q),
        .Shift_Logic_Res(Shift_Logic_Res),
        .\Using_FPGA.Native (\^Using_FPGA.Native_5 [31:0]),
        .\Using_FPGA.Native_0 (Shift_Logic_Res31_out),
        .\Using_FPGA.Native_1 (\^Using_FPGA.Native_5 [69:40]),
        .\Using_FPGA.Native_10 (Shift_Logic_Res21_out),
        .\Using_FPGA.Native_11 (Shift_Logic_Res20_out),
        .\Using_FPGA.Native_12 (Shift_Logic_Res19_out),
        .\Using_FPGA.Native_13 (Shift_Logic_Res18_out),
        .\Using_FPGA.Native_14 (Shift_Logic_Res17_out),
        .\Using_FPGA.Native_15 (Shift_Logic_Res15_out),
        .\Using_FPGA.Native_16 (Shift_Logic_Res14_out),
        .\Using_FPGA.Native_17 (Shift_Logic_Res13_out),
        .\Using_FPGA.Native_18 (Shift_Logic_Res12_out),
        .\Using_FPGA.Native_19 (Shift_Logic_Res11_out),
        .\Using_FPGA.Native_2 (Shift_Logic_Res30_out),
        .\Using_FPGA.Native_20 (Shift_Logic_Res10_out),
        .\Using_FPGA.Native_21 (Shift_Logic_Res9_out),
        .\Using_FPGA.Native_22 (Shift_Logic_Res8_out),
        .\Using_FPGA.Native_23 (Shift_Logic_Res7_out),
        .\Using_FPGA.Native_24 (Shift_Logic_Res6_out),
        .\Using_FPGA.Native_25 (Shift_Logic_Res5_out),
        .\Using_FPGA.Native_26 (Shift_Logic_Res4_out),
        .\Using_FPGA.Native_27 (Shift_Logic_Res3_out),
        .\Using_FPGA.Native_28 (Shift_Logic_Res2_out),
        .\Using_FPGA.Native_29 (Shift_Logic_Res1_out),
        .\Using_FPGA.Native_3 (Shift_Logic_Res29_out),
        .\Using_FPGA.Native_30 (Shift_Logic_Res0_out),
        .\Using_FPGA.Native_31 (Shift_Logic_Module_I_n_31),
        .\Using_FPGA.Native_4 (Shift_Logic_Res28_out),
        .\Using_FPGA.Native_5 (Shift_Logic_Res27_out),
        .\Using_FPGA.Native_6 (Shift_Logic_Res26_out),
        .\Using_FPGA.Native_7 (Shift_Logic_Res24_out),
        .\Using_FPGA.Native_8 (Shift_Logic_Res23_out),
        .\Using_FPGA.Native_9 (Shift_Logic_Res22_out),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_1 (\Using_FPGA.take_Intr_2nd_Phase_reg_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_10 (\Using_FPGA.take_Intr_2nd_Phase_reg_10 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_11 (\Using_FPGA.take_Intr_2nd_Phase_reg_11 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_12 (\Using_FPGA.take_Intr_2nd_Phase_reg_12 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_13 (\Using_FPGA.take_Intr_2nd_Phase_reg_13 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_14 (\Using_FPGA.take_Intr_2nd_Phase_reg_14 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_15 (\Using_FPGA.take_Intr_2nd_Phase_reg_15 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_16 (\Using_FPGA.take_Intr_2nd_Phase_reg_16 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_17 (\Using_FPGA.take_Intr_2nd_Phase_reg_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_18 (\Using_FPGA.take_Intr_2nd_Phase_reg_18 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_19 (\Using_FPGA.take_Intr_2nd_Phase_reg_19 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_2 (\Using_FPGA.take_Intr_2nd_Phase_reg_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_20 (\Using_FPGA.take_Intr_2nd_Phase_reg_20 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_21 (\Using_FPGA.take_Intr_2nd_Phase_reg_21 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_22 (\Using_FPGA.take_Intr_2nd_Phase_reg_22 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_23 (\Using_FPGA.take_Intr_2nd_Phase_reg_23 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_24 (\Using_FPGA.take_Intr_2nd_Phase_reg_24 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_25 (\Using_FPGA.take_Intr_2nd_Phase_reg_25 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_26 (\Using_FPGA.take_Intr_2nd_Phase_reg_26 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_27 (\Using_FPGA.take_Intr_2nd_Phase_reg_27 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_28 (\Using_FPGA.take_Intr_2nd_Phase_reg_28 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_29 (\Using_FPGA.take_Intr_2nd_Phase_reg_29 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_3 (\Using_FPGA.take_Intr_2nd_Phase_reg_3 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_30 (\Using_FPGA.take_Intr_2nd_Phase_reg_30 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_4 (\Using_FPGA.take_Intr_2nd_Phase_reg_4 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_5 (\Using_FPGA.take_Intr_2nd_Phase_reg_5 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_6 (\Using_FPGA.take_Intr_2nd_Phase_reg_6 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_7 (\Using_FPGA.take_Intr_2nd_Phase_reg_7 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_8 (\Using_FPGA.take_Intr_2nd_Phase_reg_8 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_9 (\Using_FPGA.take_Intr_2nd_Phase_reg_9 ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .raw_Data_Addr({raw_Data_Addr[30],raw_Data_Addr[31]}),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_Shift_Logic_Module Shift_Logic_Module_I
       (.EX_Op2(EX_Op2),
        .Logic_Oper(Logic_Oper),
        .Op1_Logic(Op1_Low[2]),
        .Op2(Operand_Select_I_n_6),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Shift_Logic_Res31_out),
        .Select_Logic_reg_0(Shift_Logic_Res30_out),
        .Select_Logic_reg_1(Shift_Logic_Res29_out),
        .Select_Logic_reg_10(Shift_Logic_Res19_out),
        .Select_Logic_reg_11(Shift_Logic_Res18_out),
        .Select_Logic_reg_12(Shift_Logic_Res17_out),
        .Select_Logic_reg_13(Shift_Logic_Res15_out),
        .Select_Logic_reg_14(Shift_Logic_Res14_out),
        .Select_Logic_reg_15(Shift_Logic_Res13_out),
        .Select_Logic_reg_16(Shift_Logic_Res12_out),
        .Select_Logic_reg_17(Shift_Logic_Res11_out),
        .Select_Logic_reg_18(Shift_Logic_Res10_out),
        .Select_Logic_reg_19(Shift_Logic_Res9_out),
        .Select_Logic_reg_2(Shift_Logic_Res28_out),
        .Select_Logic_reg_20(Shift_Logic_Res8_out),
        .Select_Logic_reg_21(Shift_Logic_Res7_out),
        .Select_Logic_reg_22(Shift_Logic_Res6_out),
        .Select_Logic_reg_23(Shift_Logic_Res5_out),
        .Select_Logic_reg_24(Shift_Logic_Res4_out),
        .Select_Logic_reg_25(Shift_Logic_Res3_out),
        .Select_Logic_reg_26(Shift_Logic_Res2_out),
        .Select_Logic_reg_27(Shift_Logic_Res1_out),
        .Select_Logic_reg_28(Shift_Logic_Res0_out),
        .Select_Logic_reg_29(Shift_Logic_Module_I_n_31),
        .Select_Logic_reg_3(Shift_Logic_Res27_out),
        .Select_Logic_reg_4(Shift_Logic_Res26_out),
        .Select_Logic_reg_5(Shift_Logic_Res24_out),
        .Select_Logic_reg_6(Shift_Logic_Res23_out),
        .Select_Logic_reg_7(Shift_Logic_Res22_out),
        .Select_Logic_reg_8(Shift_Logic_Res21_out),
        .Select_Logic_reg_9(Shift_Logic_Res20_out),
        .Sext(sext),
        .Shift_Logic_Res(Shift_Logic_Res),
        .Shift_Oper(Shift_Oper),
        .Shifted(Op1_Shift),
        .\Using_FPGA.Native (Op1_Low[1]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (Op1_Low[0]),
        .\Using_FPGA.Native_10 (Operand_Select_I_n_52),
        .\Using_FPGA.Native_11 (Operand_Select_I_n_54),
        .\Using_FPGA.Native_12 (Operand_Select_I_n_56),
        .\Using_FPGA.Native_13 (Operand_Select_I_n_58),
        .\Using_FPGA.Native_14 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_15 (Operand_Select_I_n_62),
        .\Using_FPGA.Native_16 (Operand_Select_I_n_64),
        .\Using_FPGA.Native_17 (Operand_Select_I_n_95),
        .\Using_FPGA.Native_18 (Operand_Select_I_n_66),
        .\Using_FPGA.Native_19 (Operand_Select_I_n_68),
        .\Using_FPGA.Native_2 (Operand_Select_I_n_9),
        .\Using_FPGA.Native_20 (Operand_Select_I_n_70),
        .\Using_FPGA.Native_21 (Operand_Select_I_n_72),
        .\Using_FPGA.Native_22 (Operand_Select_I_n_74),
        .\Using_FPGA.Native_23 (Operand_Select_I_n_76),
        .\Using_FPGA.Native_24 (Operand_Select_I_n_78),
        .\Using_FPGA.Native_25 (Operand_Select_I_n_80),
        .\Using_FPGA.Native_26 (Operand_Select_I_n_82),
        .\Using_FPGA.Native_27 (Operand_Select_I_n_84),
        .\Using_FPGA.Native_28 (Operand_Select_I_n_86),
        .\Using_FPGA.Native_29 (Operand_Select_I_n_88),
        .\Using_FPGA.Native_3 (Operand_Select_I_n_10),
        .\Using_FPGA.Native_30 (Operand_Select_I_n_90),
        .\Using_FPGA.Native_31 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_32 (Shifted),
        .\Using_FPGA.Native_4 (Operand_Select_I_n_40),
        .\Using_FPGA.Native_5 (Operand_Select_I_n_42),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_7 (Operand_Select_I_n_46),
        .\Using_FPGA.Native_8 (Operand_Select_I_n_48),
        .\Using_FPGA.Native_9 (Operand_Select_I_n_50),
        .op2_C({op2_C[0],op2_C[1],op2_C[2],op2_C[3],op2_C[4],op2_C[5],op2_C[6],op2_C[7],op2_C[8],op2_C[9],op2_C[10],op2_C[11],op2_C[12],op2_C[13],op2_C[14],op2_C[15],op2_C[16],op2_C[17],op2_C[18],op2_C[19],op2_C[20],op2_C[21],op2_C[22],op2_C[23],op2_C[24],op2_C[25],op2_C[26],op2_C[27]}));
  cpu_Zero_Detect Zero_Detect_I
       (.Reg_Test_Equal(Reg_Test_Equal),
        .Reg_zero(NLW_Zero_Detect_I_Reg_zero_UNCONNECTED),
        .\Using_FPGA.Native (Operand_Select_I_n_98),
        .\Using_FPGA.Native_0 (Operand_Select_I_n_5),
        .\Using_FPGA.Native_1 (Operand_Select_I_n_45),
        .\Using_FPGA.Native_10 (Operand_Select_I_n_49),
        .\Using_FPGA.Native_11 (Operand_Select_I_n_51),
        .\Using_FPGA.Native_12 (Operand_Select_I_n_59),
        .\Using_FPGA.Native_13 (Operand_Select_I_n_69),
        .\Using_FPGA.Native_14 (Operand_Select_I_n_65),
        .\Using_FPGA.Native_15 (Operand_Select_I_n_67),
        .\Using_FPGA.Native_16 (Operand_Select_I_n_61),
        .\Using_FPGA.Native_17 (Operand_Select_I_n_63),
        .\Using_FPGA.Native_18 (Operand_Select_I_n_71),
        .\Using_FPGA.Native_19 (Operand_Select_I_n_81),
        .\Using_FPGA.Native_2 (Operand_Select_I_n_41),
        .\Using_FPGA.Native_20 (Operand_Select_I_n_77),
        .\Using_FPGA.Native_21 (Operand_Select_I_n_79),
        .\Using_FPGA.Native_22 (Operand_Select_I_n_73),
        .\Using_FPGA.Native_23 (Operand_Select_I_n_75),
        .\Using_FPGA.Native_24 (Operand_Select_I_n_83),
        .\Using_FPGA.Native_25 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_26 (Operand_Select_I_n_89),
        .\Using_FPGA.Native_27 (Operand_Select_I_n_91),
        .\Using_FPGA.Native_28 (Operand_Select_I_n_85),
        .\Using_FPGA.Native_29 (Operand_Select_I_n_87),
        .\Using_FPGA.Native_3 (Operand_Select_I_n_43),
        .\Using_FPGA.Native_4 (Operand_Select_I_n_8),
        .\Using_FPGA.Native_5 (Operand_Select_I_n_11),
        .\Using_FPGA.Native_6 (Operand_Select_I_n_47),
        .\Using_FPGA.Native_7 (Operand_Select_I_n_57),
        .\Using_FPGA.Native_8 (Operand_Select_I_n_53),
        .\Using_FPGA.Native_9 (Operand_Select_I_n_55),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .reg_Test_Equal_N(reg_Test_Equal_N));
endmodule

(* ORIG_REF_NAME = "Debug" *) 
module cpu_Debug
   (dbg_pause,
    D,
    Sleep,
    dbg_brki_hit,
    LOCKSTEP_Master_Out,
    force_stop_cmd_i,
    force_stop_cmd_hold,
    read_register_MSR_1_reg_0,
    delay_slot_instr_reg_0,
    register_write,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    \Use_Serial_Unified_Completion.completion_block_reg ,
    Dbg_TDO,
    R,
    \Use_Async_Reset.sync_reset_reg ,
    \Serial_Dbg_Intf.if_debug_ready_i_reg_0 ,
    IReady1_out,
    \Using_FPGA.Native_1 ,
    load_Store_i_reg,
    \Use_Async_Reset.sync_reset_reg_0 ,
    \Area_Debug_Control.normal_stop_cmd_hold_reg_0 ,
    Q,
    Dbg_Clk,
    sync_reset,
    Pause,
    Clk,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    \Area_Debug_Control.dbg_brki_hit_reg_0 ,
    Dbg_Update,
    p_2_out,
    of_PipeRun,
    use_Imm_Reg,
    delay_slot_instr_reg_1,
    branch_with_delay,
    reg_Write_dbg,
    Dbg_Stop,
    Dbg_Capture,
    Data_Read_Reg_En,
    Config_Reg_En,
    Dbg_Reg_En,
    Dbg_Shift,
    Status_Reg_En,
    wakeup_i,
    ok_To_Stop,
    Reset_Mode,
    \Using_FPGA.Native_2 ,
    has_inhibit_EX,
    \Serial_Dbg_Intf.status_reg_reg[25]_0 ,
    Scan_En,
    Scan_Reset_Sel,
    Scan_Reset,
    Sleep_Decode,
    jump,
    IReady,
    inHibit_EX_reg,
    active_access_reg,
    active_access_reg_0,
    load_Store_i,
    ex_Valid,
    dbg_clean_stop,
    Valid_Instr_i,
    \data_rd_reg_reg[30]_0 ,
    PC_EX_i,
    Dbg_TDI,
    Address,
    \Serial_Dbg_Intf.status_reg_reg[22]_0 ,
    \data_rd_reg_reg[28]_0 );
  output dbg_pause;
  output [0:0]D;
  output Sleep;
  output dbg_brki_hit;
  output [37:0]LOCKSTEP_Master_Out;
  output force_stop_cmd_i;
  output force_stop_cmd_hold;
  output read_register_MSR_1_reg_0;
  output [0:0]delay_slot_instr_reg_0;
  output register_write;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [1:0]Dbg_Trig_In;
  output [1:0]Dbg_Trig_Ack_Out;
  output \Use_Serial_Unified_Completion.completion_block_reg ;
  output Dbg_TDO;
  output R;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg_0 ;
  output IReady1_out;
  output \Using_FPGA.Native_1 ;
  output load_Store_i_reg;
  output \Use_Async_Reset.sync_reset_reg_0 ;
  output \Area_Debug_Control.normal_stop_cmd_hold_reg_0 ;
  output [0:0]Q;
  input Dbg_Clk;
  input sync_reset;
  input Pause;
  input Clk;
  input [1:0]Dbg_Trig_Ack_In;
  input [1:0]Dbg_Trig_Out;
  input \Area_Debug_Control.dbg_brki_hit_reg_0 ;
  input Dbg_Update;
  input p_2_out;
  input of_PipeRun;
  input use_Imm_Reg;
  input delay_slot_instr_reg_1;
  input branch_with_delay;
  input reg_Write_dbg;
  input Dbg_Stop;
  input Dbg_Capture;
  input Data_Read_Reg_En;
  input Config_Reg_En;
  input [0:7]Dbg_Reg_En;
  input Dbg_Shift;
  input Status_Reg_En;
  input [0:1]wakeup_i;
  input ok_To_Stop;
  input [0:1]Reset_Mode;
  input \Using_FPGA.Native_2 ;
  input has_inhibit_EX;
  input [32:0]\Serial_Dbg_Intf.status_reg_reg[25]_0 ;
  input Scan_En;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input Sleep_Decode;
  input jump;
  input IReady;
  input inHibit_EX_reg;
  input active_access_reg;
  input active_access_reg_0;
  input load_Store_i;
  input ex_Valid;
  input dbg_clean_stop;
  input Valid_Instr_i;
  input [0:0]\data_rd_reg_reg[30]_0 ;
  input [12:0]PC_EX_i;
  input Dbg_TDI;
  input [14:0]Address;
  input [0:0]\Serial_Dbg_Intf.status_reg_reg[22]_0 ;
  input [1:0]\data_rd_reg_reg[28]_0 ;

  wire A1;
  wire A2;
  wire A3;
  wire [14:0]Address;
  wire \Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_4 ;
  wire \Area_Debug_Control.Stop_CPU_FDRSE_n_1 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_10 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_11 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_12 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_13 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_14 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_15 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_16 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_17 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_18 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_19 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_2 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_20 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_21 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_22 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_23 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_24 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_25 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_26 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_27 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_28 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_29 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_30 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_31 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_32 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_33 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_34 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_35 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_36 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_5 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_7 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_8 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_9 ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_0 ;
  wire \Area_Debug_Control.dbg_hit[0]_i_1_n_0 ;
  wire \Area_Debug_Control.dbg_stop_Detected_reg_n_0 ;
  wire \Area_Debug_Control.force_stop_cmd_1_i_1_n_0 ;
  wire \Area_Debug_Control.normal_stop_cmd_hold_reg_0 ;
  wire Clk;
  wire Command_Reg_En;
  wire Config_Reg_En;
  wire Control_Reg_En;
  wire Data_Read_Reg_En;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_TDO_INST_0_i_10_n_0;
  wire Dbg_TDO_INST_0_i_16_n_0;
  wire Dbg_TDO_INST_0_i_17_n_0;
  wire Dbg_TDO_INST_0_i_18_n_0;
  wire Dbg_TDO_INST_0_i_19_n_0;
  wire Dbg_TDO_INST_0_i_20_n_0;
  wire Dbg_TDO_INST_0_i_21_n_0;
  wire Dbg_TDO_INST_0_i_22_n_0;
  wire Dbg_TDO_INST_0_i_27_n_0;
  wire Dbg_TDO_INST_0_i_28_n_0;
  wire Dbg_TDO_INST_0_i_29_n_0;
  wire Dbg_TDO_INST_0_i_30_n_0;
  wire Dbg_TDO_INST_0_i_31_n_0;
  wire Dbg_TDO_INST_0_i_32_n_0;
  wire Dbg_TDO_INST_0_i_33_n_0;
  wire Dbg_TDO_INST_0_i_34_n_0;
  wire Dbg_TDO_INST_0_i_35_n_0;
  wire Dbg_TDO_INST_0_i_36_n_0;
  wire Dbg_TDO_INST_0_i_7_n_0;
  wire Dbg_TDO_INST_0_i_8_n_0;
  wire Dbg_TDO_INST_0_i_9_n_0;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Full_32_bit;
  wire Full_32_bit_1;
  wire IReady;
  wire IReady1_out;
  wire Instr_Insert_Reg_En;
  wire Instr_Insert_Reg_En_1;
  wire [37:0]LOCKSTEP_Master_Out;
  wire New_Dbg_Instr2_TCK;
  wire New_Dbg_Instr_TCK;
  wire [12:0]PC_EX_i;
  wire [0:0]Q;
  wire Q2_in;
  wire Q2_out;
  wire Q6_out;
  wire Q_0;
  wire R;
  wire Raw;
  wire S;
  wire \Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I_n_0 ;
  wire \Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_n_0 ;
  wire \Serial_Dbg_Intf.continue_from_brk_reg_n_0 ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[5] ;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg_0 ;
  wire \Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[1] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[3] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ;
  wire \Serial_Dbg_Intf.shift_count[0]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[1]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[2]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[3]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[4]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[5]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[5]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[6]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[7]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[7]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.shift_count_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[10] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[11] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[12] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[13] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[14] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[15] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[16] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[17] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[18] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[19] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[1] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[20] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[21] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[2] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[3] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[5] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[6] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[7] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[8] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[9] ;
  wire [0:0]\Serial_Dbg_Intf.status_reg_reg[22]_0 ;
  wire [32:0]\Serial_Dbg_Intf.status_reg_reg[25]_0 ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[16] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[17] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[18] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[19] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[20] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[22] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[23] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[24] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[25] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[27] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[29] ;
  wire \Serial_Dbg_Intf.sync_stop_CPU_n_0 ;
  wire \Serial_Dbg_Intf.unchanged_i_1_n_0 ;
  wire Sleep_Decode;
  wire Sleep_Out;
  wire Status_Reg_En;
  wire TDO_Data_Reg__31;
  wire TDO_Instr_Reg__0;
  wire TDO_Status_Reg__17;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_Async_Reset.sync_reset_reg_0 ;
  wire \Use_Serial_Unified_Completion.completion_block_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_1 ;
  wire Valid_Instr_i;
  wire active_access_reg;
  wire active_access_reg_0;
  wire branch_with_delay;
  wire capture_1;
  wire [0:1]command_reg;
  wire command_reg_clear;
  wire command_reg_clear_i_1_n_0;
  wire config_with_scan_reset;
  wire continue_from_brk_TClk;
  wire [0:32]data_rd_reg;
  wire \data_rd_reg[32]_i_1_n_0 ;
  wire [1:0]\data_rd_reg_reg[28]_0 ;
  wire [0:0]\data_rd_reg_reg[30]_0 ;
  wire [0:32]data_read_reg;
  wire dbg_brki_hit;
  wire dbg_brki_hit_synced;
  wire dbg_clean_stop;
  wire dbg_halt_reset_mode_i_1_n_0;
  wire dbg_halt_reset_mode_reg_n_0;
  wire [0:0]\^delay_slot_instr_reg_0 ;
  wire delay_slot_instr_reg_1;
  wire ex_Valid;
  wire exception_i_2_n_0;
  wire executing_i_1_n_0;
  wire force_stop_TClk;
  wire force_stop_cmd_1;
  wire force_stop_cmd_hold;
  wire force_stop_cmd_i;
  wire force_stop_cmd_rst19_out;
  wire force_stop_overrun;
  wire has_inhibit_EX;
  wire inHibit_EX_reg;
  wire [0:1]instr_rd_reg;
  wire [0:1]instr_read_reg;
  wire jump;
  wire load_Store_i;
  wire load_Store_i_reg;
  wire no_sleeping1_out;
  wire normal_stop_TClk;
  wire normal_stop_cmd_hold;
  wire normal_stop_cmd_i;
  wire normal_stop_cmd_rst18_out;
  wire of_PipeRun;
  wire ok_To_Stop;
  wire p_0_in;
  wire p_0_in61_in;
  wire p_13_out;
  wire p_1_in;
  wire p_2_out;
  wire p_34_out;
  wire p_3_out;
  wire p_66_out;
  wire p_73_out;
  wire p_76_out;
  wire p_78_out;
  wire p_81_out;
  wire p_84_out;
  wire p_85_in;
  wire p_87_out;
  wire pc_brk_1;
  wire read_register_MSR;
  wire read_register_MSR_1_reg_0;
  wire read_register_PC;
  wire read_register_PC_1_reg_n_0;
  wire reg_Write_dbg;
  wire register_write;
  wire running_clock;
  wire running_clock_synced;
  wire [0:9]sample_synced;
  wire saved_reset_mode_dbg_halt;
  wire saved_reset_mode_dbg_halt_i_1_n_0;
  wire saved_reset_mode_sleep;
  wire saved_reset_mode_sleep_i_1_n_0;
  wire [3:1]sel0;
  wire [0:0]sel0_1;
  wire single_Step_N;
  wire single_Step_N_i_1_n_0;
  wire single_Step_TClk;
  wire single_step_N_1;
  wire [0:1]single_step_count;
  wire \single_step_count[0]_i_1_n_0 ;
  wire \single_step_count[1]_i_1_n_0 ;
  wire sleep_reset_mode_i_1_n_0;
  wire sleep_synced;
  wire start_dbg_exec_reg_n_0;
  wire start_single_cmd;
  wire start_single_step_i_1_n_0;
  wire start_single_step_reg_n_0;
  wire step_continue;
  wire step_continue_1;
  wire sync;
  wire sync_reset;
  wire unchanged;
  wire use_Imm_Reg;
  wire [0:1]wakeup_i;
  wire wb_read_imm_reg_1_i;
  wire \NLW_Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_sync_reset_UNCONNECTED ;
  wire [0:0]\NLW_Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_LOCKSTEP_Master_Out_UNCONNECTED ;
  wire [0:1]\NLW_Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_Reset_Mode_UNCONNECTED ;
  wire \NLW_Area_Debug_Control.Stop_CPU_FDRSE_Dbg_Stop_UNCONNECTED ;
  wire \NLW_Area_Debug_Control.Stop_CPU_FDRSE_dbg_stop_1_UNCONNECTED ;
  wire \NLW_Area_Debug_Control.Stop_CPU_FDRSE_trig_out_0_synced_UNCONNECTED ;
  wire \NLW_Area_Debug_Control.Stop_CPU_FDRSE_trig_out_0_synced_1_UNCONNECTED ;
  wire [0:1]\NLW_Area_Debug_Control.Stop_CPU_FDRSE_Reset_Mode_UNCONNECTED ;
  wire \NLW_Area_Debug_Control.Stop_Instr_Fetch_FDRSE_Use_Async_Reset.sync_reset_reg_0_UNCONNECTED ;
  wire \NLW_Area_Debug_Control.Stop_Instr_Fetch_FDRSE_saved_reset_mode_sleep_1_UNCONNECTED ;
  wire [0:1]\NLW_Area_Debug_Control.Stop_Instr_Fetch_FDRSE_Reset_Mode_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.SRL16E_4_Dbg_TDO_INST_0_i_5_0_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.SRL16E_4_Q0_out_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.SRL16E_4_Q3_in_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.SRL16E_4_tdo_config_word1_0_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I_Q11_in_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_Q3_out_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_Q4_out_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.sync_pause_Dbg_Clk_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.sync_pause_Pause_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.sync_pause_Scan_En_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.sync_pause_Scan_Reset_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.sync_pause_Scan_Reset_Sel_UNCONNECTED ;
  wire [0:0]\NLW_Serial_Dbg_Intf.sync_pause_D_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.sync_sample_Serial_Dbg_Intf.sample_synced_1_reg[8]_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.sync_sample_Synchronize.use_sync_reset.sync_reg[2]_UNCONNECTED ;
  wire [0:0]\NLW_Serial_Dbg_Intf.sync_sample_Dbg_Trig_Ack_In_UNCONNECTED ;
  wire [0:0]\NLW_Serial_Dbg_Intf.sync_sample_Dbg_Trig_Ack_Out_UNCONNECTED ;
  wire [0:0]\NLW_Serial_Dbg_Intf.sync_sample_Dbg_Trig_In_UNCONNECTED ;
  wire [0:0]\NLW_Serial_Dbg_Intf.sync_sample_Q_UNCONNECTED ;
  wire [0:0]\NLW_Serial_Dbg_Intf.sync_sample_Synchronize.use_sync_reset.sync_reg[1]_4_UNCONNECTED ;
  wire [8:9]\NLW_Serial_Dbg_Intf.sync_sample_sample_synced_UNCONNECTED ;
  wire \NLW_Serial_Dbg_Intf.sync_sleep_Sleep_UNCONNECTED ;

  cpu_microblaze_v11_0_0_MB_FDRSE \Area_Debug_Control.Dbg_Inhibit_EX_FDRSE 
       (.Clk(Clk),
        .LOCKSTEP_Master_Out(\NLW_Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_LOCKSTEP_Master_Out_UNCONNECTED [0]),
        .Reset_Mode(\NLW_Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_Reset_Mode_UNCONNECTED [0:1]),
        .S(S),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (start_dbg_exec_reg_n_0),
        .\Using_FPGA.Native_5 (\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_5 ),
        .Valid_Instr_i(Valid_Instr_i),
        .active_access_reg(force_stop_cmd_hold),
        .active_access_reg_0(force_stop_cmd_i),
        .active_access_reg_1(active_access_reg),
        .active_access_reg_2(active_access_reg_0),
        .\data_rd_reg_reg[32] (LOCKSTEP_Master_Out[35]),
        .\data_rd_reg_reg[32]_0 (read_register_MSR_1_reg_0),
        .\data_rd_reg_reg[32]_1 (register_write),
        .\data_rd_reg_reg[32]_2 (LOCKSTEP_Master_Out[34]),
        .ex_Valid(ex_Valid),
        .load_Store_i(load_Store_i),
        .load_Store_i_reg(load_Store_i_reg),
        .sync_reset(\NLW_Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_sync_reset_UNCONNECTED ));
  cpu_microblaze_v11_0_0_MB_FDRSE_18 \Area_Debug_Control.Stop_CPU_FDRSE 
       (.\Area_Debug_Control.dbg_stop_Detected_reg (\Area_Debug_Control.dbg_stop_Detected_reg_n_0 ),
        .Clk(Clk),
        .Dbg_Stop(\NLW_Area_Debug_Control.Stop_CPU_FDRSE_Dbg_Stop_UNCONNECTED ),
        .R(R),
        .Reset_Mode(\NLW_Area_Debug_Control.Stop_CPU_FDRSE_Reset_Mode_UNCONNECTED [0:1]),
        .S(S),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Area_Debug_Control.Stop_CPU_FDRSE_n_1 ),
        .\Using_FPGA.Native_2 (\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ),
        .\Using_FPGA.Native_5 (\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_5 ),
        .dbg_stop_1(\NLW_Area_Debug_Control.Stop_CPU_FDRSE_dbg_stop_1_UNCONNECTED ),
        .jump(jump),
        .sync_reset(sync_reset),
        .trig_out_0_synced(\NLW_Area_Debug_Control.Stop_CPU_FDRSE_trig_out_0_synced_UNCONNECTED ),
        .trig_out_0_synced_1(\NLW_Area_Debug_Control.Stop_CPU_FDRSE_trig_out_0_synced_1_UNCONNECTED ));
  cpu_microblaze_v11_0_0_MB_FDRSE_19 \Area_Debug_Control.Stop_Instr_Fetch_FDRSE 
       (.\Area_Debug_Control.normal_stop_cmd_hold_reg (\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_2 ),
        .Clk(Clk),
        .D(instr_rd_reg[1]),
        .E(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .PC_EX_i(PC_EX_i),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .Reset_Mode(\NLW_Area_Debug_Control.Stop_Instr_Fetch_FDRSE_Reset_Mode_UNCONNECTED [0:1]),
        .S(S),
        .Sleep_Out(Sleep_Out),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg_0 ),
        .\Use_Async_Reset.sync_reset_reg_0 (\NLW_Area_Debug_Control.Stop_Instr_Fetch_FDRSE_Use_Async_Reset.sync_reset_reg_0_UNCONNECTED ),
        .\Using_FPGA.Native_0 (LOCKSTEP_Master_Out[34]),
        .\Using_FPGA.Native_1 ({\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_7 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_8 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_9 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_10 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_11 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_12 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_13 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_14 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_15 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_16 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_17 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_18 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_19 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_20 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_21 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_22 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_23 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_24 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_25 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_26 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_27 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_28 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_29 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_30 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_31 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_32 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_33 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_34 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_35 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_36 }),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ),
        .\Using_FPGA.Native_4 (force_stop_cmd_i),
        .\Using_FPGA.Native_5 (force_stop_cmd_hold),
        .\Using_FPGA.Native_6 (\Area_Debug_Control.dbg_stop_Detected_reg_n_0 ),
        .\Using_FPGA.Native_7 (dbg_halt_reset_mode_reg_n_0),
        .\Using_FPGA.Native_8 (start_single_step_reg_n_0),
        .\Using_FPGA.Native_9 (\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .\data_rd_reg_reg[30] (\data_rd_reg_reg[30]_0 ),
        .\data_rd_reg_reg[31] (register_write),
        .\data_rd_reg_reg[31]_0 (read_register_MSR_1_reg_0),
        .\data_rd_reg_reg[31]_1 (read_register_PC_1_reg_n_0),
        .dbg_clean_stop(dbg_clean_stop),
        .exception_reg(\Serial_Dbg_Intf.status_reg_reg[25]_0 [31:0]),
        .exception_reg_0(exception_i_2_n_0),
        .force_stop_overrun(force_stop_overrun),
        .normal_stop_cmd_hold(normal_stop_cmd_hold),
        .normal_stop_cmd_i(normal_stop_cmd_i),
        .ok_To_Stop(ok_To_Stop),
        .saved_reset_mode_dbg_halt(saved_reset_mode_dbg_halt),
        .saved_reset_mode_sleep(saved_reset_mode_sleep),
        .saved_reset_mode_sleep_1(\NLW_Area_Debug_Control.Stop_Instr_Fetch_FDRSE_saved_reset_mode_sleep_1_UNCONNECTED ),
        .start_single_step_reg(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_5 ),
        .sync_reset(sync_reset),
        .trace_exception_taken_i_reg(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \Area_Debug_Control.dbg_brki_hit_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.dbg_brki_hit_reg_0 ),
        .Q(dbg_brki_hit),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hA3A0)) 
    \Area_Debug_Control.dbg_hit[0]_i_1 
       (.I0(single_step_N_1),
        .I1(step_continue_1),
        .I2(pc_brk_1),
        .I3(Raw),
        .O(\Area_Debug_Control.dbg_hit[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Area_Debug_Control.dbg_hit_i_1_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_1 ),
        .Q(pc_brk_1),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Area_Debug_Control.dbg_hit_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.dbg_hit[0]_i_1_n_0 ),
        .Q(Raw),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Area_Debug_Control.dbg_stop_Detected_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.Stop_CPU_FDRSE_n_1 ),
        .Q(\Area_Debug_Control.dbg_stop_Detected_reg_n_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Area_Debug_Control.force_stop_cmd_1_i_1 
       (.I0(force_stop_cmd_hold),
        .I1(force_stop_cmd_i),
        .O(\Area_Debug_Control.force_stop_cmd_1_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Area_Debug_Control.force_stop_cmd_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.force_stop_cmd_1_i_1_n_0 ),
        .Q(force_stop_cmd_1),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Area_Debug_Control.force_stop_cmd_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_2_out),
        .Q(force_stop_cmd_hold),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h02)) 
    \Area_Debug_Control.force_stop_overrun_i_1 
       (.I0(force_stop_cmd_1),
        .I1(force_stop_cmd_i),
        .I2(force_stop_cmd_hold),
        .O(p_34_out));
  FDRE #(
    .INIT(1'b0)) 
    \Area_Debug_Control.force_stop_overrun_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_34_out),
        .Q(force_stop_overrun),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h01010100FFFFFF00)) 
    \Area_Debug_Control.normal_stop_cmd_hold_i_1 
       (.I0(dbg_clean_stop),
        .I1(force_stop_cmd_hold),
        .I2(force_stop_cmd_i),
        .I3(normal_stop_cmd_i),
        .I4(normal_stop_cmd_hold),
        .I5(ok_To_Stop),
        .O(p_3_out));
  FDRE #(
    .INIT(1'b0)) 
    \Area_Debug_Control.normal_stop_cmd_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_3_out),
        .Q(normal_stop_cmd_hold),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Area_Debug_Control.single_step_N_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(single_Step_N),
        .Q(single_step_N_1),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'hE)) 
    \Area_Debug_Control.step_continue_1_i_1 
       (.I0(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .I1(start_single_step_reg_n_0),
        .O(step_continue));
  FDRE #(
    .INIT(1'b0)) 
    \Area_Debug_Control.step_continue_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(step_continue),
        .Q(step_continue_1),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Area_Optimized.register_write_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(reg_Write_dbg),
        .Q(register_write),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Area_Optimized.wb_read_imm_reg_1_i_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(use_Imm_Reg),
        .Q(wb_read_imm_reg_1_i),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h20000002)) 
    Dbg_TDO_INST_0_i_10
       (.I0(\Serial_Dbg_Intf.status_reg_reg_n_0_[0] ),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I2(A3),
        .I3(A1),
        .I4(A2),
        .O(Dbg_TDO_INST_0_i_10_n_0));
  LUT3 #(
    .INIT(8'hB8)) 
    Dbg_TDO_INST_0_i_15
       (.I0(instr_read_reg[1]),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I2(instr_read_reg[0]),
        .O(TDO_Instr_Reg__0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_16
       (.I0(Dbg_TDO_INST_0_i_27_n_0),
        .I1(Dbg_TDO_INST_0_i_28_n_0),
        .I2(Dbg_TDO_INST_0_i_29_n_0),
        .I3(Dbg_TDO_INST_0_i_30_n_0),
        .I4(Dbg_TDO_INST_0_i_31_n_0),
        .I5(Dbg_TDO_INST_0_i_32_n_0),
        .O(Dbg_TDO_INST_0_i_16_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_17
       (.I0(Dbg_TDO_INST_0_i_33_n_0),
        .I1(Dbg_TDO_INST_0_i_34_n_0),
        .I2(Dbg_TDO_INST_0_i_29_n_0),
        .I3(Dbg_TDO_INST_0_i_35_n_0),
        .I4(Dbg_TDO_INST_0_i_31_n_0),
        .I5(Dbg_TDO_INST_0_i_36_n_0),
        .O(Dbg_TDO_INST_0_i_17_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    Dbg_TDO_INST_0_i_18
       (.I0(A2),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A3),
        .O(Dbg_TDO_INST_0_i_18_n_0));
  LUT2 #(
    .INIT(4'h6)) 
    Dbg_TDO_INST_0_i_19
       (.I0(A1),
        .I1(A2),
        .O(Dbg_TDO_INST_0_i_19_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_20
       (.I0(\Serial_Dbg_Intf.status_reg_reg_n_0_[23] ),
        .I1(\Serial_Dbg_Intf.status_reg_reg_n_0_[22] ),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.status_reg_reg_n_0_[25] ),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I5(\Serial_Dbg_Intf.status_reg_reg_n_0_[24] ),
        .O(Dbg_TDO_INST_0_i_20_n_0));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'hB800)) 
    Dbg_TDO_INST_0_i_21
       (.I0(\Serial_Dbg_Intf.status_reg_reg_n_0_[27] ),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.status_reg_reg_n_0_[29] ),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(Dbg_TDO_INST_0_i_21_n_0));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    Dbg_TDO_INST_0_i_22
       (.I0(\Serial_Dbg_Intf.status_reg_reg_n_0_[19] ),
        .I1(\Serial_Dbg_Intf.status_reg_reg_n_0_[18] ),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.status_reg_reg_n_0_[20] ),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(Dbg_TDO_INST_0_i_22_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_27
       (.I0(data_read_reg[1]),
        .I1(data_read_reg[2]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[3]),
        .I5(data_read_reg[4]),
        .O(Dbg_TDO_INST_0_i_27_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_28
       (.I0(data_read_reg[5]),
        .I1(data_read_reg[6]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[7]),
        .I5(data_read_reg[8]),
        .O(Dbg_TDO_INST_0_i_28_n_0));
  LUT4 #(
    .INIT(16'h01FE)) 
    Dbg_TDO_INST_0_i_29
       (.I0(A2),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A3),
        .O(Dbg_TDO_INST_0_i_29_n_0));
  LUT6 #(
    .INIT(64'hACFAFFCFAC0A00C0)) 
    Dbg_TDO_INST_0_i_3
       (.I0(Dbg_TDO_INST_0_i_7_n_0),
        .I1(Dbg_TDO_INST_0_i_8_n_0),
        .I2(A3),
        .I3(Dbg_TDO_INST_0_i_9_n_0),
        .I4(sel0_1),
        .I5(Dbg_TDO_INST_0_i_10_n_0),
        .O(TDO_Status_Reg__17));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_30
       (.I0(data_read_reg[9]),
        .I1(data_read_reg[10]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[11]),
        .I5(data_read_reg[12]),
        .O(Dbg_TDO_INST_0_i_30_n_0));
  LUT3 #(
    .INIT(8'h1E)) 
    Dbg_TDO_INST_0_i_31
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I1(A1),
        .I2(A2),
        .O(Dbg_TDO_INST_0_i_31_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_32
       (.I0(data_read_reg[13]),
        .I1(data_read_reg[14]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[15]),
        .I5(data_read_reg[16]),
        .O(Dbg_TDO_INST_0_i_32_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_33
       (.I0(data_read_reg[17]),
        .I1(data_read_reg[18]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[19]),
        .I5(data_read_reg[20]),
        .O(Dbg_TDO_INST_0_i_33_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_34
       (.I0(data_read_reg[21]),
        .I1(data_read_reg[22]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[23]),
        .I5(data_read_reg[24]),
        .O(Dbg_TDO_INST_0_i_34_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_35
       (.I0(data_read_reg[25]),
        .I1(data_read_reg[26]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[27]),
        .I5(data_read_reg[28]),
        .O(Dbg_TDO_INST_0_i_35_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_36
       (.I0(data_read_reg[29]),
        .I1(data_read_reg[30]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[31]),
        .I5(data_read_reg[32]),
        .O(Dbg_TDO_INST_0_i_36_n_0));
  LUT6 #(
    .INIT(64'hFCFFAFCA0C00A0CA)) 
    Dbg_TDO_INST_0_i_6
       (.I0(Dbg_TDO_INST_0_i_16_n_0),
        .I1(Dbg_TDO_INST_0_i_17_n_0),
        .I2(sel0_1),
        .I3(Dbg_TDO_INST_0_i_18_n_0),
        .I4(sel0[1]),
        .I5(data_read_reg[0]),
        .O(TDO_Data_Reg__31));
  MUXF7 Dbg_TDO_INST_0_i_7
       (.I0(Dbg_TDO_INST_0_i_20_n_0),
        .I1(Dbg_TDO_INST_0_i_21_n_0),
        .O(Dbg_TDO_INST_0_i_7_n_0),
        .S(Dbg_TDO_INST_0_i_19_n_0));
  LUT6 #(
    .INIT(64'h2B2B2B2828282B28)) 
    Dbg_TDO_INST_0_i_8
       (.I0(Dbg_TDO_INST_0_i_22_n_0),
        .I1(A1),
        .I2(A2),
        .I3(\Serial_Dbg_Intf.status_reg_reg_n_0_[16] ),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I5(\Serial_Dbg_Intf.status_reg_reg_n_0_[17] ),
        .O(Dbg_TDO_INST_0_i_8_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    Dbg_TDO_INST_0_i_9
       (.I0(A1),
        .I1(A2),
        .O(Dbg_TDO_INST_0_i_9_n_0));
  FDRE #(
    .INIT(1'b0)) 
    Full_32_bit_1_reg
       (.C(Clk),
        .CE(delay_slot_instr_reg_1),
        .D(wb_read_imm_reg_1_i),
        .Q(Full_32_bit_1),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    Full_32_bit_reg
       (.C(Clk),
        .CE(delay_slot_instr_reg_1),
        .D(use_Imm_Reg),
        .Q(Full_32_bit),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'hE)) 
    I_AS_INST_0_i_1
       (.I0(LOCKSTEP_Master_Out[35]),
        .I1(IReady),
        .O(IReady1_out));
  LUT5 #(
    .INIT(32'h00000010)) 
    \Serial_Dbg_Intf.Instr_Insert_Reg_En_1_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[5]),
        .I3(Dbg_Reg_En[4]),
        .I4(Dbg_Reg_En[7]),
        .O(Instr_Insert_Reg_En));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.Instr_Insert_Reg_En_1_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Instr_Insert_Reg_En),
        .Q(Instr_Insert_Reg_En_1));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Dbg_Instr2_TCK_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(New_Dbg_Instr_TCK),
        .Q(New_Dbg_Instr2_TCK));
  LUT4 #(
    .INIT(16'h0008)) 
    \Serial_Dbg_Intf.New_Dbg_Instr_TCK_i_1 
       (.I0(Instr_Insert_Reg_En),
        .I1(p_85_in),
        .I2(instr_read_reg[1]),
        .I3(instr_read_reg[0]),
        .O(p_87_out));
  LUT5 #(
    .INIT(32'h40000000)) 
    \Serial_Dbg_Intf.New_Dbg_Instr_TCK_i_2 
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I1(A1),
        .I2(sel0_1),
        .I3(A3),
        .I4(A2),
        .O(p_85_in));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Dbg_Instr_TCK_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_87_out),
        .Q(New_Dbg_Instr_TCK));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[0] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[1] ),
        .Q(LOCKSTEP_Master_Out[31]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[10] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[11] ),
        .Q(LOCKSTEP_Master_Out[21]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[11] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[12] ),
        .Q(LOCKSTEP_Master_Out[20]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[12] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[13] ),
        .Q(LOCKSTEP_Master_Out[19]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[13] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[14] ),
        .Q(LOCKSTEP_Master_Out[18]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[14] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[15] ),
        .Q(LOCKSTEP_Master_Out[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[15] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[16] ),
        .Q(LOCKSTEP_Master_Out[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[16] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[17] ),
        .Q(LOCKSTEP_Master_Out[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[17] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[18] ),
        .Q(LOCKSTEP_Master_Out[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[18] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[19] ),
        .Q(LOCKSTEP_Master_Out[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[19] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[20] ),
        .Q(LOCKSTEP_Master_Out[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[1] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[2] ),
        .Q(LOCKSTEP_Master_Out[30]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[20] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[21] ),
        .Q(LOCKSTEP_Master_Out[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[21] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ),
        .Q(LOCKSTEP_Master_Out[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[22] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ),
        .Q(LOCKSTEP_Master_Out[9]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[23] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ),
        .Q(LOCKSTEP_Master_Out[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[24] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ),
        .Q(LOCKSTEP_Master_Out[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[25] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ),
        .Q(LOCKSTEP_Master_Out[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[26] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ),
        .Q(LOCKSTEP_Master_Out[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[27] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ),
        .Q(LOCKSTEP_Master_Out[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[28] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ),
        .Q(LOCKSTEP_Master_Out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[29] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ),
        .Q(LOCKSTEP_Master_Out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[2] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[3] ),
        .Q(LOCKSTEP_Master_Out[29]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[30] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ),
        .Q(LOCKSTEP_Master_Out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[31] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(Dbg_TDI),
        .Q(LOCKSTEP_Master_Out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[3] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[4] ),
        .Q(LOCKSTEP_Master_Out[28]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[4] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[5] ),
        .Q(LOCKSTEP_Master_Out[27]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[5] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[6] ),
        .Q(LOCKSTEP_Master_Out[26]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[6] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[7] ),
        .Q(LOCKSTEP_Master_Out[25]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[7] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[8] ),
        .Q(LOCKSTEP_Master_Out[24]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[8] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[9] ),
        .Q(LOCKSTEP_Master_Out[23]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[9] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[10] ),
        .Q(LOCKSTEP_Master_Out[22]));
  cpu_microblaze_v11_0_0_MB_SRL16E__parameterized0 \Serial_Dbg_Intf.SRL16E_1 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q_0(Q_0));
  cpu_microblaze_v11_0_0_MB_SRL16E__parameterized4 \Serial_Dbg_Intf.SRL16E_3 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q2_in(Q2_in));
  cpu_microblaze_v11_0_0_MB_SRL16E__parameterized5 \Serial_Dbg_Intf.SRL16E_4 
       (.Config_Reg_En(Config_Reg_En),
        .Data_Read_Reg_En(Data_Read_Reg_En),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_TDO_INST_0_i_2_0(\Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I_n_0 ),
        .Dbg_TDO_INST_0_i_5_0(\NLW_Serial_Dbg_Intf.SRL16E_4_Dbg_TDO_INST_0_i_5_0_UNCONNECTED ),
        .Instr_Insert_Reg_En(Instr_Insert_Reg_En),
        .Q({sel0,sel0_1,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q0_out(\NLW_Serial_Dbg_Intf.SRL16E_4_Q0_out_UNCONNECTED ),
        .Q2_in(Q2_in),
        .Q3_in(\NLW_Serial_Dbg_Intf.SRL16E_4_Q3_in_UNCONNECTED ),
        .Status_Reg_En(Status_Reg_En),
        .TDO_Data_Reg__31(TDO_Data_Reg__31),
        .TDO_Instr_Reg__0(TDO_Instr_Reg__0),
        .TDO_Status_Reg__17(TDO_Status_Reg__17),
        .tdo_config_word1_0(\NLW_Serial_Dbg_Intf.SRL16E_4_tdo_config_word1_0_UNCONNECTED ));
  cpu_microblaze_v11_0_0_MB_SRL16E__parameterized2 \Serial_Dbg_Intf.The_Cache_Addresses[1].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q6_out(Q6_out));
  cpu_microblaze_v11_0_0_MB_SRL16E__parameterized3 \Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_TDO_INST_0_i_5(\Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_n_0 ),
        .Q({sel0[2:1],sel0_1,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q11_in(\NLW_Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I_Q11_in_UNCONNECTED ),
        .Q6_out(Q6_out),
        .Q_0(Q_0),
        .\Serial_Dbg_Intf.shift_count_reg[6] (\Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I_n_0 ));
  cpu_microblaze_v11_0_0_MB_SRL16E__parameterized2_24 \Serial_Dbg_Intf.The_Cache_Addresses[5].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q2_out(Q2_out));
  cpu_microblaze_v11_0_0_MB_SRL16E__parameterized3_25 \Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({sel0[1],sel0_1,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q2_out(Q2_out),
        .Q3_out(\NLW_Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_Q3_out_UNCONNECTED ),
        .Q4_out(\NLW_Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_Q4_out_UNCONNECTED ),
        .\Serial_Dbg_Intf.shift_count_reg[5] (\Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.capture_1_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Dbg_Capture),
        .Q(capture_1));
  LUT5 #(
    .INIT(32'h00000010)) 
    \Serial_Dbg_Intf.command_reg[0]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Dbg_Reg_En[7]),
        .I2(Dbg_Reg_En[6]),
        .I3(Dbg_Reg_En[4]),
        .I4(Dbg_Reg_En[5]),
        .O(Command_Reg_En));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(command_reg_clear),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ),
        .Q(command_reg[0]));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[1] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(command_reg_clear),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ),
        .Q(command_reg[1]));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.continue_from_brk_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ),
        .Q(continue_from_brk_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.continue_from_brk_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_13_out),
        .Q(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .R(sync_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[4] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[5] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[8] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ),
        .Q(Q));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[0]),
        .Q(data_read_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[10] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[10]),
        .Q(data_read_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[11] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[11]),
        .Q(data_read_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[12] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[12]),
        .Q(data_read_reg[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[13] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[13]),
        .Q(data_read_reg[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[14] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[14]),
        .Q(data_read_reg[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[15] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[15]),
        .Q(data_read_reg[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[16]),
        .Q(data_read_reg[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[17]),
        .Q(data_read_reg[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[18] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[18]),
        .Q(data_read_reg[18]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[19] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[19]),
        .Q(data_read_reg[19]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[1]),
        .Q(data_read_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[20] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[20]),
        .Q(data_read_reg[20]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[21] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[21]),
        .Q(data_read_reg[21]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[22] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[22]),
        .Q(data_read_reg[22]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[23] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[23]),
        .Q(data_read_reg[23]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[24] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[24]),
        .Q(data_read_reg[24]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[25] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[25]),
        .Q(data_read_reg[25]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[26] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[26]),
        .Q(data_read_reg[26]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[27] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[27]),
        .Q(data_read_reg[27]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[28] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[28]),
        .Q(data_read_reg[28]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[29] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[29]),
        .Q(data_read_reg[29]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[2] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[2]),
        .Q(data_read_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[30] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[30]),
        .Q(data_read_reg[30]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[31] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[31]),
        .Q(data_read_reg[31]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[32] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[32]),
        .Q(data_read_reg[32]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[3] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[3]),
        .Q(data_read_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[4] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[4]),
        .Q(data_read_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[5] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[5]),
        .Q(data_read_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[6] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[6]),
        .Q(data_read_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[7] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[7]),
        .Q(data_read_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[8] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[8]),
        .Q(data_read_reg[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[9] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[9]),
        .Q(data_read_reg[9]));
  LUT5 #(
    .INIT(32'h00000010)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[4]),
        .I4(Dbg_Reg_En[5]),
        .O(Control_Reg_En));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_i_2 
       (.I0(Sleep_Out),
        .I1(Sleep_Decode),
        .O(no_sleeping1_out));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_i_3 
       (.I0(Dbg_Reg_En[0]),
        .I1(Dbg_Reg_En[1]),
        .I2(Dbg_Reg_En[3]),
        .I3(Dbg_Reg_En[2]),
        .O(\Use_Serial_Unified_Completion.completion_block_reg ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(no_sleeping1_out),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ),
        .Q(LOCKSTEP_Master_Out[33]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Serial_Dbg_Intf.force_stop_TClk_i_1 
       (.I0(force_stop_cmd_hold),
        .I1(force_stop_cmd_i),
        .O(force_stop_cmd_rst19_out));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.force_stop_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(force_stop_cmd_rst19_out),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ),
        .Q(force_stop_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.force_stop_cmd_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_81_out),
        .Q(force_stop_cmd_i),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.if_debug_ready_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_66_out),
        .Q(LOCKSTEP_Master_Out[35]),
        .R(sync_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.instr_read_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(instr_rd_reg[0]),
        .Q(instr_read_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.instr_read_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(instr_rd_reg[1]),
        .Q(instr_read_reg[1]));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Insert_Reg_En_1),
        .Q(\Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ),
        .R(sync_reset));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Serial_Dbg_Intf.normal_stop_TClk_i_1 
       (.I0(normal_stop_cmd_hold),
        .I1(normal_stop_cmd_i),
        .O(normal_stop_cmd_rst18_out));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.normal_stop_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(normal_stop_cmd_rst18_out),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ),
        .Q(normal_stop_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.normal_stop_cmd_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_84_out),
        .Q(normal_stop_cmd_i),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.read_register_MSR_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_76_out),
        .Q(read_register_MSR),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.read_register_PC_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_73_out),
        .Q(read_register_PC),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.sample_synced_1_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[0]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[0] ),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.sample_synced_1_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[1]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[1] ),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.sample_synced_1_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[2]),
        .Q(p_1_in),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.sample_synced_1_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[3]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[3] ),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.sample_synced_1_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[4]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[4] ),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.sample_synced_1_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[5]),
        .Q(p_0_in),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.sample_synced_1_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[6]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.sample_synced_1_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[7]),
        .Q(p_0_in61_in),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.shift_count[0]_i_1 
       (.I0(Dbg_Shift),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(\Serial_Dbg_Intf.shift_count[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h28)) 
    \Serial_Dbg_Intf.shift_count[1]_i_1 
       (.I0(Dbg_Shift),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(\Serial_Dbg_Intf.shift_count[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \Serial_Dbg_Intf.shift_count[2]_i_1 
       (.I0(Dbg_Shift),
        .I1(A2),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(\Serial_Dbg_Intf.shift_count[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \Serial_Dbg_Intf.shift_count[3]_i_1 
       (.I0(Dbg_Shift),
        .I1(A3),
        .I2(A2),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(A1),
        .O(\Serial_Dbg_Intf.shift_count[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \Serial_Dbg_Intf.shift_count[4]_i_1 
       (.I0(Dbg_Shift),
        .I1(sel0_1),
        .I2(A3),
        .I3(A1),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I5(A2),
        .O(\Serial_Dbg_Intf.shift_count[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \Serial_Dbg_Intf.shift_count[5]_i_1 
       (.I0(Dbg_Shift),
        .I1(sel0[1]),
        .I2(\Serial_Dbg_Intf.shift_count[5]_i_2_n_0 ),
        .O(\Serial_Dbg_Intf.shift_count[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \Serial_Dbg_Intf.shift_count[5]_i_2 
       (.I0(sel0_1),
        .I1(A2),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(A3),
        .O(\Serial_Dbg_Intf.shift_count[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \Serial_Dbg_Intf.shift_count[6]_i_1 
       (.I0(Dbg_Shift),
        .I1(sel0[2]),
        .I2(\Serial_Dbg_Intf.shift_count[7]_i_2_n_0 ),
        .O(\Serial_Dbg_Intf.shift_count[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \Serial_Dbg_Intf.shift_count[7]_i_1 
       (.I0(Dbg_Shift),
        .I1(sel0[3]),
        .I2(sel0[2]),
        .I3(\Serial_Dbg_Intf.shift_count[7]_i_2_n_0 ),
        .O(\Serial_Dbg_Intf.shift_count[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \Serial_Dbg_Intf.shift_count[7]_i_2 
       (.I0(sel0[1]),
        .I1(A3),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(A2),
        .I5(sel0_1),
        .O(\Serial_Dbg_Intf.shift_count[7]_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[0] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[0]_i_1_n_0 ),
        .Q(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[1] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[1]_i_1_n_0 ),
        .Q(A1));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[2] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[2]_i_1_n_0 ),
        .Q(A2));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[3] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[3]_i_1_n_0 ),
        .Q(A3));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[4] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[4]_i_1_n_0 ),
        .Q(sel0_1));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[5] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[5]_i_1_n_0 ),
        .Q(sel0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[6] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[6]_i_1_n_0 ),
        .Q(sel0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[7] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[7]_i_1_n_0 ),
        .Q(sel0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[10] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[11] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[10] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[11] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[12] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[11] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[12] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[13] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[12] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[13] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[14] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[13] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[14] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[15] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[14] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[15] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[16] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[15] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[16] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[17] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[16] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[17] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[18] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[17] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[18] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[19] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[18] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[19] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[20] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[19] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[1] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[2] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[20] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[21] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[20] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[21] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[21] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[22] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[23] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[24] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[25] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[26] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[27] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[28] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[29] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[2] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[3] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[30] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[31] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Dbg_TDI),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[3] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[4] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[4] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[5] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[5] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[6] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[6] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[7] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[7] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[8] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[7] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[8] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[9] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[8] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[9] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[10] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[9] ));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.single_Step_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(start_single_step_reg_n_0),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ),
        .Q(single_Step_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.start_single_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_78_out),
        .Q(start_single_cmd),
        .R(sync_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(sync),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.sync_stop_CPU_n_0 ),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[16] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(sync_reset),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[17] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[18] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(Full_32_bit),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[18] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[19] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(\^delay_slot_instr_reg_0 ),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[19] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[20] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(Full_32_bit_1),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[20] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[22] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.status_reg_reg[22]_0 ),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[22] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[23] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(dbg_brki_hit_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[23] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[24] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(running_clock_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[24] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[25] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.status_reg_reg[25]_0 [32]),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[25] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[27] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(sleep_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[27] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[29] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(unchanged),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[29] ));
  cpu_microblaze_v11_0_0_mb_sync_bit__parameterized0 \Serial_Dbg_Intf.sync_dbg_brk_hit 
       (.D(dbg_brki_hit_synced),
        .Dbg_Clk(Dbg_Clk),
        .config_with_scan_reset(config_with_scan_reset),
        .dbg_brki_hit(dbg_brki_hit));
  cpu_microblaze_v11_0_0_mb_sync_vec \Serial_Dbg_Intf.sync_dbg_hit 
       (.D(sync),
        .Dbg_Clk(Dbg_Clk),
        .Raw(Raw),
        .config_with_scan_reset(config_with_scan_reset));
  cpu_microblaze_v11_0_0_mb_sync_bit__parameterized0_28 \Serial_Dbg_Intf.sync_pause 
       (.D(\NLW_Serial_Dbg_Intf.sync_pause_D_UNCONNECTED [0]),
        .Dbg_Clk(\NLW_Serial_Dbg_Intf.sync_pause_Dbg_Clk_UNCONNECTED ),
        .Pause(\NLW_Serial_Dbg_Intf.sync_pause_Pause_UNCONNECTED ),
        .Scan_En(\NLW_Serial_Dbg_Intf.sync_pause_Scan_En_UNCONNECTED ),
        .Scan_Reset(\NLW_Serial_Dbg_Intf.sync_pause_Scan_Reset_UNCONNECTED ),
        .Scan_Reset_Sel(\NLW_Serial_Dbg_Intf.sync_pause_Scan_Reset_Sel_UNCONNECTED ),
        .config_with_scan_reset(config_with_scan_reset));
  cpu_microblaze_v11_0_0_mb_sync_bit__parameterized0_29 \Serial_Dbg_Intf.sync_running_clock 
       (.D(running_clock_synced),
        .Dbg_Clk(Dbg_Clk),
        .config_with_scan_reset(config_with_scan_reset),
        .running_clock(running_clock));
  cpu_microblaze_v11_0_0_mb_sync_vec__parameterized0 \Serial_Dbg_Intf.sync_sample 
       (.Clk(Clk),
        .D(normal_stop_TClk),
        .Dbg_Trig_Ack_In(\NLW_Serial_Dbg_Intf.sync_sample_Dbg_Trig_Ack_In_UNCONNECTED [0]),
        .Dbg_Trig_Ack_Out(\NLW_Serial_Dbg_Intf.sync_sample_Dbg_Trig_Ack_Out_UNCONNECTED [0]),
        .Dbg_Trig_In(\NLW_Serial_Dbg_Intf.sync_sample_Dbg_Trig_In_UNCONNECTED [0]),
        .Dbg_Trig_Out(Dbg_Trig_Out[0]),
        .Q({\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[0] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[1] ,p_1_in,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[3] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[4] ,p_0_in,p_0_in61_in,\NLW_Serial_Dbg_Intf.sync_sample_Q_UNCONNECTED [0]}),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ),
        .\Serial_Dbg_Intf.sample_synced_1_reg[8] (\NLW_Serial_Dbg_Intf.sync_sample_Serial_Dbg_Intf.sample_synced_1_reg[8]_UNCONNECTED ),
        .\Synchronize.use_sync_reset.sync_reg[1] (force_stop_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (single_Step_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_1 ({command_reg[0],command_reg[1]}),
        .\Synchronize.use_sync_reset.sync_reg[1]_2 (continue_from_brk_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_3 (New_Dbg_Instr2_TCK),
        .\Synchronize.use_sync_reset.sync_reg[1]_4 (\NLW_Serial_Dbg_Intf.sync_sample_Synchronize.use_sync_reset.sync_reg[1]_4_UNCONNECTED [0]),
        .\Synchronize.use_sync_reset.sync_reg[2] (\NLW_Serial_Dbg_Intf.sync_sample_Synchronize.use_sync_reset.sync_reg[2]_UNCONNECTED ),
        .p_13_out(p_13_out),
        .p_66_out(p_66_out),
        .p_73_out(p_73_out),
        .p_76_out(p_76_out),
        .p_78_out(p_78_out),
        .p_81_out(p_81_out),
        .p_84_out(p_84_out),
        .sample_synced({sample_synced[0:7],\NLW_Serial_Dbg_Intf.sync_sample_sample_synced_UNCONNECTED [8:9]}),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_mb_sync_bit__parameterized0_30 \Serial_Dbg_Intf.sync_sleep 
       (.D(sleep_synced),
        .Dbg_Clk(Dbg_Clk),
        .Sleep(\NLW_Serial_Dbg_Intf.sync_sleep_Sleep_UNCONNECTED ),
        .Sleep_Decode(Sleep_Decode),
        .Sleep_Out(Sleep_Out),
        .config_with_scan_reset(config_with_scan_reset));
  cpu_microblaze_v11_0_0_mb_sync_bit__parameterized0_31 \Serial_Dbg_Intf.sync_stop_CPU 
       (.D(\Serial_Dbg_Intf.sync_stop_CPU_n_0 ),
        .Dbg_Clk(Dbg_Clk),
        .\Single_Synchronize.use_async_reset.sync_reg_0 (LOCKSTEP_Master_Out[34]),
        .config_with_scan_reset(config_with_scan_reset));
  LUT6 #(
    .INIT(64'hFFFFFFFF00001000)) 
    \Serial_Dbg_Intf.unchanged_i_1 
       (.I0(Dbg_Reg_En[5]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[6]),
        .I4(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I5(unchanged),
        .O(\Serial_Dbg_Intf.unchanged_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.unchanged_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.unchanged_i_1_n_0 ),
        .Q(unchanged));
  cpu_address_hit \Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I 
       (.Address(Address),
        .\Area_Debug_Control.normal_stop_cmd_hold_reg (\Area_Debug_Control.normal_stop_cmd_hold_reg_0 ),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_TDI(Dbg_TDI),
        .Hit(\Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_1 ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .Single_Step_N(single_Step_N),
        .\Using_FPGA.Native_i_6 (force_stop_cmd_i),
        .\Using_FPGA.Native_i_6_0 (force_stop_cmd_hold),
        .normal_stop_cmd_hold(normal_stop_cmd_hold),
        .normal_stop_cmd_i(normal_stop_cmd_i));
  LUT2 #(
    .INIT(4'hE)) 
    command_reg_clear_i_1
       (.I0(read_register_MSR_1_reg_0),
        .I1(read_register_PC_1_reg_n_0),
        .O(command_reg_clear_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    command_reg_clear_reg
       (.C(Clk),
        .CE(1'b1),
        .D(command_reg_clear_i_1_n_0),
        .Q(command_reg_clear),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hABBBA888)) 
    \data_rd_reg[32]_i_1 
       (.I0(\Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_4 ),
        .I1(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .I2(LOCKSTEP_Master_Out[35]),
        .I3(LOCKSTEP_Master_Out[34]),
        .I4(data_rd_reg[32]),
        .O(\data_rd_reg[32]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[0] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_7 ),
        .Q(data_rd_reg[0]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[10] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_17 ),
        .Q(data_rd_reg[10]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[11] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_18 ),
        .Q(data_rd_reg[11]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[12] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_19 ),
        .Q(data_rd_reg[12]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[13] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_20 ),
        .Q(data_rd_reg[13]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[14] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_21 ),
        .Q(data_rd_reg[14]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[15] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_22 ),
        .Q(data_rd_reg[15]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[16] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_23 ),
        .Q(data_rd_reg[16]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[17] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_24 ),
        .Q(data_rd_reg[17]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[18] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_25 ),
        .Q(data_rd_reg[18]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[19] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_26 ),
        .Q(data_rd_reg[19]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[1] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_8 ),
        .Q(data_rd_reg[1]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[20] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_27 ),
        .Q(data_rd_reg[20]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[21] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_28 ),
        .Q(data_rd_reg[21]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[22] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_29 ),
        .Q(data_rd_reg[22]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[23] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_30 ),
        .Q(data_rd_reg[23]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[24] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_31 ),
        .Q(data_rd_reg[24]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[25] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_32 ),
        .Q(data_rd_reg[25]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[26] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_33 ),
        .Q(data_rd_reg[26]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[27] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_34 ),
        .Q(data_rd_reg[27]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[28] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\data_rd_reg_reg[28]_0 [1]),
        .Q(data_rd_reg[28]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[29] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\data_rd_reg_reg[28]_0 [0]),
        .Q(data_rd_reg[29]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[2] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_9 ),
        .Q(data_rd_reg[2]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[30] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_35 ),
        .Q(data_rd_reg[30]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[31] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_36 ),
        .Q(data_rd_reg[31]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[32] 
       (.C(Clk),
        .CE(1'b1),
        .D(\data_rd_reg[32]_i_1_n_0 ),
        .Q(data_rd_reg[32]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[3] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_10 ),
        .Q(data_rd_reg[3]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[4] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_11 ),
        .Q(data_rd_reg[4]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[5] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_12 ),
        .Q(data_rd_reg[5]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[6] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_13 ),
        .Q(data_rd_reg[6]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[7] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_14 ),
        .Q(data_rd_reg[7]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[8] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_15 ),
        .Q(data_rd_reg[8]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \data_rd_reg_reg[9] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_16 ),
        .Q(data_rd_reg[9]),
        .R(sync_reset));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h0010)) 
    dbg_halt_reset_mode_i_1
       (.I0(sync_reset),
        .I1(step_continue),
        .I2(dbg_halt_reset_mode_reg_n_0),
        .I3(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .O(dbg_halt_reset_mode_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    dbg_halt_reset_mode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(dbg_halt_reset_mode_i_1_n_0),
        .Q(dbg_halt_reset_mode_reg_n_0),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    delay_slot_instr_reg
       (.C(Clk),
        .CE(delay_slot_instr_reg_1),
        .D(branch_with_delay),
        .Q(\^delay_slot_instr_reg_0 ),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'h2)) 
    exception_i_2
       (.I0(start_dbg_exec_reg_n_0),
        .I1(has_inhibit_EX),
        .O(exception_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    exception_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .Q(instr_rd_reg[1]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h020F0202)) 
    executing_i_1
       (.I0(start_dbg_exec_reg_n_0),
        .I1(has_inhibit_EX),
        .I2(force_stop_overrun),
        .I3(\Serial_Dbg_Intf.status_reg_reg[25]_0 [31]),
        .I4(instr_rd_reg[0]),
        .O(executing_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    executing_reg
       (.C(Clk),
        .CE(1'b1),
        .D(executing_i_1_n_0),
        .Q(instr_rd_reg[0]),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h0E)) 
    inHibit_EX_i_3
       (.I0(IReady),
        .I1(LOCKSTEP_Master_Out[35]),
        .I2(inHibit_EX_reg),
        .O(\Serial_Dbg_Intf.if_debug_ready_i_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    read_register_MSR_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_MSR),
        .Q(read_register_MSR_1_reg_0),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    read_register_PC_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_PC),
        .Q(read_register_PC_1_reg_n_0),
        .R(sync_reset));
  (* OPT_MODIFIED = "RETARGET " *) 
  FDCE #(
    .INIT(1'b0)) 
    running_clock_reg
       (.C(Clk),
        .CE(1'b1),
        .CLR(capture_1),
        .D(1'b1),
        .Q(running_clock));
  (* OPT_MODIFIED = "RETARGET " *) 
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT2 #(
    .INIT(4'h4)) 
    saved_reset_mode_dbg_halt_i_1
       (.I0(sync_reset),
        .I1(saved_reset_mode_dbg_halt),
        .O(saved_reset_mode_dbg_halt_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    saved_reset_mode_dbg_halt_reg
       (.C(Clk),
        .CE(1'b1),
        .D(saved_reset_mode_dbg_halt_i_1_n_0),
        .Q(saved_reset_mode_dbg_halt),
        .R(1'b0));
  (* OPT_MODIFIED = "RETARGET " *) 
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT2 #(
    .INIT(4'h4)) 
    saved_reset_mode_sleep_i_1
       (.I0(sync_reset),
        .I1(Sleep_Out),
        .O(saved_reset_mode_sleep_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    saved_reset_mode_sleep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(saved_reset_mode_sleep_i_1_n_0),
        .Q(saved_reset_mode_sleep),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEFFFEF00)) 
    single_Step_N_i_1
       (.I0(single_step_count[1]),
        .I1(single_step_count[0]),
        .I2(start_single_step_reg_n_0),
        .I3(ok_To_Stop),
        .I4(single_Step_N),
        .O(single_Step_N_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    single_Step_N_reg
       (.C(Clk),
        .CE(1'b1),
        .D(single_Step_N_i_1_n_0),
        .Q(single_Step_N),
        .S(sync_reset));
  LUT5 #(
    .INIT(32'hCCAF33A0)) 
    \single_step_count[0]_i_1 
       (.I0(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ),
        .I1(single_step_count[1]),
        .I2(start_single_cmd),
        .I3(ok_To_Stop),
        .I4(single_step_count[0]),
        .O(\single_step_count[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0BF8)) 
    \single_step_count[1]_i_1 
       (.I0(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ),
        .I1(start_single_cmd),
        .I2(ok_To_Stop),
        .I3(single_step_count[1]),
        .O(\single_step_count[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \single_step_count_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\single_step_count[0]_i_1_n_0 ),
        .Q(single_step_count[0]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \single_step_count_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\single_step_count[1]_i_1_n_0 ),
        .Q(single_step_count[1]),
        .R(sync_reset));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT5 #(
    .INIT(32'h001F0000)) 
    sleep_reset_mode_i_1
       (.I0(wakeup_i[0]),
        .I1(wakeup_i[1]),
        .I2(saved_reset_mode_sleep),
        .I3(sync_reset),
        .I4(Sleep_Out),
        .O(sleep_reset_mode_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    sleep_reset_mode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sleep_reset_mode_i_1_n_0),
        .Q(Sleep_Out),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    start_dbg_exec_reg
       (.C(Clk),
        .CE(1'b1),
        .D(LOCKSTEP_Master_Out[35]),
        .Q(start_dbg_exec_reg_n_0),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hFCAAFFAA)) 
    start_single_step_i_1
       (.I0(start_single_cmd),
        .I1(single_step_count[1]),
        .I2(single_step_count[0]),
        .I3(start_single_step_reg_n_0),
        .I4(ok_To_Stop),
        .O(start_single_step_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    start_single_step_reg
       (.C(Clk),
        .CE(1'b1),
        .D(start_single_step_i_1_n_0),
        .Q(start_single_step_reg_n_0),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "Decode" *) 
module cpu_Decode
   (IReady,
    Buffer_Addr,
    reg1_Addr,
    imm_Value,
    nonvalid_IFetch_n_reg_0,
    jump,
    D,
    of_PipeRun,
    \write_Addr_I_reg[0]_0 ,
    ex_Valid,
    res_Forward1,
    res_Forward2,
    alu_Op,
    carry_In,
    Reg_Test_Equal,
    reg_Test_Equal_N,
    opsel1_SPR,
    exception_kind,
    Pause_Ack,
    compare_Instr,
    Unsigned_Op,
    Select_Logic,
    has_inhibit_EX,
    dbg_clean_stop,
    Valid_Instr_i,
    Logic_Oper,
    \instr_EX_i_reg[25]_0 ,
    \instr_EX_i_reg[26]_0 ,
    is_swx_I_reg_0,
    \Using_LWX_SWX_instr.reservation_reg_0 ,
    load_Store_i,
    Hibernate,
    Sleep_Decode,
    Suspend,
    isbyte,
    isdoublet,
    use_Imm_Reg,
    sext8,
    sext16,
    is_swx_I_reg_1,
    \Using_FPGA.set_BIP_I_reg_0 ,
    \Using_FPGA.Native ,
    \Using_FPGA.enable_Interrupts_I_reg_0 ,
    Q,
    DI,
    PC_Write,
    \Using_FPGA.Native_0 ,
    MSR_Rst,
    reg_Write_dbg,
    Reg_Write,
    reg_Write_I,
    ex_Valid_reg_0,
    ok_To_Stop,
    p_2_out,
    E,
    \Area_Debug_Control.dbg_brki_hit_reg ,
    \Area_Debug_Control.normal_stop_cmd_hold_reg ,
    \Using_FPGA.Native_1 ,
    D_0,
    D_1,
    D_2,
    D_3,
    D_4,
    D_5,
    D_6,
    D_7,
    D_8,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    D_17,
    D_18,
    D_19,
    D_20,
    D_21,
    D_22,
    D_23,
    D_24,
    D_25,
    D_26,
    D_27,
    D_28,
    D_29,
    D_30,
    D_31,
    branch_with_delay,
    \Use_Async_Reset.sync_reset_reg ,
    data_Read_Mask,
    \Using_FPGA.Native_2 ,
    Shifted,
    Interrupt_Ack,
    Shift_Oper,
    \Result_Sel_reg[0]_0 ,
    R,
    Clk,
    Y,
    DReady0_out,
    IReady1_out,
    \LOCKSTEP_Out_reg[3] ,
    \Using_FPGA.Native_3 ,
    dbg_pause,
    sync_reset,
    Op1_Low,
    LO,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    Reg_zero,
    \Using_dynamic_instr_Address.old_IE_value_reg_0 ,
    missed_IFetch_reg_0,
    missed_IFetch_reg_1,
    using_Imm_reg_0,
    mem_access,
    break_Pipe_i_reg_0,
    Op1_Shift,
    \Using_LWX_SWX_instr.reservation_reg_1 ,
    inHibit_EX_reg_0,
    \Using_LWX_SWX_instr.reservation_reg_2 ,
    DReady,
    MEM_DAXI_Data_Strobe,
    force_stop_cmd_i,
    force_stop_cmd_hold,
    dbg_brki_hit,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    Interrupt,
    \Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ,
    trace_reg_write_novalid,
    \Using_FPGA.Native_40 ,
    \Using_FPGA.Native_41 ,
    delay_slot_instr_reg,
    wakeup_i,
    \Area_Debug_Control.dbg_brki_hit_i_2 ,
    \Using_FPGA.Native_42 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output IReady;
  output [2:0]Buffer_Addr;
  output [0:4]reg1_Addr;
  output [0:15]imm_Value;
  output nonvalid_IFetch_n_reg_0;
  output jump;
  output [6:0]D;
  output of_PipeRun;
  output [4:0]\write_Addr_I_reg[0]_0 ;
  output ex_Valid;
  output res_Forward1;
  output res_Forward2;
  output [0:1]alu_Op;
  output carry_In;
  output Reg_Test_Equal;
  output reg_Test_Equal_N;
  output opsel1_SPR;
  output [0:0]exception_kind;
  output Pause_Ack;
  output compare_Instr;
  output Unsigned_Op;
  output Select_Logic;
  output has_inhibit_EX;
  output dbg_clean_stop;
  output Valid_Instr_i;
  output [0:1]Logic_Oper;
  output \instr_EX_i_reg[25]_0 ;
  output \instr_EX_i_reg[26]_0 ;
  output is_swx_I_reg_0;
  output \Using_LWX_SWX_instr.reservation_reg_0 ;
  output load_Store_i;
  output Hibernate;
  output Sleep_Decode;
  output Suspend;
  output isbyte;
  output isdoublet;
  output use_Imm_Reg;
  output sext8;
  output sext16;
  output is_swx_I_reg_1;
  output \Using_FPGA.set_BIP_I_reg_0 ;
  output \Using_FPGA.Native ;
  output \Using_FPGA.enable_Interrupts_I_reg_0 ;
  output [27:0]Q;
  output DI;
  output PC_Write;
  output \Using_FPGA.Native_0 ;
  output MSR_Rst;
  output reg_Write_dbg;
  output Reg_Write;
  output reg_Write_I;
  output [0:0]ex_Valid_reg_0;
  output ok_To_Stop;
  output p_2_out;
  output [0:0]E;
  output \Area_Debug_Control.dbg_brki_hit_reg ;
  output \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  output \Using_FPGA.Native_1 ;
  output D_0;
  output D_1;
  output D_2;
  output D_3;
  output D_4;
  output D_5;
  output D_6;
  output D_7;
  output D_8;
  output D_9;
  output D_10;
  output D_11;
  output D_12;
  output D_13;
  output D_14;
  output D_15;
  output D_16;
  output D_17;
  output D_18;
  output D_19;
  output D_20;
  output D_21;
  output D_22;
  output D_23;
  output D_24;
  output D_25;
  output D_26;
  output D_27;
  output D_28;
  output D_29;
  output D_30;
  output D_31;
  output branch_with_delay;
  output \Use_Async_Reset.sync_reset_reg ;
  output [1:0]data_Read_Mask;
  output \Using_FPGA.Native_2 ;
  output Shifted;
  output [0:1]Interrupt_Ack;
  output Shift_Oper;
  output [1:0]\Result_Sel_reg[0]_0 ;
  input R;
  input Clk;
  input [0:31]Y;
  input DReady0_out;
  input IReady1_out;
  input \LOCKSTEP_Out_reg[3] ;
  input \Using_FPGA.Native_3 ;
  input dbg_pause;
  input sync_reset;
  input [0:2]Op1_Low;
  input LO;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input Reg_zero;
  input \Using_dynamic_instr_Address.old_IE_value_reg_0 ;
  input missed_IFetch_reg_0;
  input missed_IFetch_reg_1;
  input using_Imm_reg_0;
  input mem_access;
  input [2:0]break_Pipe_i_reg_0;
  input Op1_Shift;
  input \Using_LWX_SWX_instr.reservation_reg_1 ;
  input inHibit_EX_reg_0;
  input \Using_LWX_SWX_instr.reservation_reg_2 ;
  input DReady;
  input MEM_DAXI_Data_Strobe;
  input force_stop_cmd_i;
  input force_stop_cmd_hold;
  input dbg_brki_hit;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input [15:0]\Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;
  input \Using_FPGA.Native_33 ;
  input \Using_FPGA.Native_34 ;
  input \Using_FPGA.Native_35 ;
  input \Using_FPGA.Native_36 ;
  input \Using_FPGA.Native_37 ;
  input \Using_FPGA.Native_38 ;
  input \Using_FPGA.Native_39 ;
  input Interrupt;
  input \Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ;
  input trace_reg_write_novalid;
  input \Using_FPGA.Native_40 ;
  input \Using_FPGA.Native_41 ;
  input delay_slot_instr_reg;
  input [0:1]wakeup_i;
  input [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  input \Using_FPGA.Native_42 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  output lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;

  wire [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  wire \Area_Debug_Control.dbg_brki_hit_reg ;
  wire \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  wire Blocked_Valid_Instr;
  wire Blocked_Valid_Instr0;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire [6:0]D;
  wire DI;
  wire DReady;
  wire DReady0_out;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_17;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_31;
  wire D_32;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire Dbg_Clean_Stop_i_1_n_0;
  wire [0:0]E;
  wire \^Hibernate ;
  wire I294_out;
  wire IReady;
  wire IReady1_out;
  wire \LOCKSTEP_Out_reg[3] ;
  wire [0:1]Logic_Oper;
  wire MEM_DAXI_Data_Strobe;
  wire MSR_Rst;
  wire MTSMSR_Write;
  wire [0:2]Op1_Low;
  wire Op1_Shift;
  wire PC_Write;
  wire PreFetch_Buffer_I_n_107;
  wire PreFetch_Buffer_I_n_108;
  wire PreFetch_Buffer_I_n_109;
  wire PreFetch_Buffer_I_n_111;
  wire PreFetch_Buffer_I_n_113;
  wire PreFetch_Buffer_I_n_116;
  wire PreFetch_Buffer_I_n_117;
  wire PreFetch_Buffer_I_n_118;
  wire PreFetch_Buffer_I_n_36;
  wire PreFetch_Buffer_I_n_37;
  wire PreFetch_Buffer_I_n_38;
  wire PreFetch_Buffer_I_n_39;
  wire PreFetch_Buffer_I_n_41;
  wire PreFetch_Buffer_I_n_42;
  wire PreFetch_Buffer_I_n_43;
  wire PreFetch_Buffer_I_n_44;
  wire PreFetch_Buffer_I_n_45;
  wire PreFetch_Buffer_I_n_46;
  wire PreFetch_Buffer_I_n_50;
  wire PreFetch_Buffer_I_n_53;
  wire PreFetch_Buffer_I_n_54;
  wire PreFetch_Buffer_I_n_55;
  wire PreFetch_Buffer_I_n_56;
  wire PreFetch_Buffer_I_n_57;
  wire PreFetch_Buffer_I_n_59;
  wire PreFetch_Buffer_I_n_61;
  wire PreFetch_Buffer_I_n_65;
  wire PreFetch_Buffer_I_n_74;
  wire [27:0]\^Q ;
  wire R;
  wire R_1;
  wire Reg_Test_Equal;
  wire Reg_Test_Equal_N_i7_out;
  wire Reg_Test_Equal_i;
  wire Reg_Write;
  wire [1:0]\Result_Sel_reg[0]_0 ;
  wire S1_out;
  wire S93_out;
  wire Select_Logic;
  wire Select_Logic0;
  wire Shift_Oper;
  wire Shifted;
  wire Sign_Extend_i_1_n_0;
  wire Sleep_Decode;
  wire \^Suspend ;
  wire Unsigned_Op;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.MUXCY_JUMP_CARRY3_n_1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire [15:0]\Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_3__1_n_0 ;
  wire \Using_FPGA.Native_i_4_n_0 ;
  wire \Using_FPGA.Native_i_6__0_n_0 ;
  wire \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_1 ;
  wire \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_6 ;
  wire \Using_FPGA.enable_Interrupts_I_reg_0 ;
  wire \Using_FPGA.enable_Interrupts_I_reg_n_0 ;
  wire \Using_FPGA.iFetch_MuxCY_2_n_1 ;
  wire \Using_FPGA.iFetch_MuxCY_2_n_3 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_1 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_10 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_11 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_14 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_15 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_16 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_17 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_2 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_3 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_4 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_5 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_6 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_7 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_8 ;
  wire \Using_FPGA.reset_BIP_I_reg_n_0 ;
  wire \Using_FPGA.set_BIP_I_reg_0 ;
  wire \Using_FPGA.set_BIP_I_reg_n_0 ;
  wire \Using_LWX_SWX_instr.reservation_i_4_n_0 ;
  wire \Using_LWX_SWX_instr.reservation_reg_0 ;
  wire \Using_LWX_SWX_instr.reservation_reg_1 ;
  wire \Using_LWX_SWX_instr.reservation_reg_2 ;
  wire Valid_Instr0;
  wire Valid_Instr_i;
  wire [0:31]Y;
  wire active_wakeup;
  wire active_wakeup0;
  wire [0:1]alu_Op;
  wire branch_with_delay;
  wire [2:0]break_Pipe_i_reg_0;
  wire buffer_Full;
  wire byte_i13_out;
  wire carry_In;
  wire compare_Instr;
  wire correct_Carry;
  wire correct_Carry_II;
  wire correct_Carry_Select;
  wire d_AS_I;
  wire d_AS_I16_out;
  wire [1:0]data_Read_Mask;
  wire dbg_brki_hit;
  wire dbg_clean_stop;
  wire delay_slot_instr_reg;
  wire doublet_Read;
  wire doublet_Read_i_i_1_n_0;
  wire enable_Interrupts_I;
  wire ex_Valid;
  wire ex_Valid_1st_cycle_reg_n_0;
  wire [0:0]ex_Valid_reg_0;
  wire ex_first_cycle;
  wire [0:0]exception_kind;
  wire force1;
  wire force1_i30_out;
  wire force2;
  wire force2_i;
  wire force_DI1;
  wire force_DI2;
  wire force_Val1;
  wire force_Val1_i28_out;
  wire force_Val2_N;
  wire force_jump1;
  wire force_jump2;
  wire force_stop_cmd_hold;
  wire force_stop_cmd_i;
  wire has_inhibit_EX;
  wire hibernate_i_i_1_n_0;
  wire iFetch_In_Progress;
  wire ifetch_carry2;
  wire [0:15]imm_Value;
  wire inHibit_EX;
  wire inHibit_EX1;
  wire inHibit_EX_reg_0;
  wire \^instr_EX_i_reg[25]_0 ;
  wire \^instr_EX_i_reg[26]_0 ;
  wire [0:10]instr_OF;
  wire is_lwx_I;
  wire is_swx_I_reg_0;
  wire is_swx_I_reg_1;
  wire isbyte;
  wire isdoublet;
  wire jump;
  wire jump2_I_1;
  wire jump2_I_reg_n_0;
  wire jump_Carry1;
  wire jump_Carry2;
  wire load_Store_i;
  wire load_Store_i2;
  wire lopt;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire \^lopt_2 ;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire lopt_9;
  wire mbar_decode_I;
  wire mbar_first;
  wire mbar_first_i_3_n_0;
  wire mbar_first_reg_n_0;
  wire mbar_hold_I_reg_n_0;
  wire mbar_is_sleep;
  wire mbar_is_sleep0;
  wire mbar_sleep;
  wire mbar_sleep_i_1_n_0;
  wire mem_access;
  wire missed_IFetch;
  wire missed_IFetch_reg_0;
  wire missed_IFetch_reg_1;
  wire mtsmsr_write_i_reg_n_0;
  wire mul_Executing;
  wire mul_Executing_delayed;
  wire mul_Executing_done;
  wire mul_Executing_done0;
  wire nonvalid_IFetch_n_reg_0;
  wire of_PipeRun;
  wire of_PipeRun_Select;
  wire of_PipeRun_without_dready;
  wire of_Valid_Raw;
  wire of_mbar_decode;
  wire ok_To_Stop;
  wire opsel1_SPR;
  wire opsel1_SPR_Select;
  wire opsel1_SPR_Select_1;
  wire opsel1_SPR_Select_2_1;
  wire opsel1_SPR_Select_2_2;
  wire [4:0]p_1_in;
  wire p_2_out;
  wire quadlet_Read;
  wire quadlet_Read_i_i_1_n_0;
  wire [0:4]reg1_Addr;
  wire reg_Test_Equal_N;
  wire \^reg_Write_I ;
  wire reg_Write_dbg;
  wire res_Forward1;
  wire res_Forward2;
  wire res_forward1_1;
  wire res_forward1_2;
  wire res_forward1_3;
  wire res_forward2_1;
  wire res_forward2_2;
  wire res_forward2_3;
  wire reset_BIP_I8_out;
  wire reset_delay;
  wire select_ALU_Carry;
  wire sext16;
  wire sext8;
  wire shift_Carry_In;
  wire sleep_i0;
  wire sleep_i00_in;
  wire sleep_i_i_1_n_0;
  wire sub_Carry;
  wire suspend_i_i_1_n_0;
  wire swx_ready;
  wire sync_reset;
  wire take_Intr_Now_II;
  wire take_Intr_Now_III;
  wire take_intr_2nd_cycle_reg_n_0;
  wire take_intr_Done;
  wire trace_valid_instr_part1;
  wire trace_valid_instr_part10;
  wire trace_valid_instr_part1_i_2_n_0;
  wire use_Imm_Reg;
  wire use_Reg_Neg_DI;
  wire use_Reg_Neg_DI_i27_out;
  wire use_Reg_Neg_S;
  wire use_Reg_Neg_S_i29_out;
  wire using_Imm_reg_0;
  wire [0:1]wakeup_i;
  wire \write_Addr_I[3]_i_1_n_0 ;
  wire [4:0]\write_Addr_I_reg[0]_0 ;
  wire write_Carry;
  wire write_Carry_I_reg_n_0;
  wire write_Reg_I_S;
  wire write_Reg_reg_n_0;
  wire writing;
  wire writing_reg_n_0;
  wire NLW_PreFetch_Buffer_I_S_UNCONNECTED;
  wire NLW_PreFetch_Buffer_I_dbg_pause_UNCONNECTED;
  wire NLW_PreFetch_Buffer_I_lopt_UNCONNECTED;
  wire NLW_PreFetch_Buffer_I_lopt_1_UNCONNECTED;
  wire [0:0]NLW_PreFetch_Buffer_I_instr_OF_UNCONNECTED;
  wire \NLW_Using_FPGA.ALU_Carry_MUXCY_correct_Carry_I_UNCONNECTED ;
  wire \NLW_Using_FPGA.Correct_Carry_MUXCY_new_Carry_UNCONNECTED ;
  wire \NLW_Using_FPGA.I_correct_Carry_Select_Using_FPGA.Native_0_UNCONNECTED ;
  wire \NLW_Using_FPGA.I_correct_Carry_Select_Using_FPGA.Native_1_UNCONNECTED ;
  wire \NLW_Using_FPGA.Intr_Carry_MUXCY_correct_Carry_I_UNCONNECTED ;
  wire \NLW_Using_FPGA.Intr_Carry_MUXCY_load_Store_i2_UNCONNECTED ;
  wire \NLW_Using_FPGA.MUXCY_JUMP_CARRY_Reg_zero_UNCONNECTED ;
  wire \NLW_Using_FPGA.MUXCY_JUMP_CARRY_force_DI1_UNCONNECTED ;
  wire \NLW_Using_FPGA.MUXCY_JUMP_CARRY_force_jump1_UNCONNECTED ;
  wire \NLW_Using_FPGA.MUXCY_JUMP_CARRY2_lopt_3_UNCONNECTED ;
  wire \NLW_Using_FPGA.MUXCY_JUMP_CARRY3_Interrupt_UNCONNECTED ;
  wire \NLW_Using_FPGA.MUXCY_JUMP_CARRY3_break_Pipe_i_reg_UNCONNECTED ;
  wire \NLW_Using_FPGA.MUXCY_JUMP_CARRY3_break_Pipe_i_reg0_UNCONNECTED ;
  wire \NLW_Using_FPGA.MUXCY_JUMP_CARRY3_break_Pipe_i_reg_0_UNCONNECTED ;
  wire \NLW_Using_FPGA.MUXCY_JUMP_CARRY3_break_Pipe_i_reg_1_UNCONNECTED ;
  wire \NLW_Using_FPGA.MUXCY_JUMP_CARRY3_jump_Carry2_UNCONNECTED ;
  wire \NLW_Using_FPGA.MUXCY_JUMP_CARRY3_trace_jump_taken_i_reg_UNCONNECTED ;
  wire [0:0]\NLW_Using_FPGA.MUXCY_JUMP_CARRY3_break_Pipe_i_reg_2_UNCONNECTED ;
  wire \NLW_Using_FPGA.New_Carry_MUXCY_LO_UNCONNECTED ;
  wire \NLW_Using_FPGA.New_Carry_MUXCY_new_Carry_UNCONNECTED ;
  wire \NLW_Using_FPGA.New_Carry_MUXCY_select_ALU_Carry_UNCONNECTED ;
  wire [0:0]\NLW_Using_FPGA.New_Carry_MUXCY_Op1_Low_UNCONNECTED ;
  wire \NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1_Using_FPGA.Native_0_UNCONNECTED ;
  wire \NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1_take_Intr_Now_I_UNCONNECTED ;
  wire \NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2_Using_FPGA.Native_0_UNCONNECTED ;
  wire \NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2_Using_FPGA.Native_1_UNCONNECTED ;
  wire \NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2_break_Pipe_i_reg__0_UNCONNECTED ;
  wire \NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2_take_Intr_Now_I_UNCONNECTED ;
  wire \NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_take_Intr_Now_II_UNCONNECTED ;
  wire \NLW_Using_FPGA.clean_iReady_MuxCY_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.clean_iReady_MuxCY_lopt_3_UNCONNECTED ;
  wire \NLW_Using_FPGA.iFetch_MuxCY_1_Using_FPGA.Native_0_UNCONNECTED ;
  wire \NLW_Using_FPGA.iFetch_MuxCY_1_buffer_Full_UNCONNECTED ;
  wire \NLW_Using_FPGA.iFetch_MuxCY_1_ifetch_carry1_UNCONNECTED ;
  wire \NLW_Using_FPGA.iFetch_MuxCY_1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.iFetch_MuxCY_2_LOCKSTEP_Out_reg[3]_UNCONNECTED ;
  wire \NLW_Using_FPGA.iFetch_MuxCY_2_ifetch_carry1_UNCONNECTED ;
  wire \NLW_Using_FPGA.of_PipeRun_MuxCY_1_break_Pipe_i_reg__0_UNCONNECTED ;
  wire \NLW_Using_FPGA.of_PipeRun_MuxCY_1_lopt_UNCONNECTED ;
  wire \NLW_Using_FPGA.of_PipeRun_Select_LUT5_dbg_pause_UNCONNECTED ;
  wire \NLW_Using_FPGA.of_PipeRun_without_dready_LUT5_dbg_pause_UNCONNECTED ;

  assign \^lopt_1  = lopt_2;
  assign \^lopt_4  = lopt_5;
  assign lopt_1 = select_ALU_Carry;
  assign lopt_3 = \^lopt_2 ;
  assign lopt_4 = \^lopt_3 ;
  assign lopt_6 = force_DI1;
  assign lopt_7 = force_jump1;
  LUT6 #(
    .INIT(64'h00000000AAFE0000)) 
    \Area_Optimized.register_write_i_1 
       (.I0(write_Reg_reg_n_0),
        .I1(DReady),
        .I2(MEM_DAXI_Data_Strobe),
        .I3(writing_reg_n_0),
        .I4(ex_Valid),
        .I5(\Using_FPGA.Native_5 ),
        .O(reg_Write_dbg));
  FDRE #(
    .INIT(1'b0)) 
    Blocked_Valid_Instr_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Blocked_Valid_Instr0),
        .Q(Blocked_Valid_Instr),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    Compare_Instr_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_118),
        .Q(compare_Instr),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_16 ));
  LUT4 #(
    .INIT(16'h4044)) 
    D_AS_INST_0
       (.I0(\Using_FPGA.Native_5 ),
        .I1(d_AS_I),
        .I2(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .I3(is_swx_I_reg_0),
        .O(D[4]));
  LUT2 #(
    .INIT(4'h1)) 
    Dbg_Clean_Stop_i_1
       (.I0(jump2_I_reg_n_0),
        .I1(use_Imm_Reg),
        .O(Dbg_Clean_Stop_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    Dbg_Clean_Stop_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(Dbg_Clean_Stop_i_1_n_0),
        .Q(dbg_clean_stop),
        .S(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    Has_Inhibit_EX_reg
       (.C(Clk),
        .CE(1'b1),
        .D(inHibit_EX),
        .Q(has_inhibit_EX),
        .R(sync_reset));
  cpu_PreFetch_Buffer PreFetch_Buffer_I
       (.\Area_Debug_Control.dbg_brki_hit_i_2 (\Area_Debug_Control.dbg_brki_hit_i_2 ),
        .\Area_Debug_Control.normal_stop_cmd_hold_reg (\Area_Debug_Control.normal_stop_cmd_hold_reg ),
        .CI(IReady),
        .Clk(Clk),
        .D({reg1_Addr[0],reg1_Addr[1],reg1_Addr[2],reg1_Addr[3],reg1_Addr[4],imm_Value[0],imm_Value[1],imm_Value[2],imm_Value[3],imm_Value[4],imm_Value[5],imm_Value[6],imm_Value[7],imm_Value[8],imm_Value[11],imm_Value[12],imm_Value[13],imm_Value[14],imm_Value[15]}),
        .DI(DI),
        .DReady0_out(DReady0_out),
        .D_0(D_0),
        .D_1(D_1),
        .D_10(D_10),
        .D_11(D_11),
        .D_12(D_12),
        .D_13(D_13),
        .D_14(D_14),
        .D_15(D_15),
        .D_16(D_16),
        .D_17(D_17),
        .D_18(D_18),
        .D_19(D_19),
        .D_2(D_2),
        .D_20(D_20),
        .D_21(D_21),
        .D_22(D_22),
        .D_23(D_23),
        .D_24(D_24),
        .D_25(D_25),
        .D_26(D_26),
        .D_27(D_27),
        .D_28(D_28),
        .D_29(D_29),
        .D_3(D_3),
        .D_30(D_30),
        .D_31(D_31),
        .D_32(D_32),
        .D_4(D_4),
        .D_5(D_5),
        .D_6(D_6),
        .D_7(D_7),
        .D_8(D_8),
        .D_9(D_9),
        .E(E),
        .I294_out(I294_out),
        .IReady1_out(IReady1_out),
        .R(R),
        .Reg_Test_Equal_N_i7_out(Reg_Test_Equal_N_i7_out),
        .Reg_Test_Equal_i(Reg_Test_Equal_i),
        .S(NLW_PreFetch_Buffer_I_S_UNCONNECTED),
        .S93_out(S93_out),
        .\Serial_Dbg_Intf.control_reg_reg[8] (PreFetch_Buffer_I_n_65),
        .Sext16_reg(PreFetch_Buffer_I_n_42),
        .Sext8_reg(PreFetch_Buffer_I_n_43),
        .Sext8_reg_0(\Using_FPGA.of_PipeRun_MuxCY_1_n_14 ),
        .Sext8_reg_1(sext8),
        .\Use_Async_Reset.sync_reset_reg (PreFetch_Buffer_I_n_44),
        .\Use_Async_Reset.sync_reset_reg_0 (PreFetch_Buffer_I_n_46),
        .\Use_Async_Reset.sync_reset_reg_1 ({p_1_in[4],p_1_in[0]}),
        .\Using_FPGA.Native (Buffer_Addr[0]),
        .\Using_FPGA.Native_0 (Buffer_Addr[1]),
        .\Using_FPGA.Native_1 (Buffer_Addr[2]),
        .\Using_FPGA.Native_10 (PreFetch_Buffer_I_n_57),
        .\Using_FPGA.Native_11 (PreFetch_Buffer_I_n_59),
        .\Using_FPGA.Native_12 (PreFetch_Buffer_I_n_61),
        .\Using_FPGA.Native_13 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_14 (PreFetch_Buffer_I_n_74),
        .\Using_FPGA.Native_15 (PreFetch_Buffer_I_n_108),
        .\Using_FPGA.Native_16 (PreFetch_Buffer_I_n_109),
        .\Using_FPGA.Native_17 (PreFetch_Buffer_I_n_111),
        .\Using_FPGA.Native_18 (PreFetch_Buffer_I_n_116),
        .\Using_FPGA.Native_19 (PreFetch_Buffer_I_n_117),
        .\Using_FPGA.Native_2 (imm_Value[9]),
        .\Using_FPGA.Native_20 (PreFetch_Buffer_I_n_118),
        .\Using_FPGA.Native_21 (exception_kind),
        .\Using_FPGA.Native_22 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_23 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_24 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_25 (use_Imm_Reg),
        .\Using_FPGA.Native_26 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_27 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_28 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_29 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_3 (imm_Value[10]),
        .\Using_FPGA.Native_30 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_31 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_32 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_33 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_34 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_35 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_36 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_37 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_38 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_39 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_4 (PreFetch_Buffer_I_n_38),
        .\Using_FPGA.Native_40 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_41 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_42 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_43 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_44 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_45 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_46 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_47 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_48 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_49 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_5 (PreFetch_Buffer_I_n_50),
        .\Using_FPGA.Native_50 (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_51 (\Using_FPGA.Native_34 ),
        .\Using_FPGA.Native_52 (\Using_FPGA.Native_35 ),
        .\Using_FPGA.Native_53 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_54 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_55 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_56 (\Using_FPGA.Native_39 ),
        .\Using_FPGA.Native_6 (PreFetch_Buffer_I_n_53),
        .\Using_FPGA.Native_7 (PreFetch_Buffer_I_n_54),
        .\Using_FPGA.Native_8 (PreFetch_Buffer_I_n_55),
        .\Using_FPGA.Native_9 (PreFetch_Buffer_I_n_56),
        .\Using_FPGA.set_BIP_I_reg (\Using_FPGA.set_BIP_I_reg_n_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (PreFetch_Buffer_I_n_36),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (PreFetch_Buffer_I_n_107),
        .Y(Y),
        .buffer_Full(buffer_Full),
        .byte_i13_out(byte_i13_out),
        .byte_i_reg(PreFetch_Buffer_I_n_41),
        .d_AS_I16_out(d_AS_I16_out),
        .dbg_pause(NLW_PreFetch_Buffer_I_dbg_pause_UNCONNECTED),
        .dbg_pause_reg(PreFetch_Buffer_I_n_113),
        .doublet_i_reg(PreFetch_Buffer_I_n_39),
        .enable_Interrupts_I(enable_Interrupts_I),
        .ex_Valid_reg(of_PipeRun),
        .ex_Valid_reg_0(\Using_FPGA.Native_5 ),
        .ex_Valid_reg_1(ex_Valid),
        .force1_i30_out(force1_i30_out),
        .force2_i(force2_i),
        .force_Val1_i28_out(force_Val1_i28_out),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(PreFetch_Buffer_I_n_37),
        .instr_OF({instr_OF[0],instr_OF[1],instr_OF[2],instr_OF[3],instr_OF[4],instr_OF[5],instr_OF[6],instr_OF[7],instr_OF[8],instr_OF[9],NLW_PreFetch_Buffer_I_instr_OF_UNCONNECTED[0]}),
        .isbyte(isbyte),
        .isdoublet(isdoublet),
        .jump_Carry2(jump_Carry2),
        .lopt(NLW_PreFetch_Buffer_I_lopt_UNCONNECTED),
        .lopt_1(NLW_PreFetch_Buffer_I_lopt_1_UNCONNECTED),
        .lopt_2(\^lopt_7 ),
        .lopt_3(lopt_8),
        .lopt_4(lopt_9),
        .lopt_5(lopt_10),
        .lopt_6(lopt_11),
        .mbar_first(mbar_first),
        .mbar_hold_I_reg(mbar_hold_I_reg_n_0),
        .mbar_is_sleep0(mbar_is_sleep0),
        .missed_IFetch(missed_IFetch),
        .mtsmsr_write_i_reg(PreFetch_Buffer_I_n_45),
        .mtsmsr_write_i_reg_0(\Using_FPGA.of_PipeRun_MuxCY_1_n_7 ),
        .mul_Executing(mul_Executing),
        .mul_Executing_reg(mbar_first_i_3_n_0),
        .nonvalid_IFetch_n_reg(D[5]),
        .nonvalid_IFetch_n_reg_0(jump),
        .nonvalid_IFetch_n_reg_1(nonvalid_IFetch_n_reg_0),
        .of_Valid_Raw(of_Valid_Raw),
        .of_mbar_decode(of_mbar_decode),
        .ok_To_Stop(ok_To_Stop),
        .reset_BIP_I8_out(reset_BIP_I8_out),
        .sext16(sext16),
        .sync_reset(sync_reset),
        .take_Intr_Now_II(take_Intr_Now_II),
        .take_Intr_Now_III(take_Intr_Now_III),
        .trace_jump_taken_i_reg(jump2_I_reg_n_0),
        .use_Reg_Neg_DI_i27_out(use_Reg_Neg_DI_i27_out),
        .use_Reg_Neg_S_i29_out(use_Reg_Neg_S_i29_out),
        .writing(writing));
  LUT4 #(
    .INIT(16'h0020)) 
    Read_Strobe_INST_0
       (.I0(load_Store_i),
        .I1(\Using_FPGA.Native_5 ),
        .I2(ex_Valid),
        .I3(writing_reg_n_0),
        .O(D[3]));
  FDRE #(
    .INIT(1'b0)) 
    \Result_Sel_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF[0]),
        .Q(\Result_Sel_reg[0]_0 [1]),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_16 ));
  FDRE #(
    .INIT(1'b0)) 
    \Result_Sel_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF[1]),
        .Q(\Result_Sel_reg[0]_0 [0]),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_16 ));
  FDRE #(
    .INIT(1'b0)) 
    Select_Logic_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(Select_Logic0),
        .Q(Select_Logic),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    Sext16_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_42),
        .Q(sext16),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    Sext8_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_43),
        .Q(sext8),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    Shift_Carry_In_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(correct_Carry),
        .Q(shift_Carry_In),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFFFF8FFFF0F080F0)) 
    Sign_Extend_i_1
       (.I0(imm_Value[9]),
        .I1(imm_Value[10]),
        .I2(of_PipeRun),
        .I3(PreFetch_Buffer_I_n_56),
        .I4(exception_kind),
        .I5(Shift_Oper),
        .O(Sign_Extend_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    Sign_Extend_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Sign_Extend_i_1_n_0),
        .Q(Shift_Oper),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT4 #(
    .INIT(16'hFE54)) 
    Trace_Valid_Instr_INST_0
       (.I0(jump2_I_1),
        .I1(mul_Executing_done),
        .I2(trace_valid_instr_part1),
        .I3(Blocked_Valid_Instr),
        .O(D[1]));
  FDRE #(
    .INIT(1'b0)) 
    Unsigned_Op_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[14]),
        .Q(Unsigned_Op),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_6 ));
  LUT6 #(
    .INIT(64'h5555F7550000F300)) 
    \Using_Ext_Databus.mem_access_i_1 
       (.I0(DReady0_out),
        .I1(is_swx_I_reg_0),
        .I2(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .I3(d_AS_I),
        .I4(\Using_FPGA.Native_5 ),
        .I5(mem_access),
        .O(is_swx_I_reg_1));
  cpu_microblaze_v11_0_0_MB_FDRE \Using_FPGA.ALU_Carry_FDRE 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .carry_In(carry_In),
        .correct_Carry_II(correct_Carry_II),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_MUXCY_60 \Using_FPGA.ALU_Carry_MUXCY 
       (.correct_Carry(correct_Carry),
        .correct_Carry_I(\NLW_Using_FPGA.ALU_Carry_MUXCY_correct_Carry_I_UNCONNECTED ),
        .correct_Carry_Select(correct_Carry_Select),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(load_Store_i2),
        .sub_Carry(sub_Carry));
  cpu_microblaze_v11_0_0_MB_FDRE_61 \Using_FPGA.ALU_OP0_FDRE 
       (.Clk(Clk),
        .D_32(D_32),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .alu_Op(alu_Op[0]),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_62 \Using_FPGA.ALU_OP1_FDRE 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I_n_107),
        .alu_Op(alu_Op[1]),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_MUXCY_63 \Using_FPGA.Correct_Carry_MUXCY 
       (.Shift_Carry_In_reg(break_Pipe_i_reg_0[1]),
        .Shift_Carry_In_reg_0(is_swx_I_reg_0),
        .Shift_Carry_In_reg_1(\Using_LWX_SWX_instr.reservation_reg_1 ),
        .Shift_Carry_In_reg_2(load_Store_i),
        .Shift_Carry_In_reg_3(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .Shift_Carry_In_reg_4(write_Carry_I_reg_n_0),
        .Shift_Carry_In_reg_5(ex_Valid),
        .Shift_Carry_In_reg_6(\Using_FPGA.Native_5 ),
        .correct_Carry(correct_Carry),
        .is_lwx_I(is_lwx_I),
        .lopt(\^lopt_1 ),
        .lopt_1(\^lopt_2 ),
        .lopt_2(\^lopt_3 ),
        .new_Carry(\NLW_Using_FPGA.Correct_Carry_MUXCY_new_Carry_UNCONNECTED ));
  cpu_microblaze_v11_0_0_MB_FDRE_64 \Using_FPGA.Force1_FDRE 
       (.Clk(Clk),
        .R_1(R_1),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .force1(force1),
        .force1_i30_out(force1_i30_out));
  cpu_microblaze_v11_0_0_MB_FDRE_65 \Using_FPGA.Force2_FDRE 
       (.Clk(Clk),
        .R_1(R_1),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .force2(force2),
        .force2_i(force2_i));
  cpu_microblaze_v11_0_0_MB_FDRE_66 \Using_FPGA.Force_Val1_FDRE 
       (.Clk(Clk),
        .R_1(R_1),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .force_Val1(force_Val1),
        .force_Val1_i28_out(force_Val1_i28_out));
  cpu_microblaze_v11_0_0_MB_FDRSE_67 \Using_FPGA.Force_Val2_FDRSE 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (exception_kind),
        .\Using_FPGA.Native_1 (\Using_FPGA.MUXCY_JUMP_CARRY3_n_1 ),
        .force_Val2_N(force_Val2_N));
  cpu_MB_LUT4__parameterized9 \Using_FPGA.I_correct_Carry_Select 
       (.\Using_FPGA.Native_0 (\NLW_Using_FPGA.I_correct_Carry_Select_Using_FPGA.Native_0_UNCONNECTED ),
        .\Using_FPGA.Native_1 (\NLW_Using_FPGA.I_correct_Carry_Select_Using_FPGA.Native_1_UNCONNECTED ),
        .\Using_FPGA.Native_2 (PreFetch_Buffer_I_n_117),
        .correct_Carry_Select(correct_Carry_Select));
  cpu_microblaze_v11_0_0_MB_MUXCY_68 \Using_FPGA.Intr_Carry_MUXCY 
       (.correct_Carry_I(\NLW_Using_FPGA.Intr_Carry_MUXCY_correct_Carry_I_UNCONNECTED ),
        .correct_Carry_II(correct_Carry_II),
        .load_Store_i2(\NLW_Using_FPGA.Intr_Carry_MUXCY_load_Store_i2_UNCONNECTED ),
        .lopt(lopt_12),
        .lopt_1(lopt_13));
  cpu_microblaze_v11_0_0_MB_MULT_AND \Using_FPGA.MULT_AND_I 
       (.\Using_FPGA.Native_0 (PreFetch_Buffer_I_n_109),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I_n_108),
        .sub_Carry(sub_Carry));
  cpu_microblaze_v11_0_0_MB_MUXCY_69 \Using_FPGA.MUXCY_JUMP_CARRY 
       (.Reg_zero(\NLW_Using_FPGA.MUXCY_JUMP_CARRY_Reg_zero_UNCONNECTED ),
        .force_DI1(\NLW_Using_FPGA.MUXCY_JUMP_CARRY_force_DI1_UNCONNECTED ),
        .force_jump1(\NLW_Using_FPGA.MUXCY_JUMP_CARRY_force_jump1_UNCONNECTED ),
        .jump_Carry1(jump_Carry1),
        .lopt(\^lopt_4 ));
  cpu_microblaze_v11_0_0_MB_MUXCY_70 \Using_FPGA.MUXCY_JUMP_CARRY2 
       (.force_DI2(force_DI2),
        .force_jump2(force_jump2),
        .jump_Carry1(jump_Carry1),
        .jump_Carry2(jump_Carry2),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .lopt_2(PreFetch_Buffer_I_n_113),
        .lopt_3(\NLW_Using_FPGA.MUXCY_JUMP_CARRY2_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_17),
        .lopt_5(buffer_Full),
        .lopt_6(lopt_18),
        .lopt_7(lopt_19),
        .lopt_8(\LOCKSTEP_Out_reg[3] ));
  cpu_microblaze_v11_0_0_MB_MUXCY_71 \Using_FPGA.MUXCY_JUMP_CARRY3 
       (.Interrupt(\NLW_Using_FPGA.MUXCY_JUMP_CARRY3_Interrupt_UNCONNECTED ),
        .PC_Write(PC_Write),
        .R_1(R_1),
        .S93_out(S93_out),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I_n_55),
        .\Using_FPGA.Native_2 (D[5]),
        .\Using_FPGA.Native_3 (exception_kind),
        .branch_with_delay(branch_with_delay),
        .break_Pipe_i_reg(\NLW_Using_FPGA.MUXCY_JUMP_CARRY3_break_Pipe_i_reg_UNCONNECTED ),
        .break_Pipe_i_reg0(\NLW_Using_FPGA.MUXCY_JUMP_CARRY3_break_Pipe_i_reg0_UNCONNECTED ),
        .break_Pipe_i_reg_0(\NLW_Using_FPGA.MUXCY_JUMP_CARRY3_break_Pipe_i_reg_0_UNCONNECTED ),
        .break_Pipe_i_reg_1(\NLW_Using_FPGA.MUXCY_JUMP_CARRY3_break_Pipe_i_reg_1_UNCONNECTED ),
        .break_Pipe_i_reg_2(\NLW_Using_FPGA.MUXCY_JUMP_CARRY3_break_Pipe_i_reg_2_UNCONNECTED [0]),
        .dbg_pause_reg(jump),
        .delay_slot_instr_reg(jump2_I_reg_n_0),
        .force_Val2_N(force_Val2_N),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(\Using_FPGA.MUXCY_JUMP_CARRY3_n_1 ),
        .jump_Carry2(\NLW_Using_FPGA.MUXCY_JUMP_CARRY3_jump_Carry2_UNCONNECTED ),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .ok_To_Stop(ok_To_Stop),
        .take_Intr_Now_III(take_Intr_Now_III),
        .trace_jump_taken_i_reg(\NLW_Using_FPGA.MUXCY_JUMP_CARRY3_trace_jump_taken_i_reg_UNCONNECTED ));
  LUT4 #(
    .INIT(16'hFF40)) 
    \Using_FPGA.Native_i_1__5 
       (.I0(\Using_FPGA.Native_5 ),
        .I1(ex_Valid),
        .I2(\Using_FPGA.reset_BIP_I_reg_n_0 ),
        .I3(sync_reset),
        .O(MSR_Rst));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__6 
       (.I0(\^reg_Write_I ),
        .I1(\Using_FPGA.Native_5 ),
        .O(Reg_Write));
  LUT4 #(
    .INIT(16'hAEA2)) 
    \Using_FPGA.Native_i_1__64 
       (.I0(doublet_Read),
        .I1(sext8),
        .I2(\Using_FPGA.Native_5 ),
        .I3(\Using_FPGA.Native_40 ),
        .O(data_Read_Mask[0]));
  LUT6 #(
    .INIT(64'hCCAACCAACCFCCC0C)) 
    \Using_FPGA.Native_i_1__65 
       (.I0(\Using_FPGA.Native_40 ),
        .I1(quadlet_Read),
        .I2(sext16),
        .I3(\Using_FPGA.Native_5 ),
        .I4(\Using_FPGA.Native_41 ),
        .I5(sext8),
        .O(data_Read_Mask[1]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \Using_FPGA.Native_i_1__75 
       (.I0(shift_Carry_In),
        .I1(\^instr_EX_i_reg[26]_0 ),
        .I2(\Using_FPGA.Native_42 ),
        .I3(\^instr_EX_i_reg[25]_0 ),
        .O(Shifted));
  LUT6 #(
    .INIT(64'hCFCCCECCCACCCECC)) 
    \Using_FPGA.Native_i_2__48 
       (.I0(\Using_FPGA.set_BIP_I_reg_n_0 ),
        .I1(break_Pipe_i_reg_0[2]),
        .I2(\Using_FPGA.Native_5 ),
        .I3(ex_Valid),
        .I4(mtsmsr_write_i_reg_n_0),
        .I5(Op1_Shift),
        .O(\Using_FPGA.set_BIP_I_reg_0 ));
  LUT6 #(
    .INIT(64'hFFEFFAEAAFEFAAEA)) 
    \Using_FPGA.Native_i_2__49 
       (.I0(write_Carry),
        .I1(break_Pipe_i_reg_0[1]),
        .I2(\Using_FPGA.Native_i_4_n_0 ),
        .I3(MTSMSR_Write),
        .I4(\Using_FPGA.Native_i_6__0_n_0 ),
        .I5(Op1_Low[0]),
        .O(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'hCFCCCECCCACCCECC)) 
    \Using_FPGA.Native_i_2__50 
       (.I0(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .I1(break_Pipe_i_reg_0[0]),
        .I2(\Using_FPGA.Native_5 ),
        .I3(ex_Valid),
        .I4(mtsmsr_write_i_reg_n_0),
        .I5(Op1_Low[1]),
        .O(\Using_FPGA.enable_Interrupts_I_reg_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_3 
       (.I0(write_Carry_I_reg_n_0),
        .I1(ex_Valid),
        .I2(\Using_FPGA.Native_5 ),
        .O(write_Carry));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \Using_FPGA.Native_i_3__1 
       (.I0(\write_Addr_I_reg[0]_0 [2]),
        .I1(\write_Addr_I_reg[0]_0 [3]),
        .I2(\write_Addr_I_reg[0]_0 [4]),
        .I3(\write_Addr_I_reg[0]_0 [1]),
        .I4(\write_Addr_I_reg[0]_0 [0]),
        .O(\Using_FPGA.Native_i_3__1_n_0 ));
  LUT5 #(
    .INIT(32'hF3FFF7FF)) 
    \Using_FPGA.Native_i_4 
       (.I0(is_swx_I_reg_0),
        .I1(ex_Valid),
        .I2(\Using_FPGA.Native_5 ),
        .I3(load_Store_i),
        .I4(is_lwx_I),
        .O(\Using_FPGA.Native_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_5 
       (.I0(mtsmsr_write_i_reg_n_0),
        .I1(ex_Valid),
        .I2(\Using_FPGA.Native_5 ),
        .O(MTSMSR_Write));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_6__0 
       (.I0(is_swx_I_reg_0),
        .I1(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .O(\Using_FPGA.Native_i_6__0_n_0 ));
  cpu_microblaze_v11_0_0_MB_MUXCY_72 \Using_FPGA.New_Carry_MUXCY 
       (.LO(\NLW_Using_FPGA.New_Carry_MUXCY_LO_UNCONNECTED ),
        .Op1_Low(\NLW_Using_FPGA.New_Carry_MUXCY_Op1_Low_UNCONNECTED [0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_2 (ex_Valid),
        .\Using_FPGA.Native_3 (write_Carry_I_reg_n_0),
        .lopt(lopt),
        .new_Carry(\NLW_Using_FPGA.New_Carry_MUXCY_new_Carry_UNCONNECTED ),
        .select_ALU_Carry(\NLW_Using_FPGA.New_Carry_MUXCY_select_ALU_Carry_UNCONNECTED ),
        .sync_reset(sync_reset));
  cpu_MB_LUT4__parameterized1 \Using_FPGA.OpSel1_SPR_Select_LUT_1 
       (.instr_OF({instr_OF[0],instr_OF[1],instr_OF[3],instr_OF[4]}),
        .opsel1_SPR_Select_1(opsel1_SPR_Select_1));
  cpu_MB_LUT4__parameterized3 \Using_FPGA.OpSel1_SPR_Select_LUT_2 
       (.instr_OF({instr_OF[0],instr_OF[1],instr_OF[2],instr_OF[3]}),
        .opsel1_SPR_Select_2_1(opsel1_SPR_Select_2_1));
  cpu_microblaze_v11_0_0_MB_LUT3 \Using_FPGA.OpSel1_SPR_Select_LUT_3 
       (.D(imm_Value[1]),
        .instr_OF({instr_OF[4],instr_OF[5]}),
        .opsel1_SPR_Select_2_2(opsel1_SPR_Select_2_2));
  cpu_microblaze_v11_0_0_MB_LUT3__parameterized0 \Using_FPGA.OpSel1_SPR_Select_LUT_4 
       (.opsel1_SPR_Select(opsel1_SPR_Select),
        .opsel1_SPR_Select_1(opsel1_SPR_Select_1),
        .opsel1_SPR_Select_2_1(opsel1_SPR_Select_2_1),
        .opsel1_SPR_Select_2_2(opsel1_SPR_Select_2_2));
  cpu_microblaze_v11_0_0_MB_FDSE \Using_FPGA.Reg_Test_Equal_FDSE 
       (.Clk(Clk),
        .R_1(R_1),
        .Reg_Test_Equal(Reg_Test_Equal),
        .Reg_Test_Equal_i(Reg_Test_Equal_i),
        .\Using_FPGA.Native_0 (of_PipeRun));
  cpu_microblaze_v11_0_0_MB_FDRE_73 \Using_FPGA.Reg_Test_Equal_N_FDRE 
       (.Clk(Clk),
        .R_1(R_1),
        .Reg_Test_Equal_N_i7_out(Reg_Test_Equal_N_i7_out),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .reg_Test_Equal_N(reg_Test_Equal_N));
  cpu_MB_LUT4__parameterized5 \Using_FPGA.Res_Forward1_LUT1 
       (.Q(\write_Addr_I_reg[0]_0 [4:3]),
        .reg1_Addr({reg1_Addr[0],reg1_Addr[1]}),
        .res_forward1_1(res_forward1_1));
  cpu_MB_LUT4__parameterized5_74 \Using_FPGA.Res_Forward1_LUT2 
       (.Q(\write_Addr_I_reg[0]_0 [2]),
        .\Using_FPGA.Native_0 (\write_Addr_I_reg[0]_0 [1]),
        .reg1_Addr({reg1_Addr[2],reg1_Addr[3]}),
        .res_forward1_2(res_forward1_2));
  cpu_microblaze_v11_0_0_MB_LUT3__parameterized1 \Using_FPGA.Res_Forward1_LUT3 
       (.Q(\write_Addr_I_reg[0]_0 [0]),
        .\Using_FPGA.Native_0 (ex_Valid),
        .reg1_Addr(reg1_Addr[4]),
        .res_forward1_3(res_forward1_3));
  cpu_MB_LUT4__parameterized7 \Using_FPGA.Res_Forward1_LUT4 
       (.res_Forward1(res_Forward1),
        .res_forward1_1(res_forward1_1),
        .res_forward1_2(res_forward1_2),
        .res_forward1_3(res_forward1_3),
        .write_Reg_I_S(write_Reg_I_S));
  cpu_MB_LUT4__parameterized5_75 \Using_FPGA.Res_Forward2_LUT1 
       (.Q(\write_Addr_I_reg[0]_0 [4:3]),
        .imm_Value({imm_Value[0],imm_Value[1]}),
        .res_forward2_1(res_forward2_1));
  cpu_MB_LUT4__parameterized5_76 \Using_FPGA.Res_Forward2_LUT2 
       (.Q(\write_Addr_I_reg[0]_0 [2]),
        .\Using_FPGA.Native_0 (\write_Addr_I_reg[0]_0 [1]),
        .imm_Value({imm_Value[2],imm_Value[3]}),
        .res_forward2_2(res_forward2_2));
  cpu_microblaze_v11_0_0_MB_LUT3__parameterized1_77 \Using_FPGA.Res_Forward2_LUT3 
       (.Q(\write_Addr_I_reg[0]_0 [0]),
        .\Using_FPGA.Native_0 (ex_Valid),
        .imm_Value(imm_Value[4]),
        .res_forward2_3(res_forward2_3));
  cpu_MB_LUT4__parameterized7_78 \Using_FPGA.Res_Forward2_LUT4 
       (.res_Forward2(res_Forward2),
        .res_forward2_1(res_forward2_1),
        .res_forward2_2(res_forward2_2),
        .res_forward2_3(res_forward2_3),
        .write_Reg_I_S(write_Reg_I_S));
  cpu_microblaze_v11_0_0_MB_FDRE_79 \Using_FPGA.Use_Reg_Neg_DI_FDRE 
       (.Clk(Clk),
        .R_1(R_1),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .use_Reg_Neg_DI(use_Reg_Neg_DI),
        .use_Reg_Neg_DI_i27_out(use_Reg_Neg_DI_i27_out));
  cpu_microblaze_v11_0_0_MB_FDRE_80 \Using_FPGA.Use_Reg_Neg_S_FDRE 
       (.Clk(Clk),
        .R_1(R_1),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .use_Reg_Neg_S(use_Reg_Neg_S),
        .use_Reg_Neg_S_i29_out(use_Reg_Neg_S_i29_out));
  cpu_microblaze_v11_0_0_MB_MUXCY_81 \Using_FPGA.Using_Breakable_Pipe.OpSel1_SPR_MUXCY_1 
       (.opsel1_SPR(opsel1_SPR),
        .opsel1_SPR_Select(opsel1_SPR_Select),
        .take_Intr_Now_III(take_Intr_Now_III));
  cpu_microblaze_v11_0_0_MB_MUXCY_82 \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1 
       (.\Using_FPGA.Native_0 (\NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1_Using_FPGA.Native_0_UNCONNECTED ),
        .\Using_FPGA.Native_1 (use_Imm_Reg),
        .\Using_FPGA.Native_2 (jump2_I_reg_n_0),
        .\Using_FPGA.Native_3 (exception_kind),
        .inHibit_EX(inHibit_EX),
        .lopt(\NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1_lopt_UNCONNECTED ),
        .lopt_1(lopt_21),
        .lopt_2(lopt_22),
        .take_Intr_Now_I(\NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1_take_Intr_Now_I_UNCONNECTED ));
  cpu_microblaze_v11_0_0_MB_MUXCY_83 \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2 
       (.\Using_FPGA.Native_0 (\NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2_Using_FPGA.Native_0_UNCONNECTED ),
        .\Using_FPGA.Native_1 (\NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2_Using_FPGA.Native_1_UNCONNECTED ),
        .\Using_FPGA.Native_2 (exception_kind),
        .break_Pipe_i_reg__0(\NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2_break_Pipe_i_reg__0_UNCONNECTED ),
        .lopt(lopt_23),
        .lopt_1(lopt_24),
        .lopt_2(lopt_25),
        .take_Intr_Now_I(\NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2_take_Intr_Now_I_UNCONNECTED ),
        .take_Intr_Now_II(take_Intr_Now_II));
  cpu_microblaze_v11_0_0_MB_MUXCY_84 \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3 
       (.\Area_Debug_Control.force_stop_cmd_hold_reg (of_PipeRun),
        .\Area_Debug_Control.force_stop_cmd_hold_reg_0 (jump),
        .D(p_1_in[3:2]),
        .Select_Logic0(Select_Logic0),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Use_Async_Reset.sync_reset_reg_0 (\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_6 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (exception_kind),
        .force_stop_cmd_hold(force_stop_cmd_hold),
        .force_stop_cmd_i(force_stop_cmd_i),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX1(inHibit_EX1),
        .inHibit_EX_reg(PreFetch_Buffer_I_n_36),
        .inHibit_EX_reg_0(inHibit_EX_reg_0),
        .instr_OF({instr_OF[3],instr_OF[7],instr_OF[8]}),
        .load_Store_i2(load_Store_i2),
        .lopt(lopt_26),
        .lopt_1(lopt_27),
        .lopt_2(lopt_28),
        .p_2_out(p_2_out),
        .sync_reset(sync_reset),
        .take_Intr_Now_II(\NLW_Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_take_Intr_Now_II_UNCONNECTED ),
        .take_Intr_Now_III(take_Intr_Now_III));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Valid_Instr_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Valid_Instr0),
        .Q(Valid_Instr_i),
        .R(sync_reset));
  cpu_microblaze_v11_0_0_MB_MUXCY_85 \Using_FPGA.clean_iReady_MuxCY 
       (.IReady(IReady),
        .IReady1_out(IReady1_out),
        .\instr_EX_i_reg[9] (nonvalid_IFetch_n_reg_0),
        .lopt(\NLW_Using_FPGA.clean_iReady_MuxCY_lopt_UNCONNECTED ),
        .lopt_1(of_PipeRun),
        .lopt_2(S1_out),
        .lopt_3(\NLW_Using_FPGA.clean_iReady_MuxCY_lopt_3_UNCONNECTED ),
        .lopt_4(\^lopt_7 ),
        .lopt_5(lopt_8),
        .lopt_6(lopt_9),
        .lopt_7(lopt_10),
        .lopt_8(lopt_11));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.enable_Interrupts_I_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(enable_Interrupts_I),
        .Q(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .R(sync_reset));
  cpu_microblaze_v11_0_0_MB_LUT3__parameterized2 \Using_FPGA.force_di1_LUT3 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .force_DI1(force_DI1),
        .force_Val1(force_Val1),
        .use_Reg_Neg_DI(use_Reg_Neg_DI));
  cpu_MB_LUT4__parameterized11 \Using_FPGA.force_di2_LUT4 
       (.\Using_FPGA.Native_0 (ex_Valid),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_5 ),
        .force_DI2(force_DI2),
        .force_Val2_N(force_Val2_N));
  cpu_microblaze_v11_0_0_MB_LUT3__parameterized2_86 \Using_FPGA.force_jump1_LUT3 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .force1(force1),
        .force_jump1(force_jump1),
        .use_Reg_Neg_S(use_Reg_Neg_S));
  cpu_MB_LUT4__parameterized3_87 \Using_FPGA.force_jump2_LUT4 
       (.\Using_FPGA.Native_0 (ex_Valid),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_5 ),
        .force2(force2),
        .force_jump2(force_jump2));
  cpu_microblaze_v11_0_0_MB_MUXCY_88 \Using_FPGA.iFetch_MuxCY_1 
       (.\Using_FPGA.Native_0 (\NLW_Using_FPGA.iFetch_MuxCY_1_Using_FPGA.Native_0_UNCONNECTED ),
        .buffer_Full(\NLW_Using_FPGA.iFetch_MuxCY_1_buffer_Full_UNCONNECTED ),
        .ifetch_carry1(\NLW_Using_FPGA.iFetch_MuxCY_1_ifetch_carry1_UNCONNECTED ),
        .lopt(\NLW_Using_FPGA.iFetch_MuxCY_1_lopt_UNCONNECTED ),
        .lopt_1(lopt_17));
  cpu_microblaze_v11_0_0_MB_MUXCY_89 \Using_FPGA.iFetch_MuxCY_2 
       (.IReady1_out(IReady1_out),
        .\LOCKSTEP_Out_reg[3] (\NLW_Using_FPGA.iFetch_MuxCY_2_LOCKSTEP_Out_reg[3]_UNCONNECTED ),
        .\LOCKSTEP_Out_reg[3]_0 (\Using_LWX_SWX_instr.reservation_reg_1 ),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\Using_FPGA.iFetch_MuxCY_2_n_3 ),
        .iFetch_In_Progress(iFetch_In_Progress),
        .iFetch_In_Progress_reg(\Using_FPGA.iFetch_MuxCY_2_n_1 ),
        .iFetch_In_Progress_reg_0(D[5]),
        .ifetch_carry1(\NLW_Using_FPGA.iFetch_MuxCY_2_ifetch_carry1_UNCONNECTED ),
        .ifetch_carry2(ifetch_carry2),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .mbar_decode_I(mbar_decode_I),
        .missed_IFetch(missed_IFetch),
        .missed_IFetch_reg(missed_IFetch_reg_0),
        .missed_IFetch_reg_0(missed_IFetch_reg_1),
        .missed_IFetch_reg_1(jump),
        .mul_Executing(mul_Executing));
  cpu_microblaze_v11_0_0_MB_MUXCY_90 \Using_FPGA.iFetch_MuxCY_3 
       (.D(D[6]),
        .iFetch_In_Progress(iFetch_In_Progress),
        .ifetch_carry2(ifetch_carry2));
  cpu_microblaze_v11_0_0_MB_MUXCY_91 \Using_FPGA.of_PipeRun_MuxCY_1 
       (.\Area_Debug_Control.dbg_brki_hit_reg (\Area_Debug_Control.dbg_brki_hit_reg ),
        .\Area_Debug_Control.dbg_brki_hit_reg_0 (PreFetch_Buffer_I_n_65),
        .Blocked_Valid_Instr0(Blocked_Valid_Instr0),
        .Blocked_Valid_Instr_reg(jump2_I_reg_n_0),
        .Buffer_Addr(Buffer_Addr[0]),
        .DReady0_out(DReady0_out),
        .E(\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ),
        .S(S1_out),
        .S93_out(S93_out),
        .Sext8_reg(PreFetch_Buffer_I_n_56),
        .Unsigned_Op_reg(exception_kind),
        .\Use_Async_Reset.sync_reset_reg (\Using_FPGA.of_PipeRun_MuxCY_1_n_8 ),
        .\Use_Async_Reset.sync_reset_reg_0 (\Using_FPGA.of_PipeRun_MuxCY_1_n_14 ),
        .\Use_Async_Reset.sync_reset_reg_1 (\Using_FPGA.of_PipeRun_MuxCY_1_n_15 ),
        .\Use_Async_Reset.sync_reset_reg_2 (\Using_FPGA.of_PipeRun_MuxCY_1_n_16 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Valid_Instr_reg (jump),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.of_PipeRun_MuxCY_1_n_6 ),
        .\Using_LWX_SWX_instr.reservation_reg (\Using_LWX_SWX_instr.reservation_reg_1 ),
        .\Using_LWX_SWX_instr.reservation_reg_0 (\Using_FPGA.set_BIP_I_reg_n_0 ),
        .\Using_LWX_SWX_instr.reservation_reg_1 (\Using_LWX_SWX_instr.reservation_reg_2 ),
        .\Using_LWX_SWX_instr.reservation_reg_2 (\Using_LWX_SWX_instr.reservation_i_4_n_0 ),
        .\Using_LWX_SWX_instr.reservation_reg_3 (\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_6 ),
        .Valid_Instr0(Valid_Instr0),
        .break_Pipe_i_reg__0(\NLW_Using_FPGA.of_PipeRun_MuxCY_1_break_Pipe_i_reg__0_UNCONNECTED ),
        .dbg_brki_hit(dbg_brki_hit),
        .delay_slot_instr_reg(delay_slot_instr_reg),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_11 ),
        .instr_OF(instr_OF[3]),
        .is_lwx_I(is_lwx_I),
        .is_lwx_I_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_4 ),
        .is_lwx_I_reg_0(\Using_FPGA.Native_5 ),
        .is_swx_I_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_3 ),
        .is_swx_I_reg_0(PreFetch_Buffer_I_n_53),
        .load_Store_i_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_2 ),
        .load_Store_i_reg_0(\Using_FPGA.of_PipeRun_MuxCY_1_n_10 ),
        .load_Store_i_reg_1(load_Store_i),
        .load_Store_i_reg_2(PreFetch_Buffer_I_n_59),
        .lopt(\NLW_Using_FPGA.of_PipeRun_MuxCY_1_lopt_UNCONNECTED ),
        .lopt_1(lopt_21),
        .lopt_2(lopt_22),
        .lopt_3(lopt_23),
        .lopt_4(lopt_24),
        .lopt_5(lopt_25),
        .lopt_6(lopt_26),
        .lopt_7(lopt_27),
        .lopt_8(lopt_28),
        .mtsmsr_write_i_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_7 ),
        .mtsmsr_write_i_reg_0(mtsmsr_write_i_reg_n_0),
        .mul_Executing_reg(of_PipeRun),
        .of_PipeRun_Select(of_PipeRun_Select),
        .of_PipeRun_without_dready(of_PipeRun_without_dready),
        .swx_ready(swx_ready),
        .swx_ready_reg(is_swx_I_reg_0),
        .swx_ready_reg_0(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III),
        .take_intr_2nd_cycle_reg(take_intr_2nd_cycle_reg_n_0),
        .take_intr_Done(take_intr_Done),
        .using_Imm_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_1 ),
        .using_Imm_reg_0(use_Imm_Reg),
        .using_Imm_reg_1(PreFetch_Buffer_I_n_61),
        .using_Imm_reg_2(using_Imm_reg_0),
        .write_Reg_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_5 ),
        .write_Reg_reg_0(write_Reg_reg_n_0),
        .write_Reg_reg_1(PreFetch_Buffer_I_n_57),
        .write_Reg_reg_2(PreFetch_Buffer_I_n_54));
  cpu_MB_LUT5 \Using_FPGA.of_PipeRun_Select_LUT5 
       (.I294_out(I294_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .dbg_pause(\NLW_Using_FPGA.of_PipeRun_Select_LUT5_dbg_pause_UNCONNECTED ),
        .mul_Executing(mul_Executing),
        .of_PipeRun_Select(of_PipeRun_Select),
        .of_Valid_Raw(of_Valid_Raw));
  cpu_MB_LUT5__parameterized1 \Using_FPGA.of_PipeRun_without_dready_LUT5 
       (.I294_out(I294_out),
        .Pause_Ack_reg(load_Store_i),
        .Pause_Ack_reg_0(\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .dbg_pause(\NLW_Using_FPGA.of_PipeRun_without_dready_LUT5_dbg_pause_UNCONNECTED ),
        .mul_Executing(mul_Executing),
        .of_PipeRun_without_dready(of_PipeRun_without_dready),
        .of_Valid_Raw(of_Valid_Raw));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.reset_BIP_I_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reset_BIP_I8_out),
        .Q(\Using_FPGA.reset_BIP_I_reg_n_0 ),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.set_BIP_I_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_44),
        .Q(\Using_FPGA.set_BIP_I_reg_n_0 ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.take_Intr_2nd_Phase_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(inHibit_EX1),
        .Q(exception_kind),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_LWX_SWX_instr.reservation_i_4 
       (.I0(ex_Valid),
        .I1(\Using_FPGA.Native_5 ),
        .I2(load_Store_i),
        .O(\Using_LWX_SWX_instr.reservation_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Using_LWX_SWX_instr.reservation_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_10 ),
        .Q(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0800080000000800)) 
    Write_Strobe_INST_0
       (.I0(writing_reg_n_0),
        .I1(ex_Valid),
        .I2(\Using_FPGA.Native_5 ),
        .I3(load_Store_i),
        .I4(is_swx_I_reg_0),
        .I5(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .O(D[2]));
  LUT5 #(
    .INIT(32'hFEFEFE00)) 
    active_wakeup_i_1
       (.I0(Sleep_Decode),
        .I1(\^Hibernate ),
        .I2(\^Suspend ),
        .I3(wakeup_i[1]),
        .I4(wakeup_i[0]),
        .O(active_wakeup0));
  FDRE #(
    .INIT(1'b0)) 
    active_wakeup_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_wakeup0),
        .Q(active_wakeup),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    byte_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_41),
        .Q(isbyte),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    d_AS_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(d_AS_I16_out),
        .Q(d_AS_I),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hFFEFFFE0)) 
    doublet_Read_i_i_1
       (.I0(instr_OF[4]),
        .I1(instr_OF[5]),
        .I2(of_PipeRun),
        .I3(byte_i13_out),
        .I4(doublet_Read),
        .O(doublet_Read_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    doublet_Read_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(doublet_Read_i_i_1_n_0),
        .Q(doublet_Read),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    doublet_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_39),
        .Q(isdoublet),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    ex_Valid_1st_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_11 ),
        .Q(ex_Valid_1st_cycle_reg_n_0),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    ex_Valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_38),
        .Q(ex_Valid),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    ex_first_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(of_PipeRun),
        .Q(ex_first_cycle),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000000008AAFBAA)) 
    hibernate_i_i_1
       (.I0(\^Hibernate ),
        .I1(iFetch_In_Progress),
        .I2(\write_Addr_I_reg[0]_0 [0]),
        .I3(mbar_sleep),
        .I4(\^Q [23]),
        .I5(sleep_i0),
        .O(hibernate_i_i_1_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    hibernate_i_i_2
       (.I0(sync_reset),
        .I1(active_wakeup),
        .O(sleep_i0));
  FDRE #(
    .INIT(1'b0)) 
    hibernate_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(hibernate_i_i_1_n_0),
        .Q(\^Hibernate ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    iFetch_In_Progress_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.iFetch_MuxCY_2_n_1 ),
        .Q(iFetch_In_Progress),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    inHibit_EX_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_1 ),
        .Q(inHibit_EX),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \instr_EX_i_reg[25] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[9]),
        .Q(\^instr_EX_i_reg[25]_0 ),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \instr_EX_i_reg[26] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[10]),
        .Q(\^instr_EX_i_reg[26]_0 ),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \instr_EX_i_reg[4] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF[4]),
        .Q(Logic_Oper[0]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \instr_EX_i_reg[5] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF[5]),
        .Q(Logic_Oper[1]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \instr_EX_i_reg[6] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF[6]),
        .Q(\^Q [23]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \instr_EX_i_reg[7] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF[7]),
        .Q(\^Q [22]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    is_lwx_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_4 ),
        .Q(is_lwx_I),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    is_swx_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_3 ),
        .Q(is_swx_I_reg_0),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    jump2_I_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(jump2_I_reg_n_0),
        .Q(jump2_I_1),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    jump2_I_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_50),
        .Q(jump2_I_reg_n_0),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    load_Store_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_2 ),
        .Q(load_Store_i),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    mbar_decode_I_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(of_mbar_decode),
        .Q(mbar_decode_I),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h4444444444440040)) 
    mbar_first_i_3
       (.I0(\Using_FPGA.Native_5 ),
        .I1(mbar_first_reg_n_0),
        .I2(iFetch_In_Progress),
        .I3(\write_Addr_I_reg[0]_0 [0]),
        .I4(mbar_sleep),
        .I5(ex_first_cycle),
        .O(mbar_first_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    mbar_first_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mbar_first),
        .Q(mbar_first_reg_n_0),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    mbar_hold_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_46),
        .Q(mbar_hold_I_reg_n_0),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    mbar_is_sleep_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(mbar_is_sleep0),
        .Q(mbar_is_sleep),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h00000000AAAAEAAA)) 
    mbar_sleep_i_1
       (.I0(mbar_sleep),
        .I1(mbar_is_sleep),
        .I2(ex_first_cycle),
        .I3(mbar_decode_I),
        .I4(\Using_LWX_SWX_instr.reservation_reg_1 ),
        .I5(sleep_i0),
        .O(mbar_sleep_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    mbar_sleep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mbar_sleep_i_1_n_0),
        .Q(mbar_sleep),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    missed_IFetch_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.iFetch_MuxCY_2_n_3 ),
        .Q(missed_IFetch),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    mtsmsr_write_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_45),
        .Q(mtsmsr_write_i_reg_n_0),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    mul_Executing_delayed_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mul_Executing),
        .Q(mul_Executing_delayed),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h10)) 
    mul_Executing_done_i_1
       (.I0(\Using_FPGA.Native_5 ),
        .I1(mul_Executing),
        .I2(mul_Executing_delayed),
        .O(mul_Executing_done0));
  FDRE #(
    .INIT(1'b0)) 
    mul_Executing_done_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mul_Executing_done0),
        .Q(mul_Executing_done),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    mul_Executing_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mbar_first),
        .Q(mul_Executing),
        .R(sync_reset));
  FDSE #(
    .INIT(1'b1)) 
    nonvalid_IFetch_n_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_37),
        .Q(nonvalid_IFetch_n_reg_0),
        .S(sync_reset));
  LUT6 #(
    .INIT(64'hFF7FFFFFFF7F0000)) 
    quadlet_Read_i_i_1
       (.I0(PreFetch_Buffer_I_n_111),
        .I1(instr_OF[0]),
        .I2(instr_OF[1]),
        .I3(take_Intr_Now_III),
        .I4(of_PipeRun),
        .I5(quadlet_Read),
        .O(quadlet_Read_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    quadlet_Read_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(quadlet_Read_i_i_1_n_0),
        .Q(quadlet_Read),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    reset_delay_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sync_reset),
        .Q(reset_delay),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    select_ALU_Carry_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_116),
        .Q(select_ALU_Carry),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_16 ));
  LUT6 #(
    .INIT(64'h0000000008AAFBAA)) 
    sleep_i_i_1
       (.I0(Sleep_Decode),
        .I1(iFetch_In_Progress),
        .I2(\write_Addr_I_reg[0]_0 [0]),
        .I3(mbar_sleep),
        .I4(\^Q [22]),
        .I5(sleep_i0),
        .O(sleep_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    sleep_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sleep_i_i_1_n_0),
        .Q(Sleep_Decode),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000000E222)) 
    suspend_i_i_1
       (.I0(\^Suspend ),
        .I1(sleep_i00_in),
        .I2(\^Q [23]),
        .I3(\^Q [22]),
        .I4(active_wakeup),
        .I5(sync_reset),
        .O(suspend_i_i_1_n_0));
  LUT3 #(
    .INIT(8'h8A)) 
    suspend_i_i_2
       (.I0(mbar_sleep),
        .I1(\write_Addr_I_reg[0]_0 [0]),
        .I2(iFetch_In_Progress),
        .O(sleep_i00_in));
  FDRE #(
    .INIT(1'b0)) 
    suspend_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(suspend_i_i_1_n_0),
        .Q(\^Suspend ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    swx_ready_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_15 ),
        .Q(swx_ready),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    take_intr_2nd_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_8 ),
        .Q(take_intr_2nd_cycle_reg_n_0),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    take_intr_Done_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(take_intr_2nd_cycle_reg_n_0),
        .Q(take_intr_Done),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h20200020)) 
    trace_data_access_i_i_1
       (.I0(ex_Valid),
        .I1(\Using_FPGA.Native_5 ),
        .I2(load_Store_i),
        .I3(is_swx_I_reg_0),
        .I4(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .O(ex_Valid_reg_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF55100000)) 
    trace_reg_write_novalid_i_1
       (.I0(\Using_LWX_SWX_instr.reservation_reg_1 ),
        .I1(writing_reg_n_0),
        .I2(DReady0_out),
        .I3(write_Reg_reg_n_0),
        .I4(\Using_FPGA.Native_i_3__1_n_0 ),
        .I5(reset_delay),
        .O(\^reg_Write_I ));
  LUT6 #(
    .INIT(64'h00000100FFFFFFFF)) 
    trace_valid_instr_part1_i_1
       (.I0(load_Store_i),
        .I1(\Using_FPGA.Native_5 ),
        .I2(take_intr_Done),
        .I3(ex_Valid_1st_cycle_reg_n_0),
        .I4(mul_Executing),
        .I5(trace_valid_instr_part1_i_2_n_0),
        .O(trace_valid_instr_part10));
  LUT5 #(
    .INIT(32'hFF01FFFF)) 
    trace_valid_instr_part1_i_2
       (.I0(MEM_DAXI_Data_Strobe),
        .I1(DReady),
        .I2(swx_ready),
        .I3(\Using_FPGA.Native_5 ),
        .I4(load_Store_i),
        .O(trace_valid_instr_part1_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    trace_valid_instr_part1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(trace_valid_instr_part10),
        .Q(trace_valid_instr_part1),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    using_Imm_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_1 ),
        .Q(use_Imm_Reg),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0000FCAA)) 
    \write_Addr_I[3]_i_1 
       (.I0(\write_Addr_I_reg[0]_0 [1]),
        .I1(take_Intr_Now_III),
        .I2(instr_OF[9]),
        .I3(of_PipeRun),
        .I4(sync_reset),
        .O(\write_Addr_I[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \write_Addr_I_reg[0] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ),
        .D(p_1_in[4]),
        .Q(\write_Addr_I_reg[0]_0 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \write_Addr_I_reg[1] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ),
        .D(p_1_in[3]),
        .Q(\write_Addr_I_reg[0]_0 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \write_Addr_I_reg[2] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ),
        .D(p_1_in[2]),
        .Q(\write_Addr_I_reg[0]_0 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \write_Addr_I_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I[3]_i_1_n_0 ),
        .Q(\write_Addr_I_reg[0]_0 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \write_Addr_I_reg[4] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ),
        .D(p_1_in[0]),
        .Q(\write_Addr_I_reg[0]_0 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    write_Carry_I_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_74),
        .Q(write_Carry_I_reg_n_0),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_16 ));
  cpu_MB_LUT4 write_Reg_I_LUT
       (.DReady0_out(DReady0_out),
        .\Using_FPGA.Native_0 (write_Reg_reg_n_0),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_i_3__1_n_0 ),
        .\Using_FPGA.Native_2 (writing_reg_n_0),
        .write_Reg_I_S(write_Reg_I_S));
  FDRE #(
    .INIT(1'b0)) 
    write_Reg_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_5 ),
        .Q(write_Reg_reg_n_0),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    writing_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(writing),
        .Q(writing_reg_n_0),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE
   (PC_EX_i,
    D,
    \Using_FPGA.Native_0 ,
    Address,
    Clk,
    \data_rd_reg_reg[29] ,
    msr_I,
    \data_rd_reg_reg[29]_0 ,
    register_write,
    \data_rd_reg_reg[29]_1 );
  output [0:0]PC_EX_i;
  output [0:0]D;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;
  input \data_rd_reg_reg[29] ;
  input [0:0]msr_I;
  input \data_rd_reg_reg[29]_0 ;
  input register_write;
  input [0:0]\data_rd_reg_reg[29]_1 ;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]D;
  wire [0:0]\^PC_EX_i ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[29]_0 ;
  wire [0:0]\data_rd_reg_reg[29]_1 ;
  wire [0:0]msr_I;
  wire register_write;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(\^PC_EX_i ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFE2E2E200E2E2E2)) 
    \data_rd_reg[29]_i_1 
       (.I0(\^PC_EX_i ),
        .I1(\data_rd_reg_reg[29] ),
        .I2(msr_I),
        .I3(\data_rd_reg_reg[29]_0 ),
        .I4(register_write),
        .I5(\data_rd_reg_reg[29]_1 ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_495
   (PC_EX_i,
    D,
    \Using_FPGA.Native_0 ,
    Address,
    Clk,
    \data_rd_reg_reg[28] ,
    msr_I,
    \data_rd_reg_reg[28]_0 ,
    register_write,
    \data_rd_reg_reg[28]_1 );
  output [0:0]PC_EX_i;
  output [0:0]D;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;
  input \data_rd_reg_reg[28] ;
  input [0:0]msr_I;
  input \data_rd_reg_reg[28]_0 ;
  input register_write;
  input [0:0]\data_rd_reg_reg[28]_1 ;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]D;
  wire [0:0]\^PC_EX_i ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[28] ;
  wire \data_rd_reg_reg[28]_0 ;
  wire [0:0]\data_rd_reg_reg[28]_1 ;
  wire [0:0]msr_I;
  wire register_write;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(\^PC_EX_i ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFE2E2E200E2E2E2)) 
    \data_rd_reg[28]_i_1 
       (.I0(\^PC_EX_i ),
        .I1(\data_rd_reg_reg[28] ),
        .I2(msr_I),
        .I3(\data_rd_reg_reg[28]_0 ),
        .I4(register_write),
        .I5(\data_rd_reg_reg[28]_1 ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_501
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_507
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_513
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_519
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_525
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_531
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_537
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_543
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_549
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_555
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_561
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_567
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_573
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_604
   (op2_C,
    of_PipeRun,
    D_22,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_22;
  input Clk;

  wire Clk;
  wire D_22;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_22),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_608
   (op2_C,
    of_PipeRun,
    D_23,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_23;
  input Clk;

  wire Clk;
  wire D_23;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_23),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_612
   (op2_C,
    of_PipeRun,
    D_24,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_24;
  input Clk;

  wire Clk;
  wire D_24;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_24),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_616
   (op2_C,
    of_PipeRun,
    D_25,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_25;
  input Clk;

  wire Clk;
  wire D_25;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_25),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_620
   (op2_C,
    of_PipeRun,
    D_26,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_26;
  input Clk;

  wire Clk;
  wire D_26;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_26),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_624
   (op2_C,
    of_PipeRun,
    D_27,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_27;
  input Clk;

  wire Clk;
  wire D_27;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_27),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_628
   (op2_C,
    of_PipeRun,
    D_28,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_28;
  input Clk;

  wire Clk;
  wire D_28;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_28),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_632
   (EX_Op2,
    of_PipeRun,
    D_0,
    Clk);
  output EX_Op2;
  input of_PipeRun;
  input D_0;
  input Clk;

  wire Clk;
  wire D_0;
  wire EX_Op2;
  wire of_PipeRun;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_0),
        .Q(EX_Op2),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_636
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_1,
    Clk);
  output \Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_1;
  input Clk;

  wire Clk;
  wire D_1;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_1),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_640
   (op2_C,
    of_PipeRun,
    D_29,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_29;
  input Clk;

  wire Clk;
  wire D_29;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_29),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_644
   (Op2,
    of_PipeRun,
    D_2,
    Clk);
  output Op2;
  input of_PipeRun;
  input D_2;
  input Clk;

  wire Clk;
  wire D_2;
  wire Op2;
  wire of_PipeRun;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_2),
        .Q(Op2),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_648
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_3,
    Clk);
  output \Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_3;
  input Clk;

  wire Clk;
  wire D_3;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_3),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_652
   (op2_C,
    of_PipeRun,
    D_4,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_4;
  input Clk;

  wire Clk;
  wire D_4;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_4),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_656
   (op2_C,
    of_PipeRun,
    D_5,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_5;
  input Clk;

  wire Clk;
  wire D_5;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_5),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_660
   (op2_C,
    of_PipeRun,
    D_6,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_6;
  input Clk;

  wire Clk;
  wire D_6;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_6),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_664
   (op2_C,
    of_PipeRun,
    D_7,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_7;
  input Clk;

  wire Clk;
  wire D_7;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_7),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_668
   (op2_C,
    of_PipeRun,
    D_8,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_8;
  input Clk;

  wire Clk;
  wire D_8;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_8),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_672
   (op2_C,
    of_PipeRun,
    D_9,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_9;
  input Clk;

  wire Clk;
  wire D_9;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_9),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_676
   (op2_C,
    of_PipeRun,
    D_10,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_10;
  input Clk;

  wire Clk;
  wire D_10;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_10),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_680
   (op2_C,
    of_PipeRun,
    D_11,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_11;
  input Clk;

  wire Clk;
  wire D_11;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_11),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_684
   (op2_C,
    of_PipeRun,
    D_30,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_30;
  input Clk;

  wire Clk;
  wire D_30;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_30),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_688
   (op2_C,
    of_PipeRun,
    D_12,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_12;
  input Clk;

  wire Clk;
  wire D_12;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_12),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_692
   (op2_C,
    of_PipeRun,
    D_13,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_13;
  input Clk;

  wire Clk;
  wire D_13;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_13),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_696
   (op2_C,
    of_PipeRun,
    D_14,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_14;
  input Clk;

  wire Clk;
  wire D_14;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_14),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_700
   (op2_C,
    of_PipeRun,
    D_15,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_15;
  input Clk;

  wire Clk;
  wire D_15;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_15),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_704
   (op2_C,
    of_PipeRun,
    D_16,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_16;
  input Clk;

  wire Clk;
  wire D_16;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_16),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_708
   (op2_C,
    of_PipeRun,
    D_17,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_17;
  input Clk;

  wire Clk;
  wire D_17;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_17),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_712
   (op2_C,
    of_PipeRun,
    D_18,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_18;
  input Clk;

  wire Clk;
  wire D_18;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_18),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_716
   (op2_C,
    of_PipeRun,
    D_19,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_19;
  input Clk;

  wire Clk;
  wire D_19;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_19),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_720
   (op2_C,
    of_PipeRun,
    D_20,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_20;
  input Clk;

  wire Clk;
  wire D_20;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_20),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_724
   (op2_C,
    of_PipeRun,
    D_21,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_21;
  input Clk;

  wire Clk;
  wire D_21;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_21),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module cpu_MB_FDE_728
   (op2_C,
    S,
    Compare_Instr_reg,
    of_PipeRun,
    D_31,
    Clk,
    compare_Instr,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output [0:0]op2_C;
  output S;
  output Compare_Instr_reg;
  input of_PipeRun;
  input D_31;
  input Clk;
  input compare_Instr;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire Clk;
  wire Compare_Instr_reg;
  wire D_31;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire compare_Instr;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_31),
        .Q(op2_C),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFDDF)) 
    \Using_FPGA.Native_i_1__107 
       (.I0(compare_Instr),
        .I1(\Using_FPGA.Native_0 ),
        .I2(op2_C),
        .I3(\Using_FPGA.Native_1 ),
        .O(Compare_Instr_reg));
  LUT4 #(
    .INIT(16'hFDDF)) 
    \Using_FPGA.Native_i_1__63 
       (.I0(compare_Instr),
        .I1(\Using_FPGA.Native_0 ),
        .I2(op2_C),
        .I3(\Using_FPGA.Native_1 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_FDS" *) 
module cpu_MB_FDS
   (\Using_FPGA.Native_0 ,
    DI,
    S_34,
    R,
    buffer_Addr_S_I_2,
    Clk,
    \Using_FPGA.Native_I1 ,
    \Using_FPGA.Native_I1_0 ,
    \Using_FPGA.Native_I1_1 ,
    \Using_FPGA.Native_I1_2 ,
    missed_IFetch,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native_0 ;
  output DI;
  output S_34;
  input R;
  input buffer_Addr_S_I_2;
  input Clk;
  input \Using_FPGA.Native_I1 ;
  input \Using_FPGA.Native_I1_0 ;
  input \Using_FPGA.Native_I1_1 ;
  input \Using_FPGA.Native_I1_2 ;
  input missed_IFetch;
  input \Using_FPGA.Native_1 ;

  wire Clk;
  wire DI;
  wire R;
  wire S_34;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_I1 ;
  wire \Using_FPGA.Native_I1_0 ;
  wire \Using_FPGA.Native_I1_1 ;
  wire \Using_FPGA.Native_I1_2 ;
  wire buffer_Addr_S_I_2;
  wire missed_IFetch;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(buffer_Addr_S_I_2),
        .Q(\Using_FPGA.Native_0 ),
        .S(R));
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native_I2_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .O(S_34));
  LUT6 #(
    .INIT(64'h0000000000BFBFBF)) 
    \Using_FPGA.Native_i_1__0 
       (.I0(\Using_FPGA.Native_I1 ),
        .I1(\Using_FPGA.Native_I1_0 ),
        .I2(\Using_FPGA.Native_I1_1 ),
        .I3(\Using_FPGA.Native_0 ),
        .I4(\Using_FPGA.Native_I1_2 ),
        .I5(missed_IFetch),
        .O(DI));
endmodule

(* ORIG_REF_NAME = "MB_FDS" *) 
module cpu_MB_FDS_92
   (\Using_FPGA.Native_0 ,
    S,
    R,
    O,
    Clk,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native_0 ;
  output S;
  input R;
  input O;
  input Clk;
  input \Using_FPGA.Native_1 ;

  wire Clk;
  wire O;
  wire R;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(O),
        .Q(\Using_FPGA.Native_0 ),
        .S(R));
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native_I1_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_FDS" *) 
module cpu_MB_FDS_94
   (\Using_FPGA.Native_0 ,
    R,
    O,
    Clk);
  output \Using_FPGA.Native_0 ;
  input R;
  input O;
  input Clk;

  wire Clk;
  wire O;
  wire R;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(O),
        .Q(\Using_FPGA.Native_0 ),
        .S(R));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_290
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_293
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_296
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_299
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_302
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_305
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_308
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_311
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_314
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_317
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_320
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_323
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_326
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_329
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_332
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_335
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_338
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_341
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_344
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_347
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_350
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_353
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_356
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_359
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_362
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_365
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_368
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_371
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_374
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_377
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module cpu_MB_FD_380
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_LUT2" *) 
module cpu_MB_LUT2
   (byte_i_reg,
    byte_selects_0,
    isbyte);
  output byte_i_reg;
  input byte_selects_0;
  input isbyte;

  wire byte_i_reg;
  wire byte_selects_0;
  wire isbyte;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.Native 
       (.I0(byte_selects_0),
        .I1(isbyte),
        .O(byte_i_reg));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4
   (write_Reg_I_S,
    DReady0_out,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output write_Reg_I_S;
  input DReady0_out;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire DReady0_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire write_Reg_I_S;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hF200)) 
    \Using_FPGA.Native 
       (.I0(DReady0_out),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .O(write_Reg_I_S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized1
   (opsel1_SPR_Select_1,
    instr_OF);
  output opsel1_SPR_Select_1;
  input [3:0]instr_OF;

  wire [3:0]instr_OF;
  wire opsel1_SPR_Select_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \Using_FPGA.Native 
       (.I0(instr_OF[3]),
        .I1(instr_OF[2]),
        .I2(instr_OF[1]),
        .I3(instr_OF[0]),
        .O(opsel1_SPR_Select_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized11
   (force_DI2,
    force_Val2_N,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output force_DI2;
  input force_Val2_N;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire force_DI2;
  wire force_Val2_N;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native 
       (.I0(force_Val2_N),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .O(force_DI2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized13
   (S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ,
    alu_AddSub_1);
  output S;
  input [0:0]op2_C;
  input [0:0]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  input alu_AddSub_1;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  wire S;
  wire alu_AddSub_1;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ),
        .I2(alu_AddSub_1),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_165
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_168
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_171
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_174
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_177
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_180
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_183
   (logic_Res_i,
    EX_Op2,
    Op1_Logic,
    Logic_Oper);
  output logic_Res_i;
  input EX_Op2;
  input Op1_Logic;
  input [0:1]Logic_Oper;

  wire EX_Op2;
  wire [0:1]Logic_Oper;
  wire Op1_Logic;
  wire logic_Res_i;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(EX_Op2),
        .I1(Op1_Logic),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_186
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_189
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_192
   (logic_Res_i,
    Op2,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input Op2;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire Op2;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(Op2),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_195
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    Shifted,
    Logic_Oper);
  output logic_Res_i;
  input \Using_FPGA.Native_0 ;
  input Shifted;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire Shifted;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Shifted),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_198
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_201
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_204
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_207
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_210
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_213
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_216
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_219
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_222
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_225
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_228
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_231
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_234
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_237
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_240
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_243
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_246
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_249
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_252
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized15_255
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_166
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_169
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_172
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_175
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_178
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_181
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_184
   (shift_Res,
    \Using_FPGA.Native_0 ,
    Op1_Logic,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input Op1_Logic;
  input Shift_Oper;

  wire Op1_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Op1_Logic),
        .I2(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_187
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_190
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_193
   (shift_Res,
    Shifted,
    \Using_FPGA.Native_0 ,
    Shift_Oper);
  output shift_Res;
  input Shifted;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native_0 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(Shifted),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_196
   (shift_Res,
    \Using_FPGA.Native_0 ,
    Shifted,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input Shifted;
  input Shift_Oper;

  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native_0 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Shifted),
        .I2(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_199
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_202
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_205
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_208
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_211
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_214
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_217
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_220
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_223
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_226
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_229
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_232
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_235
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_238
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_241
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_244
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_247
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_250
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_253
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized17_256
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_291
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_294
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_297
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_300
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_303
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_306
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_309
   (mul_ALU_Res,
    Q,
    raw_Data_Addr);
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]raw_Data_Addr;

  wire [0:0]Q;
  wire mul_ALU_Res;
  wire [0:0]raw_Data_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(raw_Data_Addr),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_312
   (mul_ALU_Res,
    Q,
    raw_Data_Addr);
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]raw_Data_Addr;

  wire [0:0]Q;
  wire mul_ALU_Res;
  wire [0:0]raw_Data_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(raw_Data_Addr),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_315
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_318
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_321
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_324
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_327
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_330
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_333
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_336
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_339
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_342
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_345
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_348
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_351
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_354
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_357
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_360
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_363
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_366
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_369
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_372
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_375
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_378
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized19_381
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21
   (S,
    DI,
    pc_I);
  output S;
  input DI;
  input pc_I;

  wire DI;
  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(pc_I),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_497
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_503
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_509
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_515
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_521
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_527
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_533
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_539
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_545
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_551
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_557
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_563
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_569
   (S,
    pc_I);
  output S;
  input pc_I;

  wire pc_I;

  assign S = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized21_575
   (xor_Sum,
    pc_I);
  output xor_Sum;
  input pc_I;

  wire pc_I;

  assign xor_Sum = pc_I;
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_494
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_500
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_506
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_512
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_518
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_524
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_530
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_536
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_542
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_548
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_554
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_560
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_566
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized23_572
   (\Using_FPGA.Native_0 ,
    pc_Sum,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input pc_Sum;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;
  wire pc_Sum;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(pc_Sum),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized3
   (opsel1_SPR_Select_2_1,
    instr_OF);
  output opsel1_SPR_Select_2_1;
  input [3:0]instr_OF;

  wire [3:0]instr_OF;
  wire opsel1_SPR_Select_2_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \Using_FPGA.Native 
       (.I0(instr_OF[3]),
        .I1(instr_OF[2]),
        .I2(instr_OF[1]),
        .I3(instr_OF[0]),
        .O(opsel1_SPR_Select_2_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized3_87
   (force_jump2,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    force2);
  output force_jump2;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input force2;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire force2;
  wire force_jump2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT3 #(
    .INIT(8'h20)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(force2),
        .O(force_jump2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized5
   (res_forward1_1,
    reg1_Addr,
    Q);
  output res_forward1_1;
  input [1:0]reg1_Addr;
  input [1:0]Q;

  wire [1:0]Q;
  wire [1:0]reg1_Addr;
  wire res_forward1_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(reg1_Addr[1]),
        .I1(reg1_Addr[0]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(res_forward1_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized5_74
   (res_forward1_2,
    reg1_Addr,
    Q,
    \Using_FPGA.Native_0 );
  output res_forward1_2;
  input [1:0]reg1_Addr;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [1:0]reg1_Addr;
  wire res_forward1_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(reg1_Addr[1]),
        .I1(reg1_Addr[0]),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(res_forward1_2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized5_75
   (res_forward2_1,
    imm_Value,
    Q);
  output res_forward2_1;
  input [1:0]imm_Value;
  input [1:0]Q;

  wire [1:0]Q;
  wire [1:0]imm_Value;
  wire res_forward2_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(imm_Value[1]),
        .I1(imm_Value[0]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(res_forward2_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized5_76
   (res_forward2_2,
    imm_Value,
    Q,
    \Using_FPGA.Native_0 );
  output res_forward2_2;
  input [1:0]imm_Value;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [1:0]imm_Value;
  wire res_forward2_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(imm_Value[1]),
        .I1(imm_Value[0]),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(res_forward2_2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized7
   (res_Forward1,
    res_forward1_1,
    res_forward1_2,
    res_forward1_3,
    write_Reg_I_S);
  output res_Forward1;
  input res_forward1_1;
  input res_forward1_2;
  input res_forward1_3;
  input write_Reg_I_S;

  wire res_Forward1;
  wire res_forward1_1;
  wire res_forward1_2;
  wire res_forward1_3;
  wire write_Reg_I_S;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_FPGA.Native 
       (.I0(res_forward1_1),
        .I1(res_forward1_2),
        .I2(res_forward1_3),
        .I3(write_Reg_I_S),
        .O(res_Forward1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized7_78
   (res_Forward2,
    res_forward2_1,
    res_forward2_2,
    res_forward2_3,
    write_Reg_I_S);
  output res_Forward2;
  input res_forward2_1;
  input res_forward2_2;
  input res_forward2_3;
  input write_Reg_I_S;

  wire res_Forward2;
  wire res_forward2_1;
  wire res_forward2_2;
  wire res_forward2_3;
  wire write_Reg_I_S;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_FPGA.Native 
       (.I0(res_forward2_1),
        .I1(res_forward2_2),
        .I2(res_forward2_3),
        .I3(write_Reg_I_S),
        .O(res_Forward2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module cpu_MB_LUT4__parameterized9
   (correct_Carry_Select,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output correct_Carry_Select;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire \Using_FPGA.Native_2 ;

  assign correct_Carry_Select = \Using_FPGA.Native_2 ;
endmodule

(* ORIG_REF_NAME = "MB_LUT5" *) 
module cpu_MB_LUT5
   (of_PipeRun_Select,
    mul_Executing,
    of_Valid_Raw,
    I294_out,
    \Using_FPGA.Native_0 ,
    dbg_pause);
  output of_PipeRun_Select;
  input mul_Executing;
  input of_Valid_Raw;
  input I294_out;
  input \Using_FPGA.Native_0 ;
  input dbg_pause;

  wire I294_out;
  wire \Using_FPGA.Native_0 ;
  wire mul_Executing;
  wire of_PipeRun_Select;
  wire of_Valid_Raw;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \Using_FPGA.Native 
       (.I0(mul_Executing),
        .I1(of_Valid_Raw),
        .I2(I294_out),
        .I3(\Using_FPGA.Native_0 ),
        .O(of_PipeRun_Select));
endmodule

(* ORIG_REF_NAME = "MB_LUT5" *) 
module cpu_MB_LUT5__parameterized1
   (of_PipeRun_without_dready,
    I294_out,
    mul_Executing,
    of_Valid_Raw,
    \Using_FPGA.Native_0 ,
    dbg_pause,
    Pause_Ack_reg,
    Pause_Ack_reg_0);
  output of_PipeRun_without_dready;
  output I294_out;
  input mul_Executing;
  input of_Valid_Raw;
  input \Using_FPGA.Native_0 ;
  input dbg_pause;
  input Pause_Ack_reg;
  input Pause_Ack_reg_0;

  wire I294_out;
  wire Pause_Ack_reg;
  wire Pause_Ack_reg_0;
  wire \Using_FPGA.Native_0 ;
  wire mul_Executing;
  wire of_PipeRun_without_dready;
  wire of_Valid_Raw;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \Using_FPGA.Native 
       (.I0(mul_Executing),
        .I1(of_Valid_Raw),
        .I2(I294_out),
        .I3(\Using_FPGA.Native_0 ),
        .O(of_PipeRun_without_dready));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__7 
       (.I0(Pause_Ack_reg),
        .I1(Pause_Ack_reg_0),
        .O(I294_out));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_605
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_609
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_613
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_617
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_621
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_625
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_629
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_633
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3;
  input opsel1_SPR;

  wire I3;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_637
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_641
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_0,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_0;
  input opsel1_SPR;

  wire I3_0;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_645
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_1;
  input opsel1_SPR;

  wire I3_1;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_1),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_649
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_2,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_2;
  input opsel1_SPR;

  wire I3_2;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_2),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_653
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_3,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_3;
  input opsel1_SPR;

  wire I3_3;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_3),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_657
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_4,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_4;
  input opsel1_SPR;

  wire I3_4;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_4),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_661
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_5,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_5;
  input opsel1_SPR;

  wire I3_5;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_5),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_665
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_669
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_673
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_677
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_681
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_685
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_689
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_693
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_697
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_701
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_705
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_709
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_713
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_717
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_721
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2_725
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_6,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_6;
  input opsel1_SPR;

  wire I3_6;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_6),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized10
   (D,
    byte_selects_1,
    byte_selects_0,
    isbyte,
    isdoublet);
  output [1:0]D;
  input byte_selects_1;
  input byte_selects_0;
  input isbyte;
  input isdoublet;

  wire [1:0]D;
  wire byte_selects_0;
  wire byte_selects_1;
  wire isbyte;
  wire isdoublet;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h151F151F454F454F)) 
    \Using_FPGA.Native 
       (.I0(byte_selects_1),
        .I1(byte_selects_0),
        .I2(isbyte),
        .I3(isdoublet),
        .I4(1'b0),
        .I5(1'b1),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized14
   (sel_Write_Mux_MSB,
    isbyte,
    isdoublet);
  output [1:0]sel_Write_Mux_MSB;
  input isbyte;
  input isdoublet;

  wire isbyte;
  wire isdoublet;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h1111111155555555)) 
    \Using_FPGA.Native 
       (.I0(isbyte),
        .I1(isdoublet),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(sel_Write_Mux_MSB[0]),
        .O6(sel_Write_Mux_MSB[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_10
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_11
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_12
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_13
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_14
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_15
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_16
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_17
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_3
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_4
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_5
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_6
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_7
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_8
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_829
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] ,
    isbyte);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] ;
  input isbyte;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] ;
  wire [1:0]D;
  wire isbyte;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] [3]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] [1]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] [2]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] [0]),
        .I4(isbyte),
        .I5(1'b1),
        .O5(D[1]),
        .O6(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_830
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] ,
    isbyte);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] ;
  input isbyte;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] ;
  wire [1:0]D;
  wire isbyte;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] [3]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] [1]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] [2]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] [0]),
        .I4(isbyte),
        .I5(1'b1),
        .O5(D[1]),
        .O6(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_831
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] ,
    isbyte);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] ;
  input isbyte;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] ;
  wire [1:0]D;
  wire isbyte;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] [3]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] [1]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] [2]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] [0]),
        .I4(isbyte),
        .I5(1'b1),
        .O5(D[1]),
        .O6(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_832
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] ,
    isbyte);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] ;
  input isbyte;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] ;
  wire [1:0]D;
  wire isbyte;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] [3]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] [1]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] [2]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] [0]),
        .I4(isbyte),
        .I5(1'b1),
        .O5(D[1]),
        .O6(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_833
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_834
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_835
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_836
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_837
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_838
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_839
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_840
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized16_9
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_766
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_768
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_770
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_772
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_774
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_776
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_778
   (DI,
    S,
    EX_Op2,
    alu_Op,
    EX_Op1);
  output DI;
  output S;
  input EX_Op2;
  input [0:1]alu_Op;
  input EX_Op1;

  wire DI;
  wire EX_Op1;
  wire EX_Op2;
  wire S;
  wire [0:1]alu_Op;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(EX_Op2),
        .I1(alu_Op[0]),
        .I2(EX_Op1),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_780
   (DI,
    S,
    \Using_FPGA.Native_I2 ,
    alu_Op,
    \Using_FPGA.Native_I2_0 );
  output DI;
  output S;
  input \Using_FPGA.Native_I2 ;
  input [0:1]alu_Op;
  input \Using_FPGA.Native_I2_0 ;

  wire DI;
  wire S;
  wire \Using_FPGA.Native_I2 ;
  wire \Using_FPGA.Native_I2_0 ;
  wire [0:1]alu_Op;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_I2 ),
        .I1(alu_Op[0]),
        .I2(\Using_FPGA.Native_I2_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_782
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_784
   (DI,
    S,
    Op2,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] );
  output DI;
  output S;
  input Op2;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ;
  wire DI;
  wire Op2;
  wire S;
  wire [0:1]alu_Op;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Op2),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_786
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 );
  output DI;
  output S;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_788
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_790
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_792
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_794
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_796
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_798
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_800
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_802
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_804
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_806
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_808
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_810
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_812
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_814
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_816
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_818
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_820
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_822
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized2_824
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized6
   (byte_selects_0,
    byte_selects_1,
    EX_Op2,
    Op1_Low,
    \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[2] );
  output byte_selects_0;
  output byte_selects_1;
  input EX_Op2;
  input [1:0]Op1_Low;
  input \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[2] ;

  wire \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[2] ;
  wire EX_Op2;
  wire [1:0]Op1_Low;
  wire byte_selects_0;
  wire byte_selects_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h7887877899996666)) 
    \Using_FPGA.Native 
       (.I0(EX_Op2),
        .I1(Op1_Low[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[2] ),
        .I3(Op1_Low[1]),
        .I4(1'b1),
        .I5(1'b1),
        .O5(byte_selects_0),
        .O6(byte_selects_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module cpu_MB_LUT6_2__parameterized8
   (D,
    byte_selects_1,
    byte_selects_0,
    isbyte,
    isdoublet);
  output [1:0]D;
  input byte_selects_1;
  input byte_selects_0;
  input isbyte;
  input isdoublet;

  wire [1:0]D;
  wire byte_selects_0;
  wire byte_selects_1;
  wire isbyte;
  wire isdoublet;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h2A2F2A2F8A8F8A8F)) 
    \Using_FPGA.Native 
       (.I0(byte_selects_1),
        .I1(byte_selects_0),
        .I2(isbyte),
        .I3(isdoublet),
        .I4(1'b0),
        .I5(1'b1),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_413
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__16 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__16 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__16 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__16 [4]),
        .A1(\Using_FPGA.Native_i_2__16 [3]),
        .A2(\Using_FPGA.Native_i_2__16 [2]),
        .A3(\Using_FPGA.Native_i_2__16 [1]),
        .A4(\Using_FPGA.Native_i_2__16 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_414
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_415
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__15 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__15 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__15 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__15 [4]),
        .A1(\Using_FPGA.Native_i_2__15 [3]),
        .A2(\Using_FPGA.Native_i_2__15 [2]),
        .A3(\Using_FPGA.Native_i_2__15 [1]),
        .A4(\Using_FPGA.Native_i_2__15 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_416
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_417
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__14 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__14 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__14 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__14 [4]),
        .A1(\Using_FPGA.Native_i_2__14 [3]),
        .A2(\Using_FPGA.Native_i_2__14 [2]),
        .A3(\Using_FPGA.Native_i_2__14 [1]),
        .A4(\Using_FPGA.Native_i_2__14 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_418
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_419
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__13 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__13 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__13 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__13 [4]),
        .A1(\Using_FPGA.Native_i_2__13 [3]),
        .A2(\Using_FPGA.Native_i_2__13 [2]),
        .A3(\Using_FPGA.Native_i_2__13 [1]),
        .A4(\Using_FPGA.Native_i_2__13 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_420
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_421
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__12 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__12 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__12 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__12 [4]),
        .A1(\Using_FPGA.Native_i_2__12 [3]),
        .A2(\Using_FPGA.Native_i_2__12 [2]),
        .A3(\Using_FPGA.Native_i_2__12 [1]),
        .A4(\Using_FPGA.Native_i_2__12 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_422
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_423
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__11 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__11 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__11 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__11 [4]),
        .A1(\Using_FPGA.Native_i_2__11 [3]),
        .A2(\Using_FPGA.Native_i_2__11 [2]),
        .A3(\Using_FPGA.Native_i_2__11 [1]),
        .A4(\Using_FPGA.Native_i_2__11 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_424
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_425
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__10 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__10 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__10 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__10 [4]),
        .A1(\Using_FPGA.Native_i_2__10 [3]),
        .A2(\Using_FPGA.Native_i_2__10 [2]),
        .A3(\Using_FPGA.Native_i_2__10 [1]),
        .A4(\Using_FPGA.Native_i_2__10 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_426
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_427
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_3__4 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_3__4 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_3__4 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_3__4 [4]),
        .A1(\Using_FPGA.Native_i_3__4 [3]),
        .A2(\Using_FPGA.Native_i_3__4 [2]),
        .A3(\Using_FPGA.Native_i_3__4 [1]),
        .A4(\Using_FPGA.Native_i_3__4 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_428
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_429
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__37 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__37 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__37 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__37 [4]),
        .A1(\Using_FPGA.Native_i_2__37 [3]),
        .A2(\Using_FPGA.Native_i_2__37 [2]),
        .A3(\Using_FPGA.Native_i_2__37 [1]),
        .A4(\Using_FPGA.Native_i_2__37 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_430
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_431
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__9 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__9 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__9 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__9 [4]),
        .A1(\Using_FPGA.Native_i_2__9 [3]),
        .A2(\Using_FPGA.Native_i_2__9 [2]),
        .A3(\Using_FPGA.Native_i_2__9 [1]),
        .A4(\Using_FPGA.Native_i_2__9 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_432
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_433
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__36 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__36 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__36 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__36 [4]),
        .A1(\Using_FPGA.Native_i_2__36 [3]),
        .A2(\Using_FPGA.Native_i_2__36 [2]),
        .A3(\Using_FPGA.Native_i_2__36 [1]),
        .A4(\Using_FPGA.Native_i_2__36 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_434
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_435
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__35 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__35 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__35 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__35 [4]),
        .A1(\Using_FPGA.Native_i_2__35 [3]),
        .A2(\Using_FPGA.Native_i_2__35 [2]),
        .A3(\Using_FPGA.Native_i_2__35 [1]),
        .A4(\Using_FPGA.Native_i_2__35 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_436
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_437
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__34 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__34 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__34 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__34 [4]),
        .A1(\Using_FPGA.Native_i_2__34 [3]),
        .A2(\Using_FPGA.Native_i_2__34 [2]),
        .A3(\Using_FPGA.Native_i_2__34 [1]),
        .A4(\Using_FPGA.Native_i_2__34 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_438
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_439
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__33 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__33 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__33 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__33 [4]),
        .A1(\Using_FPGA.Native_i_2__33 [3]),
        .A2(\Using_FPGA.Native_i_2__33 [2]),
        .A3(\Using_FPGA.Native_i_2__33 [1]),
        .A4(\Using_FPGA.Native_i_2__33 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_440
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_441
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__32 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__32 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__32 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__32 [4]),
        .A1(\Using_FPGA.Native_i_2__32 [3]),
        .A2(\Using_FPGA.Native_i_2__32 [2]),
        .A3(\Using_FPGA.Native_i_2__32 [1]),
        .A4(\Using_FPGA.Native_i_2__32 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_442
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_443
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__31 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__31 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__31 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__31 [4]),
        .A1(\Using_FPGA.Native_i_2__31 [3]),
        .A2(\Using_FPGA.Native_i_2__31 [2]),
        .A3(\Using_FPGA.Native_i_2__31 [1]),
        .A4(\Using_FPGA.Native_i_2__31 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_444
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_445
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__30 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__30 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__30 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__30 [4]),
        .A1(\Using_FPGA.Native_i_2__30 [3]),
        .A2(\Using_FPGA.Native_i_2__30 [2]),
        .A3(\Using_FPGA.Native_i_2__30 [1]),
        .A4(\Using_FPGA.Native_i_2__30 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_446
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_447
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__29 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__29 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__29 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__29 [4]),
        .A1(\Using_FPGA.Native_i_2__29 [3]),
        .A2(\Using_FPGA.Native_i_2__29 [2]),
        .A3(\Using_FPGA.Native_i_2__29 [1]),
        .A4(\Using_FPGA.Native_i_2__29 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_448
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_449
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__28 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__28 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__28 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__28 [4]),
        .A1(\Using_FPGA.Native_i_2__28 [3]),
        .A2(\Using_FPGA.Native_i_2__28 [2]),
        .A3(\Using_FPGA.Native_i_2__28 [1]),
        .A4(\Using_FPGA.Native_i_2__28 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_450
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_451
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__27 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__27 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__27 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__27 [4]),
        .A1(\Using_FPGA.Native_i_2__27 [3]),
        .A2(\Using_FPGA.Native_i_2__27 [2]),
        .A3(\Using_FPGA.Native_i_2__27 [1]),
        .A4(\Using_FPGA.Native_i_2__27 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_452
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_453
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__8 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__8 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__8 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__8 [4]),
        .A1(\Using_FPGA.Native_i_2__8 [3]),
        .A2(\Using_FPGA.Native_i_2__8 [2]),
        .A3(\Using_FPGA.Native_i_2__8 [1]),
        .A4(\Using_FPGA.Native_i_2__8 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_454
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_455
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__26 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__26 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__26 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__26 [4]),
        .A1(\Using_FPGA.Native_i_2__26 [3]),
        .A2(\Using_FPGA.Native_i_2__26 [2]),
        .A3(\Using_FPGA.Native_i_2__26 [1]),
        .A4(\Using_FPGA.Native_i_2__26 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_456
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_457
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__25 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__25 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__25 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__25 [4]),
        .A1(\Using_FPGA.Native_i_2__25 [3]),
        .A2(\Using_FPGA.Native_i_2__25 [2]),
        .A3(\Using_FPGA.Native_i_2__25 [1]),
        .A4(\Using_FPGA.Native_i_2__25 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_458
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_459
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__24 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__24 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__24 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__24 [4]),
        .A1(\Using_FPGA.Native_i_2__24 [3]),
        .A2(\Using_FPGA.Native_i_2__24 [2]),
        .A3(\Using_FPGA.Native_i_2__24 [1]),
        .A4(\Using_FPGA.Native_i_2__24 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_460
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_461
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__23 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__23 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__23 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__23 [4]),
        .A1(\Using_FPGA.Native_i_2__23 [3]),
        .A2(\Using_FPGA.Native_i_2__23 [2]),
        .A3(\Using_FPGA.Native_i_2__23 [1]),
        .A4(\Using_FPGA.Native_i_2__23 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_462
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_463
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__22 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__22 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__22 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__22 [4]),
        .A1(\Using_FPGA.Native_i_2__22 [3]),
        .A2(\Using_FPGA.Native_i_2__22 [2]),
        .A3(\Using_FPGA.Native_i_2__22 [1]),
        .A4(\Using_FPGA.Native_i_2__22 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_464
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_465
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__21 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__21 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__21 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__21 [4]),
        .A1(\Using_FPGA.Native_i_2__21 [3]),
        .A2(\Using_FPGA.Native_i_2__21 [2]),
        .A3(\Using_FPGA.Native_i_2__21 [1]),
        .A4(\Using_FPGA.Native_i_2__21 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_466
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_467
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__20 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__20 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__20 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__20 [4]),
        .A1(\Using_FPGA.Native_i_2__20 [3]),
        .A2(\Using_FPGA.Native_i_2__20 [2]),
        .A3(\Using_FPGA.Native_i_2__20 [1]),
        .A4(\Using_FPGA.Native_i_2__20 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_468
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_469
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__19 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__19 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__19 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__19 [4]),
        .A1(\Using_FPGA.Native_i_2__19 [3]),
        .A2(\Using_FPGA.Native_i_2__19 [2]),
        .A3(\Using_FPGA.Native_i_2__19 [1]),
        .A4(\Using_FPGA.Native_i_2__19 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_470
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_471
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__18 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__18 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__18 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__18 [4]),
        .A1(\Using_FPGA.Native_i_2__18 [3]),
        .A2(\Using_FPGA.Native_i_2__18 [2]),
        .A3(\Using_FPGA.Native_i_2__18 [1]),
        .A4(\Using_FPGA.Native_i_2__18 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_472
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_473
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__17 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__17 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__17 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__17 [4]),
        .A1(\Using_FPGA.Native_i_2__17 [3]),
        .A2(\Using_FPGA.Native_i_2__17 [2]),
        .A3(\Using_FPGA.Native_i_2__17 [1]),
        .A4(\Using_FPGA.Native_i_2__17 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_474
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module cpu_MB_RAM32X1D_475
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__7 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__7 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__7 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;
  wire \NLW_Using_FPGA.Native_SPO_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "SWEEP " *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__7 [4]),
        .A1(\Using_FPGA.Native_i_2__7 [3]),
        .A2(\Using_FPGA.Native_i_2__7 [2]),
        .A3(\Using_FPGA.Native_i_2__7 [1]),
        .A4(\Using_FPGA.Native_i_2__7 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\NLW_Using_FPGA.Native_SPO_UNCONNECTED ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module cpu_MB_SRLC16E
   (SRL16_Sel_7,
    which_pc__0,
    SRL16_MC15_7,
    Address,
    Dbg_Clk,
    Dbg_Reg_En);
  output SRL16_Sel_7;
  output which_pc__0;
  input SRL16_MC15_7;
  input [1:0]Address;
  input Dbg_Clk;
  input [0:7]Dbg_Reg_En;

  wire [1:0]Address;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire SRL16_MC15_7;
  wire SRL16_Sel_7;
  wire \Use_unisim.MB_SRL16CE_I1_i_2_n_0 ;
  wire \Use_unisim.MB_SRL16CE_I1_i_3_n_0 ;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* XILINX_LEGACY_PRIM = "SRLC16E" *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(Address[0]),
        .A3(Address[1]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_7),
        .Q(SRL16_Sel_7));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \Use_unisim.MB_SRL16CE_I1_i_1 
       (.I0(Dbg_Reg_En[2]),
        .I1(Dbg_Reg_En[7]),
        .I2(\Use_unisim.MB_SRL16CE_I1_i_2_n_0 ),
        .I3(Dbg_Reg_En[6]),
        .I4(Dbg_Reg_En[3]),
        .I5(\Use_unisim.MB_SRL16CE_I1_i_3_n_0 ),
        .O(which_pc__0));
  LUT2 #(
    .INIT(4'hE)) 
    \Use_unisim.MB_SRL16CE_I1_i_2 
       (.I0(Dbg_Reg_En[1]),
        .I1(Dbg_Reg_En[0]),
        .O(\Use_unisim.MB_SRL16CE_I1_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \Use_unisim.MB_SRL16CE_I1_i_3 
       (.I0(Dbg_Reg_En[4]),
        .I1(Dbg_Reg_En[5]),
        .O(\Use_unisim.MB_SRL16CE_I1_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module cpu_MB_SRLC16E_35
   (SRL16_Sel_6,
    SRL16_MC15_7,
    which_pc__0,
    SRL16_MC15_6,
    Address,
    Dbg_Clk);
  output SRL16_Sel_6;
  output SRL16_MC15_7;
  input which_pc__0;
  input SRL16_MC15_6;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_6;
  wire SRL16_MC15_7;
  wire SRL16_Sel_6;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_6),
        .Q(SRL16_Sel_6),
        .Q15(SRL16_MC15_7));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module cpu_MB_SRLC16E_37
   (SRL16_Sel_5,
    SRL16_MC15_6,
    which_pc__0,
    SRL16_MC15_5,
    Address,
    Dbg_Clk);
  output SRL16_Sel_5;
  output SRL16_MC15_6;
  input which_pc__0;
  input SRL16_MC15_5;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_5;
  wire SRL16_MC15_6;
  wire SRL16_Sel_5;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_5),
        .Q(SRL16_Sel_5),
        .Q15(SRL16_MC15_6));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module cpu_MB_SRLC16E_39
   (SRL16_Sel_4,
    SRL16_MC15_5,
    which_pc__0,
    SRL16_MC15_4,
    Address,
    Dbg_Clk);
  output SRL16_Sel_4;
  output SRL16_MC15_5;
  input which_pc__0;
  input SRL16_MC15_4;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_4;
  wire SRL16_MC15_5;
  wire SRL16_Sel_4;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_4),
        .Q(SRL16_Sel_4),
        .Q15(SRL16_MC15_5));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module cpu_MB_SRLC16E_41
   (SRL16_Sel_3,
    SRL16_MC15_4,
    which_pc__0,
    SRL16_MC15_3,
    Address,
    Dbg_Clk);
  output SRL16_Sel_3;
  output SRL16_MC15_4;
  input which_pc__0;
  input SRL16_MC15_3;
  input [0:0]Address;
  input Dbg_Clk;

  wire [0:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_3;
  wire SRL16_MC15_4;
  wire SRL16_Sel_3;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_3),
        .Q(SRL16_Sel_3),
        .Q15(SRL16_MC15_4));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module cpu_MB_SRLC16E_43
   (SRL16_Sel_2,
    SRL16_MC15_3,
    which_pc__0,
    SRL16_MC15_2,
    Dbg_Clk);
  output SRL16_Sel_2;
  output SRL16_MC15_3;
  input which_pc__0;
  input SRL16_MC15_2;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire SRL16_MC15_2;
  wire SRL16_MC15_3;
  wire SRL16_Sel_2;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_2),
        .Q(SRL16_Sel_2),
        .Q15(SRL16_MC15_3));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module cpu_MB_SRLC16E_45
   (SRL16_Sel_1,
    SRL16_MC15_2,
    which_pc__0,
    SRL16_MC15_1,
    Dbg_Clk);
  output SRL16_Sel_1;
  output SRL16_MC15_2;
  input which_pc__0;
  input SRL16_MC15_1;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire SRL16_MC15_1;
  wire SRL16_MC15_2;
  wire SRL16_Sel_1;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_1),
        .Q(SRL16_Sel_1),
        .Q15(SRL16_MC15_2));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module cpu_MB_SRLC16E_47
   (SRL16_Sel_0,
    SRL16_MC15_1,
    which_pc__0,
    Dbg_TDI,
    Dbg_Clk);
  output SRL16_Sel_0;
  output SRL16_MC15_1;
  input which_pc__0;
  input Dbg_TDI;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire Dbg_TDI;
  wire SRL16_MC15_1;
  wire SRL16_Sel_0;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(Dbg_TDI),
        .Q(SRL16_Sel_0),
        .Q15(SRL16_MC15_1));
endmodule

(* ORIG_REF_NAME = "MSR_Reg" *) 
module cpu_MSR_Reg
   (msr_I,
    I3,
    I3_0,
    I3_1,
    I3_2,
    \Using_FPGA.Native ,
    MSR_Rst,
    \Using_FPGA.Native_0 ,
    Clk,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    Address,
    \Using_dynamic_instr_Address.old_IE_value_reg );
  output [2:0]msr_I;
  output I3;
  output I3_0;
  output I3_1;
  output I3_2;
  output \Using_FPGA.Native ;
  input MSR_Rst;
  input \Using_FPGA.Native_0 ;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input [1:0]Address;
  input \Using_dynamic_instr_Address.old_IE_value_reg ;

  wire [1:0]Address;
  wire Clk;
  wire I3;
  wire I3_0;
  wire I3_1;
  wire I3_2;
  wire MSR_Rst;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire [2:0]msr_I;
  wire \NLW_MSR_Bits[30].Using_MSR_Reg_Bit.MSR_Reg_Bit_I_Using_FPGA.Native_UNCONNECTED ;
  wire \NLW_MSR_Bits[30].Using_MSR_Reg_Bit.MSR_Reg_Bit_I_Using_dynamic_instr_Address.old_IE_value_reg_UNCONNECTED ;

  cpu_MSR_Reg_Bit \MSR_Bits[28].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Address(Address[1]),
        .Clk(Clk),
        .I3_1(I3_1),
        .MSR_Rst(MSR_Rst),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .msr_I(msr_I[2]));
  cpu_MSR_Reg_Bit_729 \MSR_Bits[29].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Address(Address[0]),
        .Clk(Clk),
        .I3(I3),
        .I3_2(I3_2),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_5 ),
        .msr_I(msr_I[1]));
  cpu_MSR_Reg_Bit_730 \MSR_Bits[30].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Clk(Clk),
        .I3_0(I3_0),
        .\Using_FPGA.Native (\NLW_MSR_Bits[30].Using_MSR_Reg_Bit.MSR_Reg_Bit_I_Using_FPGA.Native_UNCONNECTED ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_5 ),
        .\Using_dynamic_instr_Address.old_IE_value_reg (\NLW_MSR_Bits[30].Using_MSR_Reg_Bit.MSR_Reg_Bit_I_Using_dynamic_instr_Address.old_IE_value_reg_UNCONNECTED ),
        .msr_I(msr_I[0]));
endmodule

(* ORIG_REF_NAME = "MSR_Reg_Bit" *) 
module cpu_MSR_Reg_Bit
   (msr_I,
    I3_1,
    MSR_Rst,
    \Using_FPGA.Native ,
    Clk,
    \Using_FPGA.Native_0 ,
    Address);
  output [0:0]msr_I;
  output I3_1;
  input MSR_Rst;
  input \Using_FPGA.Native ;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;

  wire [0:0]Address;
  wire Clk;
  wire I3_1;
  wire MSR_Rst;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]msr_I;

  cpu_microblaze_v11_0_0_MB_FDRSE_733 MSR_I
       (.Address(Address),
        .Clk(Clk),
        .I3_1(I3_1),
        .MSR_Rst(MSR_Rst),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .msr_I(msr_I));
endmodule

(* ORIG_REF_NAME = "MSR_Reg_Bit" *) 
module cpu_MSR_Reg_Bit_729
   (msr_I,
    I3,
    I3_2,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Clk,
    \Using_FPGA.Native_1 ,
    Address);
  output [0:0]msr_I;
  output I3;
  output I3_2;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input [0:0]Address;

  wire [0:0]Address;
  wire Clk;
  wire I3;
  wire I3_2;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]msr_I;

  cpu_microblaze_v11_0_0_MB_FDRSE_732 MSR_I
       (.Address(Address),
        .Clk(Clk),
        .I3(I3),
        .I3_2(I3_2),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .msr_I(msr_I));
endmodule

(* ORIG_REF_NAME = "MSR_Reg_Bit" *) 
module cpu_MSR_Reg_Bit_730
   (msr_I,
    I3_0,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    \Using_FPGA.Native_2 ,
    \Using_dynamic_instr_Address.old_IE_value_reg );
  output [0:0]msr_I;
  output I3_0;
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input \Using_dynamic_instr_Address.old_IE_value_reg ;

  wire Clk;
  wire I3_0;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]msr_I;
  wire \NLW_MSR_I_Using_FPGA.Native_0_UNCONNECTED ;
  wire \NLW_MSR_I_Using_dynamic_instr_Address.old_IE_value_reg_UNCONNECTED ;

  cpu_microblaze_v11_0_0_MB_FDRSE_731 MSR_I
       (.Clk(Clk),
        .I3_0(I3_0),
        .\Using_FPGA.Native_0 (\NLW_MSR_I_Using_FPGA.Native_0_UNCONNECTED ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_dynamic_instr_Address.old_IE_value_reg (\NLW_MSR_I_Using_dynamic_instr_Address.old_IE_value_reg_UNCONNECTED ),
        .msr_I(msr_I));
endmodule

(* C_ADDR_TAG_BITS = "0" *) (* C_ALLOW_DCACHE_WR = "1" *) (* C_ALLOW_ICACHE_WR = "1" *) 
(* C_AREA_OPTIMIZED = "1" *) (* C_ASYNC_INTERRUPT = "1" *) (* C_ASYNC_WAKEUP = "3" *) 
(* C_AVOID_PRIMITIVES = "0" *) (* C_BASE_VECTORS = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) (* C_BRANCH_TARGET_CACHE_SIZE = "0" *) 
(* C_CACHE_BYTE_SIZE = "8192" *) (* C_DADDR_SIZE = "32" *) (* C_DATA_SIZE = "32" *) 
(* C_DCACHE_ADDR_TAG = "0" *) (* C_DCACHE_ALWAYS_USED = "0" *) (* C_DCACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_DCACHE_BYTE_SIZE = "8192" *) (* C_DCACHE_DATA_WIDTH = "0" *) (* C_DCACHE_FORCE_TAG_LUTRAM = "0" *) 
(* C_DCACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) (* C_DCACHE_LINE_LEN = "4" *) (* C_DCACHE_USE_WRITEBACK = "0" *) 
(* C_DCACHE_VICTIMS = "0" *) (* C_DEBUG_COUNTER_WIDTH = "32" *) (* C_DEBUG_ENABLED = "1" *) 
(* C_DEBUG_EVENT_COUNTERS = "5" *) (* C_DEBUG_EXTERNAL_TRACE = "0" *) (* C_DEBUG_INTERFACE = "0" *) 
(* C_DEBUG_LATENCY_COUNTERS = "1" *) (* C_DEBUG_PROFILE_SIZE = "0" *) (* C_DEBUG_TRACE_ASYNC_RESET = "0" *) 
(* C_DEBUG_TRACE_SIZE = "8192" *) (* C_DIV_ZERO_EXCEPTION = "0" *) (* C_DYNAMIC_BUS_SIZING = "0" *) 
(* C_D_AXI = "1" *) (* C_D_LMB = "1" *) (* C_ECC_USE_CE_EXCEPTION = "0" *) 
(* C_EDGE_IS_POSITIVE = "1" *) (* C_ENDIANNESS = "1" *) (* C_FAMILY = "virtex7" *) 
(* C_FAULT_TOLERANT = "0" *) (* C_FPU_EXCEPTION = "0" *) (* C_FREQ = "100000000" *) 
(* C_FSL_EXCEPTION = "0" *) (* C_FSL_LINKS = "0" *) (* C_IADDR_SIZE = "32" *) 
(* C_ICACHE_ALWAYS_USED = "0" *) (* C_ICACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) (* C_ICACHE_DATA_WIDTH = "0" *) 
(* C_ICACHE_FORCE_TAG_LUTRAM = "0" *) (* C_ICACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) (* C_ICACHE_LINE_LEN = "4" *) 
(* C_ICACHE_STREAMS = "0" *) (* C_ICACHE_VICTIMS = "0" *) (* C_ILL_OPCODE_EXCEPTION = "0" *) 
(* C_IMPRECISE_EXCEPTIONS = "0" *) (* C_INSTANCE = "bd_3914_microblaze_I_0" *) (* C_INSTR_SIZE = "32" *) 
(* C_INTERCONNECT = "2" *) (* C_INTERRUPT_IS_EDGE = "0" *) (* C_I_AXI = "0" *) 
(* C_I_LMB = "1" *) (* C_LMB_DATA_SIZE = "32" *) (* C_LOCKSTEP_MASTER = "0" *) 
(* C_LOCKSTEP_SLAVE = "0" *) (* C_M0_AXIS_DATA_WIDTH = "32" *) (* C_M10_AXIS_DATA_WIDTH = "32" *) 
(* C_M11_AXIS_DATA_WIDTH = "32" *) (* C_M12_AXIS_DATA_WIDTH = "32" *) (* C_M13_AXIS_DATA_WIDTH = "32" *) 
(* C_M14_AXIS_DATA_WIDTH = "32" *) (* C_M15_AXIS_DATA_WIDTH = "32" *) (* C_M1_AXIS_DATA_WIDTH = "32" *) 
(* C_M2_AXIS_DATA_WIDTH = "32" *) (* C_M3_AXIS_DATA_WIDTH = "32" *) (* C_M4_AXIS_DATA_WIDTH = "32" *) 
(* C_M5_AXIS_DATA_WIDTH = "32" *) (* C_M6_AXIS_DATA_WIDTH = "32" *) (* C_M7_AXIS_DATA_WIDTH = "32" *) 
(* C_M8_AXIS_DATA_WIDTH = "32" *) (* C_M9_AXIS_DATA_WIDTH = "32" *) (* C_MMU_DTLB_SIZE = "4" *) 
(* C_MMU_ITLB_SIZE = "2" *) (* C_MMU_PRIVILEGED_INSTR = "0" *) (* C_MMU_TLB_ACCESS = "3" *) 
(* C_MMU_ZONES = "16" *) (* C_M_AXI_DC_ADDR_WIDTH = "32" *) (* C_M_AXI_DC_ARUSER_WIDTH = "5" *) 
(* C_M_AXI_DC_AWUSER_WIDTH = "5" *) (* C_M_AXI_DC_BUSER_WIDTH = "1" *) (* C_M_AXI_DC_DATA_WIDTH = "32" *) 
(* C_M_AXI_DC_EXCLUSIVE_ACCESS = "0" *) (* C_M_AXI_DC_RUSER_WIDTH = "1" *) (* C_M_AXI_DC_THREAD_ID_WIDTH = "1" *) 
(* C_M_AXI_DC_USER_VALUE = "31" *) (* C_M_AXI_DC_WUSER_WIDTH = "1" *) (* C_M_AXI_DP_ADDR_WIDTH = "32" *) 
(* C_M_AXI_DP_DATA_WIDTH = "32" *) (* C_M_AXI_DP_EXCLUSIVE_ACCESS = "0" *) (* C_M_AXI_DP_THREAD_ID_WIDTH = "1" *) 
(* C_M_AXI_D_BUS_EXCEPTION = "0" *) (* C_M_AXI_IC_ADDR_WIDTH = "32" *) (* C_M_AXI_IC_ARUSER_WIDTH = "5" *) 
(* C_M_AXI_IC_AWUSER_WIDTH = "5" *) (* C_M_AXI_IC_BUSER_WIDTH = "1" *) (* C_M_AXI_IC_DATA_WIDTH = "32" *) 
(* C_M_AXI_IC_RUSER_WIDTH = "1" *) (* C_M_AXI_IC_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_IC_USER_VALUE = "31" *) 
(* C_M_AXI_IC_WUSER_WIDTH = "1" *) (* C_M_AXI_IP_ADDR_WIDTH = "32" *) (* C_M_AXI_IP_DATA_WIDTH = "32" *) 
(* C_M_AXI_IP_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_I_BUS_EXCEPTION = "0" *) (* C_NUMBER_OF_PC_BRK = "1" *) 
(* C_NUMBER_OF_RD_ADDR_BRK = "0" *) (* C_NUMBER_OF_WR_ADDR_BRK = "0" *) (* C_NUM_SYNC_FF_CLK = "2" *) 
(* C_NUM_SYNC_FF_CLK_DEBUG = "2" *) (* C_NUM_SYNC_FF_CLK_IRQ = "1" *) (* C_NUM_SYNC_FF_DBG_CLK = "1" *) 
(* C_NUM_SYNC_FF_DBG_TRACE_CLK = "2" *) (* C_OPCODE_0x0_ILLEGAL = "0" *) (* C_OPTIMIZATION = "0" *) 
(* C_PC_WIDTH = "17" *) (* C_PIADDR_SIZE = "32" *) (* C_PVR = "0" *) 
(* C_PVR_USER1 = "8'b00000000" *) (* C_PVR_USER2 = "0" *) (* C_RESET_MSR = "0" *) 
(* C_S0_AXIS_DATA_WIDTH = "32" *) (* C_S10_AXIS_DATA_WIDTH = "32" *) (* C_S11_AXIS_DATA_WIDTH = "32" *) 
(* C_S12_AXIS_DATA_WIDTH = "32" *) (* C_S13_AXIS_DATA_WIDTH = "32" *) (* C_S14_AXIS_DATA_WIDTH = "32" *) 
(* C_S15_AXIS_DATA_WIDTH = "32" *) (* C_S1_AXIS_DATA_WIDTH = "32" *) (* C_S2_AXIS_DATA_WIDTH = "32" *) 
(* C_S3_AXIS_DATA_WIDTH = "32" *) (* C_S4_AXIS_DATA_WIDTH = "32" *) (* C_S5_AXIS_DATA_WIDTH = "32" *) 
(* C_S6_AXIS_DATA_WIDTH = "32" *) (* C_S7_AXIS_DATA_WIDTH = "32" *) (* C_S8_AXIS_DATA_WIDTH = "32" *) 
(* C_S9_AXIS_DATA_WIDTH = "32" *) (* C_SCO = "0" *) (* C_UNALIGNED_EXCEPTIONS = "0" *) 
(* C_USE_BARREL = "0" *) (* C_USE_BRANCH_TARGET_CACHE = "0" *) (* C_USE_CONFIG_RESET = "0" *) 
(* C_USE_DCACHE = "0" *) (* C_USE_DIV = "0" *) (* C_USE_EXTENDED_FSL_INSTR = "0" *) 
(* C_USE_EXT_BRK = "0" *) (* C_USE_EXT_NM_BRK = "0" *) (* C_USE_FPU = "0" *) 
(* C_USE_HW_MUL = "0" *) (* C_USE_ICACHE = "0" *) (* C_USE_INTERRUPT = "2" *) 
(* C_USE_MMU = "0" *) (* C_USE_MSR_INSTR = "0" *) (* C_USE_NON_SECURE = "0" *) 
(* C_USE_PCMP_INSTR = "0" *) (* C_USE_REORDER_INSTR = "0" *) (* C_USE_STACK_PROTECTION = "0" *) 
(* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "MicroBlaze" *) 
module cpu_MicroBlaze
   (RAM_To,
    RAM_From,
    Clk,
    Reset,
    Mb_Reset,
    Config_Reset,
    Scan_Reset_Sel,
    Scan_Reset,
    Scan_En,
    Reset_Mode,
    Non_Secure,
    Interrupt,
    Interrupt_Address,
    Interrupt_Ack,
    Ext_BRK,
    Ext_NM_BRK,
    Pause,
    Pause_Ack,
    Dbg_Continue,
    Dbg_Stop,
    Dbg_Intr,
    MB_Halted,
    MB_Error,
    Wakeup,
    Sleep,
    Hibernate,
    Suspend,
    Dbg_Wakeup,
    LOCKSTEP_Slave_In,
    LOCKSTEP_Master_Out,
    LOCKSTEP_Out,
    Instr_Addr,
    Instr,
    IFetch,
    I_AS,
    IReady,
    IWAIT,
    ICE,
    IUE,
    M_AXI_IP_AWID,
    M_AXI_IP_AWADDR,
    M_AXI_IP_AWLEN,
    M_AXI_IP_AWSIZE,
    M_AXI_IP_AWBURST,
    M_AXI_IP_AWLOCK,
    M_AXI_IP_AWCACHE,
    M_AXI_IP_AWPROT,
    M_AXI_IP_AWQOS,
    M_AXI_IP_AWVALID,
    M_AXI_IP_AWREADY,
    M_AXI_IP_WDATA,
    M_AXI_IP_WSTRB,
    M_AXI_IP_WLAST,
    M_AXI_IP_WVALID,
    M_AXI_IP_WREADY,
    M_AXI_IP_BID,
    M_AXI_IP_BRESP,
    M_AXI_IP_BVALID,
    M_AXI_IP_BREADY,
    M_AXI_IP_ARID,
    M_AXI_IP_ARADDR,
    M_AXI_IP_ARLEN,
    M_AXI_IP_ARSIZE,
    M_AXI_IP_ARBURST,
    M_AXI_IP_ARLOCK,
    M_AXI_IP_ARCACHE,
    M_AXI_IP_ARPROT,
    M_AXI_IP_ARQOS,
    M_AXI_IP_ARVALID,
    M_AXI_IP_ARREADY,
    M_AXI_IP_RID,
    M_AXI_IP_RDATA,
    M_AXI_IP_RRESP,
    M_AXI_IP_RLAST,
    M_AXI_IP_RVALID,
    M_AXI_IP_RREADY,
    Data_Addr,
    Data_Read,
    Data_Write,
    D_AS,
    Read_Strobe,
    Write_Strobe,
    DReady,
    DWait,
    DCE,
    DUE,
    Byte_Enable,
    M_AXI_DP_AWID,
    M_AXI_DP_AWADDR,
    M_AXI_DP_AWLEN,
    M_AXI_DP_AWSIZE,
    M_AXI_DP_AWBURST,
    M_AXI_DP_AWLOCK,
    M_AXI_DP_AWCACHE,
    M_AXI_DP_AWPROT,
    M_AXI_DP_AWQOS,
    M_AXI_DP_AWVALID,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WDATA,
    M_AXI_DP_WSTRB,
    M_AXI_DP_WLAST,
    M_AXI_DP_WVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_BID,
    M_AXI_DP_BRESP,
    M_AXI_DP_BVALID,
    M_AXI_DP_BREADY,
    M_AXI_DP_ARID,
    M_AXI_DP_ARADDR,
    M_AXI_DP_ARLEN,
    M_AXI_DP_ARSIZE,
    M_AXI_DP_ARBURST,
    M_AXI_DP_ARLOCK,
    M_AXI_DP_ARCACHE,
    M_AXI_DP_ARPROT,
    M_AXI_DP_ARQOS,
    M_AXI_DP_ARVALID,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RID,
    M_AXI_DP_RDATA,
    M_AXI_DP_RRESP,
    M_AXI_DP_RLAST,
    M_AXI_DP_RVALID,
    M_AXI_DP_RREADY,
    Dbg_Disable,
    Dbg_Clk,
    Dbg_TDI,
    Dbg_TDO,
    Dbg_Reg_En,
    Dbg_Shift,
    Dbg_Capture,
    Dbg_Update,
    Debug_Rst,
    Dbg_Trig_In,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_Out,
    Dbg_Trace_Clk,
    Dbg_Trace_Data,
    Dbg_Trace_Ready,
    Dbg_Trace_Valid,
    Dbg_AWADDR,
    Dbg_AWVALID,
    Dbg_AWREADY,
    Dbg_WDATA,
    Dbg_WVALID,
    Dbg_WREADY,
    Dbg_BRESP,
    Dbg_BVALID,
    Dbg_BREADY,
    Dbg_ARADDR,
    Dbg_ARVALID,
    Dbg_ARREADY,
    Dbg_RDATA,
    Dbg_RRESP,
    Dbg_RVALID,
    Dbg_RREADY,
    DEBUG_ACLK,
    DEBUG_ARESETN,
    Trace_Instruction,
    Trace_Valid_Instr,
    Trace_PC,
    Trace_Reg_Write,
    Trace_Reg_Addr,
    Trace_MSR_Reg,
    Trace_PID_Reg,
    Trace_New_Reg_Value,
    Trace_Exception_Taken,
    Trace_Exception_Kind,
    Trace_Jump_Taken,
    Trace_Delay_Slot,
    Trace_Data_Address,
    Trace_Data_Write_Value,
    Trace_Data_Byte_Enable,
    Trace_Data_Access,
    Trace_Data_Read,
    Trace_Data_Write,
    Trace_DCache_Req,
    Trace_DCache_Hit,
    Trace_DCache_Rdy,
    Trace_DCache_Read,
    Trace_ICache_Req,
    Trace_ICache_Hit,
    Trace_ICache_Rdy,
    Trace_OF_PipeRun,
    Trace_EX_PipeRun,
    Trace_MEM_PipeRun,
    Trace_MB_Halted,
    Trace_Jump_Hit,
    M0_AXIS_TLAST,
    M0_AXIS_TDATA,
    M0_AXIS_TVALID,
    M0_AXIS_TREADY,
    M1_AXIS_TLAST,
    M1_AXIS_TDATA,
    M1_AXIS_TVALID,
    M1_AXIS_TREADY,
    M2_AXIS_TLAST,
    M2_AXIS_TDATA,
    M2_AXIS_TVALID,
    M2_AXIS_TREADY,
    M3_AXIS_TLAST,
    M3_AXIS_TDATA,
    M3_AXIS_TVALID,
    M3_AXIS_TREADY,
    M4_AXIS_TLAST,
    M4_AXIS_TDATA,
    M4_AXIS_TVALID,
    M4_AXIS_TREADY,
    M5_AXIS_TLAST,
    M5_AXIS_TDATA,
    M5_AXIS_TVALID,
    M5_AXIS_TREADY,
    M6_AXIS_TLAST,
    M6_AXIS_TDATA,
    M6_AXIS_TVALID,
    M6_AXIS_TREADY,
    M7_AXIS_TLAST,
    M7_AXIS_TDATA,
    M7_AXIS_TVALID,
    M7_AXIS_TREADY,
    M8_AXIS_TLAST,
    M8_AXIS_TDATA,
    M8_AXIS_TVALID,
    M8_AXIS_TREADY,
    M9_AXIS_TLAST,
    M9_AXIS_TDATA,
    M9_AXIS_TVALID,
    M9_AXIS_TREADY,
    M10_AXIS_TLAST,
    M10_AXIS_TDATA,
    M10_AXIS_TVALID,
    M10_AXIS_TREADY,
    M11_AXIS_TLAST,
    M11_AXIS_TDATA,
    M11_AXIS_TVALID,
    M11_AXIS_TREADY,
    M12_AXIS_TLAST,
    M12_AXIS_TDATA,
    M12_AXIS_TVALID,
    M12_AXIS_TREADY,
    M13_AXIS_TLAST,
    M13_AXIS_TDATA,
    M13_AXIS_TVALID,
    M13_AXIS_TREADY,
    M14_AXIS_TLAST,
    M14_AXIS_TDATA,
    M14_AXIS_TVALID,
    M14_AXIS_TREADY,
    M15_AXIS_TLAST,
    M15_AXIS_TDATA,
    M15_AXIS_TVALID,
    M15_AXIS_TREADY,
    S0_AXIS_TLAST,
    S0_AXIS_TDATA,
    S0_AXIS_TVALID,
    S0_AXIS_TREADY,
    S1_AXIS_TLAST,
    S1_AXIS_TDATA,
    S1_AXIS_TVALID,
    S1_AXIS_TREADY,
    S2_AXIS_TLAST,
    S2_AXIS_TDATA,
    S2_AXIS_TVALID,
    S2_AXIS_TREADY,
    S3_AXIS_TLAST,
    S3_AXIS_TDATA,
    S3_AXIS_TVALID,
    S3_AXIS_TREADY,
    S4_AXIS_TLAST,
    S4_AXIS_TDATA,
    S4_AXIS_TVALID,
    S4_AXIS_TREADY,
    S5_AXIS_TLAST,
    S5_AXIS_TDATA,
    S5_AXIS_TVALID,
    S5_AXIS_TREADY,
    S6_AXIS_TLAST,
    S6_AXIS_TDATA,
    S6_AXIS_TVALID,
    S6_AXIS_TREADY,
    S7_AXIS_TLAST,
    S7_AXIS_TDATA,
    S7_AXIS_TVALID,
    S7_AXIS_TREADY,
    S8_AXIS_TLAST,
    S8_AXIS_TDATA,
    S8_AXIS_TVALID,
    S8_AXIS_TREADY,
    S9_AXIS_TLAST,
    S9_AXIS_TDATA,
    S9_AXIS_TVALID,
    S9_AXIS_TREADY,
    S10_AXIS_TLAST,
    S10_AXIS_TDATA,
    S10_AXIS_TVALID,
    S10_AXIS_TREADY,
    S11_AXIS_TLAST,
    S11_AXIS_TDATA,
    S11_AXIS_TVALID,
    S11_AXIS_TREADY,
    S12_AXIS_TLAST,
    S12_AXIS_TDATA,
    S12_AXIS_TVALID,
    S12_AXIS_TREADY,
    S13_AXIS_TLAST,
    S13_AXIS_TDATA,
    S13_AXIS_TVALID,
    S13_AXIS_TREADY,
    S14_AXIS_TLAST,
    S14_AXIS_TDATA,
    S14_AXIS_TVALID,
    S14_AXIS_TREADY,
    S15_AXIS_TLAST,
    S15_AXIS_TDATA,
    S15_AXIS_TVALID,
    S15_AXIS_TREADY,
    M_AXI_IC_AWID,
    M_AXI_IC_AWADDR,
    M_AXI_IC_AWLEN,
    M_AXI_IC_AWSIZE,
    M_AXI_IC_AWBURST,
    M_AXI_IC_AWLOCK,
    M_AXI_IC_AWCACHE,
    M_AXI_IC_AWPROT,
    M_AXI_IC_AWQOS,
    M_AXI_IC_AWVALID,
    M_AXI_IC_AWREADY,
    M_AXI_IC_AWUSER,
    M_AXI_IC_AWDOMAIN,
    M_AXI_IC_AWSNOOP,
    M_AXI_IC_AWBAR,
    M_AXI_IC_WDATA,
    M_AXI_IC_WSTRB,
    M_AXI_IC_WLAST,
    M_AXI_IC_WVALID,
    M_AXI_IC_WREADY,
    M_AXI_IC_WUSER,
    M_AXI_IC_BID,
    M_AXI_IC_BRESP,
    M_AXI_IC_BVALID,
    M_AXI_IC_BREADY,
    M_AXI_IC_BUSER,
    M_AXI_IC_WACK,
    M_AXI_IC_ARID,
    M_AXI_IC_ARADDR,
    M_AXI_IC_ARLEN,
    M_AXI_IC_ARSIZE,
    M_AXI_IC_ARBURST,
    M_AXI_IC_ARLOCK,
    M_AXI_IC_ARCACHE,
    M_AXI_IC_ARPROT,
    M_AXI_IC_ARQOS,
    M_AXI_IC_ARVALID,
    M_AXI_IC_ARREADY,
    M_AXI_IC_ARUSER,
    M_AXI_IC_ARDOMAIN,
    M_AXI_IC_ARSNOOP,
    M_AXI_IC_ARBAR,
    M_AXI_IC_RID,
    M_AXI_IC_RDATA,
    M_AXI_IC_RRESP,
    M_AXI_IC_RLAST,
    M_AXI_IC_RVALID,
    M_AXI_IC_RREADY,
    M_AXI_IC_RUSER,
    M_AXI_IC_RACK,
    M_AXI_IC_ACVALID,
    M_AXI_IC_ACADDR,
    M_AXI_IC_ACSNOOP,
    M_AXI_IC_ACPROT,
    M_AXI_IC_ACREADY,
    M_AXI_IC_CRVALID,
    M_AXI_IC_CRRESP,
    M_AXI_IC_CRREADY,
    M_AXI_IC_CDVALID,
    M_AXI_IC_CDDATA,
    M_AXI_IC_CDLAST,
    M_AXI_IC_CDREADY,
    M_AXI_DC_AWID,
    M_AXI_DC_AWADDR,
    M_AXI_DC_AWLEN,
    M_AXI_DC_AWSIZE,
    M_AXI_DC_AWBURST,
    M_AXI_DC_AWLOCK,
    M_AXI_DC_AWCACHE,
    M_AXI_DC_AWPROT,
    M_AXI_DC_AWQOS,
    M_AXI_DC_AWVALID,
    M_AXI_DC_AWREADY,
    M_AXI_DC_AWUSER,
    M_AXI_DC_AWDOMAIN,
    M_AXI_DC_AWSNOOP,
    M_AXI_DC_AWBAR,
    M_AXI_DC_WDATA,
    M_AXI_DC_WSTRB,
    M_AXI_DC_WLAST,
    M_AXI_DC_WVALID,
    M_AXI_DC_WREADY,
    M_AXI_DC_WUSER,
    M_AXI_DC_BRESP,
    M_AXI_DC_BID,
    M_AXI_DC_BVALID,
    M_AXI_DC_BREADY,
    M_AXI_DC_BUSER,
    M_AXI_DC_WACK,
    M_AXI_DC_ARID,
    M_AXI_DC_ARADDR,
    M_AXI_DC_ARLEN,
    M_AXI_DC_ARSIZE,
    M_AXI_DC_ARBURST,
    M_AXI_DC_ARLOCK,
    M_AXI_DC_ARCACHE,
    M_AXI_DC_ARPROT,
    M_AXI_DC_ARQOS,
    M_AXI_DC_ARVALID,
    M_AXI_DC_ARREADY,
    M_AXI_DC_ARUSER,
    M_AXI_DC_ARDOMAIN,
    M_AXI_DC_ARSNOOP,
    M_AXI_DC_ARBAR,
    M_AXI_DC_RID,
    M_AXI_DC_RDATA,
    M_AXI_DC_RRESP,
    M_AXI_DC_RLAST,
    M_AXI_DC_RVALID,
    M_AXI_DC_RREADY,
    M_AXI_DC_RUSER,
    M_AXI_DC_RACK,
    M_AXI_DC_ACVALID,
    M_AXI_DC_ACADDR,
    M_AXI_DC_ACSNOOP,
    M_AXI_DC_ACPROT,
    M_AXI_DC_ACREADY,
    M_AXI_DC_CRVALID,
    M_AXI_DC_CRRESP,
    M_AXI_DC_CRREADY,
    M_AXI_DC_CDVALID,
    M_AXI_DC_CDDATA,
    M_AXI_DC_CDLAST,
    M_AXI_DC_CDREADY);
  input [255:0]RAM_To;
  output [255:0]RAM_From;
  input Clk;
  input Reset;
  input Mb_Reset;
  input Config_Reset;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input Scan_En;
  input [0:1]Reset_Mode;
  input [0:3]Non_Secure;
  input Interrupt;
  input [0:31]Interrupt_Address;
  output [0:1]Interrupt_Ack;
  input Ext_BRK;
  input Ext_NM_BRK;
  input Pause;
  output Pause_Ack;
  output Dbg_Continue;
  input Dbg_Stop;
  output Dbg_Intr;
  output MB_Halted;
  output MB_Error;
  input [0:1]Wakeup;
  output Sleep;
  output Hibernate;
  output Suspend;
  output Dbg_Wakeup;
  input [0:4095]LOCKSTEP_Slave_In;
  output [0:4095]LOCKSTEP_Master_Out;
  output [0:4095]LOCKSTEP_Out;
  output [0:31]Instr_Addr;
  input [0:31]Instr;
  output IFetch;
  output I_AS;
  input IReady;
  input IWAIT;
  input ICE;
  input IUE;
  output [0:0]M_AXI_IP_AWID;
  output [31:0]M_AXI_IP_AWADDR;
  output [7:0]M_AXI_IP_AWLEN;
  output [2:0]M_AXI_IP_AWSIZE;
  output [1:0]M_AXI_IP_AWBURST;
  output M_AXI_IP_AWLOCK;
  output [3:0]M_AXI_IP_AWCACHE;
  output [2:0]M_AXI_IP_AWPROT;
  output [3:0]M_AXI_IP_AWQOS;
  output M_AXI_IP_AWVALID;
  input M_AXI_IP_AWREADY;
  output [31:0]M_AXI_IP_WDATA;
  output [3:0]M_AXI_IP_WSTRB;
  output M_AXI_IP_WLAST;
  output M_AXI_IP_WVALID;
  input M_AXI_IP_WREADY;
  input [0:0]M_AXI_IP_BID;
  input [1:0]M_AXI_IP_BRESP;
  input M_AXI_IP_BVALID;
  output M_AXI_IP_BREADY;
  output [0:0]M_AXI_IP_ARID;
  output [31:0]M_AXI_IP_ARADDR;
  output [7:0]M_AXI_IP_ARLEN;
  output [2:0]M_AXI_IP_ARSIZE;
  output [1:0]M_AXI_IP_ARBURST;
  output M_AXI_IP_ARLOCK;
  output [3:0]M_AXI_IP_ARCACHE;
  output [2:0]M_AXI_IP_ARPROT;
  output [3:0]M_AXI_IP_ARQOS;
  output M_AXI_IP_ARVALID;
  input M_AXI_IP_ARREADY;
  input [0:0]M_AXI_IP_RID;
  input [31:0]M_AXI_IP_RDATA;
  input [1:0]M_AXI_IP_RRESP;
  input M_AXI_IP_RLAST;
  input M_AXI_IP_RVALID;
  output M_AXI_IP_RREADY;
  output [0:31]Data_Addr;
  input [0:31]Data_Read;
  output [0:31]Data_Write;
  output D_AS;
  output Read_Strobe;
  output Write_Strobe;
  input DReady;
  input DWait;
  input DCE;
  input DUE;
  output [0:3]Byte_Enable;
  output [0:0]M_AXI_DP_AWID;
  output [31:0]M_AXI_DP_AWADDR;
  output [7:0]M_AXI_DP_AWLEN;
  output [2:0]M_AXI_DP_AWSIZE;
  output [1:0]M_AXI_DP_AWBURST;
  output M_AXI_DP_AWLOCK;
  output [3:0]M_AXI_DP_AWCACHE;
  output [2:0]M_AXI_DP_AWPROT;
  output [3:0]M_AXI_DP_AWQOS;
  output M_AXI_DP_AWVALID;
  input M_AXI_DP_AWREADY;
  output [31:0]M_AXI_DP_WDATA;
  output [3:0]M_AXI_DP_WSTRB;
  output M_AXI_DP_WLAST;
  output M_AXI_DP_WVALID;
  input M_AXI_DP_WREADY;
  input [0:0]M_AXI_DP_BID;
  input [1:0]M_AXI_DP_BRESP;
  input M_AXI_DP_BVALID;
  output M_AXI_DP_BREADY;
  output [0:0]M_AXI_DP_ARID;
  output [31:0]M_AXI_DP_ARADDR;
  output [7:0]M_AXI_DP_ARLEN;
  output [2:0]M_AXI_DP_ARSIZE;
  output [1:0]M_AXI_DP_ARBURST;
  output M_AXI_DP_ARLOCK;
  output [3:0]M_AXI_DP_ARCACHE;
  output [2:0]M_AXI_DP_ARPROT;
  output [3:0]M_AXI_DP_ARQOS;
  output M_AXI_DP_ARVALID;
  input M_AXI_DP_ARREADY;
  input [0:0]M_AXI_DP_RID;
  input [31:0]M_AXI_DP_RDATA;
  input [1:0]M_AXI_DP_RRESP;
  input M_AXI_DP_RLAST;
  input M_AXI_DP_RVALID;
  output M_AXI_DP_RREADY;
  input Dbg_Disable;
  input Dbg_Clk;
  input Dbg_TDI;
  output Dbg_TDO;
  input [0:7]Dbg_Reg_En;
  input Dbg_Shift;
  input Dbg_Capture;
  input Dbg_Update;
  input Debug_Rst;
  output [0:7]Dbg_Trig_In;
  input [0:7]Dbg_Trig_Ack_In;
  input [0:7]Dbg_Trig_Out;
  output [0:7]Dbg_Trig_Ack_Out;
  input Dbg_Trace_Clk;
  output [0:35]Dbg_Trace_Data;
  input Dbg_Trace_Ready;
  output Dbg_Trace_Valid;
  input [14:2]Dbg_AWADDR;
  input Dbg_AWVALID;
  output Dbg_AWREADY;
  input [31:0]Dbg_WDATA;
  input Dbg_WVALID;
  output Dbg_WREADY;
  output [1:0]Dbg_BRESP;
  output Dbg_BVALID;
  input Dbg_BREADY;
  input [14:2]Dbg_ARADDR;
  input Dbg_ARVALID;
  output Dbg_ARREADY;
  output [31:0]Dbg_RDATA;
  output [1:0]Dbg_RRESP;
  output Dbg_RVALID;
  input Dbg_RREADY;
  input DEBUG_ACLK;
  input DEBUG_ARESETN;
  (* mark_debug = "false" *) output [0:31]Trace_Instruction;
  (* mark_debug = "false" *) output Trace_Valid_Instr;
  (* mark_debug = "false" *) output [0:31]Trace_PC;
  (* mark_debug = "false" *) output Trace_Reg_Write;
  (* mark_debug = "false" *) output [0:4]Trace_Reg_Addr;
  (* mark_debug = "false" *) output [0:14]Trace_MSR_Reg;
  (* mark_debug = "false" *) output [0:7]Trace_PID_Reg;
  (* mark_debug = "false" *) output [0:31]Trace_New_Reg_Value;
  (* mark_debug = "false" *) output Trace_Exception_Taken;
  (* mark_debug = "false" *) output [0:4]Trace_Exception_Kind;
  (* mark_debug = "false" *) output Trace_Jump_Taken;
  (* mark_debug = "false" *) output Trace_Delay_Slot;
  (* mark_debug = "false" *) output [0:31]Trace_Data_Address;
  (* mark_debug = "false" *) output [0:31]Trace_Data_Write_Value;
  (* mark_debug = "false" *) output [0:3]Trace_Data_Byte_Enable;
  (* mark_debug = "false" *) output Trace_Data_Access;
  (* mark_debug = "false" *) output Trace_Data_Read;
  (* mark_debug = "false" *) output Trace_Data_Write;
  (* mark_debug = "false" *) output Trace_DCache_Req;
  (* mark_debug = "false" *) output Trace_DCache_Hit;
  (* mark_debug = "false" *) output Trace_DCache_Rdy;
  (* mark_debug = "false" *) output Trace_DCache_Read;
  (* mark_debug = "false" *) output Trace_ICache_Req;
  (* mark_debug = "false" *) output Trace_ICache_Hit;
  (* mark_debug = "false" *) output Trace_ICache_Rdy;
  (* mark_debug = "false" *) output Trace_OF_PipeRun;
  (* mark_debug = "false" *) output Trace_EX_PipeRun;
  (* mark_debug = "false" *) output Trace_MEM_PipeRun;
  (* mark_debug = "false" *) output Trace_MB_Halted;
  (* mark_debug = "false" *) output Trace_Jump_Hit;
  output M0_AXIS_TLAST;
  output [31:0]M0_AXIS_TDATA;
  output M0_AXIS_TVALID;
  input M0_AXIS_TREADY;
  output M1_AXIS_TLAST;
  output [31:0]M1_AXIS_TDATA;
  output M1_AXIS_TVALID;
  input M1_AXIS_TREADY;
  output M2_AXIS_TLAST;
  output [31:0]M2_AXIS_TDATA;
  output M2_AXIS_TVALID;
  input M2_AXIS_TREADY;
  output M3_AXIS_TLAST;
  output [31:0]M3_AXIS_TDATA;
  output M3_AXIS_TVALID;
  input M3_AXIS_TREADY;
  output M4_AXIS_TLAST;
  output [31:0]M4_AXIS_TDATA;
  output M4_AXIS_TVALID;
  input M4_AXIS_TREADY;
  output M5_AXIS_TLAST;
  output [31:0]M5_AXIS_TDATA;
  output M5_AXIS_TVALID;
  input M5_AXIS_TREADY;
  output M6_AXIS_TLAST;
  output [31:0]M6_AXIS_TDATA;
  output M6_AXIS_TVALID;
  input M6_AXIS_TREADY;
  output M7_AXIS_TLAST;
  output [31:0]M7_AXIS_TDATA;
  output M7_AXIS_TVALID;
  input M7_AXIS_TREADY;
  output M8_AXIS_TLAST;
  output [31:0]M8_AXIS_TDATA;
  output M8_AXIS_TVALID;
  input M8_AXIS_TREADY;
  output M9_AXIS_TLAST;
  output [31:0]M9_AXIS_TDATA;
  output M9_AXIS_TVALID;
  input M9_AXIS_TREADY;
  output M10_AXIS_TLAST;
  output [31:0]M10_AXIS_TDATA;
  output M10_AXIS_TVALID;
  input M10_AXIS_TREADY;
  output M11_AXIS_TLAST;
  output [31:0]M11_AXIS_TDATA;
  output M11_AXIS_TVALID;
  input M11_AXIS_TREADY;
  output M12_AXIS_TLAST;
  output [31:0]M12_AXIS_TDATA;
  output M12_AXIS_TVALID;
  input M12_AXIS_TREADY;
  output M13_AXIS_TLAST;
  output [31:0]M13_AXIS_TDATA;
  output M13_AXIS_TVALID;
  input M13_AXIS_TREADY;
  output M14_AXIS_TLAST;
  output [31:0]M14_AXIS_TDATA;
  output M14_AXIS_TVALID;
  input M14_AXIS_TREADY;
  output M15_AXIS_TLAST;
  output [31:0]M15_AXIS_TDATA;
  output M15_AXIS_TVALID;
  input M15_AXIS_TREADY;
  input S0_AXIS_TLAST;
  input [31:0]S0_AXIS_TDATA;
  input S0_AXIS_TVALID;
  output S0_AXIS_TREADY;
  input S1_AXIS_TLAST;
  input [31:0]S1_AXIS_TDATA;
  input S1_AXIS_TVALID;
  output S1_AXIS_TREADY;
  input S2_AXIS_TLAST;
  input [31:0]S2_AXIS_TDATA;
  input S2_AXIS_TVALID;
  output S2_AXIS_TREADY;
  input S3_AXIS_TLAST;
  input [31:0]S3_AXIS_TDATA;
  input S3_AXIS_TVALID;
  output S3_AXIS_TREADY;
  input S4_AXIS_TLAST;
  input [31:0]S4_AXIS_TDATA;
  input S4_AXIS_TVALID;
  output S4_AXIS_TREADY;
  input S5_AXIS_TLAST;
  input [31:0]S5_AXIS_TDATA;
  input S5_AXIS_TVALID;
  output S5_AXIS_TREADY;
  input S6_AXIS_TLAST;
  input [31:0]S6_AXIS_TDATA;
  input S6_AXIS_TVALID;
  output S6_AXIS_TREADY;
  input S7_AXIS_TLAST;
  input [31:0]S7_AXIS_TDATA;
  input S7_AXIS_TVALID;
  output S7_AXIS_TREADY;
  input S8_AXIS_TLAST;
  input [31:0]S8_AXIS_TDATA;
  input S8_AXIS_TVALID;
  output S8_AXIS_TREADY;
  input S9_AXIS_TLAST;
  input [31:0]S9_AXIS_TDATA;
  input S9_AXIS_TVALID;
  output S9_AXIS_TREADY;
  input S10_AXIS_TLAST;
  input [31:0]S10_AXIS_TDATA;
  input S10_AXIS_TVALID;
  output S10_AXIS_TREADY;
  input S11_AXIS_TLAST;
  input [31:0]S11_AXIS_TDATA;
  input S11_AXIS_TVALID;
  output S11_AXIS_TREADY;
  input S12_AXIS_TLAST;
  input [31:0]S12_AXIS_TDATA;
  input S12_AXIS_TVALID;
  output S12_AXIS_TREADY;
  input S13_AXIS_TLAST;
  input [31:0]S13_AXIS_TDATA;
  input S13_AXIS_TVALID;
  output S13_AXIS_TREADY;
  input S14_AXIS_TLAST;
  input [31:0]S14_AXIS_TDATA;
  input S14_AXIS_TVALID;
  output S14_AXIS_TREADY;
  input S15_AXIS_TLAST;
  input [31:0]S15_AXIS_TDATA;
  input S15_AXIS_TVALID;
  output S15_AXIS_TREADY;
  output [0:0]M_AXI_IC_AWID;
  output [31:0]M_AXI_IC_AWADDR;
  output [7:0]M_AXI_IC_AWLEN;
  output [2:0]M_AXI_IC_AWSIZE;
  output [1:0]M_AXI_IC_AWBURST;
  output M_AXI_IC_AWLOCK;
  output [3:0]M_AXI_IC_AWCACHE;
  output [2:0]M_AXI_IC_AWPROT;
  output [3:0]M_AXI_IC_AWQOS;
  output M_AXI_IC_AWVALID;
  input M_AXI_IC_AWREADY;
  output [4:0]M_AXI_IC_AWUSER;
  output [1:0]M_AXI_IC_AWDOMAIN;
  output [2:0]M_AXI_IC_AWSNOOP;
  output [1:0]M_AXI_IC_AWBAR;
  output [31:0]M_AXI_IC_WDATA;
  output [3:0]M_AXI_IC_WSTRB;
  output M_AXI_IC_WLAST;
  output M_AXI_IC_WVALID;
  input M_AXI_IC_WREADY;
  output [0:0]M_AXI_IC_WUSER;
  input [0:0]M_AXI_IC_BID;
  input [1:0]M_AXI_IC_BRESP;
  input M_AXI_IC_BVALID;
  output M_AXI_IC_BREADY;
  input [0:0]M_AXI_IC_BUSER;
  output M_AXI_IC_WACK;
  output [0:0]M_AXI_IC_ARID;
  output [31:0]M_AXI_IC_ARADDR;
  output [7:0]M_AXI_IC_ARLEN;
  output [2:0]M_AXI_IC_ARSIZE;
  output [1:0]M_AXI_IC_ARBURST;
  output M_AXI_IC_ARLOCK;
  output [3:0]M_AXI_IC_ARCACHE;
  output [2:0]M_AXI_IC_ARPROT;
  output [3:0]M_AXI_IC_ARQOS;
  output M_AXI_IC_ARVALID;
  input M_AXI_IC_ARREADY;
  output [4:0]M_AXI_IC_ARUSER;
  output [1:0]M_AXI_IC_ARDOMAIN;
  output [3:0]M_AXI_IC_ARSNOOP;
  output [1:0]M_AXI_IC_ARBAR;
  input [0:0]M_AXI_IC_RID;
  input [31:0]M_AXI_IC_RDATA;
  input [1:0]M_AXI_IC_RRESP;
  input M_AXI_IC_RLAST;
  input M_AXI_IC_RVALID;
  output M_AXI_IC_RREADY;
  input [0:0]M_AXI_IC_RUSER;
  output M_AXI_IC_RACK;
  input M_AXI_IC_ACVALID;
  input [31:0]M_AXI_IC_ACADDR;
  input [3:0]M_AXI_IC_ACSNOOP;
  input [2:0]M_AXI_IC_ACPROT;
  output M_AXI_IC_ACREADY;
  output M_AXI_IC_CRVALID;
  output [4:0]M_AXI_IC_CRRESP;
  input M_AXI_IC_CRREADY;
  output M_AXI_IC_CDVALID;
  output [31:0]M_AXI_IC_CDDATA;
  output M_AXI_IC_CDLAST;
  input M_AXI_IC_CDREADY;
  output [0:0]M_AXI_DC_AWID;
  output [31:0]M_AXI_DC_AWADDR;
  output [7:0]M_AXI_DC_AWLEN;
  output [2:0]M_AXI_DC_AWSIZE;
  output [1:0]M_AXI_DC_AWBURST;
  output M_AXI_DC_AWLOCK;
  output [3:0]M_AXI_DC_AWCACHE;
  output [2:0]M_AXI_DC_AWPROT;
  output [3:0]M_AXI_DC_AWQOS;
  output M_AXI_DC_AWVALID;
  input M_AXI_DC_AWREADY;
  output [4:0]M_AXI_DC_AWUSER;
  output [1:0]M_AXI_DC_AWDOMAIN;
  output [2:0]M_AXI_DC_AWSNOOP;
  output [1:0]M_AXI_DC_AWBAR;
  output [31:0]M_AXI_DC_WDATA;
  output [3:0]M_AXI_DC_WSTRB;
  output M_AXI_DC_WLAST;
  output M_AXI_DC_WVALID;
  input M_AXI_DC_WREADY;
  output [0:0]M_AXI_DC_WUSER;
  input [1:0]M_AXI_DC_BRESP;
  input [0:0]M_AXI_DC_BID;
  input M_AXI_DC_BVALID;
  output M_AXI_DC_BREADY;
  input [0:0]M_AXI_DC_BUSER;
  output M_AXI_DC_WACK;
  output [0:0]M_AXI_DC_ARID;
  output [31:0]M_AXI_DC_ARADDR;
  output [7:0]M_AXI_DC_ARLEN;
  output [2:0]M_AXI_DC_ARSIZE;
  output [1:0]M_AXI_DC_ARBURST;
  output M_AXI_DC_ARLOCK;
  output [3:0]M_AXI_DC_ARCACHE;
  output [2:0]M_AXI_DC_ARPROT;
  output [3:0]M_AXI_DC_ARQOS;
  output M_AXI_DC_ARVALID;
  input M_AXI_DC_ARREADY;
  output [4:0]M_AXI_DC_ARUSER;
  output [1:0]M_AXI_DC_ARDOMAIN;
  output [3:0]M_AXI_DC_ARSNOOP;
  output [1:0]M_AXI_DC_ARBAR;
  input [0:0]M_AXI_DC_RID;
  input [31:0]M_AXI_DC_RDATA;
  input [1:0]M_AXI_DC_RRESP;
  input M_AXI_DC_RLAST;
  input M_AXI_DC_RVALID;
  output M_AXI_DC_RREADY;
  input [0:0]M_AXI_DC_RUSER;
  output M_AXI_DC_RACK;
  input M_AXI_DC_ACVALID;
  input [31:0]M_AXI_DC_ACADDR;
  input [3:0]M_AXI_DC_ACSNOOP;
  input [2:0]M_AXI_DC_ACPROT;
  output M_AXI_DC_ACREADY;
  output M_AXI_DC_CRVALID;
  output [4:0]M_AXI_DC_CRRESP;
  input M_AXI_DC_CRREADY;
  output M_AXI_DC_CDVALID;
  output [31:0]M_AXI_DC_CDDATA;
  output M_AXI_DC_CDLAST;
  input M_AXI_DC_CDREADY;

  wire \Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Status_Reg_En ;
  wire [0:3]Byte_Enable;
  wire Clk;
  wire Config_Reg_En;
  wire DReady;
  wire DWait;
  wire D_AS;
  wire [0:31]Data_Addr;
  wire [0:31]Data_Read;
  wire Data_Read_Reg_En;
  wire [0:31]Data_Write;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_TDO_INST_0_i_11_n_0;
  wire Dbg_TDO_INST_0_i_26_n_0;
  wire [0:7]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Debug_Rst;
  wire IReady;
  wire I_AS;
  wire [0:31]Instr;
  wire [0:31]Instr_Addr;
  wire [1:46]\^LOCKSTEP_Master_Out ;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID;
  wire [31:0]\^M_AXI_DP_AWADDR ;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire [31:0]M_AXI_DP_WDATA;
  wire M_AXI_DP_WREADY;
  wire M_AXI_DP_WVALID;
  wire MicroBlaze_Core_I_n_372;
  wire Read_Strobe;
  wire Reset;
  wire [0:1]Wakeup;
  wire Write_Strobe;
  wire NLW_MicroBlaze_Core_I_Dbg_Stop_UNCONNECTED;
  wire NLW_MicroBlaze_Core_I_Hibernate_UNCONNECTED;
  wire NLW_MicroBlaze_Core_I_Interrupt_UNCONNECTED;
  wire NLW_MicroBlaze_Core_I_Mb_Reset_UNCONNECTED;
  wire NLW_MicroBlaze_Core_I_Pause_UNCONNECTED;
  wire NLW_MicroBlaze_Core_I_Pause_Ack_UNCONNECTED;
  wire NLW_MicroBlaze_Core_I_Scan_En_UNCONNECTED;
  wire NLW_MicroBlaze_Core_I_Scan_Reset_UNCONNECTED;
  wire NLW_MicroBlaze_Core_I_Scan_Reset_Sel_UNCONNECTED;
  wire NLW_MicroBlaze_Core_I_Sleep_UNCONNECTED;
  wire NLW_MicroBlaze_Core_I_Suspend_UNCONNECTED;
  wire \NLW_MicroBlaze_Core_I_Using_FPGA.Native_UNCONNECTED ;
  wire \NLW_MicroBlaze_Core_I_Using_FPGA.Native_0_UNCONNECTED ;
  wire [323:0]NLW_MicroBlaze_Core_I_D_UNCONNECTED;
  wire [1:0]NLW_MicroBlaze_Core_I_Dbg_Trig_Ack_In_UNCONNECTED;
  wire [1:0]NLW_MicroBlaze_Core_I_Dbg_Trig_Ack_Out_UNCONNECTED;
  wire [1:0]NLW_MicroBlaze_Core_I_Dbg_Trig_In_UNCONNECTED;
  wire [1:1]NLW_MicroBlaze_Core_I_Dbg_Trig_Out_UNCONNECTED;
  wire [0:1]NLW_MicroBlaze_Core_I_Interrupt_Ack_UNCONNECTED;
  wire [0:31]NLW_MicroBlaze_Core_I_Interrupt_Address_UNCONNECTED;
  wire [37:0]NLW_MicroBlaze_Core_I_LOCKSTEP_Master_Out_UNCONNECTED;
  wire [31:8]NLW_MicroBlaze_Core_I_M_AXI_DP_RDATA_UNCONNECTED;
  wire [0:1]NLW_MicroBlaze_Core_I_Reset_Mode_UNCONNECTED;

  assign Dbg_Wakeup = \^LOCKSTEP_Master_Out [11];
  assign M_AXI_DP_ARADDR[3:2] = \^M_AXI_DP_AWADDR [3:2];
  LUT5 #(
    .INIT(32'h00000040)) 
    Dbg_TDO_INST_0_i_1
       (.I0(MicroBlaze_Core_I_n_372),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[4]),
        .I4(Dbg_Reg_En[5]),
        .O(\Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Status_Reg_En ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    Dbg_TDO_INST_0_i_11
       (.I0(Dbg_Reg_En[7]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[0]),
        .I3(Dbg_Reg_En[2]),
        .O(Dbg_TDO_INST_0_i_11_n_0));
  LUT5 #(
    .INIT(32'h00004000)) 
    Dbg_TDO_INST_0_i_14
       (.I0(Dbg_Reg_En[1]),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[5]),
        .I3(Dbg_Reg_En[7]),
        .I4(Dbg_TDO_INST_0_i_26_n_0),
        .O(Config_Reg_En));
  LUT4 #(
    .INIT(16'hFFFE)) 
    Dbg_TDO_INST_0_i_26
       (.I0(Dbg_Reg_En[3]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[0]),
        .I3(Dbg_Reg_En[2]),
        .O(Dbg_TDO_INST_0_i_26_n_0));
  LUT5 #(
    .INIT(32'h00001000)) 
    Dbg_TDO_INST_0_i_4
       (.I0(Dbg_Reg_En[1]),
        .I1(Dbg_Reg_En[3]),
        .I2(Dbg_Reg_En[5]),
        .I3(Dbg_Reg_En[6]),
        .I4(Dbg_TDO_INST_0_i_11_n_0),
        .O(Data_Read_Reg_En));
  cpu_MicroBlaze_Core MicroBlaze_Core_I
       (.Clk(Clk),
        .Config_Reg_En(Config_Reg_En),
        .D({NLW_MicroBlaze_Core_I_D_UNCONNECTED[323:322],I_AS,Instr_Addr[15],Instr_Addr[16],Instr_Addr[17],Instr_Addr[18],Instr_Addr[19],Instr_Addr[20],Instr_Addr[21],Instr_Addr[22],Instr_Addr[23],Instr_Addr[24],Instr_Addr[25],Instr_Addr[26],Instr_Addr[27],Instr_Addr[28],Instr_Addr[29],Data_Addr[0],Data_Addr[1],Data_Addr[2],Data_Addr[3],Data_Addr[4],Data_Addr[5],Data_Addr[6],Data_Addr[7],Data_Addr[8],NLW_MicroBlaze_Core_I_D_UNCONNECTED[296:291],Data_Addr[15],Data_Addr[16],Data_Addr[17],Data_Addr[18],Data_Addr[19],Data_Addr[20],Data_Addr[21],Data_Addr[22],Data_Addr[23],Data_Addr[24],Data_Addr[25],Data_Addr[26],Data_Addr[27],Data_Addr[28],Data_Addr[29],NLW_MicroBlaze_Core_I_D_UNCONNECTED[275:274],Data_Write[0],Data_Write[1],Data_Write[2],Data_Write[3],Data_Write[4],Data_Write[5],Data_Write[6],Data_Write[7],Data_Write[8],Data_Write[9],Data_Write[10],Data_Write[11],Data_Write[12],Data_Write[13],Data_Write[14],Data_Write[15],Data_Write[16],Data_Write[17],Data_Write[18],Data_Write[19],Data_Write[20],Data_Write[21],Data_Write[22],Data_Write[23],Data_Write[24],Data_Write[25],Data_Write[26],Data_Write[27],Data_Write[28],Data_Write[29],Data_Write[30],Data_Write[31],D_AS,Read_Strobe,Write_Strobe,Byte_Enable[0],Byte_Enable[1],Byte_Enable[2],Byte_Enable[3],NLW_MicroBlaze_Core_I_D_UNCONNECTED[234:207],\^M_AXI_DP_AWADDR [3:2],NLW_MicroBlaze_Core_I_D_UNCONNECTED[204:203],M_AXI_DP_AWVALID,NLW_MicroBlaze_Core_I_D_UNCONNECTED[201:178],M_AXI_DP_WDATA[7:0],NLW_MicroBlaze_Core_I_D_UNCONNECTED[169:166],M_AXI_DP_WVALID,M_AXI_DP_ARVALID,NLW_MicroBlaze_Core_I_D_UNCONNECTED[163:0]}),
        .DReady(DReady),
        .DWait(DWait),
        .Data_Read(Data_Read),
        .Data_Read_Reg_En(Data_Read_Reg_En),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(NLW_MicroBlaze_Core_I_Dbg_Stop_UNCONNECTED),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trig_Ack_In(NLW_MicroBlaze_Core_I_Dbg_Trig_Ack_In_UNCONNECTED[1:0]),
        .Dbg_Trig_Ack_Out(NLW_MicroBlaze_Core_I_Dbg_Trig_Ack_Out_UNCONNECTED[1:0]),
        .Dbg_Trig_In(NLW_MicroBlaze_Core_I_Dbg_Trig_In_UNCONNECTED[1:0]),
        .Dbg_Trig_Out({NLW_MicroBlaze_Core_I_Dbg_Trig_Out_UNCONNECTED[1],Dbg_Trig_Out[1]}),
        .Dbg_Update(Dbg_Update),
        .Debug_Rst(Debug_Rst),
        .Hibernate(NLW_MicroBlaze_Core_I_Hibernate_UNCONNECTED),
        .IReady(IReady),
        .Instr(Instr),
        .Interrupt(NLW_MicroBlaze_Core_I_Interrupt_UNCONNECTED),
        .Interrupt_Ack(NLW_MicroBlaze_Core_I_Interrupt_Ack_UNCONNECTED[0:1]),
        .Interrupt_Address(NLW_MicroBlaze_Core_I_Interrupt_Address_UNCONNECTED[0:31]),
        .LOCKSTEP_Master_Out({NLW_MicroBlaze_Core_I_LOCKSTEP_Master_Out_UNCONNECTED[37:34],\^LOCKSTEP_Master_Out [11],NLW_MicroBlaze_Core_I_LOCKSTEP_Master_Out_UNCONNECTED[32:0]}),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA({NLW_MicroBlaze_Core_I_M_AXI_DP_RDATA_UNCONNECTED[31:8],M_AXI_DP_RDATA[7:0]}),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .Mb_Reset(NLW_MicroBlaze_Core_I_Mb_Reset_UNCONNECTED),
        .Pause(NLW_MicroBlaze_Core_I_Pause_UNCONNECTED),
        .Pause_Ack(NLW_MicroBlaze_Core_I_Pause_Ack_UNCONNECTED),
        .Reset(Reset),
        .Reset_Mode(NLW_MicroBlaze_Core_I_Reset_Mode_UNCONNECTED[0:1]),
        .Scan_En(NLW_MicroBlaze_Core_I_Scan_En_UNCONNECTED),
        .Scan_Reset(NLW_MicroBlaze_Core_I_Scan_Reset_UNCONNECTED),
        .Scan_Reset_Sel(NLW_MicroBlaze_Core_I_Scan_Reset_Sel_UNCONNECTED),
        .Sleep(NLW_MicroBlaze_Core_I_Sleep_UNCONNECTED),
        .Status_Reg_En(\Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Status_Reg_En ),
        .Suspend(NLW_MicroBlaze_Core_I_Suspend_UNCONNECTED),
        .\Use_Serial_Unified_Completion.completion_block_reg (MicroBlaze_Core_I_n_372),
        .\Using_FPGA.Native (\NLW_MicroBlaze_Core_I_Using_FPGA.Native_UNCONNECTED ),
        .\Using_FPGA.Native_0 (\NLW_MicroBlaze_Core_I_Using_FPGA.Native_0_UNCONNECTED ),
        .Wakeup(Wakeup));
endmodule

(* ORIG_REF_NAME = "MicroBlaze_Area" *) 
module cpu_MicroBlaze_Area
   (D,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Pause_Ack,
    Sleep,
    LOCKSTEP_Master_Out,
    Hibernate,
    Suspend,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    \Use_Serial_Unified_Completion.completion_block_reg ,
    Dbg_TDO,
    Interrupt_Ack,
    Clk,
    sync_reset,
    Dbg_Clk,
    Pause,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Update,
    Dbg_Stop,
    Dbg_Capture,
    Data_Read_Reg_En,
    Config_Reg_En,
    Dbg_Reg_En,
    Dbg_Shift,
    Status_Reg_En,
    IReady,
    wakeup_i,
    Reset_Mode,
    Scan_En,
    Scan_Reset_Sel,
    Scan_Reset,
    Instr,
    Dbg_TDI,
    M_AXI_DP_RVALID,
    M_AXI_DP_RDATA,
    DReady,
    M_AXI_DP_BVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_AWREADY,
    M_AXI_DP_ARREADY,
    Interrupt,
    DWait,
    Interrupt_Address,
    Data_Read);
  output [323:0]D;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output Pause_Ack;
  output Sleep;
  output [37:0]LOCKSTEP_Master_Out;
  output Hibernate;
  output Suspend;
  output [1:0]Dbg_Trig_In;
  output [1:0]Dbg_Trig_Ack_Out;
  output \Use_Serial_Unified_Completion.completion_block_reg ;
  output Dbg_TDO;
  output [0:1]Interrupt_Ack;
  input Clk;
  input sync_reset;
  input Dbg_Clk;
  input Pause;
  input [1:0]Dbg_Trig_Ack_In;
  input [1:0]Dbg_Trig_Out;
  input Dbg_Update;
  input Dbg_Stop;
  input Dbg_Capture;
  input Data_Read_Reg_En;
  input Config_Reg_En;
  input [0:7]Dbg_Reg_En;
  input Dbg_Shift;
  input Status_Reg_En;
  input IReady;
  input [0:1]wakeup_i;
  input [0:1]Reset_Mode;
  input Scan_En;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input [0:31]Instr;
  input Dbg_TDI;
  input M_AXI_DP_RVALID;
  input [31:0]M_AXI_DP_RDATA;
  input DReady;
  input M_AXI_DP_BVALID;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_ARREADY;
  input Interrupt;
  input DWait;
  input [0:31]Interrupt_Address;
  input [0:31]Data_Read;

  wire Clk;
  wire Config_Reg_En;
  wire [323:0]\^D ;
  wire DReady;
  wire DReady0_out;
  wire DWait;
  wire Data_Flow_I_n_165;
  wire Data_Flow_I_n_166;
  wire Data_Flow_I_n_167;
  wire Data_Flow_I_n_168;
  wire Data_Flow_I_n_169;
  wire Data_Flow_I_n_170;
  wire Data_Flow_I_n_171;
  wire Data_Flow_I_n_172;
  wire Data_Flow_I_n_173;
  wire Data_Flow_I_n_174;
  wire Data_Flow_I_n_175;
  wire Data_Flow_I_n_176;
  wire Data_Flow_I_n_177;
  wire Data_Flow_I_n_178;
  wire Data_Flow_I_n_179;
  wire Data_Flow_I_n_22;
  wire Data_Flow_I_n_23;
  wire Data_Flow_I_n_24;
  wire Data_Flow_I_n_29;
  wire Data_Flow_I_n_3;
  wire Data_Flow_I_n_30;
  wire Data_Flow_I_n_31;
  wire Data_Flow_I_n_32;
  wire Data_Flow_I_n_33;
  wire Data_Flow_I_n_34;
  wire Data_Flow_I_n_35;
  wire Data_Flow_I_n_36;
  wire Data_Flow_I_n_37;
  wire Data_Flow_I_n_38;
  wire Data_Flow_I_n_39;
  wire Data_Flow_I_n_4;
  wire Data_Flow_I_n_40;
  wire Data_Flow_I_n_41;
  wire Data_Flow_I_n_42;
  wire Data_Flow_I_n_43;
  wire Data_Flow_I_n_44;
  wire Data_Flow_I_n_45;
  wire Data_Flow_I_n_46;
  wire Data_Flow_I_n_47;
  wire Data_Flow_I_n_48;
  wire Data_Flow_I_n_49;
  wire Data_Flow_I_n_50;
  wire Data_Flow_I_n_51;
  wire Data_Flow_I_n_52;
  wire Data_Flow_I_n_53;
  wire Data_Flow_I_n_54;
  wire Data_Flow_I_n_55;
  wire Data_Flow_I_n_56;
  wire Data_Flow_I_n_57;
  wire Data_Flow_I_n_58;
  wire Data_Flow_I_n_59;
  wire Data_Flow_I_n_6;
  wire Data_Flow_I_n_60;
  wire Data_Flow_I_n_61;
  wire Data_Flow_I_n_62;
  wire [0:31]Data_Read;
  wire [0:15]Data_Read0_out;
  wire Data_Read_Reg_En;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Decode_I_n_106;
  wire Decode_I_n_115;
  wire Decode_I_n_116;
  wire Decode_I_n_117;
  wire Decode_I_n_151;
  wire Decode_I_n_154;
  wire Decode_I_n_25;
  wire Decode_I_n_57;
  wire Decode_I_n_58;
  wire Decode_I_n_61;
  wire Decode_I_n_62;
  wire Decode_I_n_72;
  wire Decode_I_n_73;
  wire Decode_I_n_74;
  wire Decode_I_n_75;
  wire IReady;
  wire IReady1_out;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_44 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_56 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_57 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_59 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_60 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_61 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_62 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_63 ;
  wire [0:31]Instr;
  wire [37:0]\^LOCKSTEP_Master_Out ;
  wire MEM_DAXI_Data_Strobe;
  wire \MSR_Reg_I/MSR_Rst ;
  wire \MSR_Reg_I/New_Value ;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire M_AXI_DP_WREADY;
  wire O;
  wire [0:2]Op1_Low;
  wire \Operand_Select_I/Imm_Reg ;
  wire \Operand_Select_I/OpSelect_Bits[0].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[10].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[11].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[12].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[13].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[14].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[15].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[16].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[17].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[18].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[19].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[1].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[20].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[21].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[22].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[23].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[24].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[25].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[26].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[27].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[28].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[29].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[2].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[30].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[31].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[3].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[4].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[5].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[6].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[7].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[8].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[9].Operand_Select_Bit_I/D ;
  wire [15:29]PC_EX_i;
  wire [15:29]PC_OF;
  wire \PreFetch_Buffer_I/R ;
  wire [0:16]\Result_Mux_I/data_Read_Mask ;
  wire \Shift_Logic_Module_I/Shifted ;
  wire Sleep_Decode;
  wire Status_Reg_En;
  wire Unsigned_Op;
  wire \Use_Serial_Unified_Completion.completion_block_reg ;
  wire \Using_Ext_Databus.DAXI_Interface_I1_n_72 ;
  wire \^Using_FPGA.Native ;
  wire \^Using_FPGA.Native_0 ;
  wire Valid_Instr_i;
  wire [8:31]WB_DAXI_Read_Data;
  wire [0:1]alu_Op;
  wire branch_with_delay;
  wire [1:3]buffer_Addr;
  wire carry_In;
  wire compare_Instr;
  wire dbg_brki_hit;
  wire dbg_clean_stop;
  wire ex_Valid;
  wire [30:30]exception_kind;
  wire [16:31]extend_Data_Read;
  wire force_stop_cmd_hold;
  wire force_stop_cmd_i;
  wire has_inhibit_EX;
  wire imm_Instr;
  wire [0:15]imm_Value;
  wire isbyte;
  wire isdoublet;
  wire jump;
  wire load_Store_i;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire mem_Strobe;
  wire mem_access;
  wire [28:30]msr_I;
  wire [0:31]mux_Instr_Read;
  wire of_PipeRun;
  wire ok_To_Stop;
  wire opsel1_SPR;
  wire p_2_out;
  wire pc_Incr;
  wire pc_Write;
  wire [0:23]raw_Data_Write;
  wire [0:4]reg1_Addr;
  wire reg_Test_Equal;
  wire reg_Test_Equal_N;
  wire reg_Write_dbg;
  wire reg_write_I;
  wire register_write;
  wire res_Forward1;
  wire res_Forward2;
  wire [0:1]result_Sel;
  wire select_Logic;
  wire sext16;
  wire sext8;
  wire sign_Extend;
  wire sync_reset;
  wire use_Imm_Reg;
  wire valid_Fetch;
  wire [0:1]wakeup_i;
  wire [0:4]write_Addr;
  wire [29:28]NLW_Byte_Doublet_Handle_I_D_UNCONNECTED;
  wire [15:8]NLW_Byte_Doublet_Handle_I_Q_UNCONNECTED;
  wire NLW_Data_Flow_I_LO_UNCONNECTED;
  wire NLW_Data_Flow_I_Reg_zero_UNCONNECTED;
  wire \NLW_Data_Flow_I_Using_FPGA.Native_4_UNCONNECTED ;
  wire \NLW_Data_Flow_I_Using_dynamic_instr_Address.old_IE_value_reg_UNCONNECTED ;
  wire [0:31]NLW_Data_Flow_I_Interrupt_Address_UNCONNECTED;
  wire [1:0]NLW_Data_Flow_I_PC_EX_i_UNCONNECTED;
  wire [60:2]\NLW_Data_Flow_I_Using_FPGA.Native_5_UNCONNECTED ;
  wire NLW_Decode_I_Hibernate_UNCONNECTED;
  wire NLW_Decode_I_Interrupt_UNCONNECTED;
  wire NLW_Decode_I_LO_UNCONNECTED;
  wire NLW_Decode_I_Pause_Ack_UNCONNECTED;
  wire NLW_Decode_I_Reg_zero_UNCONNECTED;
  wire NLW_Decode_I_Suspend_UNCONNECTED;
  wire \NLW_Decode_I_Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0_UNCONNECTED ;
  wire \NLW_Decode_I_Using_dynamic_instr_Address.old_IE_value_reg_0_UNCONNECTED ;
  wire NLW_Decode_I_dbg_pause_UNCONNECTED;
  wire \NLW_Decode_I_instr_EX_i_reg[25]_0_UNCONNECTED ;
  wire \NLW_Decode_I_instr_EX_i_reg[26]_0_UNCONNECTED ;
  wire NLW_Decode_I_reg_Write_I_UNCONNECTED;
  wire NLW_Decode_I_trace_reg_write_novalid_UNCONNECTED;
  wire [0:0]NLW_Decode_I_D_UNCONNECTED;
  wire [0:1]NLW_Decode_I_Interrupt_Ack_UNCONNECTED;
  wire [2:2]NLW_Decode_I_Op1_Low_UNCONNECTED;
  wire [27:0]NLW_Decode_I_Q_UNCONNECTED;
  wire \NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Dbg_Stop_UNCONNECTED ;
  wire \NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Pause_UNCONNECTED ;
  wire \NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Scan_En_UNCONNECTED ;
  wire \NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Scan_Reset_UNCONNECTED ;
  wire \NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Scan_Reset_Sel_UNCONNECTED ;
  wire \NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Sleep_UNCONNECTED ;
  wire \NLW_Implement_Debug_Logic.Master_Core.Debug_Area_dbg_pause_UNCONNECTED ;
  wire [0:0]\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_D_UNCONNECTED ;
  wire [1:0]\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Dbg_Trig_Ack_In_UNCONNECTED ;
  wire [1:0]\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Dbg_Trig_Ack_Out_UNCONNECTED ;
  wire [1:0]\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Dbg_Trig_In_UNCONNECTED ;
  wire [1:1]\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Dbg_Trig_Out_UNCONNECTED ;
  wire [37:32]\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_LOCKSTEP_Master_Out_UNCONNECTED ;
  wire [0:1]\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Reset_Mode_UNCONNECTED ;
  wire [0:0]\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_delay_slot_instr_reg_0_UNCONNECTED ;
  wire [67:0]\NLW_Using_Ext_Databus.DAXI_Interface_I1_Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0_UNCONNECTED ;
  wire [70:2]\NLW_Using_Ext_Databus.DAXI_Interface_I1_D_UNCONNECTED ;
  wire [31:8]\NLW_Using_Ext_Databus.DAXI_Interface_I1_M_AXI_DP_RDATA_UNCONNECTED ;
  wire [15:8]\NLW_Using_Ext_Databus.DAXI_Interface_I1_Q_UNCONNECTED ;

  assign D[321:297] = \^D [321:297];
  assign D[290:276] = \^D [290:276];
  assign D[273:235] = \^D [273:235];
  assign D[206:205] = \^D [206:205];
  assign D[202] = \^D [202];
  assign D[177:170] = \^D [177:170];
  assign D[165:164] = \^D [165:164];
  assign LOCKSTEP_Master_Out[33] = \^LOCKSTEP_Master_Out [33];
  cpu_Byte_Doublet_Handle Byte_Doublet_Handle_I
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] (Data_Flow_I_n_4),
        .\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ({raw_Data_Write,\^D [249],\^D [248],\^D [247],\^D [246],\^D [245],\^D [244],\^D [243],\^D [242]}),
        .D({NLW_Byte_Doublet_Handle_I_D_UNCONNECTED[29:28],\^D [273:250],\^D [238:235]}),
        .DReady(DReady),
        .Data_Read({Data_Read[8],Data_Read[9],Data_Read[10],Data_Read[11],Data_Read[12],Data_Read[13],Data_Read[14],Data_Read[15],Data_Read[24],Data_Read[25],Data_Read[26],Data_Read[27],Data_Read[28],Data_Read[29],Data_Read[30],Data_Read[31]}),
        .EX_Op2(Data_Flow_I_n_3),
        .O(O),
        .Op1_Low({Op1_Low[1],Op1_Low[2]}),
        .Q({NLW_Byte_Doublet_Handle_I_Q_UNCONNECTED[15:8],WB_DAXI_Read_Data[24],WB_DAXI_Read_Data[25],WB_DAXI_Read_Data[26],WB_DAXI_Read_Data[27],WB_DAXI_Read_Data[28],WB_DAXI_Read_Data[29],WB_DAXI_Read_Data[30],WB_DAXI_Read_Data[31]}),
        .\Using_FPGA.Native ({extend_Data_Read[16],extend_Data_Read[17],extend_Data_Read[18],extend_Data_Read[19],extend_Data_Read[20],extend_Data_Read[21],extend_Data_Read[22],extend_Data_Read[23]}),
        .extend_Data_Read({extend_Data_Read[24],extend_Data_Read[25],extend_Data_Read[26],extend_Data_Read[27],extend_Data_Read[28],extend_Data_Read[29],extend_Data_Read[30],extend_Data_Read[31]}),
        .isbyte(isbyte),
        .isdoublet(isdoublet));
  cpu_Data_Flow Data_Flow_I
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ({write_Addr[0],write_Addr[1],write_Addr[2],write_Addr[3],write_Addr[4]}),
        .Address({PC_OF[15],PC_OF[16],PC_OF[17],PC_OF[18],PC_OF[19],PC_OF[20],PC_OF[21],PC_OF[22],PC_OF[23],PC_OF[24],PC_OF[25],PC_OF[26],PC_OF[27],PC_OF[28],PC_OF[29]}),
        .Buffer_Addr({buffer_Addr[1],buffer_Addr[2],buffer_Addr[3]}),
        .Clk(Clk),
        .D({Data_Flow_I_n_61,Data_Flow_I_n_62}),
        .DI(pc_Incr),
        .D_0(\Operand_Select_I/OpSelect_Bits[31].Operand_Select_Bit_I/D ),
        .D_1(\Operand_Select_I/OpSelect_Bits[30].Operand_Select_Bit_I/D ),
        .D_10(\Operand_Select_I/OpSelect_Bits[21].Operand_Select_Bit_I/D ),
        .D_11(\Operand_Select_I/OpSelect_Bits[20].Operand_Select_Bit_I/D ),
        .D_12(\Operand_Select_I/OpSelect_Bits[19].Operand_Select_Bit_I/D ),
        .D_13(\Operand_Select_I/OpSelect_Bits[18].Operand_Select_Bit_I/D ),
        .D_14(\Operand_Select_I/OpSelect_Bits[17].Operand_Select_Bit_I/D ),
        .D_15(\Operand_Select_I/OpSelect_Bits[16].Operand_Select_Bit_I/D ),
        .D_16(\Operand_Select_I/OpSelect_Bits[15].Operand_Select_Bit_I/D ),
        .D_17(\Operand_Select_I/OpSelect_Bits[14].Operand_Select_Bit_I/D ),
        .D_18(\Operand_Select_I/OpSelect_Bits[13].Operand_Select_Bit_I/D ),
        .D_19(\Operand_Select_I/OpSelect_Bits[12].Operand_Select_Bit_I/D ),
        .D_2(\Operand_Select_I/OpSelect_Bits[29].Operand_Select_Bit_I/D ),
        .D_20(\Operand_Select_I/OpSelect_Bits[11].Operand_Select_Bit_I/D ),
        .D_21(\Operand_Select_I/OpSelect_Bits[10].Operand_Select_Bit_I/D ),
        .D_22(\Operand_Select_I/OpSelect_Bits[9].Operand_Select_Bit_I/D ),
        .D_23(\Operand_Select_I/OpSelect_Bits[8].Operand_Select_Bit_I/D ),
        .D_24(\Operand_Select_I/OpSelect_Bits[7].Operand_Select_Bit_I/D ),
        .D_25(\Operand_Select_I/OpSelect_Bits[6].Operand_Select_Bit_I/D ),
        .D_26(\Operand_Select_I/OpSelect_Bits[5].Operand_Select_Bit_I/D ),
        .D_27(\Operand_Select_I/OpSelect_Bits[4].Operand_Select_Bit_I/D ),
        .D_28(\Operand_Select_I/OpSelect_Bits[3].Operand_Select_Bit_I/D ),
        .D_29(\Operand_Select_I/OpSelect_Bits[2].Operand_Select_Bit_I/D ),
        .D_3(\Operand_Select_I/OpSelect_Bits[28].Operand_Select_Bit_I/D ),
        .D_30(\Operand_Select_I/OpSelect_Bits[1].Operand_Select_Bit_I/D ),
        .D_31(\Operand_Select_I/OpSelect_Bits[0].Operand_Select_Bit_I/D ),
        .D_4(\Operand_Select_I/OpSelect_Bits[27].Operand_Select_Bit_I/D ),
        .D_5(\Operand_Select_I/OpSelect_Bits[26].Operand_Select_Bit_I/D ),
        .D_6(\Operand_Select_I/OpSelect_Bits[25].Operand_Select_Bit_I/D ),
        .D_7(\Operand_Select_I/OpSelect_Bits[24].Operand_Select_Bit_I/D ),
        .D_8(\Operand_Select_I/OpSelect_Bits[23].Operand_Select_Bit_I/D ),
        .D_9(\Operand_Select_I/OpSelect_Bits[22].Operand_Select_Bit_I/D ),
        .Data_Read0_out({Data_Read0_out[0],Data_Read0_out[1],Data_Read0_out[2],Data_Read0_out[3],Data_Read0_out[4],Data_Read0_out[5],Data_Read0_out[6],Data_Read0_out[7],Data_Read0_out[8],Data_Read0_out[9],Data_Read0_out[10],Data_Read0_out[11],Data_Read0_out[12],Data_Read0_out[13],Data_Read0_out[14],Data_Read0_out[15]}),
        .Data_Write({raw_Data_Write[0],raw_Data_Write[1],raw_Data_Write[2],raw_Data_Write[3],raw_Data_Write[4],raw_Data_Write[5],raw_Data_Write[6],raw_Data_Write[7],raw_Data_Write[8],raw_Data_Write[9],raw_Data_Write[10],raw_Data_Write[11],raw_Data_Write[12],raw_Data_Write[13],raw_Data_Write[14],raw_Data_Write[15],raw_Data_Write[16],raw_Data_Write[17],raw_Data_Write[18],raw_Data_Write[19],raw_Data_Write[20],raw_Data_Write[21],raw_Data_Write[22],raw_Data_Write[23]}),
        .E(imm_Instr),
        .EX_Op2(Data_Flow_I_n_3),
        .IReady(valid_Fetch),
        .Interrupt_Address(NLW_Data_Flow_I_Interrupt_Address_UNCONNECTED[0:31]),
        .LO(NLW_Data_Flow_I_LO_UNCONNECTED),
        .Logic_Oper({Decode_I_n_57,Decode_I_n_58}),
        .MSR_Rst(\MSR_Reg_I/MSR_Rst ),
        .Op1_Low(Op1_Low),
        .Op1_Shift(\MSR_Reg_I/New_Value ),
        .PC_EX_i({PC_EX_i[15],PC_EX_i[16],PC_EX_i[17],PC_EX_i[18],PC_EX_i[19],PC_EX_i[20],PC_EX_i[21],PC_EX_i[22],PC_EX_i[23],PC_EX_i[24],PC_EX_i[25],PC_EX_i[26],PC_EX_i[27],NLW_Data_Flow_I_PC_EX_i_UNCONNECTED[1:0]}),
        .PC_Write(pc_Write),
        .Q({result_Sel[0],result_Sel[1]}),
        .Reg_Test_Equal(reg_Test_Equal),
        .Reg_Write(reg_write_I),
        .Reg_zero(NLW_Data_Flow_I_Reg_zero_UNCONNECTED),
        .Select_Logic(select_Logic),
        .Shift_Oper(sign_Extend),
        .Shifted(\Shift_Logic_Module_I/Shifted ),
        .\Size_17to32.imm_Reg_reg[0] ({Data_Flow_I_n_165,Data_Flow_I_n_166,Data_Flow_I_n_167,Data_Flow_I_n_168,Data_Flow_I_n_169,Data_Flow_I_n_170,Data_Flow_I_n_171,Data_Flow_I_n_172,Data_Flow_I_n_173,Data_Flow_I_n_174,Data_Flow_I_n_175,Data_Flow_I_n_176,Data_Flow_I_n_177,Data_Flow_I_n_178,Data_Flow_I_n_179,\Operand_Select_I/Imm_Reg }),
        .Unsigned_Op(Unsigned_Op),
        .\Using_FPGA.Native (Data_Flow_I_n_4),
        .\Using_FPGA.Native_0 (Data_Flow_I_n_6),
        .\Using_FPGA.Native_1 (Data_Flow_I_n_22),
        .\Using_FPGA.Native_10 (Decode_I_n_75),
        .\Using_FPGA.Native_11 (Decode_I_n_117),
        .\Using_FPGA.Native_12 (\^Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_13 (Decode_I_n_154),
        .\Using_FPGA.Native_2 (Data_Flow_I_n_23),
        .\Using_FPGA.Native_3 (Data_Flow_I_n_24),
        .\Using_FPGA.Native_4 (\NLW_Data_Flow_I_Using_FPGA.Native_4_UNCONNECTED ),
        .\Using_FPGA.Native_5 ({\^D [320:297],\NLW_Data_Flow_I_Using_FPGA.Native_5_UNCONNECTED [60:55],\^D [290:276],\^D [249:242],\^D [106:79],\NLW_Data_Flow_I_Using_FPGA.Native_5_UNCONNECTED [3:2],\^D [76:75]}),
        .\Using_FPGA.Native_6 (Decode_I_n_73),
        .\Using_FPGA.Native_7 (Decode_I_n_106),
        .\Using_FPGA.Native_8 (Decode_I_n_74),
        .\Using_FPGA.Native_9 (Decode_I_n_151),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (Data_Flow_I_n_29),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (Data_Flow_I_n_30),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_1 (Data_Flow_I_n_31),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_10 (Data_Flow_I_n_40),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_11 (Data_Flow_I_n_41),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_12 (Data_Flow_I_n_42),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_13 (Data_Flow_I_n_43),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_14 (Data_Flow_I_n_44),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_15 (Data_Flow_I_n_45),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_16 (Data_Flow_I_n_46),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_17 (Data_Flow_I_n_47),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_18 (Data_Flow_I_n_48),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_19 (Data_Flow_I_n_49),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_2 (Data_Flow_I_n_32),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_20 (Data_Flow_I_n_50),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_21 (Data_Flow_I_n_51),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_22 (Data_Flow_I_n_52),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_23 (Data_Flow_I_n_53),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_24 (Data_Flow_I_n_54),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_25 (Data_Flow_I_n_55),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_26 (Data_Flow_I_n_56),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_27 (Data_Flow_I_n_57),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_28 (Data_Flow_I_n_58),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_29 (Data_Flow_I_n_59),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_3 (Data_Flow_I_n_33),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_30 (Data_Flow_I_n_60),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_4 (Data_Flow_I_n_34),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_5 (Data_Flow_I_n_35),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_6 (Data_Flow_I_n_36),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_7 (Data_Flow_I_n_37),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_8 (Data_Flow_I_n_38),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_9 (Data_Flow_I_n_39),
        .\Using_dynamic_instr_Address.old_IE_value_reg (\NLW_Data_Flow_I_Using_dynamic_instr_Address.old_IE_value_reg_UNCONNECTED ),
        .alu_Op(alu_Op),
        .carry_In(carry_In),
        .compare_Instr(compare_Instr),
        .data_Read_Mask({\Result_Mux_I/data_Read_Mask [0],\Result_Mux_I/data_Read_Mask [16]}),
        .\data_rd_reg_reg[29] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_44 ),
        .\data_rd_reg_reg[29]_0 (\^LOCKSTEP_Master_Out [34]),
        .exception_kind(exception_kind),
        .extend_Data_Read({extend_Data_Read[16],extend_Data_Read[17],extend_Data_Read[18],extend_Data_Read[19],extend_Data_Read[20],extend_Data_Read[21],extend_Data_Read[22],extend_Data_Read[23],extend_Data_Read[24],extend_Data_Read[25],extend_Data_Read[26],extend_Data_Read[27],extend_Data_Read[28],extend_Data_Read[29],extend_Data_Read[30],extend_Data_Read[31]}),
        .imm_Value(imm_Value),
        .jump(jump),
        .lopt(lopt),
        .lopt_1(Op1_Low[2]),
        .lopt_2(lopt_1),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(lopt_4),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7),
        .msr_I({msr_I[28],msr_I[29],msr_I[30]}),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .reg1_Addr(reg1_Addr),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .register_write(register_write),
        .res_Forward1(res_Forward1),
        .res_Forward2(res_Forward2),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset));
  cpu_Decode Decode_I
       (.\Area_Debug_Control.dbg_brki_hit_i_2 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_63 ),
        .\Area_Debug_Control.dbg_brki_hit_reg (Decode_I_n_115),
        .\Area_Debug_Control.normal_stop_cmd_hold_reg (Decode_I_n_116),
        .Buffer_Addr({buffer_Addr[1],buffer_Addr[2],buffer_Addr[3]}),
        .Clk(Clk),
        .D({\^D [322:321],\^D [241:239],\^D [131],NLW_Decode_I_D_UNCONNECTED[0]}),
        .DI(pc_Incr),
        .DReady(DReady),
        .DReady0_out(DReady0_out),
        .D_0(\Operand_Select_I/OpSelect_Bits[0].Operand_Select_Bit_I/D ),
        .D_1(\Operand_Select_I/OpSelect_Bits[1].Operand_Select_Bit_I/D ),
        .D_10(\Operand_Select_I/OpSelect_Bits[10].Operand_Select_Bit_I/D ),
        .D_11(\Operand_Select_I/OpSelect_Bits[11].Operand_Select_Bit_I/D ),
        .D_12(\Operand_Select_I/OpSelect_Bits[12].Operand_Select_Bit_I/D ),
        .D_13(\Operand_Select_I/OpSelect_Bits[13].Operand_Select_Bit_I/D ),
        .D_14(\Operand_Select_I/OpSelect_Bits[14].Operand_Select_Bit_I/D ),
        .D_15(\Operand_Select_I/OpSelect_Bits[15].Operand_Select_Bit_I/D ),
        .D_16(\Operand_Select_I/OpSelect_Bits[16].Operand_Select_Bit_I/D ),
        .D_17(\Operand_Select_I/OpSelect_Bits[17].Operand_Select_Bit_I/D ),
        .D_18(\Operand_Select_I/OpSelect_Bits[18].Operand_Select_Bit_I/D ),
        .D_19(\Operand_Select_I/OpSelect_Bits[19].Operand_Select_Bit_I/D ),
        .D_2(\Operand_Select_I/OpSelect_Bits[2].Operand_Select_Bit_I/D ),
        .D_20(\Operand_Select_I/OpSelect_Bits[20].Operand_Select_Bit_I/D ),
        .D_21(\Operand_Select_I/OpSelect_Bits[21].Operand_Select_Bit_I/D ),
        .D_22(\Operand_Select_I/OpSelect_Bits[22].Operand_Select_Bit_I/D ),
        .D_23(\Operand_Select_I/OpSelect_Bits[23].Operand_Select_Bit_I/D ),
        .D_24(\Operand_Select_I/OpSelect_Bits[24].Operand_Select_Bit_I/D ),
        .D_25(\Operand_Select_I/OpSelect_Bits[25].Operand_Select_Bit_I/D ),
        .D_26(\Operand_Select_I/OpSelect_Bits[26].Operand_Select_Bit_I/D ),
        .D_27(\Operand_Select_I/OpSelect_Bits[27].Operand_Select_Bit_I/D ),
        .D_28(\Operand_Select_I/OpSelect_Bits[28].Operand_Select_Bit_I/D ),
        .D_29(\Operand_Select_I/OpSelect_Bits[29].Operand_Select_Bit_I/D ),
        .D_3(\Operand_Select_I/OpSelect_Bits[3].Operand_Select_Bit_I/D ),
        .D_30(\Operand_Select_I/OpSelect_Bits[30].Operand_Select_Bit_I/D ),
        .D_31(\Operand_Select_I/OpSelect_Bits[31].Operand_Select_Bit_I/D ),
        .D_4(\Operand_Select_I/OpSelect_Bits[4].Operand_Select_Bit_I/D ),
        .D_5(\Operand_Select_I/OpSelect_Bits[5].Operand_Select_Bit_I/D ),
        .D_6(\Operand_Select_I/OpSelect_Bits[6].Operand_Select_Bit_I/D ),
        .D_7(\Operand_Select_I/OpSelect_Bits[7].Operand_Select_Bit_I/D ),
        .D_8(\Operand_Select_I/OpSelect_Bits[8].Operand_Select_Bit_I/D ),
        .D_9(\Operand_Select_I/OpSelect_Bits[9].Operand_Select_Bit_I/D ),
        .E(imm_Instr),
        .Hibernate(NLW_Decode_I_Hibernate_UNCONNECTED),
        .IReady(valid_Fetch),
        .IReady1_out(IReady1_out),
        .Interrupt(NLW_Decode_I_Interrupt_UNCONNECTED),
        .Interrupt_Ack(NLW_Decode_I_Interrupt_Ack_UNCONNECTED[0:1]),
        .LO(NLW_Decode_I_LO_UNCONNECTED),
        .\LOCKSTEP_Out_reg[3] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_61 ),
        .Logic_Oper({Decode_I_n_57,Decode_I_n_58}),
        .MEM_DAXI_Data_Strobe(MEM_DAXI_Data_Strobe),
        .MSR_Rst(\MSR_Reg_I/MSR_Rst ),
        .Op1_Low({Op1_Low[0:1],NLW_Decode_I_Op1_Low_UNCONNECTED[2]}),
        .Op1_Shift(\MSR_Reg_I/New_Value ),
        .PC_Write(pc_Write),
        .Pause_Ack(NLW_Decode_I_Pause_Ack_UNCONNECTED),
        .Q(NLW_Decode_I_Q_UNCONNECTED[27:0]),
        .R(\PreFetch_Buffer_I/R ),
        .Reg_Test_Equal(reg_Test_Equal),
        .Reg_Write(reg_write_I),
        .Reg_zero(NLW_Decode_I_Reg_zero_UNCONNECTED),
        .\Result_Sel_reg[0]_0 ({result_Sel[0],result_Sel[1]}),
        .Select_Logic(select_Logic),
        .Shift_Oper(sign_Extend),
        .Shifted(\Shift_Logic_Module_I/Shifted ),
        .Sleep_Decode(Sleep_Decode),
        .Suspend(NLW_Decode_I_Suspend_UNCONNECTED),
        .Unsigned_Op(Unsigned_Op),
        .\Use_Async_Reset.sync_reset_reg (Decode_I_n_151),
        .\Using_FPGA.Native (Decode_I_n_74),
        .\Using_FPGA.Native_0 (Decode_I_n_106),
        .\Using_FPGA.Native_1 (Decode_I_n_117),
        .\Using_FPGA.Native_10 (Data_Flow_I_n_31),
        .\Using_FPGA.Native_11 (Data_Flow_I_n_32),
        .\Using_FPGA.Native_12 (Data_Flow_I_n_33),
        .\Using_FPGA.Native_13 (Data_Flow_I_n_34),
        .\Using_FPGA.Native_14 (Data_Flow_I_n_35),
        .\Using_FPGA.Native_15 (Data_Flow_I_n_36),
        .\Using_FPGA.Native_16 (Data_Flow_I_n_37),
        .\Using_FPGA.Native_17 (Data_Flow_I_n_38),
        .\Using_FPGA.Native_18 (Data_Flow_I_n_39),
        .\Using_FPGA.Native_19 (Data_Flow_I_n_40),
        .\Using_FPGA.Native_2 (Decode_I_n_154),
        .\Using_FPGA.Native_20 (Data_Flow_I_n_41),
        .\Using_FPGA.Native_21 (Data_Flow_I_n_42),
        .\Using_FPGA.Native_22 (Data_Flow_I_n_43),
        .\Using_FPGA.Native_23 (Data_Flow_I_n_44),
        .\Using_FPGA.Native_24 (Data_Flow_I_n_45),
        .\Using_FPGA.Native_25 (Data_Flow_I_n_46),
        .\Using_FPGA.Native_26 (Data_Flow_I_n_47),
        .\Using_FPGA.Native_27 (Data_Flow_I_n_48),
        .\Using_FPGA.Native_28 (Data_Flow_I_n_49),
        .\Using_FPGA.Native_29 (Data_Flow_I_n_50),
        .\Using_FPGA.Native_3 (\^Using_FPGA.Native ),
        .\Using_FPGA.Native_30 (Data_Flow_I_n_51),
        .\Using_FPGA.Native_31 (Data_Flow_I_n_52),
        .\Using_FPGA.Native_32 (Data_Flow_I_n_53),
        .\Using_FPGA.Native_33 (Data_Flow_I_n_54),
        .\Using_FPGA.Native_34 (Data_Flow_I_n_55),
        .\Using_FPGA.Native_35 (Data_Flow_I_n_56),
        .\Using_FPGA.Native_36 (Data_Flow_I_n_57),
        .\Using_FPGA.Native_37 (Data_Flow_I_n_58),
        .\Using_FPGA.Native_38 (Data_Flow_I_n_59),
        .\Using_FPGA.Native_39 (Data_Flow_I_n_60),
        .\Using_FPGA.Native_4 (Data_Flow_I_n_24),
        .\Using_FPGA.Native_40 (Data_Flow_I_n_6),
        .\Using_FPGA.Native_41 (Data_Flow_I_n_22),
        .\Using_FPGA.Native_42 (Data_Flow_I_n_23),
        .\Using_FPGA.Native_5 (\^Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_6 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_62 ),
        .\Using_FPGA.Native_7 (Data_Flow_I_n_29),
        .\Using_FPGA.Native_8 ({Data_Flow_I_n_165,Data_Flow_I_n_166,Data_Flow_I_n_167,Data_Flow_I_n_168,Data_Flow_I_n_169,Data_Flow_I_n_170,Data_Flow_I_n_171,Data_Flow_I_n_172,Data_Flow_I_n_173,Data_Flow_I_n_174,Data_Flow_I_n_175,Data_Flow_I_n_176,Data_Flow_I_n_177,Data_Flow_I_n_178,Data_Flow_I_n_179,\Operand_Select_I/Imm_Reg }),
        .\Using_FPGA.Native_9 (Data_Flow_I_n_30),
        .\Using_FPGA.enable_Interrupts_I_reg_0 (Decode_I_n_75),
        .\Using_FPGA.set_BIP_I_reg_0 (Decode_I_n_73),
        .\Using_LWX_SWX_instr.reservation_reg_0 (Decode_I_n_62),
        .\Using_LWX_SWX_instr.reservation_reg_1 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_59 ),
        .\Using_LWX_SWX_instr.reservation_reg_2 (\Using_Ext_Databus.DAXI_Interface_I1_n_72 ),
        .\Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 (\NLW_Decode_I_Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0_UNCONNECTED ),
        .\Using_dynamic_instr_Address.old_IE_value_reg_0 (\NLW_Decode_I_Using_dynamic_instr_Address.old_IE_value_reg_0_UNCONNECTED ),
        .Valid_Instr_i(Valid_Instr_i),
        .Y(mux_Instr_Read),
        .alu_Op(alu_Op),
        .branch_with_delay(branch_with_delay),
        .break_Pipe_i_reg_0({msr_I[28],msr_I[29],msr_I[30]}),
        .carry_In(carry_In),
        .compare_Instr(compare_Instr),
        .data_Read_Mask({\Result_Mux_I/data_Read_Mask [0],\Result_Mux_I/data_Read_Mask [16]}),
        .dbg_brki_hit(dbg_brki_hit),
        .dbg_clean_stop(dbg_clean_stop),
        .dbg_pause(NLW_Decode_I_dbg_pause_UNCONNECTED),
        .delay_slot_instr_reg(\^LOCKSTEP_Master_Out [34]),
        .ex_Valid(ex_Valid),
        .ex_Valid_reg_0(mem_Strobe),
        .exception_kind(exception_kind),
        .force_stop_cmd_hold(force_stop_cmd_hold),
        .force_stop_cmd_i(force_stop_cmd_i),
        .has_inhibit_EX(has_inhibit_EX),
        .imm_Value(imm_Value),
        .inHibit_EX_reg_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_57 ),
        .\instr_EX_i_reg[25]_0 (\NLW_Decode_I_instr_EX_i_reg[25]_0_UNCONNECTED ),
        .\instr_EX_i_reg[26]_0 (\NLW_Decode_I_instr_EX_i_reg[26]_0_UNCONNECTED ),
        .is_swx_I_reg_0(Decode_I_n_61),
        .is_swx_I_reg_1(Decode_I_n_72),
        .isbyte(isbyte),
        .isdoublet(isdoublet),
        .jump(jump),
        .load_Store_i(load_Store_i),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .mem_access(mem_access),
        .missed_IFetch_reg_0(IReady),
        .missed_IFetch_reg_1(\^LOCKSTEP_Master_Out [35]),
        .nonvalid_IFetch_n_reg_0(Decode_I_n_25),
        .of_PipeRun(of_PipeRun),
        .ok_To_Stop(ok_To_Stop),
        .opsel1_SPR(opsel1_SPR),
        .p_2_out(p_2_out),
        .reg1_Addr(reg1_Addr),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .reg_Write_I(NLW_Decode_I_reg_Write_I_UNCONNECTED),
        .reg_Write_dbg(reg_Write_dbg),
        .res_Forward1(res_Forward1),
        .res_Forward2(res_Forward2),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset),
        .trace_reg_write_novalid(NLW_Decode_I_trace_reg_write_novalid_UNCONNECTED),
        .use_Imm_Reg(use_Imm_Reg),
        .using_Imm_reg_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_56 ),
        .wakeup_i(wakeup_i),
        .\write_Addr_I_reg[0]_0 ({write_Addr[0],write_Addr[1],write_Addr[2],write_Addr[3],write_Addr[4]}));
  cpu_Debug \Implement_Debug_Logic.Master_Core.Debug_Area 
       (.Address({PC_OF[15],PC_OF[16],PC_OF[17],PC_OF[18],PC_OF[19],PC_OF[20],PC_OF[21],PC_OF[22],PC_OF[23],PC_OF[24],PC_OF[25],PC_OF[26],PC_OF[27],PC_OF[28],PC_OF[29]}),
        .\Area_Debug_Control.dbg_brki_hit_reg_0 (Decode_I_n_115),
        .\Area_Debug_Control.normal_stop_cmd_hold_reg_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_62 ),
        .Clk(Clk),
        .Config_Reg_En(Config_Reg_En),
        .D(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_D_UNCONNECTED [0]),
        .Data_Read_Reg_En(Data_Read_Reg_En),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Dbg_Stop_UNCONNECTED ),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trig_Ack_In(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Dbg_Trig_Ack_In_UNCONNECTED [1:0]),
        .Dbg_Trig_Ack_Out(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Dbg_Trig_Ack_Out_UNCONNECTED [1:0]),
        .Dbg_Trig_In(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Dbg_Trig_In_UNCONNECTED [1:0]),
        .Dbg_Trig_Out({\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Dbg_Trig_Out_UNCONNECTED [1],Dbg_Trig_Out[0]}),
        .Dbg_Update(Dbg_Update),
        .IReady(IReady),
        .IReady1_out(IReady1_out),
        .LOCKSTEP_Master_Out({\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_LOCKSTEP_Master_Out_UNCONNECTED [37:36],\^LOCKSTEP_Master_Out [35:33],\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_LOCKSTEP_Master_Out_UNCONNECTED [32],\^LOCKSTEP_Master_Out [31:0]}),
        .PC_EX_i({PC_EX_i[15],PC_EX_i[16],PC_EX_i[17],PC_EX_i[18],PC_EX_i[19],PC_EX_i[20],PC_EX_i[21],PC_EX_i[22],PC_EX_i[23],PC_EX_i[24],PC_EX_i[25],PC_EX_i[26],PC_EX_i[27]}),
        .Pause(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Pause_UNCONNECTED ),
        .Q(\Implement_Debug_Logic.Master_Core.Debug_Area_n_63 ),
        .R(\PreFetch_Buffer_I/R ),
        .Reset_Mode(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Reset_Mode_UNCONNECTED [0:1]),
        .Scan_En(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Scan_En_UNCONNECTED ),
        .Scan_Reset(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Scan_Reset_UNCONNECTED ),
        .Scan_Reset_Sel(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Scan_Reset_Sel_UNCONNECTED ),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_57 ),
        .\Serial_Dbg_Intf.status_reg_reg[22]_0 (mem_Strobe),
        .\Serial_Dbg_Intf.status_reg_reg[25]_0 ({\^D [322],\^D [131],\^D [106:79],\^D [76:74]}),
        .Sleep(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_Sleep_UNCONNECTED ),
        .Sleep_Decode(Sleep_Decode),
        .Status_Reg_En(Status_Reg_En),
        .\Use_Async_Reset.sync_reset_reg (\Implement_Debug_Logic.Master_Core.Debug_Area_n_56 ),
        .\Use_Async_Reset.sync_reset_reg_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_61 ),
        .\Use_Serial_Unified_Completion.completion_block_reg (\Use_Serial_Unified_Completion.completion_block_reg ),
        .\Using_FPGA.Native (\^Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\^Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_59 ),
        .\Using_FPGA.Native_2 (Decode_I_n_116),
        .Valid_Instr_i(Valid_Instr_i),
        .active_access_reg(Decode_I_n_62),
        .active_access_reg_0(Decode_I_n_61),
        .branch_with_delay(branch_with_delay),
        .\data_rd_reg_reg[28]_0 ({Data_Flow_I_n_61,Data_Flow_I_n_62}),
        .\data_rd_reg_reg[30]_0 (msr_I[30]),
        .dbg_brki_hit(dbg_brki_hit),
        .dbg_clean_stop(dbg_clean_stop),
        .dbg_pause(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_dbg_pause_UNCONNECTED ),
        .delay_slot_instr_reg_0(\NLW_Implement_Debug_Logic.Master_Core.Debug_Area_delay_slot_instr_reg_0_UNCONNECTED [0]),
        .delay_slot_instr_reg_1(Decode_I_n_154),
        .ex_Valid(ex_Valid),
        .force_stop_cmd_hold(force_stop_cmd_hold),
        .force_stop_cmd_i(force_stop_cmd_i),
        .has_inhibit_EX(has_inhibit_EX),
        .inHibit_EX_reg(Decode_I_n_25),
        .jump(jump),
        .load_Store_i(load_Store_i),
        .load_Store_i_reg(\Implement_Debug_Logic.Master_Core.Debug_Area_n_60 ),
        .of_PipeRun(of_PipeRun),
        .ok_To_Stop(ok_To_Stop),
        .p_2_out(p_2_out),
        .read_register_MSR_1_reg_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_44 ),
        .reg_Write_dbg(reg_Write_dbg),
        .register_write(register_write),
        .sync_reset(sync_reset),
        .use_Imm_Reg(use_Imm_Reg),
        .wakeup_i(wakeup_i));
  cpu_DAXI_interface \Using_Ext_Databus.DAXI_Interface_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 ({\NLW_Using_Ext_Databus.DAXI_Interface_I1_Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0_UNCONNECTED [67:40],\^D [277:276],\NLW_Using_Ext_Databus.DAXI_Interface_I1_Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0_UNCONNECTED [37:12],\^D [249:242],\NLW_Using_Ext_Databus.DAXI_Interface_I1_Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0_UNCONNECTED [3:0]}),
        .Clk(Clk),
        .D({\NLW_Using_Ext_Databus.DAXI_Interface_I1_D_UNCONNECTED [70:43],\^D [206:205],\NLW_Using_Ext_Databus.DAXI_Interface_I1_D_UNCONNECTED [40:39],\^D [202],\NLW_Using_Ext_Databus.DAXI_Interface_I1_D_UNCONNECTED [37:14],\^D [177:170],\NLW_Using_Ext_Databus.DAXI_Interface_I1_D_UNCONNECTED [5:2],\^D [165:164]}),
        .DReady(DReady),
        .DReady0_out(DReady0_out),
        .DWait(DWait),
        .Data_Read({Data_Read[0],Data_Read[1],Data_Read[2],Data_Read[3],Data_Read[4],Data_Read[5],Data_Read[6],Data_Read[7],Data_Read[8],Data_Read[9],Data_Read[10],Data_Read[11],Data_Read[12],Data_Read[13],Data_Read[14],Data_Read[15],Data_Read[16],Data_Read[17],Data_Read[18],Data_Read[19],Data_Read[20],Data_Read[21],Data_Read[22],Data_Read[23]}),
        .Data_Read0_out({Data_Read0_out[0],Data_Read0_out[1],Data_Read0_out[2],Data_Read0_out[3],Data_Read0_out[4],Data_Read0_out[5],Data_Read0_out[6],Data_Read0_out[7],Data_Read0_out[8],Data_Read0_out[9],Data_Read0_out[10],Data_Read0_out[11],Data_Read0_out[12],Data_Read0_out[13],Data_Read0_out[14],Data_Read0_out[15]}),
        .MEM_DAXI_Data_Strobe(MEM_DAXI_Data_Strobe),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA({\NLW_Using_Ext_Databus.DAXI_Interface_I1_M_AXI_DP_RDATA_UNCONNECTED [31:8],M_AXI_DP_RDATA[7:0]}),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .M_AXI_DP_WVALID_i_reg_0(\^D [239]),
        .O(O),
        .Q({\NLW_Using_Ext_Databus.DAXI_Interface_I1_Q_UNCONNECTED [15:8],WB_DAXI_Read_Data[24],WB_DAXI_Read_Data[25],WB_DAXI_Read_Data[26],WB_DAXI_Read_Data[27],WB_DAXI_Read_Data[28],WB_DAXI_Read_Data[29],WB_DAXI_Read_Data[30],WB_DAXI_Read_Data[31]}),
        .active_access_reg_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_60 ),
        .extend_Data_Read({extend_Data_Read[16],extend_Data_Read[17],extend_Data_Read[18],extend_Data_Read[19],extend_Data_Read[20],extend_Data_Read[21],extend_Data_Read[22],extend_Data_Read[23]}),
        .mem_access(mem_access),
        .mem_access_completed_reg_0(\Using_Ext_Databus.DAXI_Interface_I1_n_72 ),
        .of_PipeRun(of_PipeRun),
        .sync_reset(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Using_Ext_Databus.mem_access_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_72),
        .Q(mem_access),
        .R(sync_reset));
  cpu_instr_mux instr_mux_I1
       (.Instr(Instr),
        .LOCKSTEP_Master_Out({\^LOCKSTEP_Master_Out [35],\^LOCKSTEP_Master_Out [31:0]}),
        .Y(mux_Instr_Read));
  FDRE #(
    .INIT(1'b0)) 
    trace_exception_taken_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(exception_kind),
        .Q(\^D [74]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MicroBlaze_Core" *) 
module cpu_MicroBlaze_Core
   (D,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Pause_Ack,
    Sleep,
    LOCKSTEP_Master_Out,
    Hibernate,
    Suspend,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    \Use_Serial_Unified_Completion.completion_block_reg ,
    Dbg_TDO,
    Interrupt_Ack,
    Clk,
    Dbg_Clk,
    Reset,
    Mb_Reset,
    Debug_Rst,
    Pause,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Update,
    Dbg_Stop,
    Dbg_Capture,
    Data_Read_Reg_En,
    Config_Reg_En,
    Dbg_Reg_En,
    Dbg_Shift,
    Status_Reg_En,
    IReady,
    Reset_Mode,
    Scan_En,
    Scan_Reset_Sel,
    Scan_Reset,
    Instr,
    Dbg_TDI,
    Wakeup,
    M_AXI_DP_RVALID,
    M_AXI_DP_RDATA,
    DReady,
    M_AXI_DP_BVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_AWREADY,
    M_AXI_DP_ARREADY,
    Interrupt,
    DWait,
    Interrupt_Address,
    Data_Read);
  output [323:0]D;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output Pause_Ack;
  output Sleep;
  output [37:0]LOCKSTEP_Master_Out;
  output Hibernate;
  output Suspend;
  output [1:0]Dbg_Trig_In;
  output [1:0]Dbg_Trig_Ack_Out;
  output \Use_Serial_Unified_Completion.completion_block_reg ;
  output Dbg_TDO;
  output [0:1]Interrupt_Ack;
  input Clk;
  input Dbg_Clk;
  input Reset;
  input Mb_Reset;
  input Debug_Rst;
  input Pause;
  input [1:0]Dbg_Trig_Ack_In;
  input [1:0]Dbg_Trig_Out;
  input Dbg_Update;
  input Dbg_Stop;
  input Dbg_Capture;
  input Data_Read_Reg_En;
  input Config_Reg_En;
  input [0:7]Dbg_Reg_En;
  input Dbg_Shift;
  input Status_Reg_En;
  input IReady;
  input [0:1]Reset_Mode;
  input Scan_En;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input [0:31]Instr;
  input Dbg_TDI;
  input [0:1]Wakeup;
  input M_AXI_DP_RVALID;
  input [31:0]M_AXI_DP_RDATA;
  input DReady;
  input M_AXI_DP_BVALID;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_ARREADY;
  input Interrupt;
  input DWait;
  input [0:31]Interrupt_Address;
  input [0:31]Data_Read;

  wire Clk;
  wire Config_Reg_En;
  wire [323:0]D;
  wire DReady;
  wire DWait;
  wire [0:31]Data_Read;
  wire Data_Read_Reg_En;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Debug_Rst;
  wire IReady;
  wire [0:31]Instr;
  wire [37:0]LOCKSTEP_Master_Out;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire M_AXI_DP_WREADY;
  wire Reset;
  wire Status_Reg_En;
  wire Synced;
  wire \Use_Serial_Unified_Completion.completion_block_reg ;
  wire [0:1]Wakeup;
  wire reset_temp__0;
  wire sync_reset;
  wire [0:1]wakeup_i;
  wire \NLW_Area.Core_Dbg_Stop_UNCONNECTED ;
  wire \NLW_Area.Core_Hibernate_UNCONNECTED ;
  wire \NLW_Area.Core_Interrupt_UNCONNECTED ;
  wire \NLW_Area.Core_Pause_UNCONNECTED ;
  wire \NLW_Area.Core_Pause_Ack_UNCONNECTED ;
  wire \NLW_Area.Core_Scan_En_UNCONNECTED ;
  wire \NLW_Area.Core_Scan_Reset_UNCONNECTED ;
  wire \NLW_Area.Core_Scan_Reset_Sel_UNCONNECTED ;
  wire \NLW_Area.Core_Sleep_UNCONNECTED ;
  wire \NLW_Area.Core_Suspend_UNCONNECTED ;
  wire \NLW_Area.Core_Using_FPGA.Native_UNCONNECTED ;
  wire \NLW_Area.Core_Using_FPGA.Native_0_UNCONNECTED ;
  wire [323:0]\NLW_Area.Core_D_UNCONNECTED ;
  wire [1:0]\NLW_Area.Core_Dbg_Trig_Ack_In_UNCONNECTED ;
  wire [1:0]\NLW_Area.Core_Dbg_Trig_Ack_Out_UNCONNECTED ;
  wire [1:0]\NLW_Area.Core_Dbg_Trig_In_UNCONNECTED ;
  wire [1:1]\NLW_Area.Core_Dbg_Trig_Out_UNCONNECTED ;
  wire [0:1]\NLW_Area.Core_Interrupt_Ack_UNCONNECTED ;
  wire [0:31]\NLW_Area.Core_Interrupt_Address_UNCONNECTED ;
  wire [37:0]\NLW_Area.Core_LOCKSTEP_Master_Out_UNCONNECTED ;
  wire [31:8]\NLW_Area.Core_M_AXI_DP_RDATA_UNCONNECTED ;
  wire [0:1]\NLW_Area.Core_Reset_Mode_UNCONNECTED ;

  cpu_MicroBlaze_Area \Area.Core 
       (.Clk(Clk),
        .Config_Reg_En(Config_Reg_En),
        .D({\NLW_Area.Core_D_UNCONNECTED [323:322],D[321:297],\NLW_Area.Core_D_UNCONNECTED [296:291],D[290:276],\NLW_Area.Core_D_UNCONNECTED [275:274],D[273:235],\NLW_Area.Core_D_UNCONNECTED [234:207],D[206:205],\NLW_Area.Core_D_UNCONNECTED [204:203],D[202],\NLW_Area.Core_D_UNCONNECTED [201:178],D[177:170],\NLW_Area.Core_D_UNCONNECTED [169:166],D[165:164],\NLW_Area.Core_D_UNCONNECTED [163:0]}),
        .DReady(DReady),
        .DWait(DWait),
        .Data_Read(Data_Read),
        .Data_Read_Reg_En(Data_Read_Reg_En),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(\NLW_Area.Core_Dbg_Stop_UNCONNECTED ),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trig_Ack_In(\NLW_Area.Core_Dbg_Trig_Ack_In_UNCONNECTED [1:0]),
        .Dbg_Trig_Ack_Out(\NLW_Area.Core_Dbg_Trig_Ack_Out_UNCONNECTED [1:0]),
        .Dbg_Trig_In(\NLW_Area.Core_Dbg_Trig_In_UNCONNECTED [1:0]),
        .Dbg_Trig_Out({\NLW_Area.Core_Dbg_Trig_Out_UNCONNECTED [1],Dbg_Trig_Out[0]}),
        .Dbg_Update(Dbg_Update),
        .Hibernate(\NLW_Area.Core_Hibernate_UNCONNECTED ),
        .IReady(IReady),
        .Instr(Instr),
        .Interrupt(\NLW_Area.Core_Interrupt_UNCONNECTED ),
        .Interrupt_Ack(\NLW_Area.Core_Interrupt_Ack_UNCONNECTED [0:1]),
        .Interrupt_Address(\NLW_Area.Core_Interrupt_Address_UNCONNECTED [0:31]),
        .LOCKSTEP_Master_Out({\NLW_Area.Core_LOCKSTEP_Master_Out_UNCONNECTED [37:34],LOCKSTEP_Master_Out[33],\NLW_Area.Core_LOCKSTEP_Master_Out_UNCONNECTED [32:0]}),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA({\NLW_Area.Core_M_AXI_DP_RDATA_UNCONNECTED [31:8],M_AXI_DP_RDATA[7:0]}),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .Pause(\NLW_Area.Core_Pause_UNCONNECTED ),
        .Pause_Ack(\NLW_Area.Core_Pause_Ack_UNCONNECTED ),
        .Reset_Mode(\NLW_Area.Core_Reset_Mode_UNCONNECTED [0:1]),
        .Scan_En(\NLW_Area.Core_Scan_En_UNCONNECTED ),
        .Scan_Reset(\NLW_Area.Core_Scan_Reset_UNCONNECTED ),
        .Scan_Reset_Sel(\NLW_Area.Core_Scan_Reset_Sel_UNCONNECTED ),
        .Sleep(\NLW_Area.Core_Sleep_UNCONNECTED ),
        .Status_Reg_En(Status_Reg_En),
        .Suspend(\NLW_Area.Core_Suspend_UNCONNECTED ),
        .\Use_Serial_Unified_Completion.completion_block_reg (\Use_Serial_Unified_Completion.completion_block_reg ),
        .\Using_FPGA.Native (\NLW_Area.Core_Using_FPGA.Native_UNCONNECTED ),
        .\Using_FPGA.Native_0 (\NLW_Area.Core_Using_FPGA.Native_0_UNCONNECTED ),
        .sync_reset(sync_reset),
        .wakeup_i(wakeup_i));
  cpu_microblaze_v11_0_0_mb_sync_bit Reset_DFF
       (.Clk(Clk),
        .out(Synced),
        .reset_temp(reset_temp__0));
  FDRE #(
    .INIT(1'b1)) 
    \Use_Async_Reset.sync_reset_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Synced),
        .Q(sync_reset),
        .R(1'b0));
  cpu_microblaze_v11_0_0_mb_sync_bit_1 \Using_Async_Wakeup_0.Wakeup_DFF 
       (.Clk(Clk),
        .SR(sync_reset),
        .Wakeup(Wakeup[0]),
        .out(wakeup_i[0]));
  cpu_microblaze_v11_0_0_mb_sync_bit_2 \Using_Async_Wakeup_1.Wakeup_DFF 
       (.Clk(Clk),
        .SR(sync_reset),
        .Wakeup(Wakeup[1]),
        .out(wakeup_i[1]));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'hE)) 
    reset_temp
       (.I0(Reset),
        .I1(Debug_Rst),
        .O(reset_temp__0));
endmodule

(* ORIG_REF_NAME = "Operand_Select" *) 
module cpu_Operand_Select
   (Op1_Logic,
    EX_Op2,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Op2,
    Shifted,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    op2_C,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    \Using_FPGA.Native_43 ,
    \Using_FPGA.Native_44 ,
    \Using_FPGA.Native_45 ,
    \Using_FPGA.Native_46 ,
    \Using_FPGA.Native_47 ,
    \Using_FPGA.Native_48 ,
    \Using_FPGA.Native_49 ,
    \Using_FPGA.Native_50 ,
    \Using_FPGA.Native_51 ,
    \Using_FPGA.Native_52 ,
    \Using_FPGA.Native_53 ,
    \Using_FPGA.Native_54 ,
    \Using_FPGA.Native_55 ,
    \Using_FPGA.Native_56 ,
    \Using_FPGA.Native_57 ,
    \Using_FPGA.Native_58 ,
    \Using_FPGA.Native_59 ,
    \Using_FPGA.Native_60 ,
    S,
    Sext,
    \Using_FPGA.Native_61 ,
    Compare_Instr_reg,
    \Using_FPGA.Native_62 ,
    \Size_17to32.imm_Reg_reg[0]_0 ,
    sync_reset,
    of_PipeRun,
    Clk,
    D_0,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    D_1,
    I3,
    D_2,
    I3_0,
    D_3,
    I3_1,
    D_4,
    I3_2,
    D_5,
    I3_3,
    D_6,
    I3_4,
    D_7,
    I3_5,
    D_8,
    Address,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    D_17,
    D_18,
    D_19,
    D_20,
    D_21,
    D_22,
    D_23,
    D_24,
    D_25,
    D_26,
    D_27,
    D_28,
    D_29,
    D_30,
    D_31,
    I3_6,
    compare_Instr,
    \Using_FPGA.Native_63 ,
    sext16,
    sext8,
    E,
    imm_Value);
  output Op1_Logic;
  output EX_Op2;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output Op2;
  output Shifted;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output [27:0]op2_C;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output \Using_FPGA.Native_17 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  output \Using_FPGA.Native_21 ;
  output \Using_FPGA.Native_22 ;
  output \Using_FPGA.Native_23 ;
  output \Using_FPGA.Native_24 ;
  output \Using_FPGA.Native_25 ;
  output \Using_FPGA.Native_26 ;
  output \Using_FPGA.Native_27 ;
  output \Using_FPGA.Native_28 ;
  output \Using_FPGA.Native_29 ;
  output \Using_FPGA.Native_30 ;
  output \Using_FPGA.Native_31 ;
  output \Using_FPGA.Native_32 ;
  output \Using_FPGA.Native_33 ;
  output \Using_FPGA.Native_34 ;
  output \Using_FPGA.Native_35 ;
  output \Using_FPGA.Native_36 ;
  output \Using_FPGA.Native_37 ;
  output \Using_FPGA.Native_38 ;
  output \Using_FPGA.Native_39 ;
  output \Using_FPGA.Native_40 ;
  output \Using_FPGA.Native_41 ;
  output \Using_FPGA.Native_42 ;
  output \Using_FPGA.Native_43 ;
  output \Using_FPGA.Native_44 ;
  output \Using_FPGA.Native_45 ;
  output \Using_FPGA.Native_46 ;
  output \Using_FPGA.Native_47 ;
  output \Using_FPGA.Native_48 ;
  output \Using_FPGA.Native_49 ;
  output \Using_FPGA.Native_50 ;
  output \Using_FPGA.Native_51 ;
  output \Using_FPGA.Native_52 ;
  output \Using_FPGA.Native_53 ;
  output \Using_FPGA.Native_54 ;
  output \Using_FPGA.Native_55 ;
  output \Using_FPGA.Native_56 ;
  output \Using_FPGA.Native_57 ;
  output \Using_FPGA.Native_58 ;
  output \Using_FPGA.Native_59 ;
  output \Using_FPGA.Native_60 ;
  output S;
  output Sext;
  output \Using_FPGA.Native_61 ;
  output Compare_Instr_reg;
  output \Using_FPGA.Native_62 ;
  output [15:0]\Size_17to32.imm_Reg_reg[0]_0 ;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_0;
  input [0:31]Reg1_Data;
  input [0:31]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input D_1;
  input I3;
  input D_2;
  input I3_0;
  input D_3;
  input I3_1;
  input D_4;
  input I3_2;
  input D_5;
  input I3_3;
  input D_6;
  input I3_4;
  input D_7;
  input I3_5;
  input D_8;
  input [8:0]Address;
  input D_9;
  input D_10;
  input D_11;
  input D_12;
  input D_13;
  input D_14;
  input D_15;
  input D_16;
  input D_17;
  input D_18;
  input D_19;
  input D_20;
  input D_21;
  input D_22;
  input D_23;
  input D_24;
  input D_25;
  input D_26;
  input D_27;
  input D_28;
  input D_29;
  input D_30;
  input D_31;
  input I3_6;
  input compare_Instr;
  input \Using_FPGA.Native_63 ;
  input sext16;
  input sext8;
  input [0:0]E;
  input [0:15]imm_Value;

  wire [8:0]Address;
  wire Clk;
  wire Compare_Instr_reg;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_17;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_31;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire [0:0]E;
  wire EX_Op2;
  wire I3;
  wire I3_0;
  wire I3_1;
  wire I3_2;
  wire I3_3;
  wire I3_4;
  wire I3_5;
  wire I3_6;
  wire Op1_Logic;
  wire Op2;
  wire \OpSelect_Bits[31].Operand_Select_Bit_I_n_1 ;
  wire [0:31]Reg1_Data;
  wire S;
  wire Sext;
  wire Shifted;
  wire [15:0]\Size_17to32.imm_Reg_reg[0]_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire \Using_FPGA.Native_45 ;
  wire \Using_FPGA.Native_46 ;
  wire \Using_FPGA.Native_47 ;
  wire \Using_FPGA.Native_48 ;
  wire \Using_FPGA.Native_49 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_50 ;
  wire \Using_FPGA.Native_51 ;
  wire \Using_FPGA.Native_52 ;
  wire \Using_FPGA.Native_53 ;
  wire \Using_FPGA.Native_54 ;
  wire \Using_FPGA.Native_55 ;
  wire \Using_FPGA.Native_56 ;
  wire \Using_FPGA.Native_57 ;
  wire \Using_FPGA.Native_58 ;
  wire \Using_FPGA.Native_59 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_60 ;
  wire \Using_FPGA.Native_61 ;
  wire \Using_FPGA.Native_62 ;
  wire \Using_FPGA.Native_63 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire compare_Instr;
  wire [0:31]ex_Result;
  wire [0:15]imm_Value;
  wire of_PipeRun;
  wire [27:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sext16;
  wire sext8;
  wire sync_reset;

  cpu_Operand_Select_Bit__parameterized12 \OpSelect_Bits[0].Operand_Select_Bit_I 
       (.Clk(Clk),
        .Compare_Instr_reg(Compare_Instr_reg),
        .D_31(D_31),
        .I3_6(I3_6),
        .Reg1_Data(Reg1_Data[0]),
        .S(S),
        .\Using_FPGA.Native (\Using_FPGA.Native_59 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_60 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_63 ),
        .compare_Instr(compare_Instr),
        .ex_Result(ex_Result[0]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[27]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10 \OpSelect_Bits[10].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_21(D_21),
        .Reg1_Data(Reg1_Data[10]),
        .\Using_FPGA.Native (\Using_FPGA.Native_39 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_40 ),
        .ex_Result(ex_Result[10]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[17]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_577 \OpSelect_Bits[11].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_20(D_20),
        .Reg1_Data(Reg1_Data[11]),
        .\Using_FPGA.Native (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_38 ),
        .ex_Result(ex_Result[11]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[16]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_578 \OpSelect_Bits[12].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_19(D_19),
        .Reg1_Data(Reg1_Data[12]),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_36 ),
        .ex_Result(ex_Result[12]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[15]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_579 \OpSelect_Bits[13].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_18(D_18),
        .Reg1_Data(Reg1_Data[13]),
        .\Using_FPGA.Native (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_34 ),
        .ex_Result(ex_Result[13]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[14]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_580 \OpSelect_Bits[14].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_17(D_17),
        .Reg1_Data(Reg1_Data[14]),
        .\Using_FPGA.Native (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_32 ),
        .ex_Result(ex_Result[14]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[13]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_581 \OpSelect_Bits[15].Operand_Select_Bit_I 
       (.Address(Address[8]),
        .Clk(Clk),
        .D_16(D_16),
        .Reg1_Data(Reg1_Data[15]),
        .\Using_FPGA.Native (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_30 ),
        .ex_Result(ex_Result[15]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[12]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized8 \OpSelect_Bits[16].Operand_Select_Bit_I 
       (.Address(Address[7]),
        .Clk(Clk),
        .D_15(D_15),
        .Reg1_Data(Reg1_Data[16]),
        .Sext(Sext),
        .\Using_FPGA.Native (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_63 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_11 ),
        .ex_Result(ex_Result[16]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[11]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized8_582 \OpSelect_Bits[17].Operand_Select_Bit_I 
       (.Address(Address[6]),
        .Clk(Clk),
        .D_14(D_14),
        .Reg1_Data(Reg1_Data[17]),
        .\Using_FPGA.Native (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_26 ),
        .ex_Result(ex_Result[17]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[10]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized8_583 \OpSelect_Bits[18].Operand_Select_Bit_I 
       (.Address(Address[5]),
        .Clk(Clk),
        .D_13(D_13),
        .Reg1_Data(Reg1_Data[18]),
        .\Using_FPGA.Native (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_24 ),
        .ex_Result(ex_Result[18]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[9]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized8_584 \OpSelect_Bits[19].Operand_Select_Bit_I 
       (.Address(Address[4]),
        .Clk(Clk),
        .D_12(D_12),
        .Reg1_Data(Reg1_Data[19]),
        .\Using_FPGA.Native (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[19]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[8]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_585 \OpSelect_Bits[1].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_30(D_30),
        .Reg1_Data(Reg1_Data[1]),
        .\Using_FPGA.Native (\Using_FPGA.Native_57 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_58 ),
        .ex_Result(ex_Result[1]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[26]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized8_586 \OpSelect_Bits[20].Operand_Select_Bit_I 
       (.Address(Address[3]),
        .Clk(Clk),
        .D_11(D_11),
        .Reg1_Data(Reg1_Data[20]),
        .\Using_FPGA.Native (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_20 ),
        .ex_Result(ex_Result[20]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[7]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized8_587 \OpSelect_Bits[21].Operand_Select_Bit_I 
       (.Address(Address[2]),
        .Clk(Clk),
        .D_10(D_10),
        .Reg1_Data(Reg1_Data[21]),
        .\Using_FPGA.Native (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_18 ),
        .ex_Result(ex_Result[21]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[6]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized8_588 \OpSelect_Bits[22].Operand_Select_Bit_I 
       (.Address(Address[1]),
        .Clk(Clk),
        .D_9(D_9),
        .Reg1_Data(Reg1_Data[22]),
        .\Using_FPGA.Native (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_16 ),
        .ex_Result(ex_Result[22]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[5]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized8_589 \OpSelect_Bits[23].Operand_Select_Bit_I 
       (.Address(Address[0]),
        .Clk(Clk),
        .D_8(D_8),
        .Reg1_Data(Reg1_Data[23]),
        .\Using_FPGA.Native (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_14 ),
        .ex_Result(ex_Result[23]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[4]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit \OpSelect_Bits[24].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_7(D_7),
        .I3_5(I3_5),
        .Reg1_Data(Reg1_Data[24]),
        .\Using_FPGA.Native (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_61 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_63 ),
        .ex_Result(ex_Result[24]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[3]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sext8(sext8),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit_590 \OpSelect_Bits[25].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_6(D_6),
        .I3_4(I3_4),
        .Reg1_Data(Reg1_Data[25]),
        .\Using_FPGA.Native (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_10 ),
        .ex_Result(ex_Result[25]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[2]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized6 \OpSelect_Bits[26].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_5(D_5),
        .I3_3(I3_3),
        .Reg1_Data(Reg1_Data[26]),
        .\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_8 ),
        .ex_Result(ex_Result[26]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[1]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized4 \OpSelect_Bits[27].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_4(D_4),
        .I3_2(I3_2),
        .Reg1_Data(Reg1_Data[27]),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_6 ),
        .ex_Result(ex_Result[27]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[0]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized2 \OpSelect_Bits[28].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_3(D_3),
        .I3_1(I3_1),
        .Reg1_Data(Reg1_Data[28]),
        .Shifted(Shifted),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .ex_Result(ex_Result[28]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit_591 \OpSelect_Bits[29].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_2(D_2),
        .I3_0(I3_0),
        .Op2(Op2),
        .Reg1_Data(Reg1_Data[29]),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .ex_Result(ex_Result[29]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_592 \OpSelect_Bits[2].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_29(D_29),
        .Reg1_Data(Reg1_Data[2]),
        .\Using_FPGA.Native (\Using_FPGA.Native_55 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_56 ),
        .ex_Result(ex_Result[2]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[25]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit_593 \OpSelect_Bits[30].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_1(D_1),
        .I3(I3),
        .Reg1_Data(Reg1_Data[30]),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_62 ),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[31].Operand_Select_Bit_I_n_1 ),
        .ex_Result(ex_Result[30]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit_594 \OpSelect_Bits[31].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_0(D_0),
        .EX_Op2(EX_Op2),
        .Op1_Logic(Op1_Logic),
        .Reg1_Data(Reg1_Data[31]),
        .\Using_FPGA.Native (\OpSelect_Bits[31].Operand_Select_Bit_I_n_1 ),
        .ex_Result(ex_Result[31]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_595 \OpSelect_Bits[3].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_28(D_28),
        .Reg1_Data(Reg1_Data[3]),
        .\Using_FPGA.Native (\Using_FPGA.Native_53 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_54 ),
        .ex_Result(ex_Result[3]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[24]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_596 \OpSelect_Bits[4].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_27(D_27),
        .Reg1_Data(Reg1_Data[4]),
        .\Using_FPGA.Native (\Using_FPGA.Native_51 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_52 ),
        .ex_Result(ex_Result[4]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[23]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_597 \OpSelect_Bits[5].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_26(D_26),
        .Reg1_Data(Reg1_Data[5]),
        .\Using_FPGA.Native (\Using_FPGA.Native_49 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_50 ),
        .ex_Result(ex_Result[5]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[22]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_598 \OpSelect_Bits[6].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_25(D_25),
        .Reg1_Data(Reg1_Data[6]),
        .\Using_FPGA.Native (\Using_FPGA.Native_47 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_48 ),
        .ex_Result(ex_Result[6]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[21]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_599 \OpSelect_Bits[7].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_24(D_24),
        .Reg1_Data(Reg1_Data[7]),
        .\Using_FPGA.Native (\Using_FPGA.Native_45 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_46 ),
        .ex_Result(ex_Result[7]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[20]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_600 \OpSelect_Bits[8].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_23(D_23),
        .Reg1_Data(Reg1_Data[8]),
        .\Using_FPGA.Native (\Using_FPGA.Native_43 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_44 ),
        .ex_Result(ex_Result[8]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[19]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  cpu_Operand_Select_Bit__parameterized10_601 \OpSelect_Bits[9].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_22(D_22),
        .Reg1_Data(Reg1_Data[9]),
        .\Using_FPGA.Native (\Using_FPGA.Native_41 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_42 ),
        .ex_Result(ex_Result[9]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[18]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[0] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[0]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [15]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[10] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[10]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[11] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[11]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[12] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[12]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[13] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[13]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[14] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[14]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[15] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[15]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[1]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[2] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[2]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[3] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[3]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[4] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[4]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [11]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[5] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[5]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[6] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[6]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[7] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[7]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[8] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[8]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [7]),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Size_17to32.imm_Reg_reg[9] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[9]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [6]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    Clk,
    D_7,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_5,
    opsel1_SPR,
    \Using_FPGA.Native_2 ,
    sext8);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_7;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_5;
  input opsel1_SPR;
  input \Using_FPGA.Native_2 ;
  input sext8;

  wire Clk;
  wire D_7;
  wire I3_5;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sext8;
  wire sync_reset;

  cpu_MB_LUT6_2_661 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_5(I3_5),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_662 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sext8(sext8),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_663 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_664 Op2_DFF
       (.Clk(Clk),
        .D_7(D_7),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit_590
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_6,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_4,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_6;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_4;
  input opsel1_SPR;

  wire Clk;
  wire D_6;
  wire I3_4;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_657 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_4(I3_4),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_658 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_659 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_660 Op2_DFF
       (.Clk(Clk),
        .D_6(D_6),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit_591
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Op2,
    sync_reset,
    of_PipeRun,
    Clk,
    D_2,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_0,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output Op2;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_2;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_0;
  input opsel1_SPR;

  wire Clk;
  wire D_2;
  wire I3_0;
  wire Op2;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_641 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_0(I3_0),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_642 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_643 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_644 Op2_DFF
       (.Clk(Clk),
        .D_2(D_2),
        .Op2(Op2),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit_593
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    Clk,
    D_1,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3,
    opsel1_SPR,
    \Using_FPGA.Native_2 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_1;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3;
  input opsel1_SPR;
  input \Using_FPGA.Native_2 ;

  wire Clk;
  wire D_1;
  wire I3;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_633 \Both_PC_and_MSR.Op1_LUT6 
       (.I3(I3),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_634 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_635 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_636 Op2_DFF
       (.Clk(Clk),
        .D_1(D_1),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit_594
   (Op1_Logic,
    \Using_FPGA.Native ,
    EX_Op2,
    sync_reset,
    of_PipeRun,
    Clk,
    D_0,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output Op1_Logic;
  output \Using_FPGA.Native ;
  output EX_Op2;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_0;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_0;
  wire EX_Op2;
  wire Op1_Logic;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_629 \Both_PC_and_MSR.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_630 Op1_DFF
       (.Clk(Clk),
        .Op1_Logic(Op1_Logic),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_631 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_632 Op2_DFF
       (.Clk(Clk),
        .D_0(D_0),
        .EX_Op2(EX_Op2),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_21,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_21;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_21;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_721 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_722 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_723 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_724 Op2_DFF
       (.Clk(Clk),
        .D_21(D_21),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_577
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_20,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_20;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_20;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_717 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_718 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_719 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_720 Op2_DFF
       (.Clk(Clk),
        .D_20(D_20),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_578
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_19,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_19;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_19;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_713 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_714 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_715 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_716 Op2_DFF
       (.Clk(Clk),
        .D_19(D_19),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_579
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_18,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_18;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_18;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_709 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_710 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_711 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_712 Op2_DFF
       (.Clk(Clk),
        .D_18(D_18),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_580
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_17,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_17;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_17;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_705 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_706 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_707 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_708 Op2_DFF
       (.Clk(Clk),
        .D_17(D_17),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_581
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_16,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_16;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire Clk;
  wire D_16;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_701 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_702 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_703 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_704 Op2_DFF
       (.Clk(Clk),
        .D_16(D_16),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_585
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_30,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_30;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_30;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_681 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_682 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_683 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_684 Op2_DFF
       (.Clk(Clk),
        .D_30(D_30),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_592
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_29,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_29;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_29;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_637 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_638 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_639 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_640 Op2_DFF
       (.Clk(Clk),
        .D_29(D_29),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_595
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_28,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_28;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_28;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_625 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_626 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_627 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_628 Op2_DFF
       (.Clk(Clk),
        .D_28(D_28),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_596
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_27,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_27;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_27;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_621 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_622 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_623 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_624 Op2_DFF
       (.Clk(Clk),
        .D_27(D_27),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_597
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_26,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_26;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_26;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_617 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_618 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_619 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_620 Op2_DFF
       (.Clk(Clk),
        .D_26(D_26),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_598
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_25,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_25;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_25;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_613 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_614 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_615 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_616 Op2_DFF
       (.Clk(Clk),
        .D_25(D_25),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_599
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_24,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_24;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_24;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_609 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_610 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_611 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_612 Op2_DFF
       (.Clk(Clk),
        .D_24(D_24),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_600
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_23,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_23;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_23;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_605 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_606 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_607 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_608 Op2_DFF
       (.Clk(Clk),
        .D_23(D_23),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized10_601
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_22,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_22;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire Clk;
  wire D_22;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_602 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_603 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_604 Op2_DFF
       (.Clk(Clk),
        .D_22(D_22),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized12
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    S,
    Compare_Instr_reg,
    sync_reset,
    of_PipeRun,
    Clk,
    D_31,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_6,
    opsel1_SPR,
    compare_Instr,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  output S;
  output Compare_Instr_reg;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_31;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_6;
  input opsel1_SPR;
  input compare_Instr;
  input \Using_FPGA.Native_1 ;

  wire Clk;
  wire Compare_Instr_reg;
  wire D_31;
  wire I3_6;
  wire [0:0]Reg1_Data;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire compare_Instr;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_725 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_6(I3_6),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_726 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_727 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_728 Op2_DFF
       (.Clk(Clk),
        .Compare_Instr_reg(Compare_Instr_reg),
        .D_31(D_31),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .compare_Instr(compare_Instr),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized2
   (Shifted,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    Clk,
    D_3,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_1,
    opsel1_SPR);
  output Shifted;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_3;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_1;
  input opsel1_SPR;

  wire Clk;
  wire D_3;
  wire I3_1;
  wire [0:0]Reg1_Data;
  wire Shifted;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_645 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_1(I3_1),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_646 Op1_DFF
       (.Clk(Clk),
        .Shifted(Shifted),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_647 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_648 Op2_DFF
       (.Clk(Clk),
        .D_3(D_3),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized4
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_4,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_2,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_4;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_2;
  input opsel1_SPR;

  wire Clk;
  wire D_4;
  wire I3_2;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_649 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_2(I3_2),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_650 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_651 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_652 Op2_DFF
       (.Clk(Clk),
        .D_4(D_4),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized6
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_5,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_3,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_5;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_3;
  input opsel1_SPR;

  wire Clk;
  wire D_5;
  wire I3_3;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_653 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_3(I3_3),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_654 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_655 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_656 Op2_DFF
       (.Clk(Clk),
        .D_5(D_5),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized8
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Sext,
    sync_reset,
    of_PipeRun,
    Clk,
    D_15,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR,
    sext16,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    sext8);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  output Sext;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_15;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;
  input sext16;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input sext8;

  wire [0:0]Address;
  wire Clk;
  wire D_15;
  wire [0:0]Reg1_Data;
  wire Sext;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sext16;
  wire sext8;
  wire sync_reset;

  cpu_MB_LUT6_2_697 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_698 Op1_DFF
       (.Clk(Clk),
        .Sext(Sext),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_699 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_700 Op2_DFF
       (.Clk(Clk),
        .D_15(D_15),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized8_582
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_14,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_14;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire Clk;
  wire D_14;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_693 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_694 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_695 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_696 Op2_DFF
       (.Clk(Clk),
        .D_14(D_14),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized8_583
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_13,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_13;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire Clk;
  wire D_13;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_689 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_690 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_691 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_692 Op2_DFF
       (.Clk(Clk),
        .D_13(D_13),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized8_584
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_12,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_12;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire Clk;
  wire D_12;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_685 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_686 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_687 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_688 Op2_DFF
       (.Clk(Clk),
        .D_12(D_12),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized8_586
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_11,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_11;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire Clk;
  wire D_11;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_677 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_678 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_679 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_680 Op2_DFF
       (.Clk(Clk),
        .D_11(D_11),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized8_587
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_10,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_10;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire Clk;
  wire D_10;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_673 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_674 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_675 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_676 Op2_DFF
       (.Clk(Clk),
        .D_10(D_10),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized8_588
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_9,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_9;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire Clk;
  wire D_9;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_669 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_670 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_671 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_672 Op2_DFF
       (.Clk(Clk),
        .D_9(D_9),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module cpu_Operand_Select_Bit__parameterized8_589
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    sync_reset,
    of_PipeRun,
    Clk,
    D_8,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_8;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire Clk;
  wire D_8;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  cpu_MB_LUT6_2_665 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  cpu_microblaze_v11_0_0_MB_FDRE_666 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_MB_FDRE_667 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  cpu_MB_FDE_668 Op2_DFF
       (.Clk(Clk),
        .D_8(D_8),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit
   (\Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_1 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1);
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input PC_Write;
  input lopt;
  output lopt_1;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_LO_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_xor_Sum_UNCONNECTED;

  assign lopt_1 = xor_Sum;
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_571 MUXCY_XOR_I
       (.LO(NLW_MUXCY_XOR_I_LO_UNCONNECTED),
        .lopt(lopt),
        .pc_Sum(pc_Sum),
        .xor_Sum(NLW_MUXCY_XOR_I_xor_Sum_UNCONNECTED));
  cpu_MB_LUT4__parameterized23_572 NewPC_Mux
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump),
        .pc_Sum(pc_Sum));
  cpu_MB_FDE_573 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_574 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_575 SUM_I
       (.pc_I(pc_I),
        .xor_Sum(xor_Sum));
  cpu_microblaze_v11_0_0_MB_FDSE_576 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_476
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_1 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_LO_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_S_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_UNCONNECTED;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_565 MUXCY_XOR_I
       (.Carry_Out(NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED),
        .LO(NLW_MUXCY_XOR_I_LO_UNCONNECTED),
        .O(pc_Sum),
        .S(NLW_MUXCY_XOR_I_S_UNCONNECTED),
        .lopt(NLW_MUXCY_XOR_I_lopt_UNCONNECTED),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  cpu_MB_LUT4__parameterized23_566 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  cpu_MB_FDE_567 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_568 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_569 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_570 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_477
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_1 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input PC_Write;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  output lopt_4;
  input lopt_5;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_559 MUXCY_XOR_I
       (.Carry_Out(NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(NLW_MUXCY_XOR_I_lopt_UNCONNECTED),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5));
  cpu_MB_LUT4__parameterized23_560 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  cpu_MB_FDE_561 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_562 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_563 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_564 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_478
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_1 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_LO_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_S_UNCONNECTED;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_553 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(NLW_MUXCY_XOR_I_LO_UNCONNECTED),
        .O(pc_Sum),
        .S(NLW_MUXCY_XOR_I_S_UNCONNECTED),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  cpu_MB_LUT4__parameterized23_554 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  cpu_MB_FDE_555 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_556 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_557 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_558 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_479
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_1 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_LO_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_S_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_UNCONNECTED;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_547 MUXCY_XOR_I
       (.Carry_Out(NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED),
        .LO(NLW_MUXCY_XOR_I_LO_UNCONNECTED),
        .O(pc_Sum),
        .S(NLW_MUXCY_XOR_I_S_UNCONNECTED),
        .lopt(NLW_MUXCY_XOR_I_lopt_UNCONNECTED),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  cpu_MB_LUT4__parameterized23_548 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  cpu_MB_FDE_549 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_550 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_551 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_552 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_480
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_1 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_LO_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_S_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_UNCONNECTED;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_541 MUXCY_XOR_I
       (.Carry_Out(NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED),
        .LO(NLW_MUXCY_XOR_I_LO_UNCONNECTED),
        .O(pc_Sum),
        .S(NLW_MUXCY_XOR_I_S_UNCONNECTED),
        .lopt(NLW_MUXCY_XOR_I_lopt_UNCONNECTED),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  cpu_MB_LUT4__parameterized23_542 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  cpu_MB_FDE_543 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_544 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_545 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_546 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_481
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_1 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input PC_Write;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_3_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_535 MUXCY_XOR_I
       (.Carry_Out(NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(NLW_MUXCY_XOR_I_lopt_UNCONNECTED),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(NLW_MUXCY_XOR_I_lopt_3_UNCONNECTED),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  cpu_MB_LUT4__parameterized23_536 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  cpu_MB_FDE_537 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_538 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_539 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_540 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_482
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_1 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_LO_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_S_UNCONNECTED;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_529 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(NLW_MUXCY_XOR_I_LO_UNCONNECTED),
        .O(pc_Sum),
        .S(NLW_MUXCY_XOR_I_S_UNCONNECTED),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  cpu_MB_LUT4__parameterized23_530 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  cpu_MB_FDE_531 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_532 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_533 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_534 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_483
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_1 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_LO_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_S_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_UNCONNECTED;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_523 MUXCY_XOR_I
       (.Carry_Out(NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED),
        .LO(NLW_MUXCY_XOR_I_LO_UNCONNECTED),
        .O(pc_Sum),
        .S(NLW_MUXCY_XOR_I_S_UNCONNECTED),
        .lopt(NLW_MUXCY_XOR_I_lopt_UNCONNECTED),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  cpu_MB_LUT4__parameterized23_524 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  cpu_MB_FDE_525 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_526 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_527 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_528 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_484
   (I3,
    Address,
    Carry_Out,
    \Using_FPGA.Native ,
    PC_EX_i,
    \Using_FPGA.Native_0 ,
    LO,
    \Using_FPGA.Native_1 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_2 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output I3;
  output [0:0]Address;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input LO;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input sync_reset;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3;
  wire IReady;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire jump;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_LO_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_S_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_UNCONNECTED;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_517 MUXCY_XOR_I
       (.Carry_Out(NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED),
        .LO(NLW_MUXCY_XOR_I_LO_UNCONNECTED),
        .O(pc_Sum),
        .S(NLW_MUXCY_XOR_I_S_UNCONNECTED),
        .lopt(NLW_MUXCY_XOR_I_lopt_UNCONNECTED),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  cpu_MB_LUT4__parameterized23_518 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .jump(jump));
  cpu_MB_FDE_519 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_520 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3(I3),
        .IReady(IReady),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_521 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_522 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_485
   (I3_0,
    Address,
    Carry_Out,
    \Using_FPGA.Native ,
    PC_EX_i,
    \Using_FPGA.Native_0 ,
    LO,
    \Using_FPGA.Native_1 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_2 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output I3_0;
  output [0:0]Address;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input LO;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input sync_reset;
  input PC_Write;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_0;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire jump;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_3_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_511 MUXCY_XOR_I
       (.Carry_Out(NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(NLW_MUXCY_XOR_I_lopt_UNCONNECTED),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(NLW_MUXCY_XOR_I_lopt_3_UNCONNECTED),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  cpu_MB_LUT4__parameterized23_512 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .jump(jump));
  cpu_MB_FDE_513 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_514 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3_0(I3_0),
        .IReady(IReady),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_515 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_516 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_486
   (I3_1,
    Address,
    Carry_Out,
    \Using_FPGA.Native ,
    PC_EX_i,
    \Using_FPGA.Native_0 ,
    LO,
    \Using_FPGA.Native_1 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_2 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output I3_1;
  output [0:0]Address;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input LO;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input sync_reset;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I3_1;
  wire IReady;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_LO_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_S_UNCONNECTED;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_505 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(NLW_MUXCY_XOR_I_LO_UNCONNECTED),
        .O(pc_Sum),
        .S(NLW_MUXCY_XOR_I_S_UNCONNECTED),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  cpu_MB_LUT4__parameterized23_506 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .jump(jump));
  cpu_MB_FDE_507 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_508 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3_1(I3_1),
        .IReady(IReady),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_509 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_510 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_487
   (I3_2,
    Address,
    Carry_Out,
    \Using_FPGA.Native ,
    PC_EX_i,
    \Using_FPGA.Native_0 ,
    LO,
    \Using_FPGA.Native_1 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_2 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output I3_2;
  output [0:0]Address;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input LO;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input sync_reset;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_2;
  wire IReady;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire jump;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_LO_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_S_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_UNCONNECTED;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_499 MUXCY_XOR_I
       (.Carry_Out(NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED),
        .LO(NLW_MUXCY_XOR_I_LO_UNCONNECTED),
        .O(pc_Sum),
        .S(NLW_MUXCY_XOR_I_S_UNCONNECTED),
        .lopt(NLW_MUXCY_XOR_I_lopt_UNCONNECTED),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  cpu_MB_LUT4__parameterized23_500 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .jump(jump));
  cpu_MB_FDE_501 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_502 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3_2(I3_2),
        .IReady(IReady),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_503 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_504 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_488
   (D,
    PC_EX_i,
    Carry_Out,
    \Using_FPGA.Native ,
    Address,
    \data_rd_reg_reg[28] ,
    msr_I,
    \data_rd_reg_reg[28]_0 ,
    register_write,
    \Using_FPGA.Native_0 ,
    LO,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_1 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output [0:0]D;
  output [0:0]PC_EX_i;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  input \data_rd_reg_reg[28] ;
  input [0:0]msr_I;
  input \data_rd_reg_reg[28]_0 ;
  input register_write;
  input [1:0]\Using_FPGA.Native_0 ;
  input LO;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input PC_Write;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire [0:0]D;
  wire IReady;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \data_rd_reg_reg[28] ;
  wire \data_rd_reg_reg[28]_0 ;
  wire jump;
  wire lopt_1;
  wire \^lopt_2 ;
  wire [0:0]msr_I;
  wire pc_I;
  wire pc_Sum;
  wire register_write;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_LO_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_S_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_UNCONNECTED;
  wire [0:0]NLW_PC_EX_DFF_PC_EX_i_UNCONNECTED;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_493 MUXCY_XOR_I
       (.Carry_Out(NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED),
        .LO(NLW_MUXCY_XOR_I_LO_UNCONNECTED),
        .O(pc_Sum),
        .S(NLW_MUXCY_XOR_I_S_UNCONNECTED),
        .lopt(NLW_MUXCY_XOR_I_lopt_UNCONNECTED),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  cpu_MB_LUT4__parameterized23_494 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 [1]),
        .jump(jump));
  cpu_MB_FDE_495 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .D(D),
        .PC_EX_i(NLW_PC_EX_DFF_PC_EX_i_UNCONNECTED[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\data_rd_reg_reg[28] (\data_rd_reg_reg[28] ),
        .\data_rd_reg_reg[28]_0 (\data_rd_reg_reg[28]_0 ),
        .\data_rd_reg_reg[28]_1 (\Using_FPGA.Native_0 [0]),
        .msr_I(msr_I),
        .register_write(register_write));
  cpu_microblaze_v11_0_0_MB_SRL16E_496 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21_497 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_498 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module cpu_PC_Bit_489
   (D,
    PC_EX_i,
    Carry_Out,
    \Using_FPGA.Native ,
    Address,
    \data_rd_reg_reg[29] ,
    msr_I,
    \data_rd_reg_reg[29]_0 ,
    register_write,
    \Using_FPGA.Native_0 ,
    DI,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_1 ,
    sync_reset,
    PC_Write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output [0:0]D;
  output [0:0]PC_EX_i;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  input \data_rd_reg_reg[29] ;
  input [0:0]msr_I;
  input \data_rd_reg_reg[29]_0 ;
  input register_write;
  input [1:0]\Using_FPGA.Native_0 ;
  input DI;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input PC_Write;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire [0:0]D;
  wire DI;
  wire IReady;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[29]_0 ;
  wire jump;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]msr_I;
  wire pc_I;
  wire pc_Sum;
  wire register_write;
  wire sync_reset;
  wire xor_Sum;
  wire NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_UNCONNECTED;
  wire NLW_MUXCY_XOR_I_lopt_3_UNCONNECTED;
  wire [0:0]NLW_PC_EX_DFF_PC_EX_i_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_490 MUXCY_XOR_I
       (.Carry_Out(NLW_MUXCY_XOR_I_Carry_Out_UNCONNECTED),
        .DI(DI),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(NLW_MUXCY_XOR_I_lopt_UNCONNECTED),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(NLW_MUXCY_XOR_I_lopt_3_UNCONNECTED),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  cpu_MB_LUT4__parameterized23 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 [1]),
        .jump(jump));
  cpu_MB_FDE PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .D(D),
        .PC_EX_i(NLW_PC_EX_DFF_PC_EX_i_UNCONNECTED[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\data_rd_reg_reg[29] (\data_rd_reg_reg[29] ),
        .\data_rd_reg_reg[29]_0 (\data_rd_reg_reg[29]_0 ),
        .\data_rd_reg_reg[29]_1 (\Using_FPGA.Native_0 [0]),
        .msr_I(msr_I),
        .register_write(register_write));
  cpu_microblaze_v11_0_0_MB_SRL16E_491 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  cpu_MB_LUT4__parameterized21 SUM_I
       (.DI(DI),
        .S(xor_Sum),
        .pc_I(pc_I));
  cpu_microblaze_v11_0_0_MB_FDSE_492 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Module" *) 
module cpu_PC_Module
   (I3,
    Address,
    I3_0,
    I3_1,
    I3_2,
    D,
    PC_EX_i,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \data_rd_reg_reg[29] ,
    msr_I,
    \data_rd_reg_reg[29]_0 ,
    register_write,
    \Using_FPGA.Native_1 ,
    jump,
    IReady,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native_2 ,
    sync_reset,
    PC_Write,
    DI);
  output I3;
  output [14:0]Address;
  output I3_0;
  output I3_1;
  output I3_2;
  output [1:0]D;
  output [14:0]PC_EX_i;
  output [14:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \data_rd_reg_reg[29] ;
  input [1:0]msr_I;
  input \data_rd_reg_reg[29]_0 ;
  input register_write;
  input [16:0]\Using_FPGA.Native_1 ;
  input jump;
  input IReady;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input sync_reset;
  input PC_Write;
  input DI;

  wire [14:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_10;
  wire Carry_14;
  wire Carry_6;
  wire Clk;
  wire [1:0]D;
  wire DI;
  wire I3;
  wire I3_0;
  wire I3_1;
  wire I3_2;
  wire IReady;
  wire [14:0]PC_EX_i;
  wire PC_Write;
  wire [14:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [16:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[29]_0 ;
  wire jump;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_13;
  wire lopt_14;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_25;
  wire lopt_26;
  wire lopt_28;
  wire lopt_29;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [1:0]msr_I;
  wire register_write;
  wire sync_reset;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[15].PC_Bit_I_LO_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[16].PC_Bit_I_Carry_Out_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[16].PC_Bit_I_LO_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[16].PC_Bit_I_lopt_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[17].PC_Bit_I_Carry_Out_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[17].PC_Bit_I_lopt_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[18].PC_Bit_I_LO_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[19].PC_Bit_I_Carry_Out_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[19].PC_Bit_I_LO_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[19].PC_Bit_I_lopt_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[20].PC_Bit_I_Carry_Out_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[20].PC_Bit_I_LO_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[20].PC_Bit_I_lopt_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[21].PC_Bit_I_Carry_Out_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[21].PC_Bit_I_lopt_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[21].PC_Bit_I_lopt_3_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[22].PC_Bit_I_LO_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[23].PC_Bit_I_Carry_Out_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[23].PC_Bit_I_LO_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[23].PC_Bit_I_lopt_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[24].PC_Bit_I_Carry_Out_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[24].PC_Bit_I_LO_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[24].PC_Bit_I_lopt_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[25].PC_Bit_I_Carry_Out_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[25].PC_Bit_I_lopt_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[25].PC_Bit_I_lopt_3_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[26].PC_Bit_I_LO_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[27].PC_Bit_I_Carry_Out_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[27].PC_Bit_I_LO_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[27].PC_Bit_I_lopt_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I_Carry_Out_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I_LO_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I_lopt_UNCONNECTED ;
  wire [0:0]\NLW_Not_All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I_PC_EX_i_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I_Carry_Out_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I_lopt_UNCONNECTED ;
  wire \NLW_Not_All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I_lopt_3_UNCONNECTED ;
  wire [0:0]\NLW_Not_All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I_PC_EX_i_UNCONNECTED ;

  cpu_PC_Bit \Not_All_Bits.Using_FPGA.PC_GEN[15].PC_Bit_I 
       (.Address(Address[14]),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .LO(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[15].PC_Bit_I_LO_UNCONNECTED ),
        .PC_EX_i(PC_EX_i[14]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [14]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [16]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_40),
        .lopt_1(lopt_41),
        .sync_reset(sync_reset));
  cpu_PC_Bit_476 \Not_All_Bits.Using_FPGA.PC_GEN[16].PC_Bit_I 
       (.Address(Address[13]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[16].PC_Bit_I_Carry_Out_UNCONNECTED ),
        .Clk(Clk),
        .IReady(IReady),
        .LO(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[16].PC_Bit_I_LO_UNCONNECTED ),
        .PC_EX_i(PC_EX_i[13]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [13]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [15]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[16].PC_Bit_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_37),
        .lopt_2(lopt_38),
        .lopt_3(lopt_39),
        .sync_reset(sync_reset));
  cpu_PC_Bit_477 \Not_All_Bits.Using_FPGA.PC_GEN[17].PC_Bit_I 
       (.Address(Address[12]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[17].PC_Bit_I_Carry_Out_UNCONNECTED ),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_14),
        .PC_EX_i(PC_EX_i[12]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [12]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [14]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[17].PC_Bit_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_37),
        .lopt_2(lopt_38),
        .lopt_3(lopt_39),
        .lopt_4(lopt_40),
        .lopt_5(lopt_41),
        .sync_reset(sync_reset));
  cpu_PC_Bit_478 \Not_All_Bits.Using_FPGA.PC_GEN[18].PC_Bit_I 
       (.Address(Address[11]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_14),
        .Clk(Clk),
        .IReady(IReady),
        .LO(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[18].PC_Bit_I_LO_UNCONNECTED ),
        .PC_EX_i(PC_EX_i[11]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [11]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [13]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_30),
        .lopt_1(lopt_31),
        .lopt_2(lopt_32),
        .lopt_3(lopt_35),
        .sync_reset(sync_reset));
  cpu_PC_Bit_479 \Not_All_Bits.Using_FPGA.PC_GEN[19].PC_Bit_I 
       (.Address(Address[10]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[19].PC_Bit_I_Carry_Out_UNCONNECTED ),
        .Clk(Clk),
        .IReady(IReady),
        .LO(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[19].PC_Bit_I_LO_UNCONNECTED ),
        .PC_EX_i(PC_EX_i[10]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [10]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [12]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[19].PC_Bit_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_28),
        .lopt_2(lopt_29),
        .lopt_3(lopt_34),
        .sync_reset(sync_reset));
  cpu_PC_Bit_480 \Not_All_Bits.Using_FPGA.PC_GEN[20].PC_Bit_I 
       (.Address(Address[9]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[20].PC_Bit_I_Carry_Out_UNCONNECTED ),
        .Clk(Clk),
        .IReady(IReady),
        .LO(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[20].PC_Bit_I_LO_UNCONNECTED ),
        .PC_EX_i(PC_EX_i[9]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [9]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [11]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[20].PC_Bit_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_25),
        .lopt_2(lopt_26),
        .lopt_3(lopt_33),
        .sync_reset(sync_reset));
  cpu_PC_Bit_481 \Not_All_Bits.Using_FPGA.PC_GEN[21].PC_Bit_I 
       (.Address(Address[8]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[21].PC_Bit_I_Carry_Out_UNCONNECTED ),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_10),
        .PC_EX_i(PC_EX_i[8]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [8]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [10]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[21].PC_Bit_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_25),
        .lopt_10(lopt_34),
        .lopt_11(lopt_35),
        .lopt_2(lopt_26),
        .lopt_3(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[21].PC_Bit_I_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_28),
        .lopt_5(lopt_29),
        .lopt_6(lopt_30),
        .lopt_7(lopt_31),
        .lopt_8(lopt_32),
        .lopt_9(lopt_33),
        .sync_reset(sync_reset));
  cpu_PC_Bit_482 \Not_All_Bits.Using_FPGA.PC_GEN[22].PC_Bit_I 
       (.Address(Address[7]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_10),
        .Clk(Clk),
        .IReady(IReady),
        .LO(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[22].PC_Bit_I_LO_UNCONNECTED ),
        .PC_EX_i(PC_EX_i[7]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [7]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [9]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(lopt_20),
        .lopt_3(lopt_23),
        .sync_reset(sync_reset));
  cpu_PC_Bit_483 \Not_All_Bits.Using_FPGA.PC_GEN[23].PC_Bit_I 
       (.Address(Address[6]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[23].PC_Bit_I_Carry_Out_UNCONNECTED ),
        .Clk(Clk),
        .IReady(IReady),
        .LO(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[23].PC_Bit_I_LO_UNCONNECTED ),
        .PC_EX_i(PC_EX_i[6]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [6]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [8]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[23].PC_Bit_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_16),
        .lopt_2(lopt_17),
        .lopt_3(lopt_22),
        .sync_reset(sync_reset));
  cpu_PC_Bit_484 \Not_All_Bits.Using_FPGA.PC_GEN[24].PC_Bit_I 
       (.Address(Address[5]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[24].PC_Bit_I_Carry_Out_UNCONNECTED ),
        .Clk(Clk),
        .I3(I3),
        .IReady(IReady),
        .LO(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[24].PC_Bit_I_LO_UNCONNECTED ),
        .PC_EX_i(PC_EX_i[5]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [5]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 [7]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[24].PC_Bit_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14),
        .lopt_3(lopt_21),
        .sync_reset(sync_reset));
  cpu_PC_Bit_485 \Not_All_Bits.Using_FPGA.PC_GEN[25].PC_Bit_I 
       (.Address(Address[4]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[25].PC_Bit_I_Carry_Out_UNCONNECTED ),
        .Clk(Clk),
        .I3_0(I3_0),
        .IReady(IReady),
        .LO(Carry_6),
        .PC_EX_i(PC_EX_i[4]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [4]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 [6]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[25].PC_Bit_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_13),
        .lopt_10(lopt_22),
        .lopt_11(lopt_23),
        .lopt_2(lopt_14),
        .lopt_3(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[25].PC_Bit_I_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_16),
        .lopt_5(lopt_17),
        .lopt_6(lopt_18),
        .lopt_7(lopt_19),
        .lopt_8(lopt_20),
        .lopt_9(lopt_21),
        .sync_reset(sync_reset));
  cpu_PC_Bit_486 \Not_All_Bits.Using_FPGA.PC_GEN[26].PC_Bit_I 
       (.Address(Address[3]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_6),
        .Clk(Clk),
        .I3_1(I3_1),
        .IReady(IReady),
        .LO(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[26].PC_Bit_I_LO_UNCONNECTED ),
        .PC_EX_i(PC_EX_i[3]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [3]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 [5]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_11),
        .sync_reset(sync_reset));
  cpu_PC_Bit_487 \Not_All_Bits.Using_FPGA.PC_GEN[27].PC_Bit_I 
       (.Address(Address[2]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[27].PC_Bit_I_Carry_Out_UNCONNECTED ),
        .Clk(Clk),
        .I3_2(I3_2),
        .IReady(IReady),
        .LO(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[27].PC_Bit_I_LO_UNCONNECTED ),
        .PC_EX_i(PC_EX_i[2]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [2]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 [4]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[27].PC_Bit_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lopt_3(lopt_10),
        .sync_reset(sync_reset));
  cpu_PC_Bit_488 \Not_All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I 
       (.Address(Address[1]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I_Carry_Out_UNCONNECTED ),
        .Clk(Clk),
        .D(D[1]),
        .IReady(IReady),
        .LO(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I_LO_UNCONNECTED ),
        .PC_EX_i(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I_PC_EX_i_UNCONNECTED [0]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [1]),
        .\Using_FPGA.Native_0 ({\Using_FPGA.Native_1 [3],\Using_FPGA.Native_1 [1]}),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\data_rd_reg_reg[28] (\data_rd_reg_reg[29] ),
        .\data_rd_reg_reg[28]_0 (\data_rd_reg_reg[29]_0 ),
        .jump(jump),
        .lopt(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_9),
        .msr_I(msr_I[1]),
        .register_write(register_write),
        .sync_reset(sync_reset));
  cpu_PC_Bit_489 \Not_All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I 
       (.Address(Address[0]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I_Carry_Out_UNCONNECTED ),
        .Clk(Clk),
        .D(D[0]),
        .DI(DI),
        .IReady(IReady),
        .PC_EX_i(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I_PC_EX_i_UNCONNECTED [0]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [0]),
        .\Using_FPGA.Native_0 ({\Using_FPGA.Native_1 [2],\Using_FPGA.Native_1 [0]}),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\data_rd_reg_reg[29] (\data_rd_reg_reg[29] ),
        .\data_rd_reg_reg[29]_0 (\data_rd_reg_reg[29]_0 ),
        .jump(jump),
        .lopt(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(\NLW_Not_All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9),
        .msr_I(msr_I[0]),
        .register_write(register_write),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PreFetch_Buffer" *) 
module cpu_PreFetch_Buffer
   (of_Valid_Raw,
    instr_OF,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    inHibit_EX_reg,
    \Using_FPGA.Native_4 ,
    doublet_i_reg,
    byte_i13_out,
    byte_i_reg,
    Sext16_reg,
    Sext8_reg,
    \Use_Async_Reset.sync_reset_reg ,
    mtsmsr_write_i_reg,
    \Use_Async_Reset.sync_reset_reg_0 ,
    of_mbar_decode,
    DI,
    buffer_Full,
    \Using_FPGA.Native_5 ,
    mbar_first,
    d_AS_I16_out,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    writing,
    \Using_FPGA.Native_11 ,
    E,
    \Using_FPGA.Native_12 ,
    enable_Interrupts_I,
    reset_BIP_I8_out,
    \Area_Debug_Control.normal_stop_cmd_hold_reg ,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    \Using_FPGA.Native_13 ,
    force1_i30_out,
    Reg_Test_Equal_i,
    Reg_Test_Equal_N_i7_out,
    use_Reg_Neg_DI_i27_out,
    force2_i,
    force_Val1_i28_out,
    use_Reg_Neg_S_i29_out,
    \Using_FPGA.Native_14 ,
    D_0,
    D_1,
    D_2,
    D_3,
    D_4,
    D_5,
    D_6,
    D_7,
    D_8,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    D_17,
    D_18,
    D_19,
    D_20,
    D_21,
    D_22,
    D_23,
    D_24,
    D_25,
    D_26,
    D_27,
    D_28,
    D_29,
    D_30,
    D_31,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    D_32,
    \Using_FPGA.Native_17 ,
    mbar_is_sleep0,
    dbg_pause_reg,
    \Use_Async_Reset.sync_reset_reg_1 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    R,
    Clk,
    CI,
    Y,
    \Using_FPGA.Native_21 ,
    inHibit_EX,
    IReady1_out,
    nonvalid_IFetch_n_reg,
    nonvalid_IFetch_n_reg_0,
    nonvalid_IFetch_n_reg_1,
    S93_out,
    take_Intr_Now_III,
    ex_Valid_reg,
    ex_Valid_reg_0,
    ex_Valid_reg_1,
    isdoublet,
    sync_reset,
    isbyte,
    sext16,
    Sext8_reg_0,
    Sext8_reg_1,
    \Using_FPGA.set_BIP_I_reg ,
    mtsmsr_write_i_reg_0,
    mbar_hold_I_reg,
    missed_IFetch,
    mul_Executing,
    I294_out,
    DReady0_out,
    jump_Carry2,
    trace_jump_taken_i_reg,
    ok_To_Stop,
    mul_Executing_reg,
    dbg_pause,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    \Using_FPGA.Native_43 ,
    \Using_FPGA.Native_44 ,
    \Using_FPGA.Native_45 ,
    \Using_FPGA.Native_46 ,
    \Using_FPGA.Native_47 ,
    \Using_FPGA.Native_48 ,
    \Using_FPGA.Native_49 ,
    \Using_FPGA.Native_50 ,
    \Using_FPGA.Native_51 ,
    \Using_FPGA.Native_52 ,
    \Using_FPGA.Native_53 ,
    \Using_FPGA.Native_54 ,
    \Using_FPGA.Native_55 ,
    \Using_FPGA.Native_56 ,
    take_Intr_Now_II,
    \Area_Debug_Control.dbg_brki_hit_i_2 ,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output of_Valid_Raw;
  output [10:0]instr_OF;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [18:0]D;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output inHibit_EX_reg;
  output \Using_FPGA.Native_4 ;
  output doublet_i_reg;
  output byte_i13_out;
  output byte_i_reg;
  output Sext16_reg;
  output Sext8_reg;
  output \Use_Async_Reset.sync_reset_reg ;
  output mtsmsr_write_i_reg;
  output \Use_Async_Reset.sync_reset_reg_0 ;
  output of_mbar_decode;
  output DI;
  output buffer_Full;
  output \Using_FPGA.Native_5 ;
  output mbar_first;
  output d_AS_I16_out;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output writing;
  output \Using_FPGA.Native_11 ;
  output [0:0]E;
  output \Using_FPGA.Native_12 ;
  output enable_Interrupts_I;
  output reset_BIP_I8_out;
  output \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  output \Using_FPGA.Native_13 ;
  output force1_i30_out;
  output Reg_Test_Equal_i;
  output Reg_Test_Equal_N_i7_out;
  output use_Reg_Neg_DI_i27_out;
  output force2_i;
  output force_Val1_i28_out;
  output use_Reg_Neg_S_i29_out;
  output \Using_FPGA.Native_14 ;
  output D_0;
  output D_1;
  output D_2;
  output D_3;
  output D_4;
  output D_5;
  output D_6;
  output D_7;
  output D_8;
  output D_9;
  output D_10;
  output D_11;
  output D_12;
  output D_13;
  output D_14;
  output D_15;
  output D_16;
  output D_17;
  output D_18;
  output D_19;
  output D_20;
  output D_21;
  output D_22;
  output D_23;
  output D_24;
  output D_25;
  output D_26;
  output D_27;
  output D_28;
  output D_29;
  output D_30;
  output D_31;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output D_32;
  output \Using_FPGA.Native_17 ;
  output mbar_is_sleep0;
  output dbg_pause_reg;
  output [1:0]\Use_Async_Reset.sync_reset_reg_1 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  input R;
  input Clk;
  input CI;
  input [0:31]Y;
  input \Using_FPGA.Native_21 ;
  input inHibit_EX;
  input IReady1_out;
  input nonvalid_IFetch_n_reg;
  input nonvalid_IFetch_n_reg_0;
  input nonvalid_IFetch_n_reg_1;
  input S93_out;
  input take_Intr_Now_III;
  input ex_Valid_reg;
  input ex_Valid_reg_0;
  input ex_Valid_reg_1;
  input isdoublet;
  input sync_reset;
  input isbyte;
  input sext16;
  input Sext8_reg_0;
  input Sext8_reg_1;
  input \Using_FPGA.set_BIP_I_reg ;
  input mtsmsr_write_i_reg_0;
  input mbar_hold_I_reg;
  input missed_IFetch;
  input mul_Executing;
  input I294_out;
  input DReady0_out;
  input jump_Carry2;
  input trace_jump_taken_i_reg;
  input ok_To_Stop;
  input mul_Executing_reg;
  input dbg_pause;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input [15:0]\Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;
  input \Using_FPGA.Native_33 ;
  input \Using_FPGA.Native_34 ;
  input \Using_FPGA.Native_35 ;
  input \Using_FPGA.Native_36 ;
  input \Using_FPGA.Native_37 ;
  input \Using_FPGA.Native_38 ;
  input \Using_FPGA.Native_39 ;
  input \Using_FPGA.Native_40 ;
  input \Using_FPGA.Native_41 ;
  input \Using_FPGA.Native_42 ;
  input \Using_FPGA.Native_43 ;
  input \Using_FPGA.Native_44 ;
  input \Using_FPGA.Native_45 ;
  input \Using_FPGA.Native_46 ;
  input \Using_FPGA.Native_47 ;
  input \Using_FPGA.Native_48 ;
  input \Using_FPGA.Native_49 ;
  input \Using_FPGA.Native_50 ;
  input \Using_FPGA.Native_51 ;
  input \Using_FPGA.Native_52 ;
  input \Using_FPGA.Native_53 ;
  input \Using_FPGA.Native_54 ;
  input \Using_FPGA.Native_55 ;
  input \Using_FPGA.Native_56 ;
  input take_Intr_Now_II;
  input [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  input S;
  input lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;

  wire [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  wire \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  wire CI;
  wire Clk;
  wire [18:0]D;
  wire DI;
  wire DReady0_out;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_17;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_31;
  wire D_32;
  wire D_33;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire [0:0]E;
  wire I294_out;
  wire IReady1_out;
  wire \PreFetch_Buffers[12].SRL16E_I_n_3 ;
  wire \PreFetch_Buffers[13].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[21].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[22].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[26].SRL16E_I_n_4 ;
  wire \PreFetch_Buffers[29].SRL16E_I_n_3 ;
  wire \PreFetch_Buffers[2].SRL16E_I_n_4 ;
  wire \PreFetch_Buffers[3].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[3].SRL16E_I_n_3 ;
  wire \PreFetch_Buffers[3].SRL16E_I_n_5 ;
  wire \PreFetch_Buffers[4].SRL16E_I_n_3 ;
  wire \PreFetch_Buffers[4].SRL16E_I_n_5 ;
  wire \PreFetch_Buffers[4].SRL16E_I_n_6 ;
  wire \PreFetch_Buffers[5].SRL16E_I_n_2 ;
  wire R;
  wire Reg_Test_Equal_N_i7_out;
  wire Reg_Test_Equal_i;
  wire S0_out;
  wire S93_out;
  wire S_34;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire Sext16_reg;
  wire Sext8_reg;
  wire Sext8_reg_0;
  wire Sext8_reg_1;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_Async_Reset.sync_reset_reg_0 ;
  wire [1:0]\Use_Async_Reset.sync_reset_reg_1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire [15:0]\Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire \Using_FPGA.Native_45 ;
  wire \Using_FPGA.Native_46 ;
  wire \Using_FPGA.Native_47 ;
  wire \Using_FPGA.Native_48 ;
  wire \Using_FPGA.Native_49 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_50 ;
  wire \Using_FPGA.Native_51 ;
  wire \Using_FPGA.Native_52 ;
  wire \Using_FPGA.Native_53 ;
  wire \Using_FPGA.Native_54 ;
  wire \Using_FPGA.Native_55 ;
  wire \Using_FPGA.Native_56 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire [0:31]Y;
  wire buffer_Addr_S_I_0;
  wire buffer_Addr_S_I_1;
  wire buffer_Addr_S_I_2;
  wire buffer_Full;
  wire byte_i13_out;
  wire byte_i_reg;
  wire d_AS_I16_out;
  wire dbg_pause_reg;
  wire doublet_i_reg;
  wire enable_Interrupts_I;
  wire ex_Valid_reg;
  wire ex_Valid_reg_0;
  wire ex_Valid_reg_1;
  wire force1_i30_out;
  wire force2_i;
  wire force_Val1_i28_out;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire [10:0]\^instr_OF ;
  wire isbyte;
  wire isdoublet;
  wire jump_Carry2;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire mbar_first;
  wire mbar_hold_I_reg;
  wire mbar_is_sleep0;
  wire missed_IFetch;
  wire mtsmsr_write_i_reg;
  wire mtsmsr_write_i_reg_0;
  wire mul_Executing;
  wire mul_Executing_reg;
  wire nonvalid_IFetch_n_reg;
  wire nonvalid_IFetch_n_reg_0;
  wire nonvalid_IFetch_n_reg_1;
  wire of_Valid_Raw;
  wire of_mbar_decode;
  wire ok_To_Stop;
  wire reset_BIP_I8_out;
  wire sext16;
  wire sync_reset;
  wire take_Intr_Now_II;
  wire take_Intr_Now_III;
  wire trace_jump_taken_i_reg;
  wire use_Reg_Neg_DI_i27_out;
  wire use_Reg_Neg_S_i29_out;
  wire writing;
  wire \NLW_Buffer_DFFs[1].MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Buffer_DFFs[1].MUXCY_XOR_I_S_34_UNCONNECTED ;
  wire \NLW_Buffer_DFFs[2].MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Buffer_DFFs[2].MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Buffer_DFFs[2].MUXCY_XOR_I_Using_FPGA.Native_UNCONNECTED ;
  wire \NLW_Buffer_DFFs[2].MUXCY_XOR_I_Using_FPGA.Native_0_UNCONNECTED ;
  wire \NLW_Buffer_DFFs[2].MUXCY_XOR_I_lopt_UNCONNECTED ;
  wire \NLW_Buffer_DFFs[3].MUXCY_XOR_I_CI_UNCONNECTED ;
  wire \NLW_Buffer_DFFs[3].MUXCY_XOR_I_LO_UNCONNECTED ;
  wire \NLW_Buffer_DFFs[3].MUXCY_XOR_I_S_UNCONNECTED ;
  wire \NLW_Buffer_DFFs[3].MUXCY_XOR_I_Using_FPGA.Native_UNCONNECTED ;
  wire \NLW_Buffer_DFFs[3].MUXCY_XOR_I_lopt_UNCONNECTED ;
  wire NLW_of_valid_FDR_I_dbg_pause_UNCONNECTED;

  assign \^lopt_2  = lopt_3;
  assign \^lopt_3  = lopt_4;
  assign \^lopt_4  = lopt_5;
  assign instr_OF[10:1] = \^instr_OF [10:1];
  assign lopt_2 = S0_out;
  assign lopt_6 = S_34;
  cpu_MB_FDS \Buffer_DFFs[1].FDS_I 
       (.Clk(Clk),
        .DI(DI),
        .R(R),
        .S_34(S_34),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (ex_Valid_reg),
        .\Using_FPGA.Native_I1 (ex_Valid_reg_0),
        .\Using_FPGA.Native_I1_0 (ex_Valid_reg_1),
        .\Using_FPGA.Native_I1_1 (mbar_hold_I_reg),
        .\Using_FPGA.Native_I1_2 (of_Valid_Raw),
        .buffer_Addr_S_I_2(buffer_Addr_S_I_2),
        .missed_IFetch(missed_IFetch));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY \Buffer_DFFs[1].MUXCY_XOR_I 
       (.LO(\NLW_Buffer_DFFs[1].MUXCY_XOR_I_LO_UNCONNECTED ),
        .S_34(\NLW_Buffer_DFFs[1].MUXCY_XOR_I_S_34_UNCONNECTED ),
        .buffer_Addr_S_I_2(buffer_Addr_S_I_2),
        .lopt(\^lopt_4 ));
  cpu_MB_FDS_92 \Buffer_DFFs[2].FDS_I 
       (.Clk(Clk),
        .O(buffer_Addr_S_I_1),
        .R(R),
        .S(S0_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (ex_Valid_reg));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_93 \Buffer_DFFs[2].MUXCY_XOR_I 
       (.LO(\NLW_Buffer_DFFs[2].MUXCY_XOR_I_LO_UNCONNECTED ),
        .O(buffer_Addr_S_I_1),
        .S(\NLW_Buffer_DFFs[2].MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\NLW_Buffer_DFFs[2].MUXCY_XOR_I_Using_FPGA.Native_UNCONNECTED ),
        .\Using_FPGA.Native_0 (\NLW_Buffer_DFFs[2].MUXCY_XOR_I_Using_FPGA.Native_0_UNCONNECTED ),
        .lopt(\NLW_Buffer_DFFs[2].MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_3 ));
  cpu_MB_FDS_94 \Buffer_DFFs[3].FDS_I 
       (.Clk(Clk),
        .O(buffer_Addr_S_I_0),
        .R(R),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_95 \Buffer_DFFs[3].MUXCY_XOR_I 
       (.CI(\NLW_Buffer_DFFs[3].MUXCY_XOR_I_CI_UNCONNECTED ),
        .LO(\NLW_Buffer_DFFs[3].MUXCY_XOR_I_LO_UNCONNECTED ),
        .O(buffer_Addr_S_I_0),
        .S(\NLW_Buffer_DFFs[3].MUXCY_XOR_I_S_UNCONNECTED ),
        .\Using_FPGA.Native (\NLW_Buffer_DFFs[3].MUXCY_XOR_I_Using_FPGA.Native_UNCONNECTED ),
        .lopt(\NLW_Buffer_DFFs[3].MUXCY_XOR_I_lopt_UNCONNECTED ),
        .lopt_1(\^lopt_2 ));
  cpu_microblaze_v11_0_0_MB_SRL16E \PreFetch_Buffers[0].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Result_Sel_reg[0] (\Using_FPGA.Native ),
        .\Result_Sel_reg[0]_0 (\Using_FPGA.Native_0 ),
        .\Result_Sel_reg[0]_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native (\^instr_OF [10]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_1 (force2_i),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_3 (\^instr_OF [9]),
        .\Using_FPGA.Native_4 (\^instr_OF [1]),
        .\Using_FPGA.Native_5 (\^instr_OF [2]),
        .\Using_FPGA.Native_6 (\^instr_OF [0]),
        .\Using_FPGA.Native_7 (\^instr_OF [7]),
        .\Using_FPGA.Native_8 (\^instr_OF [5]),
        .\Using_FPGA.Native_9 (\^instr_OF [6]),
        .Y(Y[0]),
        .force_Val1_i28_out(force_Val1_i28_out),
        .take_Intr_Now_III(take_Intr_Now_III),
        .use_Reg_Neg_DI_i27_out(use_Reg_Neg_DI_i27_out),
        .use_Reg_Neg_S_i29_out(use_Reg_Neg_S_i29_out));
  cpu_microblaze_v11_0_0_MB_SRL16E_96 \PreFetch_Buffers[10].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .Reg_Test_Equal_i(Reg_Test_Equal_i),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg_1 [0]),
        .\Using_FPGA.Native (\^instr_OF [0]),
        .\Using_FPGA.Native_0 (\^instr_OF [2]),
        .\Using_FPGA.Native_1 (\^instr_OF [1]),
        .\Using_FPGA.Native_2 (\PreFetch_Buffers[4].SRL16E_I_n_5 ),
        .\Using_FPGA.enable_Interrupts_I_reg (\PreFetch_Buffers[4].SRL16E_I_n_3 ),
        .Y(Y[10]),
        .enable_Interrupts_I(enable_Interrupts_I),
        .\instr_EX_i_reg[10] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[10]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[10]_1 (\Using_FPGA.Native_1 ),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  cpu_microblaze_v11_0_0_MB_SRL16E_97 \PreFetch_Buffers[11].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (D[18]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .Y(Y[11]),
        .\instr_EX_i_reg[11] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[11]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[11]_1 (\Using_FPGA.Native_1 ),
        .jump2_I_reg(\PreFetch_Buffers[3].SRL16E_I_n_3 ),
        .jump2_I_reg_0(\^instr_OF [5]),
        .jump2_I_reg_1(\^instr_OF [4]),
        .jump2_I_reg_2(\^instr_OF [8]),
        .jump2_I_reg_3(\^instr_OF [6]));
  cpu_microblaze_v11_0_0_MB_SRL16E_98 \PreFetch_Buffers[12].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_32(D_32),
        .\Using_FPGA.Native (D[17]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[12].SRL16E_I_n_3 ),
        .\Using_FPGA.Native_2 (\^instr_OF [7]),
        .\Using_FPGA.Native_3 (\^instr_OF [9]),
        .\Using_FPGA.Native_4 (\^instr_OF [10]),
        .\Using_FPGA.Native_5 (\^instr_OF [6]),
        .\Using_FPGA.Native_6 (\^instr_OF [5]),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_8 (\PreFetch_Buffers[3].SRL16E_I_n_2 ),
        .\Using_FPGA.set_BIP_I_reg (D[16]),
        .\Using_FPGA.set_BIP_I_reg_0 (D[18]),
        .Y(Y[12]),
        .\instr_EX_i_reg[12] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[12]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[12]_1 (\Using_FPGA.Native_1 ),
        .take_Intr_Now_III(take_Intr_Now_III));
  cpu_microblaze_v11_0_0_MB_SRL16E_99 \PreFetch_Buffers[13].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (D[16]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[13].SRL16E_I_n_1 ),
        .Y(Y[13]),
        .\instr_EX_i_reg[13] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[13]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[13]_1 (\Using_FPGA.Native_1 ),
        .write_Reg_i_2(\^instr_OF [5]),
        .write_Reg_i_2_0(\^instr_OF [6]),
        .write_Reg_i_2_1(\^instr_OF [10]),
        .write_Reg_i_2_2(\^instr_OF [9]),
        .write_Reg_i_2_3(\^instr_OF [7]));
  cpu_microblaze_v11_0_0_MB_SRL16E_100 \PreFetch_Buffers[14].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[15]),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg_0 ),
        .Y(Y[14]),
        .\instr_EX_i_reg[14] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[14]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[14]_1 (\Using_FPGA.Native_1 ),
        .mbar_decode_I_reg(\PreFetch_Buffers[3].SRL16E_I_n_5 ),
        .mbar_hold_I_reg(mbar_hold_I_reg),
        .mbar_hold_I_reg_0(nonvalid_IFetch_n_reg),
        .mbar_hold_I_reg_1(ex_Valid_reg),
        .of_mbar_decode(of_mbar_decode),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  cpu_microblaze_v11_0_0_MB_SRL16E_101 \PreFetch_Buffers[15].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[14]),
        .Y(Y[15]),
        .\instr_EX_i_reg[15] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[15]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[15]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_102 \PreFetch_Buffers[16].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_0(D_0),
        .D_1(D_1),
        .D_10(D_10),
        .D_11(D_11),
        .D_12(D_12),
        .D_13(D_13),
        .D_14(D_14),
        .D_15(D_15),
        .D_16(D_16),
        .D_2(D_2),
        .D_3(D_3),
        .D_4(D_4),
        .D_5(D_5),
        .D_6(D_6),
        .D_7(D_7),
        .D_8(D_8),
        .D_9(D_9),
        .\Using_FPGA.Native (D[13]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_34 ),
        .\Using_FPGA.Native_13 (\Using_FPGA.Native_35 ),
        .\Using_FPGA.Native_14 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_15 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_16 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_17 (\Using_FPGA.Native_39 ),
        .\Using_FPGA.Native_18 (\Using_FPGA.Native_40 ),
        .\Using_FPGA.Native_19 (\Using_FPGA.Native_41 ),
        .\Using_FPGA.Native_2 (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_31 ),
        .Y(Y[16]),
        .\instr_EX_i_reg[16] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[16]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[16]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_103 \PreFetch_Buffers[17].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_17(D_17),
        .\Using_FPGA.Native (D[12]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_42 ),
        .Y(Y[17]),
        .\instr_EX_i_reg[17] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[17]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[17]_1 (\Using_FPGA.Native_1 ),
        .mtsmsr_write_i_reg(mtsmsr_write_i_reg),
        .mtsmsr_write_i_reg_0(mtsmsr_write_i_reg_0),
        .mtsmsr_write_i_reg_1(ex_Valid_reg),
        .mtsmsr_write_i_reg_2(D[0]),
        .mtsmsr_write_i_reg_3(\PreFetch_Buffers[4].SRL16E_I_n_6 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_104 \PreFetch_Buffers[18].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[11]),
        .D_18(D_18),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_43 ),
        .Y(Y[18]),
        .\instr_EX_i_reg[18] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[18]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[18]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_105 \PreFetch_Buffers[19].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[10]),
        .D_19(D_19),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_44 ),
        .Y(Y[19]),
        .\instr_EX_i_reg[19] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[19]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[19]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_106 \PreFetch_Buffers[1].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Result_Sel_reg[1] (\Using_FPGA.Native ),
        .\Result_Sel_reg[1]_0 (\Using_FPGA.Native_0 ),
        .\Result_Sel_reg[1]_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native (\^instr_OF [9]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_6 ),
        .Y(Y[1]),
        .byte_i13_out(byte_i13_out),
        .d_AS_I16_out(d_AS_I16_out),
        .d_AS_I_reg(nonvalid_IFetch_n_reg_0),
        .d_AS_I_reg_0(ex_Valid_reg),
        .inHibit_EX(inHibit_EX),
        .is_swx_I_reg(\^instr_OF [5]),
        .is_swx_I_reg_0(\^instr_OF [6]),
        .is_swx_I_reg_1(D[8]),
        .is_swx_I_reg_2(\^instr_OF [8]),
        .take_Intr_Now_III(take_Intr_Now_III),
        .writing(writing),
        .writing_reg(\^instr_OF [10]),
        .writing_reg_0(\^instr_OF [7]));
  cpu_microblaze_v11_0_0_MB_SRL16E_107 \PreFetch_Buffers[20].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[9]),
        .D_20(D_20),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_45 ),
        .Y(Y[20]),
        .\instr_EX_i_reg[20] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[20]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[20]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_108 \PreFetch_Buffers[21].SRL16E_I 
       (.\Area_Debug_Control.dbg_brki_hit_reg (\PreFetch_Buffers[26].SRL16E_I_n_4 ),
        .\Area_Debug_Control.dbg_brki_hit_reg_0 (\PreFetch_Buffers[22].SRL16E_I_n_2 ),
        .\Area_Debug_Control.dbg_brki_hit_reg_1 (\PreFetch_Buffers[29].SRL16E_I_n_3 ),
        .\Area_Debug_Control.dbg_brki_hit_reg_2 (\PreFetch_Buffers[3].SRL16E_I_n_5 ),
        .CI(CI),
        .Clk(Clk),
        .D(D[13:9]),
        .D_21(D_21),
        .\Serial_Dbg_Intf.control_reg_reg[8] (\Serial_Dbg_Intf.control_reg_reg[8] ),
        .\Using_FPGA.Native (D[8]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[21].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_46 ),
        .Y(Y[21]),
        .\instr_EX_i_reg[21] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[21]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[21]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_109 \PreFetch_Buffers[22].SRL16E_I 
       (.\Area_Debug_Control.dbg_brki_hit_i_2 (D[6:4]),
        .CI(CI),
        .Clk(Clk),
        .D(D[7]),
        .D_22(D_22),
        .\Using_FPGA.Native (\PreFetch_Buffers[22].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_47 ),
        .Y(Y[22]),
        .\instr_EX_i_reg[22] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[22]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[22]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_110 \PreFetch_Buffers[23].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[6]),
        .D_23(D_23),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_48 ),
        .Y(Y[23]),
        .\instr_EX_i_reg[23] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[23]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[23]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_111 \PreFetch_Buffers[24].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[5]),
        .D_24(D_24),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_49 ),
        .Y(Y[24]),
        .\instr_EX_i_reg[24] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[24]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[24]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_112 \PreFetch_Buffers[25].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_25(D_25),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_50 ),
        .Y(Y[25]),
        .\instr_EX_i_reg[25] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[25]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[25]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_113 \PreFetch_Buffers[26].SRL16E_I 
       (.\Area_Debug_Control.dbg_brki_hit_i_2 (\Area_Debug_Control.dbg_brki_hit_i_2 ),
        .\Area_Debug_Control.dbg_brki_hit_i_2_0 (D[18]),
        .CI(CI),
        .Clk(Clk),
        .D(D[17:16]),
        .D_26(D_26),
        .\Serial_Dbg_Intf.control_reg_reg[8] (\PreFetch_Buffers[26].SRL16E_I_n_4 ),
        .Sext16_reg(Sext16_reg),
        .Sext16_reg_0(ex_Valid_reg),
        .Sext16_reg_1(D[0]),
        .Sext16_reg_2(Sext8_reg_0),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_51 ),
        .Y(Y[26]),
        .\instr_EX_i_reg[26] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[26]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[26]_1 (\Using_FPGA.Native_1 ),
        .sext16(sext16),
        .write_Carry_I_reg(\Using_FPGA.Native_2 ),
        .write_Carry_I_reg_0(\Using_FPGA.Native_9 ),
        .write_Carry_I_reg_1(\^instr_OF [7]),
        .write_Carry_I_reg_2(\^instr_OF [9]),
        .write_Carry_I_reg_3(\^instr_OF [10]));
  cpu_microblaze_v11_0_0_MB_SRL16E_114 \PreFetch_Buffers[27].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[4]),
        .D_27(D_27),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_52 ),
        .Y(Y[27]),
        .\instr_EX_i_reg[27] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[27]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[27]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_115 \PreFetch_Buffers[28].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_28(D_28),
        .\Using_FPGA.Native (D[3]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_53 ),
        .Y(Y[28]),
        .\instr_EX_i_reg[28] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[28]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[28]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_116 \PreFetch_Buffers[29].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D({D[3],D[1:0]}),
        .D_29(D_29),
        .\Using_FPGA.Native (D[2]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[29].SRL16E_I_n_3 ),
        .\Using_FPGA.Native_2 (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_54 ),
        .Y(Y[29]),
        .\instr_EX_i_reg[29] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[29]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[29]_1 (\Using_FPGA.Native_1 ),
        .write_Reg_reg(\PreFetch_Buffers[13].SRL16E_I_n_1 ),
        .write_Reg_reg_0(\PreFetch_Buffers[5].SRL16E_I_n_2 ),
        .write_Reg_reg_1(\Using_FPGA.Native_8 ),
        .write_Reg_reg_2(D[12]),
        .write_Reg_reg_3(\PreFetch_Buffers[4].SRL16E_I_n_6 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_117 \PreFetch_Buffers[2].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .Compare_Instr_reg(\^instr_OF [9]),
        .Compare_Instr_reg_0(\^instr_OF [10]),
        .D(D[0]),
        .\Using_FPGA.Native (\^instr_OF [8]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_3 (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_20 ),
        .Y(Y[2]),
        .\instr_EX_i_reg[2] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[2]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[2]_1 (\Using_FPGA.Native_1 ),
        .take_Intr_Now_II(take_Intr_Now_II),
        .write_Carry_I_reg(\^instr_OF [7]),
        .write_Carry_I_reg_0(\^instr_OF [5]),
        .write_Carry_I_reg_1(\^instr_OF [6]),
        .write_Reg_reg(\PreFetch_Buffers[13].SRL16E_I_n_1 ),
        .write_Reg_reg_0(\PreFetch_Buffers[5].SRL16E_I_n_2 ),
        .write_Reg_reg_1(D[12]),
        .write_Reg_reg_2(\PreFetch_Buffers[4].SRL16E_I_n_6 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_118 \PreFetch_Buffers[30].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[1]),
        .D_30(D_30),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_55 ),
        .Y(Y[30]),
        .\instr_EX_i_reg[30] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[30]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[30]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_119 \PreFetch_Buffers[31].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[0]),
        .D_31(D_31),
        .Sext8_reg(Sext8_reg),
        .Sext8_reg_0(Sext8_reg_1),
        .Sext8_reg_1(ex_Valid_reg),
        .Sext8_reg_2(\Using_FPGA.Native_3 ),
        .Sext8_reg_3(\Using_FPGA.Native_2 ),
        .Sext8_reg_4(Sext8_reg_0),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_56 ),
        .Y(Y[31]),
        .\instr_EX_i_reg[31] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[31]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[31]_1 (\Using_FPGA.Native_1 ));
  cpu_microblaze_v11_0_0_MB_SRL16E_120 \PreFetch_Buffers[3].SRL16E_I 
       (.\Area_Debug_Control.normal_stop_cmd_hold_reg (\Area_Debug_Control.normal_stop_cmd_hold_reg ),
        .CI(CI),
        .Clk(Clk),
        .D(D[15]),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native (\^instr_OF [7]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[3].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[3].SRL16E_I_n_5 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_4 (\PreFetch_Buffers[29].SRL16E_I_n_3 ),
        .\Using_FPGA.Native_5 (\PreFetch_Buffers[22].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_6 (\PreFetch_Buffers[26].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_7 (\PreFetch_Buffers[21].SRL16E_I_n_2 ),
        .\Using_FPGA.set_BIP_I_reg (\Using_FPGA.set_BIP_I_reg ),
        .\Using_FPGA.set_BIP_I_reg_0 (ex_Valid_reg),
        .\Using_FPGA.set_BIP_I_reg_1 (\PreFetch_Buffers[12].SRL16E_I_n_3 ),
        .\Using_FPGA.set_BIP_I_reg_2 (\^instr_OF [9]),
        .\Using_FPGA.set_BIP_I_reg_3 (\^instr_OF [10]),
        .\Using_FPGA.set_BIP_I_reg_4 (\^instr_OF [6]),
        .\Using_FPGA.set_BIP_I_reg_5 (\^instr_OF [5]),
        .Y(Y[3]),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(\PreFetch_Buffers[3].SRL16E_I_n_3 ),
        .\instr_EX_i_reg[3] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[3]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[3]_1 (\Using_FPGA.Native_1 ),
        .jump2_I_reg(nonvalid_IFetch_n_reg_0),
        .mbar_first(mbar_first),
        .mul_Executing_reg(mul_Executing_reg),
        .mul_Executing_reg_0(\^instr_OF [8]),
        .ok_To_Stop(ok_To_Stop),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  cpu_microblaze_v11_0_0_MB_SRL16E_121 \PreFetch_Buffers[4].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[0]),
        .Reg_Test_Equal_N_i7_out(Reg_Test_Equal_N_i7_out),
        .\Using_FPGA.Native (\^instr_OF [6]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[4].SRL16E_I_n_3 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_2 (\PreFetch_Buffers[4].SRL16E_I_n_5 ),
        .\Using_FPGA.Native_3 (\PreFetch_Buffers[4].SRL16E_I_n_6 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_5 (\^instr_OF [1]),
        .\Using_FPGA.Native_6 (\^instr_OF [2]),
        .\Using_FPGA.Native_i_1__17 (\PreFetch_Buffers[3].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_i_1__17_0 (D[12]),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Y(Y[4]),
        .byte_i13_out(byte_i13_out),
        .doublet_i_reg(doublet_i_reg),
        .doublet_i_reg_0(\^instr_OF [5]),
        .doublet_i_reg_1(ex_Valid_reg),
        .inHibit_EX_reg(D[18]),
        .inHibit_EX_reg_0(\^instr_OF [4]),
        .inHibit_EX_reg_1(\PreFetch_Buffers[3].SRL16E_I_n_3 ),
        .inHibit_EX_reg_2(\Using_FPGA.Native_21 ),
        .\instr_EX_i_reg[4] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[4]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[4]_1 (\Using_FPGA.Native_1 ),
        .instr_OF(\^instr_OF [0]),
        .isdoublet(isdoublet),
        .mtsmsr_write_i_reg(\^instr_OF [7]),
        .mtsmsr_write_i_reg_0(\^instr_OF [10]),
        .mtsmsr_write_i_reg_1(\^instr_OF [9]),
        .mtsmsr_write_i_reg_2(\^instr_OF [8]),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  cpu_microblaze_v11_0_0_MB_SRL16E_122 \PreFetch_Buffers[5].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[17]),
        .\Using_FPGA.Native (\^instr_OF [5]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[5].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_3 (\^instr_OF [9]),
        .\Using_FPGA.Native_4 (\^instr_OF [10]),
        .\Using_FPGA.Native_5 (\^instr_OF [7]),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .Y(Y[5]),
        .byte_i13_out(byte_i13_out),
        .byte_i_reg(byte_i_reg),
        .byte_i_reg_0(ex_Valid_reg),
        .byte_i_reg_1(\^instr_OF [6]),
        .\instr_EX_i_reg[5] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[5]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[5]_1 (\Using_FPGA.Native_1 ),
        .isbyte(isbyte),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III),
        .write_Reg_i_2(\^instr_OF [8]));
  cpu_microblaze_v11_0_0_MB_SRL16E_123 \PreFetch_Buffers[6].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg_1 [1]),
        .\Using_FPGA.Native (\^instr_OF [4]),
        .Y(Y[6]),
        .\instr_EX_i_reg[6] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[6]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[6]_1 (\Using_FPGA.Native_1 ),
        .instr_OF(\^instr_OF [3]),
        .mbar_is_sleep0(mbar_is_sleep0),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  cpu_microblaze_v11_0_0_MB_SRL16E_124 \PreFetch_Buffers[7].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .Y(Y[7]),
        .\instr_EX_i_reg[7] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[7]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[7]_1 (\Using_FPGA.Native_1 ),
        .instr_OF(\^instr_OF [3]));
  cpu_microblaze_v11_0_0_MB_SRL16E_125 \PreFetch_Buffers[8].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (\^instr_OF [2]),
        .\Using_FPGA.Native_0 (\^instr_OF [1]),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[4].SRL16E_I_n_5 ),
        .Y(Y[8]),
        .force1_i30_out(force1_i30_out),
        .\instr_EX_i_reg[8] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[8]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[8]_1 (\Using_FPGA.Native_1 ),
        .take_Intr_Now_III(take_Intr_Now_III));
  cpu_microblaze_v11_0_0_MB_SRL16E_126 \PreFetch_Buffers[9].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (\^instr_OF [1]),
        .\Using_FPGA.reset_BIP_I_reg (\PreFetch_Buffers[4].SRL16E_I_n_3 ),
        .Y(Y[9]),
        .\instr_EX_i_reg[9] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[9]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[9]_1 (\Using_FPGA.Native_1 ),
        .reset_BIP_I8_out(reset_BIP_I8_out),
        .take_Intr_Now_III(take_Intr_Now_III));
  LUT3 #(
    .INIT(8'h7F)) 
    of_Valid_early
       (.I0(buffer_Addr_S_I_2),
        .I1(buffer_Addr_S_I_1),
        .I2(buffer_Addr_S_I_0),
        .O(D_33));
  cpu_microblaze_v11_0_0_MB_FDR of_valid_FDR_I
       (.Clk(Clk),
        .DReady0_out(DReady0_out),
        .D_33(D_33),
        .E(E),
        .I294_out(I294_out),
        .IReady1_out(IReady1_out),
        .R(R),
        .S93_out(S93_out),
        .\Size_17to32.imm_Reg_reg[15] (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_0 (of_Valid_Raw),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .buffer_Full(buffer_Full),
        .dbg_pause(NLW_of_valid_FDR_I_dbg_pause_UNCONNECTED),
        .dbg_pause_reg(dbg_pause_reg),
        .ex_Valid_reg(ex_Valid_reg),
        .ex_Valid_reg_0(ex_Valid_reg_0),
        .ex_Valid_reg_1(ex_Valid_reg_1),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(inHibit_EX_reg),
        .jump_Carry2(jump_Carry2),
        .mul_Executing(mul_Executing),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .nonvalid_IFetch_n_reg_0(nonvalid_IFetch_n_reg_0),
        .nonvalid_IFetch_n_reg_1(nonvalid_IFetch_n_reg_1),
        .take_Intr_Now_III(take_Intr_Now_III),
        .trace_jump_taken_i_reg(trace_jump_taken_i_reg));
endmodule

(* ORIG_REF_NAME = "Register_File" *) 
module cpu_Register_File
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ,
    reg1_Addr,
    imm_Value);
  output [0:31]Reg1_Data;
  output [7:0]Clk_0;
  output [0:31]reg2_Data;
  output [23:0]Data_Write;
  input Clk;
  input [0:31]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  wire Clk;
  wire [7:0]Clk_0;
  wire [23:0]Data_Write;
  wire [0:31]Reg1_Data;
  wire Reg_Write;
  wire [0:31]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:31]reg2_Data;

  cpu_Register_File_Bit \Using_FPGA.Gen_RegFile[0].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[23]),
        .Reg1_Data(Reg1_Data[0]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[0]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[0]));
  cpu_Register_File_Bit_382 \Using_FPGA.Gen_RegFile[10].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[13]),
        .Reg1_Data(Reg1_Data[10]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[10]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[10]));
  cpu_Register_File_Bit_383 \Using_FPGA.Gen_RegFile[11].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[12]),
        .Reg1_Data(Reg1_Data[11]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[11]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[11]));
  cpu_Register_File_Bit_384 \Using_FPGA.Gen_RegFile[12].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[11]),
        .Reg1_Data(Reg1_Data[12]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[12]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[12]));
  cpu_Register_File_Bit_385 \Using_FPGA.Gen_RegFile[13].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[10]),
        .Reg1_Data(Reg1_Data[13]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[13]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[13]));
  cpu_Register_File_Bit_386 \Using_FPGA.Gen_RegFile[14].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[9]),
        .Reg1_Data(Reg1_Data[14]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[14]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[14]));
  cpu_Register_File_Bit_387 \Using_FPGA.Gen_RegFile[15].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[8]),
        .Reg1_Data(Reg1_Data[15]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[15]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[15]));
  cpu_Register_File_Bit_388 \Using_FPGA.Gen_RegFile[16].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[7]),
        .Reg1_Data(Reg1_Data[16]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[16]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[16]));
  cpu_Register_File_Bit_389 \Using_FPGA.Gen_RegFile[17].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[6]),
        .Reg1_Data(Reg1_Data[17]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[17]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[17]));
  cpu_Register_File_Bit_390 \Using_FPGA.Gen_RegFile[18].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[5]),
        .Reg1_Data(Reg1_Data[18]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[18]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[18]));
  cpu_Register_File_Bit_391 \Using_FPGA.Gen_RegFile[19].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[4]),
        .Reg1_Data(Reg1_Data[19]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[19]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[19]));
  cpu_Register_File_Bit_392 \Using_FPGA.Gen_RegFile[1].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[22]),
        .Reg1_Data(Reg1_Data[1]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[1]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[1]));
  cpu_Register_File_Bit_393 \Using_FPGA.Gen_RegFile[20].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[3]),
        .Reg1_Data(Reg1_Data[20]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[20]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[20]));
  cpu_Register_File_Bit_394 \Using_FPGA.Gen_RegFile[21].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[2]),
        .Reg1_Data(Reg1_Data[21]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[21]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[21]));
  cpu_Register_File_Bit_395 \Using_FPGA.Gen_RegFile[22].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[1]),
        .Reg1_Data(Reg1_Data[22]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[22]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[22]));
  cpu_Register_File_Bit_396 \Using_FPGA.Gen_RegFile[23].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[0]),
        .Reg1_Data(Reg1_Data[23]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[23]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[23]));
  cpu_Register_File_Bit_397 \Using_FPGA.Gen_RegFile[24].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[7]),
        .Reg1_Data(Reg1_Data[24]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[24]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[24]));
  cpu_Register_File_Bit_398 \Using_FPGA.Gen_RegFile[25].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[6]),
        .Reg1_Data(Reg1_Data[25]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[25]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[25]));
  cpu_Register_File_Bit_399 \Using_FPGA.Gen_RegFile[26].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[5]),
        .Reg1_Data(Reg1_Data[26]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[26]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[26]));
  cpu_Register_File_Bit_400 \Using_FPGA.Gen_RegFile[27].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[4]),
        .Reg1_Data(Reg1_Data[27]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[27]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[27]));
  cpu_Register_File_Bit_401 \Using_FPGA.Gen_RegFile[28].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[3]),
        .Reg1_Data(Reg1_Data[28]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[28]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[28]));
  cpu_Register_File_Bit_402 \Using_FPGA.Gen_RegFile[29].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[2]),
        .Reg1_Data(Reg1_Data[29]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[29]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[29]));
  cpu_Register_File_Bit_403 \Using_FPGA.Gen_RegFile[2].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[21]),
        .Reg1_Data(Reg1_Data[2]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[2]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[2]));
  cpu_Register_File_Bit_404 \Using_FPGA.Gen_RegFile[30].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[1]),
        .Reg1_Data(Reg1_Data[30]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[30]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[30]));
  cpu_Register_File_Bit_405 \Using_FPGA.Gen_RegFile[31].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[0]),
        .Reg1_Data(Reg1_Data[31]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[31]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[31]));
  cpu_Register_File_Bit_406 \Using_FPGA.Gen_RegFile[3].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[20]),
        .Reg1_Data(Reg1_Data[3]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[3]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[3]));
  cpu_Register_File_Bit_407 \Using_FPGA.Gen_RegFile[4].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[19]),
        .Reg1_Data(Reg1_Data[4]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[4]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[4]));
  cpu_Register_File_Bit_408 \Using_FPGA.Gen_RegFile[5].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[18]),
        .Reg1_Data(Reg1_Data[5]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[5]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[5]));
  cpu_Register_File_Bit_409 \Using_FPGA.Gen_RegFile[6].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[17]),
        .Reg1_Data(Reg1_Data[6]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[6]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[6]));
  cpu_Register_File_Bit_410 \Using_FPGA.Gen_RegFile[7].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[16]),
        .Reg1_Data(Reg1_Data[7]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[7]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[7]));
  cpu_Register_File_Bit_411 \Using_FPGA.Gen_RegFile[8].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[15]),
        .Reg1_Data(Reg1_Data[8]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[8]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[8]));
  cpu_Register_File_Bit_412 \Using_FPGA.Gen_RegFile[9].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[14]),
        .Reg1_Data(Reg1_Data[9]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[9]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[9]));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_474 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_475 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__7 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_382
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_472 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_473 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__17 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_383
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_470 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_471 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__18 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_384
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_468 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_469 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__19 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_385
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_466 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_467 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__20 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_386
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_464 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_465 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__21 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_387
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_462 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_463 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__22 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_388
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_460 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_461 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__23 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_389
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_458 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_459 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__24 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_390
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_456 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_457 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__25 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_391
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_454 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_455 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__26 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_392
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_452 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_453 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__8 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_393
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_450 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_451 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__27 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_394
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_448 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_449 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__28 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_395
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_446 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_447 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__29 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_396
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_444 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_445 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__30 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_397
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_442 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_443 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__31 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_398
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_440 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_441 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__32 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_399
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_438 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_439 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__33 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_400
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_436 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_437 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__34 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_401
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_434 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_435 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__35 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_402
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_432 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_433 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__36 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_403
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_430 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_431 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__9 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_404
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_428 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_429 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__37 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_405
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_426 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_427 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_3__4 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_406
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_424 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_425 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__10 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_407
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_422 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_423 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__11 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_408
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_420 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_421 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__12 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_409
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_418 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_419 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__13 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_410
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_416 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_417 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__14 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_411
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D_414 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_415 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__15 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module cpu_Register_File_Bit_412
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  cpu_MB_RAM32X1D RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  cpu_MB_RAM32X1D_413 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__16 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Result_Mux" *) 
module cpu_Result_Mux
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_1 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_2 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_3 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_4 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_5 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_6 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_7 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_8 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_9 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_10 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_11 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_12 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_13 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_14 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_15 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_16 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_17 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_18 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_19 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_20 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_21 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_22 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_23 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_24 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_25 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_26 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_27 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_28 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_29 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_30 ,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    raw_Data_Addr,
    Shift_Logic_Res,
    extend_Data_Read,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    data_Read_Mask,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    Data_Read0_out,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 );
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:31]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_2 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_3 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_4 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_5 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_6 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_7 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_8 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_9 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_10 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_11 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_12 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_13 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_14 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_15 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_16 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_17 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_18 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_19 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_20 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_21 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_22 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_23 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_24 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_25 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_26 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_27 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_28 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_29 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_30 ;
  output [31:0]\Using_FPGA.Native ;
  input [0:31]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:31]reg2_Data;
  input [1:0]Q;
  input [1:0]raw_Data_Addr;
  input Shift_Logic_Res;
  input [15:0]extend_Data_Read;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input [29:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input [1:0]data_Read_Mask;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input [15:0]Data_Read0_out;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;

  wire Clk;
  wire [15:0]Data_Read0_out;
  wire [1:0]Q;
  wire Shift_Logic_Res;
  wire [31:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [29:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_10 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_11 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_12 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_13 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_14 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_15 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_16 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_17 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_18 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_19 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_20 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_21 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_22 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_23 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_24 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_25 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_26 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_27 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_28 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_29 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_3 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_30 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_4 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_5 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_6 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_7 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_8 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_9 ;
  wire [1:0]data_Read_Mask;
  wire [0:31]ex_Result;
  wire [0:0]exception_kind;
  wire [15:0]extend_Data_Read;
  wire [1:0]raw_Data_Addr;
  wire [0:31]reg2_Data;
  wire res_Forward2;
  wire [0:0]\NLW_Result_Mux_Bits[0].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[10].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[11].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[12].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[13].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[14].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[15].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[16].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[17].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[18].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[19].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[1].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[20].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[21].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[22].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[23].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[24].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[25].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[26].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[27].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[28].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[29].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[2].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[30].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[31].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[3].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[4].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[5].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[6].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[7].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[8].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;
  wire [0:0]\NLW_Result_Mux_Bits[9].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED ;

  cpu_Result_Mux_Bit \Result_Mux_Bits[0].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[15]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[0].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [31]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [29]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[0]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[0]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_258 \Result_Mux_Bits[10].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[5]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[10].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [21]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [19]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_9 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[10]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[10]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_259 \Result_Mux_Bits[11].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[4]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[11].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [20]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [18]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_10 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[11]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[11]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_260 \Result_Mux_Bits[12].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[3]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[12].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [19]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [17]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_11 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[12]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[12]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_261 \Result_Mux_Bits[13].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[2]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[13].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [18]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [16]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_12 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[13]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[13]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_262 \Result_Mux_Bits[14].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[1]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[14].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [17]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [15]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_13 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[14]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[14]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_263 \Result_Mux_Bits[15].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[0]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[15].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [16]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [14]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_14 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[15]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[15]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_264 \Result_Mux_Bits[16].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[16].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [15]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [13]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_15 ),
        .data_Read_Mask(data_Read_Mask[0]),
        .ex_Result(ex_Result[16]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[15]),
        .reg2_Data(reg2_Data[16]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_265 \Result_Mux_Bits[17].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[17].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [14]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [12]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_16 ),
        .data_Read_Mask(data_Read_Mask[0]),
        .ex_Result(ex_Result[17]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[14]),
        .reg2_Data(reg2_Data[17]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_266 \Result_Mux_Bits[18].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[18].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [13]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [11]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_17 ),
        .data_Read_Mask(data_Read_Mask[0]),
        .ex_Result(ex_Result[18]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[13]),
        .reg2_Data(reg2_Data[18]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_267 \Result_Mux_Bits[19].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[19].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [12]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [10]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_18 ),
        .data_Read_Mask(data_Read_Mask[0]),
        .ex_Result(ex_Result[19]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[12]),
        .reg2_Data(reg2_Data[19]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_268 \Result_Mux_Bits[1].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[14]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[1].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [30]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [28]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[1]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[1]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_269 \Result_Mux_Bits[20].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[20].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [11]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [9]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_19 ),
        .data_Read_Mask(data_Read_Mask[0]),
        .ex_Result(ex_Result[20]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[11]),
        .reg2_Data(reg2_Data[20]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_270 \Result_Mux_Bits[21].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[21].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [10]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [8]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_20 ),
        .data_Read_Mask(data_Read_Mask[0]),
        .ex_Result(ex_Result[21]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[10]),
        .reg2_Data(reg2_Data[21]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_271 \Result_Mux_Bits[22].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[22].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [9]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [7]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_21 ),
        .data_Read_Mask(data_Read_Mask[0]),
        .ex_Result(ex_Result[22]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[9]),
        .reg2_Data(reg2_Data[22]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_272 \Result_Mux_Bits[23].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[23].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [8]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [6]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_22 ),
        .data_Read_Mask(data_Read_Mask[0]),
        .ex_Result(ex_Result[23]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[8]),
        .reg2_Data(reg2_Data[23]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_273 \Result_Mux_Bits[24].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[24].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [7]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [5]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_23 ),
        .ex_Result(ex_Result[24]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[7]),
        .reg2_Data(reg2_Data[24]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_274 \Result_Mux_Bits[25].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[25].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [6]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [4]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_24 ),
        .ex_Result(ex_Result[25]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[6]),
        .reg2_Data(reg2_Data[25]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_275 \Result_Mux_Bits[26].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[26].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [5]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [3]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_25 ),
        .ex_Result(ex_Result[26]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[5]),
        .reg2_Data(reg2_Data[26]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_276 \Result_Mux_Bits[27].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[27].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [4]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [2]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_26 ),
        .ex_Result(ex_Result[27]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[4]),
        .reg2_Data(reg2_Data[27]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_277 \Result_Mux_Bits[28].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[28].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [3]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [1]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_27 ),
        .ex_Result(ex_Result[28]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[3]),
        .reg2_Data(reg2_Data[28]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_278 \Result_Mux_Bits[29].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[29].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [2]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [0]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_28 ),
        .ex_Result(ex_Result[29]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[2]),
        .reg2_Data(reg2_Data[29]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_279 \Result_Mux_Bits[2].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[13]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[2].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [29]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [27]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_1 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[2]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[2]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_280 \Result_Mux_Bits[30].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[30].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [1]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_29 ),
        .ex_Result(ex_Result[30]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[1]),
        .raw_Data_Addr(raw_Data_Addr[1]),
        .reg2_Data(reg2_Data[30]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_281 \Result_Mux_Bits[31].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(\NLW_Result_Mux_Bits[31].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .Shift_Logic_Res(Shift_Logic_Res),
        .\Using_FPGA.Native (\Using_FPGA.Native [0]),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_30 ),
        .ex_Result(ex_Result[31]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[0]),
        .raw_Data_Addr(raw_Data_Addr[0]),
        .reg2_Data(reg2_Data[31]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_282 \Result_Mux_Bits[3].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[12]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[3].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [28]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [26]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_2 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[3]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[3]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_283 \Result_Mux_Bits[4].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[11]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[4].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [27]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [25]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_3 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[4]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[4]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_284 \Result_Mux_Bits[5].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[10]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[5].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [26]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [24]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_4 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[5]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[5]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_285 \Result_Mux_Bits[6].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[9]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[6].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [25]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [23]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_5 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[6]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[6]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_286 \Result_Mux_Bits[7].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[8]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[7].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [24]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [22]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_6 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[7]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[7]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_287 \Result_Mux_Bits[8].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[7]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[8].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [23]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [21]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_7 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[8]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[8]),
        .res_Forward2(res_Forward2));
  cpu_Result_Mux_Bit_288 \Result_Mux_Bits[9].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[6]),
        .Interrupt_Address(\NLW_Result_Mux_Bits[9].Result_Mux_Bit_I_Interrupt_Address_UNCONNECTED [0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [22]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [20]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_8 ),
        .data_Read_Mask(data_Read_Mask[1]),
        .ex_Result(ex_Result[9]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[9]),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_379 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_380 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_381 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_258
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_376 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_377 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_378 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_259
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_373 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_374 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_375 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_260
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_370 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_371 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_372 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_261
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_367 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_368 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_369 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_262
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_364 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_365 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_366 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_263
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_361 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_362 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_363 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_264
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_358 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_359 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_360 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_265
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_355 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_356 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_357 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_266
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_352 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_353 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_354 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_267
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_349 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_350 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_351 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_268
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_346 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_347 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_348 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_269
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_343 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_344 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_345 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_270
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_340 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_341 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_342 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_271
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_337 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_338 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_339 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_272
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_334 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_335 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_336 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_273
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_331 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_332 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_333 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_274
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_328 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_329 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_330 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_275
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_325 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_326 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_327 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_276
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_322 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_323 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_324 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_277
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_319 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_320 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_321 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_278
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_316 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_317 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_318 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_279
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_313 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_314 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_315 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_280
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    raw_Data_Addr,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]raw_Data_Addr;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]raw_Data_Addr;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_310 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_311 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_312 Mul_ALU_Mux
       (.Q(Q[0]),
        .mul_ALU_Res(mul_ALU_Res),
        .raw_Data_Addr(raw_Data_Addr));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_281
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    raw_Data_Addr,
    Shift_Logic_Res,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]raw_Data_Addr;
  input Shift_Logic_Res;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire Shift_Logic_Res;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]raw_Data_Addr;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_307 Data_Shift_Mux
       (.Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .Shift_Logic_Res(Shift_Logic_Res),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_308 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_309 Mul_ALU_Mux
       (.Q(Q[0]),
        .mul_ALU_Res(mul_ALU_Res),
        .raw_Data_Addr(raw_Data_Addr));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_282
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_304 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_305 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_306 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_283
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_301 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_302 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_303 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_284
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_298 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_299 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_300 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_285
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_295 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_296 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_297 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_286
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_292 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_293 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_294 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_287
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_289 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD_290 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19_291 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module cpu_Result_Mux_Bit_288
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    data_Read_Mask,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;
  wire [0:0]NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED;

  cpu_microblaze_v11_0_0_MB_LUT6__parameterized0 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(NLW_Data_Shift_Mux_Interrupt_Address_UNCONNECTED[0]),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .data_Read_Mask(data_Read_Mask),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  cpu_MB_FD EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  cpu_MB_LUT4__parameterized19 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_255 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_256 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_257 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_134
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_252 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_253 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_254 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_135
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_249 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_250 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_251 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_136
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_246 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_247 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_248 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_137
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_243 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_244 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_245 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_138
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_240 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_241 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_242 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_139
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_237 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_238 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_239 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_140
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_234 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_235 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_236 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_141
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_231 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_232 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_233 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_142
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_228 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_229 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_230 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_143
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_225 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_226 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_227 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_144
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_222 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_223 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_224 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_145
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_219 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_220 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_221 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_146
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_216 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_217 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_218 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_147
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_213 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_214 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_215 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_148
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_210 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_211 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_212 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_149
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_207 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_208 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_209 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_150
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_204 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_205 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_206 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_151
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_201 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_202 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_203 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_152
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_198 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_199 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_200 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_153
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    Shifted,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input \Using_FPGA.Native ;
  input Shifted;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_195 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  cpu_MB_LUT4__parameterized17_196 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_197 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_154
   (Select_Logic_reg,
    Op2,
    \Using_FPGA.Native ,
    Logic_Oper,
    Shifted,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input Op2;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input Shifted;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Op2;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native ;
  wire logic_Res_i;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_192 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .Op2(Op2),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  cpu_MB_LUT4__parameterized17_193 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_194 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_155
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_189 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_190 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_191 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_156
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_186 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  cpu_MB_LUT4__parameterized17_187 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_188 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_157
   (Shift_Logic_Res,
    EX_Op2,
    Op1_Logic,
    Logic_Oper,
    \Using_FPGA.Native ,
    Shift_Oper,
    Select_Logic);
  output Shift_Logic_Res;
  input EX_Op2;
  input Op1_Logic;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native ;
  input Shift_Oper;
  input Select_Logic;

  wire EX_Op2;
  wire [0:1]Logic_Oper;
  wire Op1_Logic;
  wire Select_Logic;
  wire Shift_Logic_Res;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire logic_Res_i;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_183 Logic_LUT
       (.EX_Op2(EX_Op2),
        .Logic_Oper(Logic_Oper),
        .Op1_Logic(Op1_Logic),
        .logic_Res_i(logic_Res_i));
  cpu_MB_LUT4__parameterized17_184 Shift_LUT
       (.Op1_Logic(Op1_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_185 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Shift_Logic_Res(Shift_Logic_Res),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_158
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_180 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_181 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_182 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_159
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_177 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_178 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_179 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_160
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_174 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_175 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_176 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_161
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_171 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_172 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_173 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_162
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_168 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_169 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_170 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_163
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15_165 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17_166 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7_167 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module cpu_Shift_Logic_Bit_164
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  cpu_MB_LUT4__parameterized15 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  cpu_MB_LUT4__parameterized17 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  cpu_microblaze_v11_0_0_MB_MUXF7 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Module" *) 
module cpu_Shift_Logic_Module
   (Shift_Logic_Res,
    Select_Logic_reg,
    Select_Logic_reg_0,
    Select_Logic_reg_1,
    Select_Logic_reg_2,
    Select_Logic_reg_3,
    Select_Logic_reg_4,
    Select_Logic_reg_5,
    Select_Logic_reg_6,
    Select_Logic_reg_7,
    Select_Logic_reg_8,
    Select_Logic_reg_9,
    Select_Logic_reg_10,
    Select_Logic_reg_11,
    Select_Logic_reg_12,
    Select_Logic_reg_13,
    Select_Logic_reg_14,
    Select_Logic_reg_15,
    Select_Logic_reg_16,
    Select_Logic_reg_17,
    Select_Logic_reg_18,
    Select_Logic_reg_19,
    Select_Logic_reg_20,
    Select_Logic_reg_21,
    Select_Logic_reg_22,
    Select_Logic_reg_23,
    Select_Logic_reg_24,
    Select_Logic_reg_25,
    Select_Logic_reg_26,
    Select_Logic_reg_27,
    Select_Logic_reg_28,
    Select_Logic_reg_29,
    EX_Op2,
    Op1_Logic,
    Logic_Oper,
    \Using_FPGA.Native ,
    Shift_Oper,
    Select_Logic,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Op2,
    Shifted,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    op2_C,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    Sext,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 );
  output Shift_Logic_Res;
  output Select_Logic_reg;
  output Select_Logic_reg_0;
  output Select_Logic_reg_1;
  output Select_Logic_reg_2;
  output Select_Logic_reg_3;
  output Select_Logic_reg_4;
  output Select_Logic_reg_5;
  output Select_Logic_reg_6;
  output Select_Logic_reg_7;
  output Select_Logic_reg_8;
  output Select_Logic_reg_9;
  output Select_Logic_reg_10;
  output Select_Logic_reg_11;
  output Select_Logic_reg_12;
  output Select_Logic_reg_13;
  output Select_Logic_reg_14;
  output Select_Logic_reg_15;
  output Select_Logic_reg_16;
  output Select_Logic_reg_17;
  output Select_Logic_reg_18;
  output Select_Logic_reg_19;
  output Select_Logic_reg_20;
  output Select_Logic_reg_21;
  output Select_Logic_reg_22;
  output Select_Logic_reg_23;
  output Select_Logic_reg_24;
  output Select_Logic_reg_25;
  output Select_Logic_reg_26;
  output Select_Logic_reg_27;
  output Select_Logic_reg_28;
  output Select_Logic_reg_29;
  input EX_Op2;
  input Op1_Logic;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native ;
  input Shift_Oper;
  input Select_Logic;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Op2;
  input Shifted;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input [27:0]op2_C;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input Sext;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;

  wire EX_Op2;
  wire [0:1]Logic_Oper;
  wire Op1_Logic;
  wire Op2;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Select_Logic_reg_0;
  wire Select_Logic_reg_1;
  wire Select_Logic_reg_10;
  wire Select_Logic_reg_11;
  wire Select_Logic_reg_12;
  wire Select_Logic_reg_13;
  wire Select_Logic_reg_14;
  wire Select_Logic_reg_15;
  wire Select_Logic_reg_16;
  wire Select_Logic_reg_17;
  wire Select_Logic_reg_18;
  wire Select_Logic_reg_19;
  wire Select_Logic_reg_2;
  wire Select_Logic_reg_20;
  wire Select_Logic_reg_21;
  wire Select_Logic_reg_22;
  wire Select_Logic_reg_23;
  wire Select_Logic_reg_24;
  wire Select_Logic_reg_25;
  wire Select_Logic_reg_26;
  wire Select_Logic_reg_27;
  wire Select_Logic_reg_28;
  wire Select_Logic_reg_29;
  wire Select_Logic_reg_3;
  wire Select_Logic_reg_4;
  wire Select_Logic_reg_5;
  wire Select_Logic_reg_6;
  wire Select_Logic_reg_7;
  wire Select_Logic_reg_8;
  wire Select_Logic_reg_9;
  wire Sext;
  wire Shift_Logic_Res;
  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [27:0]op2_C;

  cpu_Shift_Logic_Bit \Shift_Logic_Bits[0].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_29),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[27]));
  cpu_Shift_Logic_Bit_134 \Shift_Logic_Bits[10].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_19),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[17]));
  cpu_Shift_Logic_Bit_135 \Shift_Logic_Bits[11].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_18),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[16]));
  cpu_Shift_Logic_Bit_136 \Shift_Logic_Bits[12].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_17),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[15]));
  cpu_Shift_Logic_Bit_137 \Shift_Logic_Bits[13].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_16),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[14]));
  cpu_Shift_Logic_Bit_138 \Shift_Logic_Bits[14].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_15),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[13]));
  cpu_Shift_Logic_Bit_139 \Shift_Logic_Bits[15].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_14),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[12]));
  cpu_Shift_Logic_Bit_140 \Shift_Logic_Bits[16].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_13),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 ),
        .op2_C(op2_C[11]));
  cpu_Shift_Logic_Bit_141 \Shift_Logic_Bits[17].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_12),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_14 ),
        .op2_C(op2_C[10]));
  cpu_Shift_Logic_Bit_142 \Shift_Logic_Bits[18].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_11),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_13 ),
        .op2_C(op2_C[9]));
  cpu_Shift_Logic_Bit_143 \Shift_Logic_Bits[19].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_10),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_12 ),
        .op2_C(op2_C[8]));
  cpu_Shift_Logic_Bit_144 \Shift_Logic_Bits[1].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_28),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[26]));
  cpu_Shift_Logic_Bit_145 \Shift_Logic_Bits[20].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_9),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_11 ),
        .op2_C(op2_C[7]));
  cpu_Shift_Logic_Bit_146 \Shift_Logic_Bits[21].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_8),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_10 ),
        .op2_C(op2_C[6]));
  cpu_Shift_Logic_Bit_147 \Shift_Logic_Bits[22].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_7),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .op2_C(op2_C[5]));
  cpu_Shift_Logic_Bit_148 \Shift_Logic_Bits[23].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_6),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_8 ),
        .op2_C(op2_C[4]));
  cpu_Shift_Logic_Bit_149 \Shift_Logic_Bits[24].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_5),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_7 ),
        .op2_C(op2_C[3]));
  cpu_Shift_Logic_Bit_150 \Shift_Logic_Bits[25].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_4),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_6 ),
        .op2_C(op2_C[2]));
  cpu_Shift_Logic_Bit_151 \Shift_Logic_Bits[26].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_3),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .op2_C(op2_C[1]));
  cpu_Shift_Logic_Bit_152 \Shift_Logic_Bits[27].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_2),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .op2_C(op2_C[0]));
  cpu_Shift_Logic_Bit_153 \Shift_Logic_Bits[28].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_1),
        .Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ));
  cpu_Shift_Logic_Bit_154 \Shift_Logic_Bits[29].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Op2(Op2),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_0),
        .Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ));
  cpu_Shift_Logic_Bit_155 \Shift_Logic_Bits[2].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_27),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[25]));
  cpu_Shift_Logic_Bit_156 \Shift_Logic_Bits[30].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  cpu_Shift_Logic_Bit_157 \Shift_Logic_Bits[31].Shift_Logic_Bit_I 
       (.EX_Op2(EX_Op2),
        .Logic_Oper(Logic_Oper),
        .Op1_Logic(Op1_Logic),
        .Select_Logic(Select_Logic),
        .Shift_Logic_Res(Shift_Logic_Res),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native ));
  cpu_Shift_Logic_Bit_158 \Shift_Logic_Bits[3].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_26),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[24]));
  cpu_Shift_Logic_Bit_159 \Shift_Logic_Bits[4].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_25),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[23]));
  cpu_Shift_Logic_Bit_160 \Shift_Logic_Bits[5].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_24),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[22]));
  cpu_Shift_Logic_Bit_161 \Shift_Logic_Bits[6].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_23),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[21]));
  cpu_Shift_Logic_Bit_162 \Shift_Logic_Bits[7].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_22),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[20]));
  cpu_Shift_Logic_Bit_163 \Shift_Logic_Bits[8].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_21),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[19]));
  cpu_Shift_Logic_Bit_164 \Shift_Logic_Bits[9].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_20),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[18]));
endmodule

(* ORIG_REF_NAME = "Zero_Detect" *) 
module cpu_Zero_Detect
   (Reg_zero,
    Reg_Test_Equal,
    reg_Test_Equal_N,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    lopt,
    lopt_1,
    lopt_2);
  output Reg_zero;
  input Reg_Test_Equal;
  input reg_Test_Equal_N;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire Reg_Test_Equal;
  wire S;
  wire \S0_inferred__0/i__n_0 ;
  wire \S0_inferred__1/i__n_0 ;
  wire \S0_inferred__2/i__n_0 ;
  wire \S0_inferred__3/i__n_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \^lopt_2 ;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire reg_Test_Equal_N;
  wire zero_CI_3;
  wire NLW_Part_Of_Zero_Carry_Start_lopt_UNCONNECTED;
  wire NLW_Part_Of_Zero_Carry_Start_lopt_3_UNCONNECTED;
  wire NLW_Part_Of_Zero_Carry_Start_zero_CI_6_UNCONNECTED;
  wire \NLW_Zero_Detecting[3].I_Part_Of_Zero_Detect_lopt_UNCONNECTED ;
  wire \NLW_Zero_Detecting[3].I_Part_Of_Zero_Detect_lopt_2_UNCONNECTED ;
  wire \NLW_Zero_Detecting[3].I_Part_Of_Zero_Detect_zero_CI_2_UNCONNECTED ;
  wire \NLW_Zero_Detecting[4].I_Part_Of_Zero_Detect_Using_FPGA.Native_0_UNCONNECTED ;
  wire \NLW_Zero_Detecting[4].I_Part_Of_Zero_Detect_reg_Test_Equal_N_UNCONNECTED ;
  wire \NLW_Zero_Detecting[4].I_Part_Of_Zero_Detect_zero_CI_4_UNCONNECTED ;

  assign lopt = lopt_5;
  assign lopt_6 = lopt_1;
  assign lopt_7 = lopt_2;
  cpu_microblaze_v11_0_0_MB_MUXCY_127 Part_Of_Zero_Carry_Start
       (.Reg_Test_Equal(Reg_Test_Equal),
        .lopt(NLW_Part_Of_Zero_Carry_Start_lopt_UNCONNECTED),
        .lopt_1(reg_Test_Equal_N),
        .lopt_2(S),
        .lopt_3(NLW_Part_Of_Zero_Carry_Start_lopt_3_UNCONNECTED),
        .lopt_4(\S0_inferred__3/i__n_0 ),
        .lopt_5(\^lopt_2 ),
        .lopt_6(\S0_inferred__2/i__n_0 ),
        .zero_CI_6(NLW_Part_Of_Zero_Carry_Start_zero_CI_6_UNCONNECTED));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__0/i_ 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(\S0_inferred__0/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__1/i_ 
       (.I0(\Using_FPGA.Native_6 ),
        .I1(\Using_FPGA.Native_7 ),
        .I2(\Using_FPGA.Native_8 ),
        .I3(\Using_FPGA.Native_9 ),
        .I4(\Using_FPGA.Native_10 ),
        .I5(\Using_FPGA.Native_11 ),
        .O(\S0_inferred__1/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__2/i_ 
       (.I0(\Using_FPGA.Native_12 ),
        .I1(\Using_FPGA.Native_13 ),
        .I2(\Using_FPGA.Native_14 ),
        .I3(\Using_FPGA.Native_15 ),
        .I4(\Using_FPGA.Native_16 ),
        .I5(\Using_FPGA.Native_17 ),
        .O(\S0_inferred__2/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__3/i_ 
       (.I0(\Using_FPGA.Native_18 ),
        .I1(\Using_FPGA.Native_19 ),
        .I2(\Using_FPGA.Native_20 ),
        .I3(\Using_FPGA.Native_21 ),
        .I4(\Using_FPGA.Native_22 ),
        .I5(\Using_FPGA.Native_23 ),
        .O(\S0_inferred__3/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__4/i_ 
       (.I0(\Using_FPGA.Native_24 ),
        .I1(\Using_FPGA.Native_25 ),
        .I2(\Using_FPGA.Native_26 ),
        .I3(\Using_FPGA.Native_27 ),
        .I4(\Using_FPGA.Native_28 ),
        .I5(\Using_FPGA.Native_29 ),
        .O(S));
  cpu_microblaze_v11_0_0_MB_MUXCY_130 \Zero_Detecting[3].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__1/i__n_0 ),
        .lopt(\NLW_Zero_Detecting[3].I_Part_Of_Zero_Detect_lopt_UNCONNECTED ),
        .lopt_1(\S0_inferred__0/i__n_0 ),
        .lopt_2(\NLW_Zero_Detecting[3].I_Part_Of_Zero_Detect_lopt_2_UNCONNECTED ),
        .lopt_3(\Using_FPGA.Native ),
        .lopt_4(lopt_5),
        .lopt_5(lopt_6),
        .lopt_6(lopt_7),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .zero_CI_2(\NLW_Zero_Detecting[3].I_Part_Of_Zero_Detect_zero_CI_2_UNCONNECTED ),
        .zero_CI_3(zero_CI_3));
  cpu_microblaze_v11_0_0_MB_MUXCY_131 \Zero_Detecting[4].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\NLW_Zero_Detecting[4].I_Part_Of_Zero_Detect_Using_FPGA.Native_0_UNCONNECTED ),
        .lopt(\^lopt_2 ),
        .reg_Test_Equal_N(\NLW_Zero_Detecting[4].I_Part_Of_Zero_Detect_reg_Test_Equal_N_UNCONNECTED ),
        .zero_CI_3(zero_CI_3),
        .zero_CI_4(\NLW_Zero_Detecting[4].I_Part_Of_Zero_Detect_zero_CI_4_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "address_hit" *) 
module cpu_address_hit
   (\Area_Debug_Control.normal_stop_cmd_hold_reg ,
    Hit,
    Dbg_Reg_En,
    normal_stop_cmd_hold,
    normal_stop_cmd_i,
    \Using_FPGA.Native_i_6 ,
    \Using_FPGA.Native_i_6_0 ,
    Dbg_TDI,
    Dbg_Clk,
    Address,
    Q,
    Single_Step_N);
  output \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  output Hit;
  input [0:7]Dbg_Reg_En;
  input normal_stop_cmd_hold;
  input normal_stop_cmd_i;
  input \Using_FPGA.Native_i_6 ;
  input \Using_FPGA.Native_i_6_0 ;
  input Dbg_TDI;
  input Dbg_Clk;
  input [14:0]Address;
  input [0:0]Q;
  input Single_Step_N;

  wire [14:0]Address;
  wire \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_TDI;
  wire Hit;
  wire [0:0]Q;
  wire SRL16_MC15_1;
  wire SRL16_MC15_2;
  wire SRL16_MC15_3;
  wire SRL16_MC15_4;
  wire SRL16_MC15_5;
  wire SRL16_MC15_6;
  wire SRL16_MC15_7;
  wire SRL16_Sel_0;
  wire SRL16_Sel_1;
  wire SRL16_Sel_2;
  wire SRL16_Sel_3;
  wire SRL16_Sel_4;
  wire SRL16_Sel_5;
  wire SRL16_Sel_6;
  wire SRL16_Sel_7;
  wire Single_Step_N;
  wire \Using_FPGA.Native_i_6 ;
  wire \Using_FPGA.Native_i_6_0 ;
  wire carry_0;
  wire carry_4;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_7;
  wire lopt_9;
  wire normal_stop_cmd_hold;
  wire normal_stop_cmd_i;
  wire which_pc__0;
  wire \NLW_Compare[0].MUXCY_I_carry_7_UNCONNECTED ;
  wire \NLW_Compare[0].MUXCY_I_lopt_UNCONNECTED ;
  wire \NLW_Compare[0].MUXCY_I_lopt_3_UNCONNECTED ;
  wire \NLW_Compare[1].MUXCY_I_SRL16_Sel_6_UNCONNECTED ;
  wire \NLW_Compare[1].MUXCY_I_carry_6_UNCONNECTED ;
  wire \NLW_Compare[1].MUXCY_I_carry_7_UNCONNECTED ;
  wire \NLW_Compare[1].MUXCY_I_lopt_UNCONNECTED ;
  wire \NLW_Compare[2].MUXCY_I_SRL16_Sel_5_UNCONNECTED ;
  wire \NLW_Compare[2].MUXCY_I_carry_5_UNCONNECTED ;
  wire \NLW_Compare[2].MUXCY_I_carry_6_UNCONNECTED ;
  wire \NLW_Compare[2].MUXCY_I_lopt_UNCONNECTED ;
  wire \NLW_Compare[3].MUXCY_I_SRL16_Sel_4_UNCONNECTED ;
  wire \NLW_Compare[3].MUXCY_I_carry_5_UNCONNECTED ;
  wire \NLW_Compare[4].MUXCY_I_carry_3_UNCONNECTED ;
  wire \NLW_Compare[4].MUXCY_I_lopt_UNCONNECTED ;
  wire \NLW_Compare[4].MUXCY_I_lopt_3_UNCONNECTED ;
  wire \NLW_Compare[5].MUXCY_I_SRL16_Sel_2_UNCONNECTED ;
  wire \NLW_Compare[5].MUXCY_I_carry_2_UNCONNECTED ;
  wire \NLW_Compare[5].MUXCY_I_carry_3_UNCONNECTED ;
  wire \NLW_Compare[5].MUXCY_I_lopt_UNCONNECTED ;
  wire \NLW_Compare[6].MUXCY_I_SRL16_Sel_1_UNCONNECTED ;
  wire \NLW_Compare[6].MUXCY_I_carry_1_UNCONNECTED ;
  wire \NLW_Compare[6].MUXCY_I_carry_2_UNCONNECTED ;
  wire \NLW_Compare[6].MUXCY_I_lopt_UNCONNECTED ;
  wire \NLW_Compare[7].MUXCY_I_SRL16_Sel_0_UNCONNECTED ;
  wire \NLW_Compare[7].MUXCY_I_carry_1_UNCONNECTED ;

  cpu_microblaze_v11_0_0_MB_MUXCY \Compare[0].MUXCY_I 
       (.Q(Q),
        .SRL16_Sel_7(SRL16_Sel_7),
        .carry_7(\NLW_Compare[0].MUXCY_I_carry_7_UNCONNECTED ),
        .lopt(\NLW_Compare[0].MUXCY_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_1),
        .lopt_2(SRL16_Sel_6),
        .lopt_3(\NLW_Compare[0].MUXCY_I_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_3),
        .lopt_5(SRL16_Sel_5),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(SRL16_Sel_4));
  cpu_MB_SRLC16E \Compare[0].SRLC16E_I 
       (.Address(Address[1:0]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .SRL16_MC15_7(SRL16_MC15_7),
        .SRL16_Sel_7(SRL16_Sel_7),
        .which_pc__0(which_pc__0));
  cpu_microblaze_v11_0_0_MB_MUXCY_34 \Compare[1].MUXCY_I 
       (.SRL16_Sel_6(\NLW_Compare[1].MUXCY_I_SRL16_Sel_6_UNCONNECTED ),
        .carry_6(\NLW_Compare[1].MUXCY_I_carry_6_UNCONNECTED ),
        .carry_7(\NLW_Compare[1].MUXCY_I_carry_7_UNCONNECTED ),
        .lopt(\NLW_Compare[1].MUXCY_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_1));
  cpu_MB_SRLC16E_35 \Compare[1].SRLC16E_I 
       (.Address(Address[5:2]),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_6(SRL16_MC15_6),
        .SRL16_MC15_7(SRL16_MC15_7),
        .SRL16_Sel_6(SRL16_Sel_6),
        .which_pc__0(which_pc__0));
  cpu_microblaze_v11_0_0_MB_MUXCY_36 \Compare[2].MUXCY_I 
       (.SRL16_Sel_5(\NLW_Compare[2].MUXCY_I_SRL16_Sel_5_UNCONNECTED ),
        .carry_5(\NLW_Compare[2].MUXCY_I_carry_5_UNCONNECTED ),
        .carry_6(\NLW_Compare[2].MUXCY_I_carry_6_UNCONNECTED ),
        .lopt(\NLW_Compare[2].MUXCY_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_3));
  cpu_MB_SRLC16E_37 \Compare[2].SRLC16E_I 
       (.Address(Address[9:6]),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_5(SRL16_MC15_5),
        .SRL16_MC15_6(SRL16_MC15_6),
        .SRL16_Sel_5(SRL16_Sel_5),
        .which_pc__0(which_pc__0));
  cpu_microblaze_v11_0_0_MB_MUXCY_38 \Compare[3].MUXCY_I 
       (.SRL16_Sel_4(\NLW_Compare[3].MUXCY_I_SRL16_Sel_4_UNCONNECTED ),
        .carry_4(carry_4),
        .carry_5(\NLW_Compare[3].MUXCY_I_carry_5_UNCONNECTED ),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  cpu_MB_SRLC16E_39 \Compare[3].SRLC16E_I 
       (.Address(Address[13:10]),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_4(SRL16_MC15_4),
        .SRL16_MC15_5(SRL16_MC15_5),
        .SRL16_Sel_4(SRL16_Sel_4),
        .which_pc__0(which_pc__0));
  cpu_microblaze_v11_0_0_MB_MUXCY_40 \Compare[4].MUXCY_I 
       (.SRL16_Sel_3(SRL16_Sel_3),
        .carry_3(\NLW_Compare[4].MUXCY_I_carry_3_UNCONNECTED ),
        .carry_4(carry_4),
        .lopt(\NLW_Compare[4].MUXCY_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_7),
        .lopt_2(SRL16_Sel_2),
        .lopt_3(\NLW_Compare[4].MUXCY_I_lopt_3_UNCONNECTED ),
        .lopt_4(lopt_9),
        .lopt_5(SRL16_Sel_1),
        .lopt_6(lopt_10),
        .lopt_7(lopt_11),
        .lopt_8(SRL16_Sel_0));
  cpu_MB_SRLC16E_41 \Compare[4].SRLC16E_I 
       (.Address(Address[14]),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_3(SRL16_MC15_3),
        .SRL16_MC15_4(SRL16_MC15_4),
        .SRL16_Sel_3(SRL16_Sel_3),
        .which_pc__0(which_pc__0));
  cpu_microblaze_v11_0_0_MB_MUXCY_42 \Compare[5].MUXCY_I 
       (.SRL16_Sel_2(\NLW_Compare[5].MUXCY_I_SRL16_Sel_2_UNCONNECTED ),
        .carry_2(\NLW_Compare[5].MUXCY_I_carry_2_UNCONNECTED ),
        .carry_3(\NLW_Compare[5].MUXCY_I_carry_3_UNCONNECTED ),
        .lopt(\NLW_Compare[5].MUXCY_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_7));
  cpu_MB_SRLC16E_43 \Compare[5].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_2(SRL16_MC15_2),
        .SRL16_MC15_3(SRL16_MC15_3),
        .SRL16_Sel_2(SRL16_Sel_2),
        .which_pc__0(which_pc__0));
  cpu_microblaze_v11_0_0_MB_MUXCY_44 \Compare[6].MUXCY_I 
       (.SRL16_Sel_1(\NLW_Compare[6].MUXCY_I_SRL16_Sel_1_UNCONNECTED ),
        .carry_1(\NLW_Compare[6].MUXCY_I_carry_1_UNCONNECTED ),
        .carry_2(\NLW_Compare[6].MUXCY_I_carry_2_UNCONNECTED ),
        .lopt(\NLW_Compare[6].MUXCY_I_lopt_UNCONNECTED ),
        .lopt_1(lopt_9));
  cpu_MB_SRLC16E_45 \Compare[6].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_1(SRL16_MC15_1),
        .SRL16_MC15_2(SRL16_MC15_2),
        .SRL16_Sel_1(SRL16_Sel_1),
        .which_pc__0(which_pc__0));
  cpu_microblaze_v11_0_0_MB_MUXCY_46 \Compare[7].MUXCY_I 
       (.SRL16_Sel_0(\NLW_Compare[7].MUXCY_I_SRL16_Sel_0_UNCONNECTED ),
        .carry_0(carry_0),
        .carry_1(\NLW_Compare[7].MUXCY_I_carry_1_UNCONNECTED ),
        .lopt(lopt_10),
        .lopt_1(lopt_11));
  cpu_MB_SRLC16E_47 \Compare[7].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_TDI(Dbg_TDI),
        .SRL16_MC15_1(SRL16_MC15_1),
        .SRL16_Sel_0(SRL16_Sel_0),
        .which_pc__0(which_pc__0));
  cpu_microblaze_v11_0_0_MB_MUXCY_48 \The_First_BreakPoints.MUXCY_Post 
       (.\Area_Debug_Control.normal_stop_cmd_hold_reg (\Area_Debug_Control.normal_stop_cmd_hold_reg ),
        .Hit(Hit),
        .Single_Step_N(Single_Step_N),
        .\Using_FPGA.Native_i_6 (\Using_FPGA.Native_i_6 ),
        .\Using_FPGA.Native_i_6_0 (\Using_FPGA.Native_i_6_0 ),
        .carry_0(carry_0),
        .normal_stop_cmd_hold(normal_stop_cmd_hold),
        .normal_stop_cmd_i(normal_stop_cmd_i));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module cpu_blk_mem_gen_generic_cstr
   (douta,
    doutb,
    rsta_busy,
    rstb_busy,
    clkb,
    clka,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web,
    rsta,
    ena,
    rstb,
    enb);
  output [31:0]douta;
  output [31:0]doutb;
  output rsta_busy;
  output rstb_busy;
  input clkb;
  input clka;
  input [14:0]addra;
  input [14:0]addrb;
  input [31:0]dina;
  input [31:0]dinb;
  input [3:0]wea;
  input [3:0]web;
  input rsta;
  input ena;
  input rstb;
  input enb;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [31:0]dina;
  wire [31:0]dinb;
  wire [31:0]douta;
  wire [31:0]doutb;
  wire ena;
  wire enb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire \ramloop[31].ram.r_n_8 ;
  wire \ramloop[31].ram.r_n_9 ;
  wire [3:0]wea;
  wire [3:0]web;
  wire \NLW_ramloop[31].ram.r_rsta_UNCONNECTED ;
  wire \NLW_ramloop[31].ram.r_rsta_busy_UNCONNECTED ;
  wire \NLW_ramloop[31].ram.r_rstb_UNCONNECTED ;
  wire \NLW_ramloop[31].ram.r_rstb_busy_UNCONNECTED ;

  cpu_blk_mem_gen_prim_width \ramloop[0].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[0]),
        .dinb(dinb[0]),
        .douta(douta[0]),
        .doutb(doutb[0]),
        .wea(wea[0]),
        .web(web[0]));
  cpu_blk_mem_gen_prim_width__parameterized9 \ramloop[10].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[10]),
        .dinb(dinb[10]),
        .douta(douta[10]),
        .doutb(doutb[10]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[1]),
        .web(web[1]));
  cpu_blk_mem_gen_prim_width__parameterized10 \ramloop[11].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[11]),
        .dinb(dinb[11]),
        .douta(douta[11]),
        .doutb(doutb[11]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[1]),
        .web(web[1]));
  cpu_blk_mem_gen_prim_width__parameterized11 \ramloop[12].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[12]),
        .dinb(dinb[12]),
        .douta(douta[12]),
        .doutb(doutb[12]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[1]),
        .web(web[1]));
  cpu_blk_mem_gen_prim_width__parameterized12 \ramloop[13].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[13]),
        .dinb(dinb[13]),
        .douta(douta[13]),
        .doutb(doutb[13]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[1]),
        .web(web[1]));
  cpu_blk_mem_gen_prim_width__parameterized13 \ramloop[14].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[14]),
        .dinb(dinb[14]),
        .douta(douta[14]),
        .doutb(doutb[14]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[1]),
        .web(web[1]));
  cpu_blk_mem_gen_prim_width__parameterized14 \ramloop[15].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[15]),
        .dinb(dinb[15]),
        .douta(douta[15]),
        .doutb(doutb[15]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[1]),
        .web(web[1]));
  cpu_blk_mem_gen_prim_width__parameterized15 \ramloop[16].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[16]),
        .dinb(dinb[16]),
        .douta(douta[16]),
        .doutb(doutb[16]),
        .wea(wea[2]),
        .web(web[2]));
  cpu_blk_mem_gen_prim_width__parameterized16 \ramloop[17].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[17]),
        .dinb(dinb[17]),
        .douta(douta[17]),
        .doutb(doutb[17]),
        .wea(wea[2]),
        .web(web[2]));
  cpu_blk_mem_gen_prim_width__parameterized17 \ramloop[18].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[18]),
        .dinb(dinb[18]),
        .douta(douta[18]),
        .doutb(doutb[18]),
        .wea(wea[2]),
        .web(web[2]));
  cpu_blk_mem_gen_prim_width__parameterized18 \ramloop[19].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[19]),
        .dinb(dinb[19]),
        .douta(douta[19]),
        .doutb(doutb[19]),
        .wea(wea[2]),
        .web(web[2]));
  cpu_blk_mem_gen_prim_width__parameterized0 \ramloop[1].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[1]),
        .dinb(dinb[1]),
        .douta(douta[1]),
        .doutb(doutb[1]),
        .wea(wea[0]),
        .web(web[0]));
  cpu_blk_mem_gen_prim_width__parameterized19 \ramloop[20].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[20]),
        .dinb(dinb[20]),
        .douta(douta[20]),
        .doutb(doutb[20]),
        .wea(wea[2]),
        .web(web[2]));
  cpu_blk_mem_gen_prim_width__parameterized20 \ramloop[21].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[21]),
        .dinb(dinb[21]),
        .douta(douta[21]),
        .doutb(doutb[21]),
        .wea(wea[2]),
        .web(web[2]));
  cpu_blk_mem_gen_prim_width__parameterized21 \ramloop[22].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[22]),
        .dinb(dinb[22]),
        .douta(douta[22]),
        .doutb(doutb[22]),
        .wea(wea[2]),
        .web(web[2]));
  cpu_blk_mem_gen_prim_width__parameterized22 \ramloop[23].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[23]),
        .dinb(dinb[23]),
        .douta(douta[23]),
        .doutb(doutb[23]),
        .wea(wea[2]),
        .web(web[2]));
  cpu_blk_mem_gen_prim_width__parameterized23 \ramloop[24].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[24]),
        .dinb(dinb[24]),
        .douta(douta[24]),
        .doutb(doutb[24]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[3]),
        .web(web[3]));
  cpu_blk_mem_gen_prim_width__parameterized24 \ramloop[25].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[25]),
        .dinb(dinb[25]),
        .douta(douta[25]),
        .doutb(doutb[25]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[3]),
        .web(web[3]));
  cpu_blk_mem_gen_prim_width__parameterized25 \ramloop[26].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[26]),
        .dinb(dinb[26]),
        .douta(douta[26]),
        .doutb(doutb[26]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[3]),
        .web(web[3]));
  cpu_blk_mem_gen_prim_width__parameterized26 \ramloop[27].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[27]),
        .dinb(dinb[27]),
        .douta(douta[27]),
        .doutb(doutb[27]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[3]),
        .web(web[3]));
  cpu_blk_mem_gen_prim_width__parameterized27 \ramloop[28].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[28]),
        .dinb(dinb[28]),
        .douta(douta[28]),
        .doutb(doutb[28]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[3]),
        .web(web[3]));
  cpu_blk_mem_gen_prim_width__parameterized28 \ramloop[29].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[29]),
        .dinb(dinb[29]),
        .douta(douta[29]),
        .doutb(doutb[29]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[3]),
        .web(web[3]));
  cpu_blk_mem_gen_prim_width__parameterized1 \ramloop[2].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[2]),
        .dinb(dinb[2]),
        .douta(douta[2]),
        .doutb(doutb[2]),
        .wea(wea[0]),
        .web(web[0]));
  cpu_blk_mem_gen_prim_width__parameterized29 \ramloop[30].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[30]),
        .dinb(dinb[30]),
        .douta(douta[30]),
        .doutb(doutb[30]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[3]),
        .web(web[3]));
  cpu_blk_mem_gen_prim_width__parameterized30 \ramloop[31].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .\SAFETY_CKT_GEN.POR_A_reg_0 (\ramloop[31].ram.r_n_8 ),
        .\SAFETY_CKT_GEN.POR_B_reg_0 (\ramloop[31].ram.r_n_9 ),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[31]),
        .dinb(dinb[31]),
        .douta(douta[31]),
        .doutb(doutb[31]),
        .ena(ena),
        .enb(enb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .rsta(\NLW_ramloop[31].ram.r_rsta_UNCONNECTED ),
        .rsta_busy(\NLW_ramloop[31].ram.r_rsta_busy_UNCONNECTED ),
        .rstb(\NLW_ramloop[31].ram.r_rstb_UNCONNECTED ),
        .rstb_busy(\NLW_ramloop[31].ram.r_rstb_busy_UNCONNECTED ),
        .wea(wea[3]),
        .web(web[3]));
  cpu_blk_mem_gen_prim_width__parameterized2 \ramloop[3].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[3]),
        .dinb(dinb[3]),
        .douta(douta[3]),
        .doutb(doutb[3]),
        .wea(wea[0]),
        .web(web[0]));
  cpu_blk_mem_gen_prim_width__parameterized3 \ramloop[4].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[4]),
        .dinb(dinb[4]),
        .douta(douta[4]),
        .doutb(doutb[4]),
        .wea(wea[0]),
        .web(web[0]));
  cpu_blk_mem_gen_prim_width__parameterized4 \ramloop[5].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[5]),
        .dinb(dinb[5]),
        .douta(douta[5]),
        .doutb(doutb[5]),
        .wea(wea[0]),
        .web(web[0]));
  cpu_blk_mem_gen_prim_width__parameterized5 \ramloop[6].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[6]),
        .dinb(dinb[6]),
        .douta(douta[6]),
        .doutb(doutb[6]),
        .wea(wea[0]),
        .web(web[0]));
  cpu_blk_mem_gen_prim_width__parameterized6 \ramloop[7].ram.r 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram (\ramloop[31].ram.r_n_8 ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\ramloop[31].ram.r_n_9 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[7]),
        .dinb(dinb[7]),
        .douta(douta[7]),
        .doutb(doutb[7]),
        .wea(wea[0]),
        .web(web[0]));
  cpu_blk_mem_gen_prim_width__parameterized7 \ramloop[8].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[8]),
        .dinb(dinb[8]),
        .douta(douta[8]),
        .doutb(doutb[8]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[1]),
        .web(web[1]));
  cpu_blk_mem_gen_prim_width__parameterized8 \ramloop[9].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[9]),
        .dinb(dinb[9]),
        .douta(douta[9]),
        .doutb(doutb[9]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[1]),
        .web(web[1]));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized0
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized0 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized1
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized1 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized10
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized10 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized11
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized11 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized12
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized12 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized13
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized13 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized14
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized14 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized15
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized15 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized16
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized16 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized17
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized17 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized18
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized18 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized19
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized19 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized2
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized2 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized20
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized20 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized21
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized21 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized22
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized22 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized23
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized23 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized24
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized24 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized25
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized25 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized26
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized26 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized27
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized27 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized28
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized28 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized29
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized29 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized3
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized3 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized30
   (douta,
    doutb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    rsta_busy,
    rstb_busy,
    \SAFETY_CKT_GEN.POR_A_reg_0 ,
    \SAFETY_CKT_GEN.POR_B_reg_0 ,
    clkb,
    clka,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web,
    rsta,
    ena,
    rstb,
    enb);
  output [0:0]douta;
  output [0:0]doutb;
  output ENA_I;
  output ENB_I;
  output ram_rstram_a;
  output ram_rstram_b;
  output rsta_busy;
  output rstb_busy;
  output \SAFETY_CKT_GEN.POR_A_reg_0 ;
  output \SAFETY_CKT_GEN.POR_B_reg_0 ;
  input clkb;
  input clka;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;
  input rsta;
  input ena;
  input rstb;
  input enb;

  wire ENA_I;
  wire ENA_dly;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly;
  wire ENB_dly_D;
  wire POR_A;
  wire POR_B;
  wire \SAFETY_CKT_GEN.POR_A_i_1_n_0 ;
  wire \SAFETY_CKT_GEN.POR_A_reg_0 ;
  wire \SAFETY_CKT_GEN.POR_B_i_1_n_0 ;
  wire \SAFETY_CKT_GEN.POR_B_reg_0 ;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[0] ;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[4] ;
  wire \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ;
  wire \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[0] ;
  wire \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[4] ;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ena;
  wire enb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_prim_noinit.ram_rsta_UNCONNECTED ;
  wire \NLW_prim_noinit.ram_rstb_UNCONNECTED ;

  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_D_reg 
       (.C(clka),
        .CE(1'b1),
        .D(ENA_dly),
        .Q(ENA_dly_D),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg 
       (.C(clka),
        .CE(1'b1),
        .D(ram_rstram_a),
        .Q(ENA_dly),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_D_reg 
       (.C(clkb),
        .CE(1'b1),
        .D(ENB_dly),
        .Q(ENB_dly_D),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_reg 
       (.C(clkb),
        .CE(1'b1),
        .D(ram_rstram_b),
        .Q(ENB_dly),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.POR_A_i_1 
       (.I0(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[0] ),
        .I1(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[4] ),
        .O(\SAFETY_CKT_GEN.POR_A_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.POR_A_reg 
       (.C(clka),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.POR_A_i_1_n_0 ),
        .Q(POR_A),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.POR_B_i_1 
       (.I0(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[0] ),
        .I1(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[4] ),
        .O(\SAFETY_CKT_GEN.POR_B_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.POR_B_reg 
       (.C(clkb),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.POR_B_i_1_n_0 ),
        .Q(POR_B),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[0] 
       (.C(clka),
        .CE(1'b1),
        .D(1'b1),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[0] ),
        .R(1'b0));
  (* srl_bus_name = "inst/lmb_bram_I/U0/\inst_blk_mem_gen/gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen/valid.cstr/ramloop[31].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg " *) 
  (* srl_name = "inst/lmb_bram_I/U0/\inst_blk_mem_gen/gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen/valid.cstr/ramloop[31].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(clka),
        .D(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[0] ),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[4] 
       (.C(clka),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[0] 
       (.C(clkb),
        .CE(1'b1),
        .D(1'b1),
        .Q(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[0] ),
        .R(1'b0));
  (* srl_bus_name = "inst/lmb_bram_I/U0/\inst_blk_mem_gen/gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen/valid.cstr/ramloop[31].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg " *) 
  (* srl_name = "inst/lmb_bram_I/U0/\inst_blk_mem_gen/gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen/valid.cstr/ramloop[31].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(clkb),
        .D(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[0] ),
        .Q(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[4] 
       (.C(clkb),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[4] ),
        .R(1'b0));
  cpu_blk_mem_gen_prim_wrapper__parameterized30 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_A(POR_A),
        .POR_B(POR_B),
        .\SAFETY_CKT_GEN.POR_A_reg (\SAFETY_CKT_GEN.POR_A_reg_0 ),
        .\SAFETY_CKT_GEN.POR_B_reg (\SAFETY_CKT_GEN.POR_B_reg_0 ),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ena(ena),
        .enb(enb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .rsta(\NLW_prim_noinit.ram_rsta_UNCONNECTED ),
        .rstb(\NLW_prim_noinit.ram_rstb_UNCONNECTED ),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized4
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized4 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized5
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized5 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized6
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized6 \prim_noinit.ram 
       (.\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram ),
        .\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 (\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized7
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized7 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized8
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized8 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module cpu_blk_mem_gen_prim_width__parameterized9
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  cpu_blk_mem_gen_prim_wrapper__parameterized9 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[0:0][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized0
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[1:1][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized1
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[2:2][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized10
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[11:11][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized11
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[12:12][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized12
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[13:13][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized13
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[14:14][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized14
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[15:15][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized15
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[16:16][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized16
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[17:17][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized17
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[18:18][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized18
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[19:19][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized19
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[20:20][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized2
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[3:3][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized20
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[21:21][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized21
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[22:22][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized22
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[23:23][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized23
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[24:24][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized24
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[25:25][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized25
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[26:26][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized26
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[27:27][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000001),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized27
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[28:28][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000001),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized28
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[29:29][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000001),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized29
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[30:30][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized3
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[4:4][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized30
   (douta,
    doutb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    \SAFETY_CKT_GEN.POR_A_reg ,
    \SAFETY_CKT_GEN.POR_B_reg ,
    clka,
    clkb,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web,
    rsta,
    POR_A,
    ENA_dly_D,
    ena,
    rstb,
    POR_B,
    ENB_dly_D,
    enb);
  output [0:0]douta;
  output [0:0]doutb;
  output ENA_I;
  output ENB_I;
  output ram_rstram_a;
  output ram_rstram_b;
  output \SAFETY_CKT_GEN.POR_A_reg ;
  output \SAFETY_CKT_GEN.POR_B_reg ;
  input clka;
  input clkb;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;
  input rsta;
  input POR_A;
  input ENA_dly_D;
  input ena;
  input rstb;
  input POR_B;
  input ENB_dly_D;
  input enb;

  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_A;
  wire POR_B;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ena;
  wire enb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  assign \SAFETY_CKT_GEN.POR_A_reg  = POR_A;
  assign \SAFETY_CKT_GEN.POR_B_reg  = POR_B;
  assign ram_rstram_a = POR_A;
  assign ram_rstram_b = POR_B;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[31:31][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000001),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(POR_A),
        .RSTRAMB(POR_B),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_i_1 
       (.I0(ENA_dly_D),
        .I1(ena),
        .O(ENA_I));
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_i_2 
       (.I0(ENB_dly_D),
        .I1(enb),
        .O(ENB_I));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized4
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[5:5][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized5
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[6:6][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized6
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ,
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  input \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ;
  wire \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ;
  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[7:7][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_0 ),
        .RSTRAMB(\DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_1 ),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized7
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[8:8][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized8
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[9:9][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module cpu_blk_mem_gen_prim_wrapper__parameterized9
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [0:0]douta;
  output [0:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [14:0]addra;
  input [14:0]addrb;
  input [0:0]dina;
  input [0:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [0:0]dina;
  wire [0:0]dinb;
  wire [0:0]douta;
  wire [0:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  (* bmm_info_memory_device = "[10:10][0:32767]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(1),
    .READ_WIDTH_B(1),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(1),
    .WRITE_WIDTH_B(1)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra}),
        .ADDRBWRADDR({1'b1,addrb}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:1],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:1],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_WEBWE_UNCONNECTED [3:1],web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module cpu_blk_mem_gen_top
   (douta,
    doutb,
    rsta_busy,
    rstb_busy,
    clkb,
    clka,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web,
    rsta,
    ena,
    rstb,
    enb);
  output [31:0]douta;
  output [31:0]doutb;
  output rsta_busy;
  output rstb_busy;
  input clkb;
  input clka;
  input [14:0]addra;
  input [14:0]addrb;
  input [31:0]dina;
  input [31:0]dinb;
  input [3:0]wea;
  input [3:0]web;
  input rsta;
  input ena;
  input rstb;
  input enb;

  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [31:0]dina;
  wire [31:0]dinb;
  wire [31:0]douta;
  wire [31:0]doutb;
  wire ena;
  wire enb;
  wire [3:0]wea;
  wire [3:0]web;
  wire \NLW_valid.cstr_rsta_UNCONNECTED ;
  wire \NLW_valid.cstr_rsta_busy_UNCONNECTED ;
  wire \NLW_valid.cstr_rstb_UNCONNECTED ;
  wire \NLW_valid.cstr_rstb_busy_UNCONNECTED ;

  cpu_blk_mem_gen_generic_cstr \valid.cstr 
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ena(ena),
        .enb(enb),
        .rsta(\NLW_valid.cstr_rsta_UNCONNECTED ),
        .rsta_busy(\NLW_valid.cstr_rsta_busy_UNCONNECTED ),
        .rstb(\NLW_valid.cstr_rstb_UNCONNECTED ),
        .rstb_busy(\NLW_valid.cstr_rstb_busy_UNCONNECTED ),
        .wea(wea),
        .web(web));
endmodule

(* C_ADDRA_WIDTH = "32" *) (* C_ADDRB_WIDTH = "32" *) (* C_ALGORITHM = "1" *) 
(* C_AXI_ID_WIDTH = "4" *) (* C_AXI_SLAVE_TYPE = "0" *) (* C_AXI_TYPE = "1" *) 
(* C_BYTE_SIZE = "8" *) (* C_COMMON_CLK = "0" *) (* C_COUNT_18K_BRAM = "0" *) 
(* C_COUNT_36K_BRAM = "32" *) (* C_CTRL_ECC_ALGO = "NONE" *) (* C_DEFAULT_DATA = "0" *) 
(* C_DISABLE_WARN_BHV_COLL = "0" *) (* C_DISABLE_WARN_BHV_RANGE = "0" *) (* C_ELABORATION_DIR = "./" *) 
(* C_ENABLE_32BIT_ADDRESS = "1" *) (* C_EN_DEEPSLEEP_PIN = "0" *) (* C_EN_ECC_PIPE = "0" *) 
(* C_EN_RDADDRA_CHG = "0" *) (* C_EN_RDADDRB_CHG = "0" *) (* C_EN_SAFETY_CKT = "1" *) 
(* C_EN_SHUTDOWN_PIN = "0" *) (* C_EN_SLEEP_PIN = "0" *) (* C_EST_POWER_SUMMARY = "Estimated Power for IP     :     20.388 mW" *) 
(* C_FAMILY = "virtex7" *) (* C_HAS_AXI_ID = "0" *) (* C_HAS_ENA = "1" *) 
(* C_HAS_ENB = "1" *) (* C_HAS_INJECTERR = "0" *) (* C_HAS_MEM_OUTPUT_REGS_A = "0" *) 
(* C_HAS_MEM_OUTPUT_REGS_B = "0" *) (* C_HAS_MUX_OUTPUT_REGS_A = "0" *) (* C_HAS_MUX_OUTPUT_REGS_B = "0" *) 
(* C_HAS_REGCEA = "0" *) (* C_HAS_REGCEB = "0" *) (* C_HAS_RSTA = "1" *) 
(* C_HAS_RSTB = "1" *) (* C_HAS_SOFTECC_INPUT_REGS_A = "0" *) (* C_HAS_SOFTECC_OUTPUT_REGS_B = "0" *) 
(* C_INITA_VAL = "0" *) (* C_INITB_VAL = "0" *) (* C_INIT_FILE = "bd_3914_lmb_bram_I_0.mem" *) 
(* C_INIT_FILE_NAME = "no_coe_file_loaded" *) (* C_INTERFACE_TYPE = "0" *) (* C_LOAD_INIT_FILE = "0" *) 
(* C_MEM_TYPE = "2" *) (* C_MUX_PIPELINE_STAGES = "0" *) (* C_PRIM_TYPE = "1" *) 
(* C_READ_DEPTH_A = "32768" *) (* C_READ_DEPTH_B = "32768" *) (* C_READ_LATENCY_A = "1" *) 
(* C_READ_LATENCY_B = "1" *) (* C_READ_WIDTH_A = "32" *) (* C_READ_WIDTH_B = "32" *) 
(* C_RSTRAM_A = "0" *) (* C_RSTRAM_B = "0" *) (* C_RST_PRIORITY_A = "CE" *) 
(* C_RST_PRIORITY_B = "CE" *) (* C_SIM_COLLISION_CHECK = "ALL" *) (* C_USE_BRAM_BLOCK = "1" *) 
(* C_USE_BYTE_WEA = "1" *) (* C_USE_BYTE_WEB = "1" *) (* C_USE_DEFAULT_DATA = "0" *) 
(* C_USE_ECC = "0" *) (* C_USE_SOFTECC = "0" *) (* C_USE_URAM = "0" *) 
(* C_WEA_WIDTH = "4" *) (* C_WEB_WIDTH = "4" *) (* C_WRITE_DEPTH_A = "32768" *) 
(* C_WRITE_DEPTH_B = "32768" *) (* C_WRITE_MODE_A = "WRITE_FIRST" *) (* C_WRITE_MODE_B = "WRITE_FIRST" *) 
(* C_WRITE_WIDTH_A = "32" *) (* C_WRITE_WIDTH_B = "32" *) (* C_XDEVICEFAMILY = "virtex7" *) 
(* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "blk_mem_gen_v8_4_2" *) 
module cpu_blk_mem_gen_v8_4_2
   (clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    douta,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    doutb,
    injectsbiterr,
    injectdbiterr,
    eccpipece,
    sbiterr,
    dbiterr,
    rdaddrecc,
    sleep,
    deepsleep,
    shutdown,
    rsta_busy,
    rstb_busy,
    s_aclk,
    s_aresetn,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    s_axi_injectsbiterr,
    s_axi_injectdbiterr,
    s_axi_sbiterr,
    s_axi_dbiterr,
    s_axi_rdaddrecc);
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [3:0]wea;
  input [31:0]addra;
  input [31:0]dina;
  output [31:0]douta;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [3:0]web;
  input [31:0]addrb;
  input [31:0]dinb;
  output [31:0]doutb;
  input injectsbiterr;
  input injectdbiterr;
  input eccpipece;
  output sbiterr;
  output dbiterr;
  output [31:0]rdaddrecc;
  input sleep;
  input deepsleep;
  input shutdown;
  output rsta_busy;
  output rstb_busy;
  input s_aclk;
  input s_aresetn;
  input [3:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input s_axi_awvalid;
  output s_axi_awready;
  input [31:0]s_axi_wdata;
  input [3:0]s_axi_wstrb;
  input s_axi_wlast;
  input s_axi_wvalid;
  output s_axi_wready;
  output [3:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output s_axi_bvalid;
  input s_axi_bready;
  input [3:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input s_axi_arvalid;
  output s_axi_arready;
  output [3:0]s_axi_rid;
  output [31:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output s_axi_rvalid;
  input s_axi_rready;
  input s_axi_injectsbiterr;
  input s_axi_injectdbiterr;
  output s_axi_sbiterr;
  output s_axi_dbiterr;
  output [31:0]s_axi_rdaddrecc;

  wire [31:0]addra;
  wire [31:0]addrb;
  wire clka;
  wire clkb;
  wire [31:0]dina;
  wire [31:0]dinb;
  wire [31:0]douta;
  wire [31:0]doutb;
  wire ena;
  wire enb;
  wire [3:0]wea;
  wire [3:0]web;
  wire NLW_inst_blk_mem_gen_rsta_UNCONNECTED;
  wire NLW_inst_blk_mem_gen_rsta_busy_UNCONNECTED;
  wire NLW_inst_blk_mem_gen_rstb_UNCONNECTED;
  wire NLW_inst_blk_mem_gen_rstb_busy_UNCONNECTED;

  cpu_blk_mem_gen_v8_4_2_synth inst_blk_mem_gen
       (.addra(addra[16:2]),
        .addrb(addrb[16:2]),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ena(ena),
        .enb(enb),
        .rsta(NLW_inst_blk_mem_gen_rsta_UNCONNECTED),
        .rsta_busy(NLW_inst_blk_mem_gen_rsta_busy_UNCONNECTED),
        .rstb(NLW_inst_blk_mem_gen_rstb_UNCONNECTED),
        .rstb_busy(NLW_inst_blk_mem_gen_rstb_busy_UNCONNECTED),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_2_synth" *) 
module cpu_blk_mem_gen_v8_4_2_synth
   (douta,
    doutb,
    rsta_busy,
    rstb_busy,
    clkb,
    clka,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web,
    rsta,
    ena,
    rstb,
    enb);
  output [31:0]douta;
  output [31:0]doutb;
  output rsta_busy;
  output rstb_busy;
  input clkb;
  input clka;
  input [14:0]addra;
  input [14:0]addrb;
  input [31:0]dina;
  input [31:0]dinb;
  input [3:0]wea;
  input [3:0]web;
  input rsta;
  input ena;
  input rstb;
  input enb;

  wire [14:0]addra;
  wire [14:0]addrb;
  wire clka;
  wire clkb;
  wire [31:0]dina;
  wire [31:0]dinb;
  wire [31:0]douta;
  wire [31:0]doutb;
  wire ena;
  wire enb;
  wire [3:0]wea;
  wire [3:0]web;
  wire \NLW_gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen_rsta_UNCONNECTED ;
  wire \NLW_gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen_rsta_busy_UNCONNECTED ;
  wire \NLW_gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen_rstb_UNCONNECTED ;
  wire \NLW_gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen_rstb_busy_UNCONNECTED ;

  cpu_blk_mem_gen_top \gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen 
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ena(ena),
        .enb(enb),
        .rsta(\NLW_gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen_rsta_UNCONNECTED ),
        .rsta_busy(\NLW_gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen_rsta_busy_UNCONNECTED ),
        .rstb(\NLW_gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen_rstb_UNCONNECTED ),
        .rstb_busy(\NLW_gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen_rstb_busy_UNCONNECTED ),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "instr_mux" *) 
module cpu_instr_mux
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [0:31]Y;
  input [0:31]Instr;
  input [32:0]LOCKSTEP_Master_Out;

  wire [0:31]Instr;
  wire [32:0]LOCKSTEP_Master_Out;
  wire [0:31]Y;

  cpu_mux_bus \Mux_LD.LD_inst 
       (.Instr(Instr),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out),
        .Y(Y));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDR" *) 
module cpu_microblaze_v11_0_0_MB_FDR
   (\Using_FPGA.Native_0 ,
    inHibit_EX_reg,
    \Using_FPGA.Native_1 ,
    buffer_Full,
    E,
    dbg_pause_reg,
    R,
    D_33,
    Clk,
    inHibit_EX,
    IReady1_out,
    nonvalid_IFetch_n_reg,
    nonvalid_IFetch_n_reg_0,
    nonvalid_IFetch_n_reg_1,
    S93_out,
    take_Intr_Now_III,
    ex_Valid_reg,
    ex_Valid_reg_0,
    ex_Valid_reg_1,
    \Using_FPGA.Native_2 ,
    mul_Executing,
    I294_out,
    DReady0_out,
    jump_Carry2,
    trace_jump_taken_i_reg,
    dbg_pause,
    \Size_17to32.imm_Reg_reg[15] );
  output \Using_FPGA.Native_0 ;
  output inHibit_EX_reg;
  output \Using_FPGA.Native_1 ;
  output buffer_Full;
  output [0:0]E;
  output dbg_pause_reg;
  input R;
  input D_33;
  input Clk;
  input inHibit_EX;
  input IReady1_out;
  input nonvalid_IFetch_n_reg;
  input nonvalid_IFetch_n_reg_0;
  input nonvalid_IFetch_n_reg_1;
  input S93_out;
  input take_Intr_Now_III;
  input ex_Valid_reg;
  input ex_Valid_reg_0;
  input ex_Valid_reg_1;
  input \Using_FPGA.Native_2 ;
  input mul_Executing;
  input I294_out;
  input DReady0_out;
  input jump_Carry2;
  input trace_jump_taken_i_reg;
  input dbg_pause;
  input \Size_17to32.imm_Reg_reg[15] ;

  wire Clk;
  wire DReady0_out;
  wire D_33;
  wire [0:0]E;
  wire I294_out;
  wire IReady1_out;
  wire R;
  wire S93_out;
  wire \Size_17to32.imm_Reg_reg[15] ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire buffer_Full;
  wire dbg_pause_reg;
  wire ex_Valid_i_2_n_0;
  wire ex_Valid_reg;
  wire ex_Valid_reg_0;
  wire ex_Valid_reg_1;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire jump_Carry2;
  wire mul_Executing;
  wire nonvalid_IFetch_n_reg;
  wire nonvalid_IFetch_n_reg_0;
  wire nonvalid_IFetch_n_reg_1;
  wire take_Intr_Now_III;
  wire trace_jump_taken_i_reg;

  (* OPT_MODIFIED = "PROPCONST " *) 
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \Size_17to32.imm_Reg[0]_i_1 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Size_17to32.imm_Reg_reg[15] ),
        .O(E));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D_33),
        .Q(\Using_FPGA.Native_0 ),
        .R(R));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(buffer_Full));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.Native_i_1__60 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(trace_jump_taken_i_reg),
        .O(dbg_pause_reg));
  LUT6 #(
    .INIT(64'hF3FFF3AAF300F3AA)) 
    ex_Valid_i_1
       (.I0(ex_Valid_i_2_n_0),
        .I1(S93_out),
        .I2(take_Intr_Now_III),
        .I3(ex_Valid_reg),
        .I4(ex_Valid_reg_0),
        .I5(ex_Valid_reg_1),
        .O(\Using_FPGA.Native_1 ));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT6 #(
    .INIT(64'hAEFFAEAEAEAEAEAE)) 
    ex_Valid_i_2
       (.I0(mul_Executing),
        .I1(I294_out),
        .I2(DReady0_out),
        .I3(\Using_FPGA.Native_0 ),
        .I4(jump_Carry2),
        .I5(trace_jump_taken_i_reg),
        .O(ex_Valid_i_2_n_0));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT6 #(
    .INIT(64'hFF11FFFFF0F0F0F0)) 
    nonvalid_IFetch_n_i_1
       (.I0(\Using_FPGA.Native_0 ),
        .I1(inHibit_EX),
        .I2(IReady1_out),
        .I3(nonvalid_IFetch_n_reg),
        .I4(nonvalid_IFetch_n_reg_0),
        .I5(nonvalid_IFetch_n_reg_1),
        .O(inHibit_EX_reg));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE
   (carry_In,
    sync_reset,
    \Using_FPGA.Native_0 ,
    correct_Carry_II,
    Clk);
  output carry_In;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input correct_Carry_II;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire carry_In;
  wire correct_Carry_II;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(correct_Carry_II),
        .Q(carry_In),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_602
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_603
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_606
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_607
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_61
   (alu_Op,
    sync_reset,
    \Using_FPGA.Native_0 ,
    D_32,
    Clk);
  output [0:0]alu_Op;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input D_32;
  input Clk;

  wire Clk;
  wire D_32;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]alu_Op;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D_32),
        .Q(alu_Op),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_610
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_611
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_614
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_615
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_618
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_619
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_62
   (alu_Op,
    sync_reset,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]alu_Op;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]alu_Op;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\Using_FPGA.Native_1 ),
        .Q(alu_Op),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_622
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_623
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_626
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_627
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_630
   (Op1_Logic,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output Op1_Logic;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire Op1_Logic;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(Op1_Logic),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_631
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_634
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_635
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;
  input \Using_FPGA.Native_1 ;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_n_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_n_0 ),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_638
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_639
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_64
   (force1,
    R_1,
    \Using_FPGA.Native_0 ,
    force1_i30_out,
    Clk);
  output force1;
  input R_1;
  input \Using_FPGA.Native_0 ;
  input force1_i30_out;
  input Clk;

  wire Clk;
  wire R_1;
  wire \Using_FPGA.Native_0 ;
  wire force1;
  wire force1_i30_out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(force1_i30_out),
        .Q(force1),
        .R(R_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_642
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_643
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_646
   (Shifted,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output Shifted;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire Shifted;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(Shifted),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_647
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_65
   (force2,
    R_1,
    \Using_FPGA.Native_0 ,
    force2_i,
    Clk);
  output force2;
  input R_1;
  input \Using_FPGA.Native_0 ;
  input force2_i;
  input Clk;

  wire Clk;
  wire R_1;
  wire \Using_FPGA.Native_0 ;
  wire force2;
  wire force2_i;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(force2_i),
        .Q(force2),
        .R(R_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_650
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_651
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_654
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_655
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_658
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_659
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_66
   (force_Val1,
    R_1,
    \Using_FPGA.Native_0 ,
    force_Val1_i28_out,
    Clk);
  output force_Val1;
  input R_1;
  input \Using_FPGA.Native_0 ;
  input force_Val1_i28_out;
  input Clk;

  wire Clk;
  wire R_1;
  wire \Using_FPGA.Native_0 ;
  wire force_Val1;
  wire force_Val1_i28_out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(force_Val1_i28_out),
        .Q(force_Val1),
        .R(R_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_662
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_2 ,
    sext8);
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input sext8;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire of_PipeRun;
  wire op1_I;
  wire sext8;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h20)) 
    \Using_FPGA.Native_i_1__67 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(sext8),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_663
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_666
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_667
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_670
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_671
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_674
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_675
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_678
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_679
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_682
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_683
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_686
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_687
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_690
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_691
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_694
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_695
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_698
   (\Using_FPGA.Native_0 ,
    Sext,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    sext16,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    sext8);
  output \Using_FPGA.Native_0 ;
  output Sext;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input sext16;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input sext8;

  wire Clk;
  wire Sext;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire of_PipeRun;
  wire op1_I;
  wire sext16;
  wire sext8;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h0B080808)) 
    \Using_FPGA.Native_i_1__66 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(sext16),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(sext8),
        .O(Sext));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_699
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_702
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_703
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_706
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_707
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_710
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_711
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_714
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_715
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_718
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_719
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_722
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_723
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_726
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_727
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_73
   (reg_Test_Equal_N,
    R_1,
    \Using_FPGA.Native_0 ,
    Reg_Test_Equal_N_i7_out,
    Clk);
  output reg_Test_Equal_N;
  input R_1;
  input \Using_FPGA.Native_0 ;
  input Reg_Test_Equal_N_i7_out;
  input Clk;

  wire Clk;
  wire R_1;
  wire Reg_Test_Equal_N_i7_out;
  wire \Using_FPGA.Native_0 ;
  wire reg_Test_Equal_N;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Reg_Test_Equal_N_i7_out),
        .Q(reg_Test_Equal_N),
        .R(R_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_79
   (use_Reg_Neg_DI,
    R_1,
    \Using_FPGA.Native_0 ,
    use_Reg_Neg_DI_i27_out,
    Clk);
  output use_Reg_Neg_DI;
  input R_1;
  input \Using_FPGA.Native_0 ;
  input use_Reg_Neg_DI_i27_out;
  input Clk;

  wire Clk;
  wire R_1;
  wire \Using_FPGA.Native_0 ;
  wire use_Reg_Neg_DI;
  wire use_Reg_Neg_DI_i27_out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(use_Reg_Neg_DI_i27_out),
        .Q(use_Reg_Neg_DI),
        .R(R_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRE" *) 
module cpu_microblaze_v11_0_0_MB_FDRE_80
   (use_Reg_Neg_S,
    R_1,
    \Using_FPGA.Native_0 ,
    use_Reg_Neg_S_i29_out,
    Clk);
  output use_Reg_Neg_S;
  input R_1;
  input \Using_FPGA.Native_0 ;
  input use_Reg_Neg_S_i29_out;
  input Clk;

  wire Clk;
  wire R_1;
  wire \Using_FPGA.Native_0 ;
  wire use_Reg_Neg_S;
  wire use_Reg_Neg_S_i29_out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(use_Reg_Neg_S_i29_out),
        .Q(use_Reg_Neg_S),
        .R(R_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRSE" *) 
module cpu_microblaze_v11_0_0_MB_FDRSE
   (\Using_FPGA.Native_0 ,
    LOCKSTEP_Master_Out,
    \Using_FPGA.Native_1 ,
    load_Store_i_reg,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    Clk,
    S,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    active_access_reg,
    active_access_reg_0,
    active_access_reg_1,
    active_access_reg_2,
    load_Store_i,
    ex_Valid,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    sync_reset,
    Reset_Mode,
    \data_rd_reg_reg[32] ,
    \data_rd_reg_reg[32]_0 ,
    Valid_Instr_i,
    \data_rd_reg_reg[32]_1 ,
    \data_rd_reg_reg[32]_2 );
  output \Using_FPGA.Native_0 ;
  output [0:0]LOCKSTEP_Master_Out;
  output \Using_FPGA.Native_1 ;
  output load_Store_i_reg;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input Clk;
  input S;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input active_access_reg;
  input active_access_reg_0;
  input active_access_reg_1;
  input active_access_reg_2;
  input load_Store_i;
  input ex_Valid;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input sync_reset;
  input [0:1]Reset_Mode;
  input \data_rd_reg_reg[32] ;
  input \data_rd_reg_reg[32]_0 ;
  input Valid_Instr_i;
  input \data_rd_reg_reg[32]_1 ;
  input \data_rd_reg_reg[32]_2 ;

  wire Clk;
  wire S;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__69_n_0 ;
  wire \Using_FPGA.Native_i_2__52_n_0 ;
  wire Valid_Instr_i;
  wire active_access_reg;
  wire active_access_reg_0;
  wire active_access_reg_1;
  wire active_access_reg_2;
  wire \data_rd_reg_reg[32] ;
  wire \data_rd_reg_reg[32]_0 ;
  wire \data_rd_reg_reg[32]_1 ;
  wire \data_rd_reg_reg[32]_2 ;
  wire ex_Valid;
  wire load_Store_i;
  wire load_Store_i_reg;

  LUT2 #(
    .INIT(4'hB)) 
    \LOCKSTEP_Master_Out[1]_INST_0_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ex_Valid),
        .O(\Using_FPGA.Native_1 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_2__52_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_i_1__69_n_0 ));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__69 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(\Using_FPGA.Native_5 ),
        .O(\Using_FPGA.Native_i_1__69_n_0 ));
  LUT4 #(
    .INIT(16'hFEAE)) 
    \Using_FPGA.Native_i_2__52 
       (.I0(S),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_i_2__52_n_0 ));
  LUT6 #(
    .INIT(64'hBBFBBBFBBBFBFFFF)) 
    active_access_i_2
       (.I0(\Using_FPGA.Native_1 ),
        .I1(load_Store_i),
        .I2(active_access_reg_2),
        .I3(active_access_reg_1),
        .I4(active_access_reg_0),
        .I5(active_access_reg),
        .O(load_Store_i_reg));
  LUT6 #(
    .INIT(64'hFFFF5554FFFCFFFC)) 
    \data_rd_reg[32]_i_2 
       (.I0(\data_rd_reg_reg[32] ),
        .I1(\data_rd_reg_reg[32]_0 ),
        .I2(Valid_Instr_i),
        .I3(\Using_FPGA.Native_0 ),
        .I4(\data_rd_reg_reg[32]_1 ),
        .I5(\data_rd_reg_reg[32]_2 ),
        .O(\Serial_Dbg_Intf.if_debug_ready_i_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRSE" *) 
module cpu_microblaze_v11_0_0_MB_FDRSE_18
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    R,
    \Use_Async_Reset.sync_reset_reg ,
    Clk,
    dbg_stop_1,
    trig_out_0_synced_1,
    trig_out_0_synced,
    Dbg_Stop,
    \Area_Debug_Control.dbg_stop_Detected_reg ,
    S,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    sync_reset,
    jump,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    Reset_Mode);
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output R;
  output \Use_Async_Reset.sync_reset_reg ;
  input Clk;
  input dbg_stop_1;
  input trig_out_0_synced_1;
  input trig_out_0_synced;
  input Dbg_Stop;
  input \Area_Debug_Control.dbg_stop_Detected_reg ;
  input S;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input sync_reset;
  input jump;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input [0:1]Reset_Mode;

  wire \Area_Debug_Control.dbg_stop_Detected_reg ;
  wire Clk;
  wire R;
  wire S;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__70_n_0 ;
  wire \Using_FPGA.Native_i_2__51_n_0 ;
  wire jump;
  wire sync_reset;

  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'h4)) 
    \Area_Debug_Control.dbg_stop_Detected_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Area_Debug_Control.dbg_stop_Detected_reg ),
        .O(\Using_FPGA.Native_1 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_2__51_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_i_1__70_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \Using_FPGA.Native_i_1__2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(sync_reset),
        .I2(jump),
        .O(R));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__70 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(\Using_FPGA.Native_5 ),
        .O(\Using_FPGA.Native_i_1__70_n_0 ));
  LUT4 #(
    .INIT(16'hFEAE)) 
    \Using_FPGA.Native_i_2__51 
       (.I0(S),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_i_2__51_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    using_Imm_i_2
       (.I0(sync_reset),
        .I1(\Using_FPGA.Native_0 ),
        .O(\Use_Async_Reset.sync_reset_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRSE" *) 
module cpu_microblaze_v11_0_0_MB_FDRSE_19
   (\Using_FPGA.Native_0 ,
    S,
    \Area_Debug_Control.normal_stop_cmd_hold_reg ,
    trace_exception_taken_i_reg,
    \Use_Async_Reset.sync_reset_reg ,
    start_single_step_reg,
    \Use_Async_Reset.sync_reset_reg_0 ,
    \Using_FPGA.Native_1 ,
    E,
    Clk,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    exception_reg,
    exception_reg_0,
    force_stop_overrun,
    D,
    ok_To_Stop,
    normal_stop_cmd_hold,
    normal_stop_cmd_i,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    dbg_clean_stop,
    \Using_FPGA.Native_6 ,
    Sleep_Out,
    saved_reset_mode_sleep,
    saved_reset_mode_dbg_halt,
    \Using_FPGA.Native_7 ,
    sync_reset,
    Reset_Mode,
    saved_reset_mode_sleep_1,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    Q,
    \data_rd_reg_reg[31] ,
    \data_rd_reg_reg[31]_0 ,
    \data_rd_reg_reg[30] ,
    PC_EX_i,
    \data_rd_reg_reg[31]_1 );
  output \Using_FPGA.Native_0 ;
  output S;
  output \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  output trace_exception_taken_i_reg;
  output \Use_Async_Reset.sync_reset_reg ;
  output start_single_step_reg;
  output \Use_Async_Reset.sync_reset_reg_0 ;
  output [29:0]\Using_FPGA.Native_1 ;
  output [0:0]E;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input [31:0]exception_reg;
  input exception_reg_0;
  input force_stop_overrun;
  input [0:0]D;
  input ok_To_Stop;
  input normal_stop_cmd_hold;
  input normal_stop_cmd_i;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input dbg_clean_stop;
  input \Using_FPGA.Native_6 ;
  input Sleep_Out;
  input saved_reset_mode_sleep;
  input saved_reset_mode_dbg_halt;
  input \Using_FPGA.Native_7 ;
  input sync_reset;
  input [0:1]Reset_Mode;
  input saved_reset_mode_sleep_1;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input [0:0]Q;
  input \data_rd_reg_reg[31] ;
  input \data_rd_reg_reg[31]_0 ;
  input [0:0]\data_rd_reg_reg[30] ;
  input [12:0]PC_EX_i;
  input \data_rd_reg_reg[31]_1 ;

  wire \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  wire Clk;
  wire [0:0]D;
  wire [0:0]E;
  wire [12:0]PC_EX_i;
  wire [0:0]Q;
  wire S;
  wire Sleep_Out;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire [29:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_2__53_n_0 ;
  wire [0:0]\data_rd_reg_reg[30] ;
  wire \data_rd_reg_reg[31] ;
  wire \data_rd_reg_reg[31]_0 ;
  wire \data_rd_reg_reg[31]_1 ;
  wire dbg_clean_stop;
  wire [31:0]exception_reg;
  wire exception_reg_0;
  wire force_stop_overrun;
  wire normal_stop_cmd_hold;
  wire normal_stop_cmd_i;
  wire ok_To_Stop;
  wire saved_reset_mode_dbg_halt;
  wire saved_reset_mode_sleep;
  wire start_single_step_reg;
  wire sync_reset;
  wire trace_exception_taken_i_reg;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_2__53_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(start_single_step_reg));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1__62 
       (.I0(sync_reset),
        .I1(\Using_FPGA.Native_0 ),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT5 #(
    .INIT(32'hFEFEFEAE)) 
    \Using_FPGA.Native_i_2__53 
       (.I0(S),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Area_Debug_Control.normal_stop_cmd_hold_reg ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_i_2__53_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF000000EF)) 
    \Using_FPGA.Native_i_3__2 
       (.I0(\Using_FPGA.Native_8 ),
        .I1(\Using_FPGA.Native_9 ),
        .I2(Q),
        .I3(\Using_FPGA.Native_7 ),
        .I4(saved_reset_mode_sleep),
        .I5(sync_reset),
        .O(start_single_step_reg));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Using_FPGA.Native_i_4__0 
       (.I0(\Using_FPGA.Native_6 ),
        .I1(ok_To_Stop),
        .I2(Sleep_Out),
        .I3(saved_reset_mode_sleep),
        .I4(saved_reset_mode_dbg_halt),
        .I5(\Using_FPGA.Native_7 ),
        .O(S));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA02)) 
    \Using_FPGA.Native_i_5__0 
       (.I0(ok_To_Stop),
        .I1(normal_stop_cmd_hold),
        .I2(normal_stop_cmd_i),
        .I3(\Using_FPGA.Native_4 ),
        .I4(\Using_FPGA.Native_5 ),
        .I5(dbg_clean_stop),
        .O(\Area_Debug_Control.normal_stop_cmd_hold_reg ));
  LUT4 #(
    .INIT(16'hFFEA)) 
    \data_rd_reg[0]_i_1 
       (.I0(\data_rd_reg_reg[31]_0 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[31] ),
        .I3(\data_rd_reg_reg[31]_1 ),
        .O(E));
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[0]_i_2 
       (.I0(exception_reg[30]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [29]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[10]_i_1 
       (.I0(exception_reg[20]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [19]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[11]_i_1 
       (.I0(exception_reg[19]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [18]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[12]_i_1 
       (.I0(exception_reg[18]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [17]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[13]_i_1 
       (.I0(exception_reg[17]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [16]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[14]_i_1 
       (.I0(exception_reg[16]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [15]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[15]_i_1 
       (.I0(exception_reg[15]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[12]),
        .O(\Using_FPGA.Native_1 [14]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[16]_i_1 
       (.I0(exception_reg[14]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[11]),
        .O(\Using_FPGA.Native_1 [13]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[17]_i_1 
       (.I0(exception_reg[13]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[10]),
        .O(\Using_FPGA.Native_1 [12]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[18]_i_1 
       (.I0(exception_reg[12]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[9]),
        .O(\Using_FPGA.Native_1 [11]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[19]_i_1 
       (.I0(exception_reg[11]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[8]),
        .O(\Using_FPGA.Native_1 [10]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[1]_i_1 
       (.I0(exception_reg[29]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [28]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[20]_i_1 
       (.I0(exception_reg[10]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[7]),
        .O(\Using_FPGA.Native_1 [9]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[21]_i_1 
       (.I0(exception_reg[9]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[6]),
        .O(\Using_FPGA.Native_1 [8]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[22]_i_1 
       (.I0(exception_reg[8]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[5]),
        .O(\Using_FPGA.Native_1 [7]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[23]_i_1 
       (.I0(exception_reg[7]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[4]),
        .O(\Using_FPGA.Native_1 [6]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[24]_i_1 
       (.I0(exception_reg[6]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[3]),
        .O(\Using_FPGA.Native_1 [5]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[25]_i_1 
       (.I0(exception_reg[5]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[2]),
        .O(\Using_FPGA.Native_1 [4]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[26]_i_1 
       (.I0(exception_reg[4]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[1]),
        .O(\Using_FPGA.Native_1 [3]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[27]_i_1 
       (.I0(exception_reg[3]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[0]),
        .O(\Using_FPGA.Native_1 [2]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[2]_i_1 
       (.I0(exception_reg[28]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [27]));
  LUT5 #(
    .INIT(32'hBF808080)) 
    \data_rd_reg[30]_i_1 
       (.I0(exception_reg[2]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[31] ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(\data_rd_reg_reg[30] ),
        .O(\Using_FPGA.Native_1 [1]));
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[31]_i_1 
       (.I0(exception_reg[1]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [0]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[3]_i_1 
       (.I0(exception_reg[27]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [26]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[4]_i_1 
       (.I0(exception_reg[26]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [25]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[5]_i_1 
       (.I0(exception_reg[25]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [24]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[6]_i_1 
       (.I0(exception_reg[24]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [23]));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[7]_i_1 
       (.I0(exception_reg[23]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [22]));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[8]_i_1 
       (.I0(exception_reg[22]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [21]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[9]_i_1 
       (.I0(exception_reg[21]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [20]));
  LUT6 #(
    .INIT(64'h0008000F00080000)) 
    exception_i_1
       (.I0(exception_reg[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(exception_reg_0),
        .I3(force_stop_overrun),
        .I4(exception_reg[31]),
        .I5(D),
        .O(trace_exception_taken_i_reg));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRSE" *) 
module cpu_microblaze_v11_0_0_MB_FDRSE_67
   (force_Val2_N,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output force_Val2_N;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire force_Val2_N;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(force_Val2_N),
        .R(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRSE" *) 
module cpu_microblaze_v11_0_0_MB_FDRSE_731
   (msr_I,
    I3_0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Clk,
    \Using_FPGA.Native_3 ,
    \Using_dynamic_instr_Address.old_IE_value_reg );
  output [0:0]msr_I;
  output I3_0;
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Clk;
  input \Using_FPGA.Native_3 ;
  input \Using_dynamic_instr_Address.old_IE_value_reg ;

  wire Clk;
  wire I3_0;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [0:0]msr_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_2 ),
        .Q(msr_I),
        .R(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__12 
       (.I0(msr_I),
        .I1(\Using_FPGA.Native_3 ),
        .O(I3_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRSE" *) 
module cpu_microblaze_v11_0_0_MB_FDRSE_732
   (msr_I,
    I3,
    I3_2,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    \Using_FPGA.Native_2 ,
    Address);
  output [0:0]msr_I;
  output I3;
  output I3_2;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input [0:0]Address;

  wire [0:0]Address;
  wire Clk;
  wire I3;
  wire I3_2;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]msr_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(msr_I),
        .R(\Using_FPGA.Native_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__11 
       (.I0(msr_I),
        .I1(\Using_FPGA.Native_2 ),
        .O(I3));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__18 
       (.I0(msr_I),
        .I1(\Using_FPGA.Native_2 ),
        .I2(Address),
        .O(I3_2));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDRSE" *) 
module cpu_microblaze_v11_0_0_MB_FDRSE_733
   (msr_I,
    I3_1,
    MSR_Rst,
    \Using_FPGA.Native_0 ,
    Clk,
    \Using_FPGA.Native_1 ,
    Address);
  output [0:0]msr_I;
  output I3_1;
  input MSR_Rst;
  input \Using_FPGA.Native_0 ;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input [0:0]Address;

  wire [0:0]Address;
  wire Clk;
  wire I3_1;
  wire MSR_Rst;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]msr_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(msr_I),
        .R(MSR_Rst));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__17 
       (.I0(msr_I),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Address),
        .O(I3_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE
   (Reg_Test_Equal,
    R_1,
    \Using_FPGA.Native_0 ,
    Reg_Test_Equal_i,
    Clk);
  output Reg_Test_Equal;
  input R_1;
  input \Using_FPGA.Native_0 ;
  input Reg_Test_Equal_i;
  input Clk;

  wire Clk;
  wire R_1;
  wire Reg_Test_Equal;
  wire Reg_Test_Equal_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Reg_Test_Equal_i),
        .Q(Reg_Test_Equal),
        .S(R_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_492
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_498
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_504
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_510
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_516
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_522
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_528
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_534
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_540
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_546
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_552
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_558
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_564
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_570
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_FDSE" *) 
module cpu_microblaze_v11_0_0_MB_FDSE_576
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT3" *) 
module cpu_microblaze_v11_0_0_MB_LUT3
   (opsel1_SPR_Select_2_2,
    instr_OF,
    D);
  output opsel1_SPR_Select_2_2;
  input [1:0]instr_OF;
  input [0:0]D;

  wire [0:0]D;
  wire [1:0]instr_OF;
  wire opsel1_SPR_Select_2_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native 
       (.I0(instr_OF[1]),
        .I1(instr_OF[0]),
        .I2(D),
        .O(opsel1_SPR_Select_2_2));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT3" *) 
module cpu_microblaze_v11_0_0_MB_LUT3__parameterized0
   (opsel1_SPR_Select,
    opsel1_SPR_Select_1,
    opsel1_SPR_Select_2_1,
    opsel1_SPR_Select_2_2);
  output opsel1_SPR_Select;
  input opsel1_SPR_Select_1;
  input opsel1_SPR_Select_2_1;
  input opsel1_SPR_Select_2_2;

  wire opsel1_SPR_Select;
  wire opsel1_SPR_Select_1;
  wire opsel1_SPR_Select_2_1;
  wire opsel1_SPR_Select_2_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h15)) 
    \Using_FPGA.Native 
       (.I0(opsel1_SPR_Select_1),
        .I1(opsel1_SPR_Select_2_1),
        .I2(opsel1_SPR_Select_2_2),
        .O(opsel1_SPR_Select));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT3" *) 
module cpu_microblaze_v11_0_0_MB_LUT3__parameterized1
   (res_forward1_3,
    reg1_Addr,
    Q,
    \Using_FPGA.Native_0 );
  output res_forward1_3;
  input [0:0]reg1_Addr;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]reg1_Addr;
  wire res_forward1_3;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \Using_FPGA.Native 
       (.I0(reg1_Addr),
        .I1(Q),
        .I2(\Using_FPGA.Native_0 ),
        .O(res_forward1_3));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT3" *) 
module cpu_microblaze_v11_0_0_MB_LUT3__parameterized1_77
   (res_forward2_3,
    imm_Value,
    Q,
    \Using_FPGA.Native_0 );
  output res_forward2_3;
  input [0:0]imm_Value;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]imm_Value;
  wire res_forward2_3;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \Using_FPGA.Native 
       (.I0(imm_Value),
        .I1(Q),
        .I2(\Using_FPGA.Native_0 ),
        .O(res_forward2_3));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT3" *) 
module cpu_microblaze_v11_0_0_MB_LUT3__parameterized2
   (force_DI1,
    \Using_FPGA.Native_0 ,
    use_Reg_Neg_DI,
    force_Val1);
  output force_DI1;
  input \Using_FPGA.Native_0 ;
  input use_Reg_Neg_DI;
  input force_Val1;

  wire \Using_FPGA.Native_0 ;
  wire force_DI1;
  wire force_Val1;
  wire use_Reg_Neg_DI;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(use_Reg_Neg_DI),
        .I2(force_Val1),
        .O(force_DI1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT3" *) 
module cpu_microblaze_v11_0_0_MB_LUT3__parameterized2_86
   (force_jump1,
    \Using_FPGA.Native_0 ,
    use_Reg_Neg_S,
    force1);
  output force_jump1;
  input \Using_FPGA.Native_0 ;
  input use_Reg_Neg_S;
  input force1;

  wire \Using_FPGA.Native_0 ;
  wire force1;
  wire force_jump1;
  wire use_Reg_Neg_S;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(use_Reg_Neg_S),
        .I2(force1),
        .O(force_jump1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT3" *) 
module cpu_microblaze_v11_0_0_MB_LUT3__parameterized3
   (control_carry,
    carry_In);
  output control_carry;
  input carry_In;

  wire ZERO;

  assign control_carry = ZERO;
  (* OPT_MODIFIED = "PROPCONST " *) 
  GND GND
       (.G(ZERO));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT3" *) 
module cpu_microblaze_v11_0_0_MB_LUT3__parameterized4
   (byte_i_reg,
    extend_Data_Read,
    byte_selects_1,
    isbyte,
    isdoublet,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    DReady,
    Q,
    Data_Read);
  output byte_i_reg;
  output [7:0]extend_Data_Read;
  input byte_selects_1;
  input isbyte;
  input isdoublet;
  input [7:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input DReady;
  input [15:0]Q;
  input [15:0]Data_Read;

  wire DReady;
  wire [15:0]Data_Read;
  wire [15:0]Q;
  wire [7:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_2__39_n_0 ;
  wire \Using_FPGA.Native_i_2__40_n_0 ;
  wire \Using_FPGA.Native_i_2__41_n_0 ;
  wire \Using_FPGA.Native_i_2__42_n_0 ;
  wire \Using_FPGA.Native_i_2__43_n_0 ;
  wire \Using_FPGA.Native_i_2__44_n_0 ;
  wire \Using_FPGA.Native_i_2__45_n_0 ;
  wire \Using_FPGA.Native_i_2__46_n_0 ;
  wire byte_i_reg;
  wire byte_selects_1;
  wire [7:0]extend_Data_Read;
  wire isbyte;
  wire isdoublet;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hAB)) 
    \Using_FPGA.Native 
       (.I0(byte_selects_1),
        .I1(isbyte),
        .I2(isdoublet),
        .O(byte_i_reg));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__76 
       (.I0(\Using_FPGA.Native_i_2__39_n_0 ),
        .I1(\Using_FPGA.Native_0 [7]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[7]),
        .O(extend_Data_Read[7]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__79 
       (.I0(\Using_FPGA.Native_i_2__40_n_0 ),
        .I1(\Using_FPGA.Native_0 [6]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[6]),
        .O(extend_Data_Read[6]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__82 
       (.I0(\Using_FPGA.Native_i_2__41_n_0 ),
        .I1(\Using_FPGA.Native_0 [5]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[5]),
        .O(extend_Data_Read[5]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__85 
       (.I0(\Using_FPGA.Native_i_2__42_n_0 ),
        .I1(\Using_FPGA.Native_0 [4]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[4]),
        .O(extend_Data_Read[4]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__88 
       (.I0(\Using_FPGA.Native_i_2__43_n_0 ),
        .I1(\Using_FPGA.Native_0 [3]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[3]),
        .O(extend_Data_Read[3]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__91 
       (.I0(\Using_FPGA.Native_i_2__44_n_0 ),
        .I1(\Using_FPGA.Native_0 [2]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[2]),
        .O(extend_Data_Read[2]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__94 
       (.I0(\Using_FPGA.Native_i_2__45_n_0 ),
        .I1(\Using_FPGA.Native_0 [1]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[1]),
        .O(extend_Data_Read[1]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__97 
       (.I0(\Using_FPGA.Native_i_2__46_n_0 ),
        .I1(\Using_FPGA.Native_0 [0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[0]),
        .O(extend_Data_Read[0]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT5 #(
    .INIT(32'hB0800000)) 
    \Using_FPGA.Native_i_2__39 
       (.I0(Data_Read[7]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[15]),
        .I4(DReady),
        .O(\Using_FPGA.Native_i_2__39_n_0 ));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT5 #(
    .INIT(32'hB0800000)) 
    \Using_FPGA.Native_i_2__40 
       (.I0(Data_Read[6]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[14]),
        .I4(DReady),
        .O(\Using_FPGA.Native_i_2__40_n_0 ));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT5 #(
    .INIT(32'hB0800000)) 
    \Using_FPGA.Native_i_2__41 
       (.I0(Data_Read[5]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[13]),
        .I4(DReady),
        .O(\Using_FPGA.Native_i_2__41_n_0 ));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT5 #(
    .INIT(32'hB0800000)) 
    \Using_FPGA.Native_i_2__42 
       (.I0(Data_Read[4]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[12]),
        .I4(DReady),
        .O(\Using_FPGA.Native_i_2__42_n_0 ));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT5 #(
    .INIT(32'hB0800000)) 
    \Using_FPGA.Native_i_2__43 
       (.I0(Data_Read[3]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[11]),
        .I4(DReady),
        .O(\Using_FPGA.Native_i_2__43_n_0 ));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT5 #(
    .INIT(32'hB0800000)) 
    \Using_FPGA.Native_i_2__44 
       (.I0(Data_Read[2]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[10]),
        .I4(DReady),
        .O(\Using_FPGA.Native_i_2__44_n_0 ));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT5 #(
    .INIT(32'hB0800000)) 
    \Using_FPGA.Native_i_2__45 
       (.I0(Data_Read[1]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[9]),
        .I4(DReady),
        .O(\Using_FPGA.Native_i_2__45_n_0 ));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT5 #(
    .INIT(32'hB0800000)) 
    \Using_FPGA.Native_i_2__46 
       (.I0(Data_Read[0]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[8]),
        .I4(DReady),
        .O(\Using_FPGA.Native_i_2__46_n_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6
   (alu_AddSub_1,
    op2_C,
    alu_Op,
    Op1_Logic);
  output alu_AddSub_1;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input Op1_Logic;

  wire Op1_Logic;
  wire alu_AddSub_1;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'hA678)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(Op1_Logic),
        .I3(alu_Op[1]),
        .O(alu_AddSub_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__16 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_289
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__15 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_292
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__14 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_295
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__13 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_298
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__12 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_301
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__11 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_304
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__10 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_307
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    Shift_Logic_Res,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input Shift_Logic_Res;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire Shift_Logic_Res;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hE4E4FF00)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(Shift_Logic_Res),
        .I2(extend_Data_Read),
        .I3(mul_ALU_Res),
        .I4(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_3__4 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_310
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hE4E4FF00)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(extend_Data_Read),
        .I3(mul_ALU_Res),
        .I4(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__37 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_313
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__9 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_316
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hE4E4FF00)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(extend_Data_Read),
        .I3(mul_ALU_Res),
        .I4(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__36 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_319
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hE4E4FF00)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(extend_Data_Read),
        .I3(mul_ALU_Res),
        .I4(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__35 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_322
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hE4E4FF00)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(extend_Data_Read),
        .I3(mul_ALU_Res),
        .I4(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__34 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_325
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hE4E4FF00)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(extend_Data_Read),
        .I3(mul_ALU_Res),
        .I4(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__33 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_328
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hE4E4FF00)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(extend_Data_Read),
        .I3(mul_ALU_Res),
        .I4(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__32 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_331
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT5 #(
    .INIT(32'hE4E4FF00)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(extend_Data_Read),
        .I3(mul_ALU_Res),
        .I4(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__31 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_334
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__30 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_337
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__29 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_340
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__28 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_343
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__27 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_346
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__8 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_349
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__26 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_352
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__25 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_355
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__24 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_358
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__23 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_361
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__22 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_364
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__21 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_367
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__20 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_370
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__19 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_373
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__18 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_376
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__17 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_LUT6" *) 
module cpu_microblaze_v11_0_0_MB_LUT6__parameterized0_379
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    data_Read_Mask,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]data_Read_Mask;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]data_Read_Mask;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(data_Read_Mask),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  (* OPT_MODIFIED = "RETARGET " *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \Using_FPGA.Native_i_2__7 
       (.I0(ex_Result),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MULT_AND" *) 
module cpu_microblaze_v11_0_0_MB_MULT_AND
   (sub_Carry,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output sub_Carry;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sub_Carry;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "MULT_AND" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .O(sub_Carry));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MULT_AND" *) 
module cpu_microblaze_v11_0_0_MB_MULT_AND_826
   (DI,
    op2_C,
    alu_Op);
  output DI;
  input [0:0]op2_C;
  input [0:0]alu_Op;

  wire DI;
  wire [0:0]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "MULT_AND" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op),
        .O(DI));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY
   (carry_7,
    SRL16_Sel_7,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_7;
  input SRL16_Sel_7;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire SRL16_Sel_7;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(Q),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,SRL16_Sel_7}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_127
   (zero_CI_6,
    Reg_Test_Equal,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output zero_CI_6;
  input Reg_Test_Equal;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;

  wire Reg_Test_Equal;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_7 = lopt_6;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_6 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({\^lopt_2 ,\^lopt_2 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_5 ,\^lopt_3 ,Reg_Test_Equal}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_130
   (zero_CI_2,
    \Using_FPGA.Native_0 ,
    reg_Test_Equal_N,
    zero_CI_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output zero_CI_2;
  input \Using_FPGA.Native_0 ;
  input reg_Test_Equal_N;
  input zero_CI_3;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;

  wire \Using_FPGA.Native_0 ;
  wire \^lopt_2 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire reg_Test_Equal_N;
  wire zero_CI_3;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_6  = lopt_5;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_7 = lopt_6;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(zero_CI_3),
        .CO({\^lopt_5 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_6 ,reg_Test_Equal_N,reg_Test_Equal_N,reg_Test_Equal_N}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_4 ,\^lopt_2 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_131
   (zero_CI_3,
    \Using_FPGA.Native_0 ,
    reg_Test_Equal_N,
    zero_CI_4,
    lopt);
  output zero_CI_3;
  input \Using_FPGA.Native_0 ;
  input reg_Test_Equal_N;
  input zero_CI_4;
  input lopt;

  wire zero_CI_3;

  assign zero_CI_3 = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_34
   (carry_6,
    SRL16_Sel_6,
    carry_7,
    lopt,
    lopt_1);
  output carry_6;
  input SRL16_Sel_6;
  input carry_7;
  input lopt;
  output lopt_1;

  wire \<const0> ;

  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_36
   (carry_5,
    SRL16_Sel_5,
    carry_6,
    lopt,
    lopt_1);
  output carry_5;
  input SRL16_Sel_5;
  input carry_6;
  input lopt;
  output lopt_1;

  wire \<const0> ;

  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_38
   (carry_4,
    SRL16_Sel_4,
    carry_5,
    lopt,
    lopt_1);
  output carry_4;
  input SRL16_Sel_4;
  input carry_5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire carry_4;

  assign carry_4 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_40
   (carry_3,
    SRL16_Sel_3,
    carry_4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_3;
  input SRL16_Sel_3;
  input carry_4;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire SRL16_Sel_3;
  wire carry_4;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_4),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,SRL16_Sel_3}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_42
   (carry_2,
    SRL16_Sel_2,
    carry_3,
    lopt,
    lopt_1);
  output carry_2;
  input SRL16_Sel_2;
  input carry_3;
  input lopt;
  output lopt_1;

  wire \<const0> ;

  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_44
   (carry_1,
    SRL16_Sel_1,
    carry_2,
    lopt,
    lopt_1);
  output carry_1;
  input SRL16_Sel_1;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;

  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_46
   (carry_0,
    SRL16_Sel_0,
    carry_1,
    lopt,
    lopt_1);
  output carry_0;
  input SRL16_Sel_0;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire carry_0;

  assign carry_0 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_48
   (Hit,
    \Area_Debug_Control.normal_stop_cmd_hold_reg ,
    Single_Step_N,
    carry_0,
    normal_stop_cmd_hold,
    normal_stop_cmd_i,
    \Using_FPGA.Native_i_6 ,
    \Using_FPGA.Native_i_6_0 );
  output Hit;
  output \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  input Single_Step_N;
  input carry_0;
  input normal_stop_cmd_hold;
  input normal_stop_cmd_i;
  input \Using_FPGA.Native_i_6 ;
  input \Using_FPGA.Native_i_6_0 ;

  wire \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  wire Hit;
  wire Single_Step_N;
  wire \Using_FPGA.Native_i_6 ;
  wire \Using_FPGA.Native_i_6_0 ;
  wire carry_0;
  wire normal_stop_cmd_hold;
  wire normal_stop_cmd_i;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],Hit}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],Single_Step_N}));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \Using_FPGA.Native_i_7 
       (.I0(normal_stop_cmd_hold),
        .I1(normal_stop_cmd_i),
        .I2(Hit),
        .I3(\Using_FPGA.Native_i_6 ),
        .I4(\Using_FPGA.Native_i_6_0 ),
        .O(\Area_Debug_Control.normal_stop_cmd_hold_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_60
   (correct_Carry_I,
    correct_Carry_Select,
    sub_Carry,
    correct_Carry,
    lopt,
    lopt_1,
    lopt_2);
  output correct_Carry_I;
  input correct_Carry_Select;
  input sub_Carry;
  input correct_Carry;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire correct_Carry;
  wire correct_Carry_Select;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire sub_Carry;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(correct_Carry),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [0]}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,sub_Carry}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:2],lopt_3,correct_Carry_Select}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_63
   (correct_Carry,
    new_Carry,
    Shift_Carry_In_reg,
    Shift_Carry_In_reg_0,
    Shift_Carry_In_reg_1,
    Shift_Carry_In_reg_2,
    is_lwx_I,
    Shift_Carry_In_reg_3,
    Shift_Carry_In_reg_4,
    Shift_Carry_In_reg_5,
    Shift_Carry_In_reg_6,
    lopt,
    lopt_1,
    lopt_2);
  output correct_Carry;
  input new_Carry;
  input [0:0]Shift_Carry_In_reg;
  input Shift_Carry_In_reg_0;
  input Shift_Carry_In_reg_1;
  input Shift_Carry_In_reg_2;
  input is_lwx_I;
  input Shift_Carry_In_reg_3;
  input Shift_Carry_In_reg_4;
  input Shift_Carry_In_reg_5;
  input Shift_Carry_In_reg_6;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire DI_0;
  wire [0:0]Shift_Carry_In_reg;
  wire Shift_Carry_In_reg_0;
  wire Shift_Carry_In_reg_1;
  wire Shift_Carry_In_reg_2;
  wire Shift_Carry_In_reg_3;
  wire Shift_Carry_In_reg_4;
  wire Shift_Carry_In_reg_5;
  wire Shift_Carry_In_reg_6;
  wire \Using_FPGA.Native_i_1__106_n_0 ;
  wire correct_Carry;
  wire is_lwx_I;

  assign correct_Carry = lopt;
  assign lopt_1 = DI_0;
  assign lopt_2 = \Using_FPGA.Native_i_1__106_n_0 ;
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__106 
       (.I0(Shift_Carry_In_reg_4),
        .I1(Shift_Carry_In_reg_5),
        .I2(Shift_Carry_In_reg_6),
        .O(\Using_FPGA.Native_i_1__106_n_0 ));
  LUT6 #(
    .INIT(64'hA0AAA2AAACAAAEAA)) 
    \Using_FPGA.Native_i_2 
       (.I0(Shift_Carry_In_reg),
        .I1(Shift_Carry_In_reg_0),
        .I2(Shift_Carry_In_reg_1),
        .I3(Shift_Carry_In_reg_2),
        .I4(is_lwx_I),
        .I5(Shift_Carry_In_reg_3),
        .O(DI_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_68
   (correct_Carry_II,
    load_Store_i2,
    correct_Carry_I,
    lopt,
    lopt_1);
  output correct_Carry_II;
  input load_Store_i2;
  input correct_Carry_I;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire correct_Carry_II;

  assign correct_Carry_II = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_69
   (jump_Carry1,
    force_jump1,
    force_DI1,
    Reg_zero,
    lopt);
  output jump_Carry1;
  input force_jump1;
  input force_DI1;
  input Reg_zero;
  input lopt;

  wire jump_Carry1;

  assign jump_Carry1 = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_70
   (jump_Carry2,
    force_jump2,
    force_DI2,
    jump_Carry1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output jump_Carry2;
  input force_jump2;
  input force_DI2;
  input jump_Carry1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire force_DI2;
  wire force_jump2;
  wire jump_Carry1;
  wire jump_Carry2;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [2:2]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(jump_Carry1),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2],\^lopt_1 ,jump_Carry2}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,force_DI2}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,force_jump2}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_71
   (dbg_pause_reg,
    inHibit_EX_reg,
    PC_Write,
    ok_To_Stop,
    R_1,
    S93_out,
    break_Pipe_i_reg0,
    branch_with_delay,
    trace_jump_taken_i_reg,
    jump_Carry2,
    inHibit_EX,
    force_Val2_N,
    \Using_FPGA.Native_0 ,
    take_Intr_Now_III,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    break_Pipe_i_reg,
    break_Pipe_i_reg_0,
    break_Pipe_i_reg_1,
    Interrupt,
    break_Pipe_i_reg_2,
    delay_slot_instr_reg,
    lopt,
    lopt_1);
  output dbg_pause_reg;
  output inHibit_EX_reg;
  output PC_Write;
  output ok_To_Stop;
  output R_1;
  output S93_out;
  output break_Pipe_i_reg0;
  output branch_with_delay;
  input trace_jump_taken_i_reg;
  input jump_Carry2;
  input inHibit_EX;
  input force_Val2_N;
  input \Using_FPGA.Native_0 ;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input break_Pipe_i_reg;
  input break_Pipe_i_reg_0;
  input break_Pipe_i_reg_1;
  input Interrupt;
  input [0:0]break_Pipe_i_reg_2;
  input delay_slot_instr_reg;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire PC_Write;
  wire R_1;
  wire S93_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire branch_with_delay;
  wire dbg_pause_reg;
  wire delay_slot_instr_reg;
  wire force_Val2_N;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire ok_To_Stop;
  wire take_Intr_Now_III;

  assign dbg_pause_reg = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hFFF8FFF8FFF888F8)) 
    \Using_FPGA.Native_i_1__108 
       (.I0(inHibit_EX),
        .I1(dbg_pause_reg),
        .I2(force_Val2_N),
        .I3(\Using_FPGA.Native_0 ),
        .I4(take_Intr_Now_III),
        .I5(\Using_FPGA.Native_1 ),
        .O(inHibit_EX_reg));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__3 
       (.I0(dbg_pause_reg),
        .I1(\Using_FPGA.Native_2 ),
        .O(PC_Write));
  LUT3 #(
    .INIT(8'hEA)) 
    \Using_FPGA.Native_i_1__9 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(inHibit_EX),
        .I2(dbg_pause_reg),
        .O(R_1));
  LUT2 #(
    .INIT(4'h8)) 
    delay_slot_instr_i_1
       (.I0(dbg_pause_reg),
        .I1(delay_slot_instr_reg),
        .O(branch_with_delay));
  LUT2 #(
    .INIT(4'h8)) 
    ex_Valid_i_3
       (.I0(dbg_pause_reg),
        .I1(inHibit_EX),
        .O(S93_out));
  LUT4 #(
    .INIT(16'h0070)) 
    mbar_first_i_2
       (.I0(inHibit_EX),
        .I1(dbg_pause_reg),
        .I2(\Using_FPGA.Native_0 ),
        .I3(take_Intr_Now_III),
        .O(ok_To_Stop));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_72
   (new_Carry,
    \Using_FPGA.Native_0 ,
    select_ALU_Carry,
    Op1_Low,
    LO,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    sync_reset,
    lopt);
  output new_Carry;
  output \Using_FPGA.Native_0 ;
  input select_ALU_Carry;
  input [0:0]Op1_Low;
  input LO;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input sync_reset;
  input lopt;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \^new_Carry ;
  wire sync_reset;

  assign \^new_Carry  = lopt;
  LUT5 #(
    .INIT(32'hFFFF0040)) 
    \Using_FPGA.Native_i_1__4 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\^new_Carry ),
        .I4(sync_reset),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_734
   (CI,
    control_carry,
    carry_In,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output CI;
  input control_carry;
  input carry_In;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire carry_In;
  wire control_carry;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [0:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,carry_In}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [0]}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,control_carry}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_81
   (opsel1_SPR,
    opsel1_SPR_Select,
    take_Intr_Now_III);
  output opsel1_SPR;
  input opsel1_SPR_Select;
  input take_Intr_Now_III;

  wire opsel1_SPR;
  wire opsel1_SPR_Select;
  wire take_Intr_Now_III;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(take_Intr_Now_III),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],opsel1_SPR}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],opsel1_SPR_Select}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_82
   (take_Intr_Now_I,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    inHibit_EX,
    \Using_FPGA.Native_3 ,
    lopt,
    lopt_1,
    lopt_2);
  output take_Intr_Now_I;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input inHibit_EX;
  input \Using_FPGA.Native_3 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire S0_out;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire inHibit_EX;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = S0_out;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hFF01)) 
    \Using_FPGA.Native_i_1__74 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(inHibit_EX),
        .I3(\Using_FPGA.Native_3 ),
        .O(S0_out));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_828
   (CI,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ,
    Unsigned_Op,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output CI;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  input Unsigned_Op;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  wire LO;
  wire Unsigned_Op;
  wire lopt_10;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [1:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_10;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [1:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,Unsigned_Op}),
        .O({\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:2],lopt_10,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [0]}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] }));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_83
   (take_Intr_Now_II,
    take_Intr_Now_I,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    break_Pipe_i_reg__0,
    \Using_FPGA.Native_2 ,
    lopt,
    lopt_1,
    lopt_2);
  output take_Intr_Now_II;
  input take_Intr_Now_I;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input break_Pipe_i_reg__0;
  input \Using_FPGA.Native_2 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.Native_2 ;
  wire take_Intr_Now_II;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.Native_2 ;
  assign take_Intr_Now_II = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_84
   (take_Intr_Now_III,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    inHibit_EX1,
    p_2_out,
    load_Store_i2,
    \Use_Async_Reset.sync_reset_reg ,
    \Use_Async_Reset.sync_reset_reg_0 ,
    Select_Logic0,
    D,
    take_Intr_Now_II,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    inHibit_EX_reg,
    \Area_Debug_Control.force_stop_cmd_hold_reg ,
    inHibit_EX,
    inHibit_EX_reg_0,
    force_stop_cmd_i,
    force_stop_cmd_hold,
    \Area_Debug_Control.force_stop_cmd_hold_reg_0 ,
    sync_reset,
    instr_OF,
    lopt,
    lopt_1,
    lopt_2);
  output take_Intr_Now_III;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output inHibit_EX1;
  output p_2_out;
  output load_Store_i2;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Use_Async_Reset.sync_reset_reg_0 ;
  output Select_Logic0;
  output [1:0]D;
  input take_Intr_Now_II;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  input inHibit_EX_reg;
  input \Area_Debug_Control.force_stop_cmd_hold_reg ;
  input inHibit_EX;
  input inHibit_EX_reg_0;
  input force_stop_cmd_i;
  input force_stop_cmd_hold;
  input \Area_Debug_Control.force_stop_cmd_hold_reg_0 ;
  input sync_reset;
  input [2:0]instr_OF;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire \Area_Debug_Control.force_stop_cmd_hold_reg ;
  wire \Area_Debug_Control.force_stop_cmd_hold_reg_0 ;
  wire [1:0]D;
  wire Select_Logic0;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_Async_Reset.sync_reset_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire force_stop_cmd_hold;
  wire force_stop_cmd_i;
  wire inHibit_EX;
  wire inHibit_EX1;
  wire inHibit_EX_reg;
  wire inHibit_EX_reg_0;
  wire [2:0]instr_OF;
  wire load_Store_i2;
  wire p_2_out;
  wire sync_reset;
  wire take_Intr_Now_III;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign take_Intr_Now_III = lopt;
  LUT6 #(
    .INIT(64'hEEEEE0EEE0EEE0EE)) 
    \Area_Debug_Control.force_stop_cmd_hold_i_1 
       (.I0(force_stop_cmd_i),
        .I1(force_stop_cmd_hold),
        .I2(take_Intr_Now_III),
        .I3(\Area_Debug_Control.force_stop_cmd_hold_reg ),
        .I4(\Area_Debug_Control.force_stop_cmd_hold_reg_0 ),
        .I5(inHibit_EX),
        .O(p_2_out));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT2 #(
    .INIT(4'h1)) 
    Select_Logic_i_1
       (.I0(take_Intr_Now_III),
        .I1(instr_OF[2]),
        .O(Select_Logic0));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__10 
       (.I0(take_Intr_Now_III),
        .O(load_Store_i2));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__61 
       (.I0(sync_reset),
        .I1(take_Intr_Now_III),
        .O(\Use_Async_Reset.sync_reset_reg ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.take_Intr_2nd_Phase_i_1 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .O(inHibit_EX1));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_LWX_SWX_instr.reservation_i_5 
       (.I0(take_Intr_Now_III),
        .I1(sync_reset),
        .O(\Use_Async_Reset.sync_reset_reg_0 ));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h00000000D0D1D0C0)) 
    inHibit_EX_i_1
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .I2(inHibit_EX_reg),
        .I3(\Area_Debug_Control.force_stop_cmd_hold_reg ),
        .I4(inHibit_EX),
        .I5(inHibit_EX_reg_0),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
  LUT3 #(
    .INIT(8'h32)) 
    \write_Addr_I[1]_i_1 
       (.I0(take_Intr_Now_III),
        .I1(sync_reset),
        .I2(instr_OF[1]),
        .O(D[1]));
  LUT3 #(
    .INIT(8'h32)) 
    \write_Addr_I[2]_i_1 
       (.I0(take_Intr_Now_III),
        .I1(sync_reset),
        .I2(instr_OF[0]),
        .O(D[0]));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_85
   (IReady,
    \instr_EX_i_reg[9] ,
    IReady1_out,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output IReady;
  input \instr_EX_i_reg[9] ;
  input IReady1_out;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  output lopt_7;
  input lopt_8;

  wire IReady;
  wire IReady1_out;
  wire \instr_EX_i_reg[9] ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [0:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_9 = lopt_8;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],IReady}),
        .CYINIT(IReady1_out),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_2 ,\^lopt_2 ,1'b0}),
        .O({\^lopt_8 ,\^lopt_7 ,\^lopt_6 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [0]}),
        .S({lopt_9,\^lopt_5 ,\^lopt_3 ,\instr_EX_i_reg[9] }));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_88
   (ifetch_carry1,
    buffer_Full,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output ifetch_carry1;
  input buffer_Full;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;

  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_89
   (ifetch_carry2,
    iFetch_In_Progress_reg,
    iFetch_In_Progress_reg_0,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    \LOCKSTEP_Out_reg[3] ,
    ifetch_carry1,
    iFetch_In_Progress,
    missed_IFetch_reg,
    missed_IFetch_reg_0,
    missed_IFetch_reg_1,
    missed_IFetch,
    IReady1_out,
    mul_Executing,
    mbar_decode_I,
    \LOCKSTEP_Out_reg[3]_0 ,
    lopt,
    lopt_1);
  output ifetch_carry2;
  output iFetch_In_Progress_reg;
  output iFetch_In_Progress_reg_0;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input \LOCKSTEP_Out_reg[3] ;
  input ifetch_carry1;
  input iFetch_In_Progress;
  input missed_IFetch_reg;
  input missed_IFetch_reg_0;
  input missed_IFetch_reg_1;
  input missed_IFetch;
  input IReady1_out;
  input mul_Executing;
  input mbar_decode_I;
  input \LOCKSTEP_Out_reg[3]_0 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire IReady1_out;
  wire \LOCKSTEP_Out_reg[3]_0 ;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire iFetch_In_Progress;
  wire iFetch_In_Progress_reg;
  wire iFetch_In_Progress_reg_0;
  wire ifetch_carry2;
  wire mbar_decode_I;
  wire missed_IFetch;
  wire missed_IFetch_reg;
  wire missed_IFetch_reg_0;
  wire missed_IFetch_reg_1;
  wire mul_Executing;

  assign ifetch_carry2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hD0D0D0D000D0D0D0)) 
    I_AS_INST_0
       (.I0(iFetch_In_Progress),
        .I1(IReady1_out),
        .I2(ifetch_carry2),
        .I3(mul_Executing),
        .I4(mbar_decode_I),
        .I5(\LOCKSTEP_Out_reg[3]_0 ),
        .O(iFetch_In_Progress_reg_0));
  LUT4 #(
    .INIT(16'hAAAE)) 
    iFetch_In_Progress_i_1
       (.I0(iFetch_In_Progress_reg_0),
        .I1(iFetch_In_Progress),
        .I2(missed_IFetch_reg),
        .I3(missed_IFetch_reg_0),
        .O(iFetch_In_Progress_reg));
  LUT5 #(
    .INIT(32'h11110F00)) 
    missed_IFetch_i_1
       (.I0(missed_IFetch_reg_0),
        .I1(missed_IFetch_reg),
        .I2(iFetch_In_Progress_reg_0),
        .I3(missed_IFetch_reg_1),
        .I4(missed_IFetch),
        .O(\Serial_Dbg_Intf.if_debug_ready_i_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_90
   (D,
    ifetch_carry2,
    iFetch_In_Progress);
  output [0:0]D;
  input ifetch_carry2;
  input iFetch_In_Progress;

  wire [0:0]D;
  wire \Using_FPGA.Native_i_1__72_n_0 ;
  wire iFetch_In_Progress;
  wire ifetch_carry2;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(ifetch_carry2),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],D}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],\Using_FPGA.Native_i_1__72_n_0 }));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__72 
       (.I0(iFetch_In_Progress),
        .O(\Using_FPGA.Native_i_1__72_n_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_91
   (mul_Executing_reg,
    using_Imm_reg,
    load_Store_i_reg,
    is_swx_I_reg,
    is_lwx_I_reg,
    write_Reg_reg,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    mtsmsr_write_i_reg,
    \Use_Async_Reset.sync_reset_reg ,
    S,
    load_Store_i_reg_0,
    inHibit_EX_reg,
    Valid_Instr0,
    \Area_Debug_Control.dbg_brki_hit_reg ,
    \Use_Async_Reset.sync_reset_reg_0 ,
    \Use_Async_Reset.sync_reset_reg_1 ,
    \Use_Async_Reset.sync_reset_reg_2 ,
    E,
    \Using_FPGA.Native_0 ,
    Blocked_Valid_Instr0,
    of_PipeRun_Select,
    of_PipeRun_without_dready,
    DReady0_out,
    using_Imm_reg_0,
    using_Imm_reg_1,
    S93_out,
    take_Intr_Now_III,
    using_Imm_reg_2,
    load_Store_i_reg_1,
    \Using_FPGA.Valid_Instr_reg ,
    inHibit_EX,
    load_Store_i_reg_2,
    swx_ready_reg,
    is_swx_I_reg_0,
    instr_OF,
    is_lwx_I,
    write_Reg_reg_0,
    write_Reg_reg_1,
    write_Reg_reg_2,
    mtsmsr_write_i_reg_0,
    sync_reset,
    break_Pipe_i_reg__0,
    Unsigned_Op_reg,
    take_intr_2nd_cycle_reg,
    Buffer_Addr,
    \Using_LWX_SWX_instr.reservation_reg ,
    \Using_LWX_SWX_instr.reservation_reg_0 ,
    \Using_LWX_SWX_instr.reservation_reg_1 ,
    swx_ready_reg_0,
    \Using_LWX_SWX_instr.reservation_reg_2 ,
    \Using_LWX_SWX_instr.reservation_reg_3 ,
    swx_ready,
    is_lwx_I_reg_0,
    dbg_brki_hit,
    \Area_Debug_Control.dbg_brki_hit_reg_0 ,
    Sext8_reg,
    delay_slot_instr_reg,
    Blocked_Valid_Instr_reg,
    take_intr_Done,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output mul_Executing_reg;
  output using_Imm_reg;
  output load_Store_i_reg;
  output is_swx_I_reg;
  output is_lwx_I_reg;
  output write_Reg_reg;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output mtsmsr_write_i_reg;
  output \Use_Async_Reset.sync_reset_reg ;
  output S;
  output load_Store_i_reg_0;
  output inHibit_EX_reg;
  output Valid_Instr0;
  output \Area_Debug_Control.dbg_brki_hit_reg ;
  output \Use_Async_Reset.sync_reset_reg_0 ;
  output \Use_Async_Reset.sync_reset_reg_1 ;
  output \Use_Async_Reset.sync_reset_reg_2 ;
  output [0:0]E;
  output \Using_FPGA.Native_0 ;
  output Blocked_Valid_Instr0;
  input of_PipeRun_Select;
  input of_PipeRun_without_dready;
  input DReady0_out;
  input using_Imm_reg_0;
  input using_Imm_reg_1;
  input S93_out;
  input take_Intr_Now_III;
  input using_Imm_reg_2;
  input load_Store_i_reg_1;
  input \Using_FPGA.Valid_Instr_reg ;
  input inHibit_EX;
  input load_Store_i_reg_2;
  input swx_ready_reg;
  input is_swx_I_reg_0;
  input [0:0]instr_OF;
  input is_lwx_I;
  input write_Reg_reg_0;
  input write_Reg_reg_1;
  input write_Reg_reg_2;
  input mtsmsr_write_i_reg_0;
  input sync_reset;
  input break_Pipe_i_reg__0;
  input Unsigned_Op_reg;
  input take_intr_2nd_cycle_reg;
  input [0:0]Buffer_Addr;
  input \Using_LWX_SWX_instr.reservation_reg ;
  input \Using_LWX_SWX_instr.reservation_reg_0 ;
  input \Using_LWX_SWX_instr.reservation_reg_1 ;
  input swx_ready_reg_0;
  input \Using_LWX_SWX_instr.reservation_reg_2 ;
  input \Using_LWX_SWX_instr.reservation_reg_3 ;
  input swx_ready;
  input is_lwx_I_reg_0;
  input dbg_brki_hit;
  input \Area_Debug_Control.dbg_brki_hit_reg_0 ;
  input Sext8_reg;
  input delay_slot_instr_reg;
  input Blocked_Valid_Instr_reg;
  input take_intr_Done;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Area_Debug_Control.dbg_brki_hit_reg ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_0 ;
  wire Blocked_Valid_Instr0;
  wire Blocked_Valid_Instr_reg;
  wire [0:0]Buffer_Addr;
  wire DReady0_out;
  wire [0:0]E;
  wire S;
  wire S93_out;
  wire Sext8_reg;
  wire Unsigned_Op_reg;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_Async_Reset.sync_reset_reg_0 ;
  wire \Use_Async_Reset.sync_reset_reg_1 ;
  wire \Use_Async_Reset.sync_reset_reg_2 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Valid_Instr_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_LWX_SWX_instr.reservation_i_2_n_0 ;
  wire \Using_LWX_SWX_instr.reservation_reg ;
  wire \Using_LWX_SWX_instr.reservation_reg_0 ;
  wire \Using_LWX_SWX_instr.reservation_reg_1 ;
  wire \Using_LWX_SWX_instr.reservation_reg_2 ;
  wire \Using_LWX_SWX_instr.reservation_reg_3 ;
  wire Valid_Instr0;
  wire dbg_brki_hit;
  wire delay_slot_instr_reg;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire [0:0]instr_OF;
  wire is_lwx_I;
  wire is_lwx_I_reg;
  wire is_lwx_I_reg_0;
  wire is_swx_I;
  wire is_swx_I_reg;
  wire is_swx_I_reg_0;
  wire load_Store_i_reg;
  wire load_Store_i_reg_0;
  wire load_Store_i_reg_1;
  wire load_Store_i_reg_2;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire mtsmsr_write_i_reg;
  wire mtsmsr_write_i_reg_0;
  wire mul_Executing_reg;
  wire of_PipeRun_Select;
  wire of_PipeRun_without_dready;
  wire swx_ready;
  wire swx_ready_reg;
  wire swx_ready_reg_0;
  wire sync_reset;
  wire take_Intr_Now_III;
  wire take_intr_2nd_cycle_reg;
  wire take_intr_Done;
  wire using_Imm_reg;
  wire using_Imm_reg_0;
  wire using_Imm_reg_1;
  wire using_Imm_reg_2;
  wire write_Reg_reg;
  wire write_Reg_reg_0;
  wire write_Reg_reg_1;
  wire write_Reg_reg_2;
  wire [1:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  LUT3 #(
    .INIT(8'hF4)) 
    \Area_Debug_Control.dbg_brki_hit_i_1 
       (.I0(mul_Executing_reg),
        .I1(dbg_brki_hit),
        .I2(\Area_Debug_Control.dbg_brki_hit_reg_0 ),
        .O(\Area_Debug_Control.dbg_brki_hit_reg ));
  LUT3 #(
    .INIT(8'h08)) 
    Blocked_Valid_Instr_i_1
       (.I0(mul_Executing_reg),
        .I1(Blocked_Valid_Instr_reg),
        .I2(take_intr_Done),
        .O(Blocked_Valid_Instr0));
  LUT3 #(
    .INIT(8'hEC)) 
    Compare_Instr_i_1
       (.I0(mul_Executing_reg),
        .I1(sync_reset),
        .I2(take_Intr_Now_III),
        .O(\Use_Async_Reset.sync_reset_reg_2 ));
  LUT4 #(
    .INIT(16'hEEAE)) 
    Sext8_i_2
       (.I0(sync_reset),
        .I1(mul_Executing_reg),
        .I2(Sext8_reg),
        .I3(Unsigned_Op_reg),
        .O(\Use_Async_Reset.sync_reset_reg_0 ));
  LUT3 #(
    .INIT(8'hF8)) 
    Unsigned_Op_i_1
       (.I0(Unsigned_Op_reg),
        .I1(mul_Executing_reg),
        .I2(sync_reset),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [1],mul_Executing_reg}),
        .CYINIT(DReady0_out),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,of_PipeRun_without_dready}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,of_PipeRun_Select}));
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native_I1_i_1__0 
       (.I0(mul_Executing_reg),
        .I1(Buffer_Addr),
        .O(S));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__68 
       (.I0(mul_Executing_reg),
        .I1(delay_slot_instr_reg),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'h2A)) 
    \Using_FPGA.Valid_Instr_i_1 
       (.I0(mul_Executing_reg),
        .I1(inHibit_EX),
        .I2(\Using_FPGA.Valid_Instr_reg ),
        .O(Valid_Instr0));
  LUT6 #(
    .INIT(64'h0F000F0F0F000F07)) 
    \Using_LWX_SWX_instr.reservation_i_1 
       (.I0(load_Store_i_reg_1),
        .I1(swx_ready_reg),
        .I2(\Using_LWX_SWX_instr.reservation_i_2_n_0 ),
        .I3(\Using_LWX_SWX_instr.reservation_reg ),
        .I4(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .I5(\Using_LWX_SWX_instr.reservation_reg_1 ),
        .O(load_Store_i_reg_0));
  LUT6 #(
    .INIT(64'h45454555FFFFFFFF)) 
    \Using_LWX_SWX_instr.reservation_i_2 
       (.I0(swx_ready_reg_0),
        .I1(\Using_LWX_SWX_instr.reservation_reg_2 ),
        .I2(is_lwx_I),
        .I3(mul_Executing_reg),
        .I4(DReady0_out),
        .I5(\Using_LWX_SWX_instr.reservation_reg_3 ),
        .O(\Using_LWX_SWX_instr.reservation_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    ex_Valid_1st_cycle_i_1
       (.I0(mul_Executing_reg),
        .I1(inHibit_EX),
        .I2(\Using_FPGA.Valid_Instr_reg ),
        .I3(take_Intr_Now_III),
        .O(inHibit_EX_reg));
  LUT5 #(
    .INIT(32'h0000222E)) 
    is_lwx_I_i_1
       (.I0(is_lwx_I),
        .I1(mul_Executing_reg),
        .I2(instr_OF),
        .I3(is_swx_I_reg_0),
        .I4(is_swx_I),
        .O(is_lwx_I_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFF00540000)) 
    is_lwx_I_i_3
       (.I0(mul_Executing_reg),
        .I1(DReady0_out),
        .I2(swx_ready),
        .I3(is_lwx_I_reg_0),
        .I4(load_Store_i_reg_1),
        .I5(sync_reset),
        .O(is_swx_I));
  LUT5 #(
    .INIT(32'h00002E22)) 
    is_swx_I_i_1
       (.I0(swx_ready_reg),
        .I1(mul_Executing_reg),
        .I2(is_swx_I_reg_0),
        .I3(instr_OF),
        .I4(is_swx_I),
        .O(is_swx_I_reg));
  LUT6 #(
    .INIT(64'h000000002EEE2222)) 
    load_Store_i_i_1
       (.I0(load_Store_i_reg_1),
        .I1(mul_Executing_reg),
        .I2(\Using_FPGA.Valid_Instr_reg ),
        .I3(inHibit_EX),
        .I4(load_Store_i_reg_2),
        .I5(is_swx_I),
        .O(load_Store_i_reg));
  LUT4 #(
    .INIT(16'h002E)) 
    mtsmsr_write_i_i_2
       (.I0(mtsmsr_write_i_reg_0),
        .I1(mul_Executing_reg),
        .I2(take_Intr_Now_III),
        .I3(sync_reset),
        .O(mtsmsr_write_i_reg));
  LUT4 #(
    .INIT(16'h0100)) 
    swx_ready_i_1
       (.I0(sync_reset),
        .I1(mul_Executing_reg),
        .I2(swx_ready_reg_0),
        .I3(swx_ready_reg),
        .O(\Use_Async_Reset.sync_reset_reg_1 ));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'h0004)) 
    take_intr_2nd_cycle_i_1
       (.I0(sync_reset),
        .I1(take_intr_2nd_cycle_reg),
        .I2(mul_Executing_reg),
        .I3(take_Intr_Now_III),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT6 #(
    .INIT(64'h000000002222222E)) 
    using_Imm_i_1
       (.I0(using_Imm_reg_0),
        .I1(mul_Executing_reg),
        .I2(using_Imm_reg_1),
        .I3(S93_out),
        .I4(take_Intr_Now_III),
        .I5(using_Imm_reg_2),
        .O(using_Imm_reg));
  LUT2 #(
    .INIT(4'hE)) 
    \write_Addr_I[0]_i_1 
       (.I0(sync_reset),
        .I1(mul_Executing_reg),
        .O(E));
  LUT6 #(
    .INIT(64'h00000000EEEEEEE2)) 
    write_Reg_i_1
       (.I0(write_Reg_reg_0),
        .I1(mul_Executing_reg),
        .I2(write_Reg_reg_1),
        .I3(write_Reg_reg_2),
        .I4(take_Intr_Now_III),
        .I5(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(write_Reg_reg));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY
   (buffer_Addr_S_I_2,
    S_34,
    LO,
    lopt);
  output buffer_Addr_S_I_2;
  input S_34;
  input LO;
  input lopt;

  wire buffer_Addr_S_I_2;

  assign buffer_Addr_S_I_2 = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_490
   (Carry_Out,
    O,
    S,
    DI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output O;
  input S;
  input DI;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire O;
  wire S;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_493
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire O;

  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_499
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire O;

  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_505
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire O;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_511
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire S;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_517
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire O;

  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_523
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire O;

  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_529
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire O;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_535
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire S;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_541
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire O;

  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_547
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire O;

  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_553
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire O;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_559
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  output lopt_4;
  input lopt_5;

  wire LO;
  wire O;
  wire S;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire [3:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_6 = lopt_5;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO(\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O({\NLW_Using_FPGA.Native_I1_CARRY4_O_UNCONNECTED [3],\^lopt_5 ,\^lopt_4 ,O}),
        .S({\NLW_Using_FPGA.Native_I1_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_565
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire O;

  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_571
   (pc_Sum,
    xor_Sum,
    LO,
    lopt);
  output pc_Sum;
  input xor_Sum;
  input LO;
  input lopt;

  wire pc_Sum;

  assign pc_Sum = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_765
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    EX_CarryIn,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input EX_CarryIn;
  input lopt;
  input lopt_1;

  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_767
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_769
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_771
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_773
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_775
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_777
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_779
   (EX_CarryOut,
    raw_Data_Addr,
    S,
    DI,
    EX_CarryIn,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]raw_Data_Addr;
  input S;
  input DI;
  input EX_CarryIn;
  input lopt;
  input lopt_1;

  wire [0:0]raw_Data_Addr;

  assign raw_Data_Addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_781
   (EX_CarryOut,
    raw_Data_Addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]raw_Data_Addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]raw_Data_Addr;

  assign raw_Data_Addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_783
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_785
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_787
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_789
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_791
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_793
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_795
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_797
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_799
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_801
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_803
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_805
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_807
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_809
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_811
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_813
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_815
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_817
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_819
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_821
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:0]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO SWEEP " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_823
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_825
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native ;

  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_827
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    S,
    DI,
    CI,
    lopt,
    lopt_1);
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  input S;
  input DI;
  input CI;
  input lopt;
  input lopt_1;

  wire [0:0]\Using_FPGA.Native_0 ;

  assign \Using_FPGA.Native_0  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_93
   (LO,
    O,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire O;

  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXCY_XORCY" *) 
module cpu_microblaze_v11_0_0_MB_MUXCY_XORCY_95
   (LO,
    O,
    S,
    \Using_FPGA.Native ,
    CI,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input \Using_FPGA.Native ;
  input CI;
  input lopt;
  input lopt_1;

  wire O;

  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_167
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_170
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_173
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_176
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_179
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_182
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_185
   (Shift_Logic_Res,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Shift_Logic_Res;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Shift_Logic_Res;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Shift_Logic_Res),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_188
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_191
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_194
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_197
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_200
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_203
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_206
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_209
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_212
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_215
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_218
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_221
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_224
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_227
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_230
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_233
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_236
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_239
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_242
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_245
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_248
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_251
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_254
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_MUXF7" *) 
module cpu_microblaze_v11_0_0_MB_MUXF7_257
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    use_Reg_Neg_DI_i27_out,
    \Using_FPGA.Native_1 ,
    force_Val1_i28_out,
    use_Reg_Neg_S_i29_out,
    \Using_FPGA.Native_2 ,
    CI,
    Y,
    \Result_Sel_reg[0] ,
    \Result_Sel_reg[0]_0 ,
    \Result_Sel_reg[0]_1 ,
    Clk,
    \Using_FPGA.Native_3 ,
    take_Intr_Now_III,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output use_Reg_Neg_DI_i27_out;
  output \Using_FPGA.Native_1 ;
  output force_Val1_i28_out;
  output use_Reg_Neg_S_i29_out;
  output \Using_FPGA.Native_2 ;
  input CI;
  input [0:0]Y;
  input \Result_Sel_reg[0] ;
  input \Result_Sel_reg[0]_0 ;
  input \Result_Sel_reg[0]_1 ;
  input Clk;
  input \Using_FPGA.Native_3 ;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;

  wire CI;
  wire Clk;
  wire \Result_Sel_reg[0] ;
  wire \Result_Sel_reg[0]_0 ;
  wire \Result_Sel_reg[0]_1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [0:0]Y;
  wire force_Val1_i28_out;
  wire take_Intr_Now_III;
  wire use_Reg_Neg_DI_i27_out;
  wire use_Reg_Neg_S_i29_out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[0].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Result_Sel_reg[0] ),
        .A1(\Result_Sel_reg[0]_0 ),
        .A2(\Result_Sel_reg[0]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'h2008)) 
    \Using_FPGA.Native_i_1__21 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_5 ),
        .I3(\Using_FPGA.Native_6 ),
        .O(use_Reg_Neg_DI_i27_out));
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__22 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_5 ),
        .O(force_Val1_i28_out));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'h0820)) 
    \Using_FPGA.Native_i_1__23 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_5 ),
        .I3(\Using_FPGA.Native_6 ),
        .O(use_Reg_Neg_S_i29_out));
  LUT6 #(
    .INIT(64'h0000000020000000)) 
    \Using_FPGA.Native_i_1__24 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_3 ),
        .I2(\Using_FPGA.Native_7 ),
        .I3(\Using_FPGA.Native_8 ),
        .I4(\Using_FPGA.Native_9 ),
        .I5(take_Intr_Now_III),
        .O(\Using_FPGA.Native_1 ));
  LUT3 #(
    .INIT(8'h08)) 
    load_Store_i_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_3 ),
        .I2(take_Intr_Now_III),
        .O(\Using_FPGA.Native_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    select_ALU_Carry_i_1
       (.I0(\Using_FPGA.Native ),
        .O(\Using_FPGA.Native_2 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_100
   (D,
    \Use_Async_Reset.sync_reset_reg ,
    of_mbar_decode,
    CI,
    Y,
    \instr_EX_i_reg[14] ,
    \instr_EX_i_reg[14]_0 ,
    \instr_EX_i_reg[14]_1 ,
    Clk,
    sync_reset,
    mbar_hold_I_reg,
    mbar_hold_I_reg_0,
    mbar_hold_I_reg_1,
    take_Intr_Now_III,
    mbar_decode_I_reg);
  output [0:0]D;
  output \Use_Async_Reset.sync_reset_reg ;
  output of_mbar_decode;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[14] ;
  input \instr_EX_i_reg[14]_0 ;
  input \instr_EX_i_reg[14]_1 ;
  input Clk;
  input sync_reset;
  input mbar_hold_I_reg;
  input mbar_hold_I_reg_0;
  input mbar_hold_I_reg_1;
  input take_Intr_Now_III;
  input mbar_decode_I_reg;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[14] ;
  wire \instr_EX_i_reg[14]_0 ;
  wire \instr_EX_i_reg[14]_1 ;
  wire mbar_decode_I_reg;
  wire mbar_hold_I_reg;
  wire mbar_hold_I_reg_0;
  wire mbar_hold_I_reg_1;
  wire of_mbar_decode;
  wire sync_reset;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[14].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[14] ),
        .A1(\instr_EX_i_reg[14]_0 ),
        .A2(\instr_EX_i_reg[14]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'h04)) 
    mbar_decode_I_i_1
       (.I0(take_Intr_Now_III),
        .I1(D),
        .I2(mbar_decode_I_reg),
        .O(of_mbar_decode));
  LUT5 #(
    .INIT(32'h44440050)) 
    mbar_hold_I_i_1
       (.I0(sync_reset),
        .I1(of_mbar_decode),
        .I2(mbar_hold_I_reg),
        .I3(mbar_hold_I_reg_0),
        .I4(mbar_hold_I_reg_1),
        .O(\Use_Async_Reset.sync_reset_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_101
   (D,
    CI,
    Y,
    \instr_EX_i_reg[15] ,
    \instr_EX_i_reg[15]_0 ,
    \instr_EX_i_reg[15]_1 ,
    Clk);
  output [0:0]D;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[15] ;
  input \instr_EX_i_reg[15]_0 ;
  input \instr_EX_i_reg[15]_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire [0:0]Y;
  wire \instr_EX_i_reg[15] ;
  wire \instr_EX_i_reg[15]_0 ;
  wire \instr_EX_i_reg[15]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[15].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[15] ),
        .A1(\instr_EX_i_reg[15]_0 ),
        .A2(\instr_EX_i_reg[15]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_102
   (\Using_FPGA.Native ,
    D_0,
    D_1,
    D_2,
    D_3,
    D_4,
    D_5,
    D_6,
    D_7,
    D_8,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    CI,
    Y,
    \instr_EX_i_reg[16] ,
    \instr_EX_i_reg[16]_0 ,
    \instr_EX_i_reg[16]_1 ,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 );
  output \Using_FPGA.Native ;
  output D_0;
  output D_1;
  output D_2;
  output D_3;
  output D_4;
  output D_5;
  output D_6;
  output D_7;
  output D_8;
  output D_9;
  output D_10;
  output D_11;
  output D_12;
  output D_13;
  output D_14;
  output D_15;
  output D_16;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[16] ;
  input \instr_EX_i_reg[16]_0 ;
  input \instr_EX_i_reg[16]_1 ;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input [15:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;

  wire CI;
  wire Clk;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_2;
  wire D_3;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [15:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[16] ;
  wire \instr_EX_i_reg[16]_0 ;
  wire \instr_EX_i_reg[16]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[16].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[16] ),
        .A1(\instr_EX_i_reg[16]_0 ),
        .A2(\instr_EX_i_reg[16]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__25 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 [15]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_0));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__26 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_1 [14]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_1));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__27 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(\Using_FPGA.Native_1 [13]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_2));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__28 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_1 [12]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_3));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__29 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_7 ),
        .I2(\Using_FPGA.Native_1 [11]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_4));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__30 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_8 ),
        .I2(\Using_FPGA.Native_1 [10]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_5));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__31 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_9 ),
        .I2(\Using_FPGA.Native_1 [9]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_6));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__32 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_10 ),
        .I2(\Using_FPGA.Native_1 [8]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_7));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__33 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_11 ),
        .I2(\Using_FPGA.Native_1 [7]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_8));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__34 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_12 ),
        .I2(\Using_FPGA.Native_1 [6]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_9));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__35 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_13 ),
        .I2(\Using_FPGA.Native_1 [5]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_10));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__36 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_14 ),
        .I2(\Using_FPGA.Native_1 [4]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_11));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__37 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_15 ),
        .I2(\Using_FPGA.Native_1 [3]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_12));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__38 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_16 ),
        .I2(\Using_FPGA.Native_1 [2]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_13));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__39 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_17 ),
        .I2(\Using_FPGA.Native_1 [1]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_14));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__40 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_18 ),
        .I2(\Using_FPGA.Native_1 [0]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_15));
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native_i_1__41 
       (.I0(\Using_FPGA.Native_19 ),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_2 ),
        .O(D_16));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_103
   (\Using_FPGA.Native ,
    mtsmsr_write_i_reg,
    D_17,
    CI,
    Y,
    \instr_EX_i_reg[17] ,
    \instr_EX_i_reg[17]_0 ,
    \instr_EX_i_reg[17]_1 ,
    Clk,
    mtsmsr_write_i_reg_0,
    mtsmsr_write_i_reg_1,
    mtsmsr_write_i_reg_2,
    mtsmsr_write_i_reg_3,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output mtsmsr_write_i_reg;
  output D_17;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[17] ;
  input \instr_EX_i_reg[17]_0 ;
  input \instr_EX_i_reg[17]_1 ;
  input Clk;
  input mtsmsr_write_i_reg_0;
  input mtsmsr_write_i_reg_1;
  input mtsmsr_write_i_reg_2;
  input mtsmsr_write_i_reg_3;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire CI;
  wire Clk;
  wire D_17;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[17] ;
  wire \instr_EX_i_reg[17]_0 ;
  wire \instr_EX_i_reg[17]_1 ;
  wire mtsmsr_write_i_reg;
  wire mtsmsr_write_i_reg_0;
  wire mtsmsr_write_i_reg_1;
  wire mtsmsr_write_i_reg_2;
  wire mtsmsr_write_i_reg_3;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[17].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[17] ),
        .A1(\instr_EX_i_reg[17]_0 ),
        .A2(\instr_EX_i_reg[17]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__42 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .O(D_17));
  LUT5 #(
    .INIT(32'hA2222222)) 
    mtsmsr_write_i_i_1
       (.I0(mtsmsr_write_i_reg_0),
        .I1(mtsmsr_write_i_reg_1),
        .I2(\Using_FPGA.Native ),
        .I3(mtsmsr_write_i_reg_2),
        .I4(mtsmsr_write_i_reg_3),
        .O(mtsmsr_write_i_reg));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_104
   (D,
    D_18,
    CI,
    Y,
    \instr_EX_i_reg[18] ,
    \instr_EX_i_reg[18]_0 ,
    \instr_EX_i_reg[18]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_18;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[18] ;
  input \instr_EX_i_reg[18]_0 ;
  input \instr_EX_i_reg[18]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_18;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[18] ;
  wire \instr_EX_i_reg[18]_0 ;
  wire \instr_EX_i_reg[18]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[18].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[18] ),
        .A1(\instr_EX_i_reg[18]_0 ),
        .A2(\instr_EX_i_reg[18]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__43 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_18));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_105
   (D,
    D_19,
    CI,
    Y,
    \instr_EX_i_reg[19] ,
    \instr_EX_i_reg[19]_0 ,
    \instr_EX_i_reg[19]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_19;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[19] ;
  input \instr_EX_i_reg[19]_0 ;
  input \instr_EX_i_reg[19]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_19;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[19] ;
  wire \instr_EX_i_reg[19]_0 ;
  wire \instr_EX_i_reg[19]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[19].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[19] ),
        .A1(\instr_EX_i_reg[19]_0 ),
        .A2(\instr_EX_i_reg[19]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__44 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_19));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_106
   (\Using_FPGA.Native ,
    d_AS_I16_out,
    \Using_FPGA.Native_0 ,
    byte_i13_out,
    writing,
    CI,
    Y,
    \Result_Sel_reg[1] ,
    \Result_Sel_reg[1]_0 ,
    \Result_Sel_reg[1]_1 ,
    Clk,
    d_AS_I_reg,
    inHibit_EX,
    d_AS_I_reg_0,
    take_Intr_Now_III,
    writing_reg,
    is_swx_I_reg,
    is_swx_I_reg_0,
    is_swx_I_reg_1,
    is_swx_I_reg_2,
    writing_reg_0);
  output \Using_FPGA.Native ;
  output d_AS_I16_out;
  output \Using_FPGA.Native_0 ;
  output byte_i13_out;
  output writing;
  input CI;
  input [0:0]Y;
  input \Result_Sel_reg[1] ;
  input \Result_Sel_reg[1]_0 ;
  input \Result_Sel_reg[1]_1 ;
  input Clk;
  input d_AS_I_reg;
  input inHibit_EX;
  input d_AS_I_reg_0;
  input take_Intr_Now_III;
  input writing_reg;
  input is_swx_I_reg;
  input is_swx_I_reg_0;
  input is_swx_I_reg_1;
  input is_swx_I_reg_2;
  input writing_reg_0;

  wire CI;
  wire Clk;
  wire \Result_Sel_reg[1] ;
  wire \Result_Sel_reg[1]_0 ;
  wire \Result_Sel_reg[1]_1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire byte_i13_out;
  wire d_AS_I16_out;
  wire d_AS_I_reg;
  wire d_AS_I_reg_0;
  wire inHibit_EX;
  wire is_swx_I_reg;
  wire is_swx_I_reg_0;
  wire is_swx_I_reg_1;
  wire is_swx_I_reg_2;
  wire take_Intr_Now_III;
  wire writing;
  wire writing_reg;
  wire writing_reg_0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[1].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Result_Sel_reg[1] ),
        .A1(\Result_Sel_reg[1]_0 ),
        .A2(\Result_Sel_reg[1]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h0070000000000000)) 
    d_AS_I_i_1
       (.I0(d_AS_I_reg),
        .I1(inHibit_EX),
        .I2(d_AS_I_reg_0),
        .I3(take_Intr_Now_III),
        .I4(\Using_FPGA.Native ),
        .I5(writing_reg),
        .O(d_AS_I16_out));
  LUT4 #(
    .INIT(16'h8AAA)) 
    doublet_Read_i_i_2
       (.I0(d_AS_I_reg_0),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native ),
        .I3(writing_reg),
        .O(byte_i13_out));
  LUT6 #(
    .INIT(64'hFFFFFFFFF7FFFFFF)) 
    is_lwx_I_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(writing_reg),
        .I2(is_swx_I_reg),
        .I3(is_swx_I_reg_0),
        .I4(is_swx_I_reg_1),
        .I5(is_swx_I_reg_2),
        .O(\Using_FPGA.Native_0 ));
  LUT4 #(
    .INIT(16'h4000)) 
    writing_i_1
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native ),
        .I2(writing_reg),
        .I3(writing_reg_0),
        .O(writing));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_107
   (D,
    D_20,
    CI,
    Y,
    \instr_EX_i_reg[20] ,
    \instr_EX_i_reg[20]_0 ,
    \instr_EX_i_reg[20]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_20;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[20] ;
  input \instr_EX_i_reg[20]_0 ;
  input \instr_EX_i_reg[20]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_20;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[20] ;
  wire \instr_EX_i_reg[20]_0 ;
  wire \instr_EX_i_reg[20]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[20].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[20] ),
        .A1(\instr_EX_i_reg[20]_0 ),
        .A2(\instr_EX_i_reg[20]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__45 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_20));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_108
   (\Using_FPGA.Native ,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    \Using_FPGA.Native_0 ,
    D_21,
    CI,
    Y,
    \instr_EX_i_reg[21] ,
    \instr_EX_i_reg[21]_0 ,
    \instr_EX_i_reg[21]_1 ,
    Clk,
    \Area_Debug_Control.dbg_brki_hit_reg ,
    \Area_Debug_Control.dbg_brki_hit_reg_0 ,
    \Area_Debug_Control.dbg_brki_hit_reg_1 ,
    \Area_Debug_Control.dbg_brki_hit_reg_2 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    D);
  output \Using_FPGA.Native ;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  output \Using_FPGA.Native_0 ;
  output D_21;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[21] ;
  input \instr_EX_i_reg[21]_0 ;
  input \instr_EX_i_reg[21]_1 ;
  input Clk;
  input \Area_Debug_Control.dbg_brki_hit_reg ;
  input \Area_Debug_Control.dbg_brki_hit_reg_0 ;
  input \Area_Debug_Control.dbg_brki_hit_reg_1 ;
  input \Area_Debug_Control.dbg_brki_hit_reg_2 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [4:0]D;

  wire \Area_Debug_Control.dbg_brki_hit_reg ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_0 ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_1 ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_2 ;
  wire CI;
  wire Clk;
  wire [4:0]D;
  wire D_21;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[21] ;
  wire \instr_EX_i_reg[21]_0 ;
  wire \instr_EX_i_reg[21]_1 ;

  LUT5 #(
    .INIT(32'h00008000)) 
    \Area_Debug_Control.dbg_brki_hit_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Area_Debug_Control.dbg_brki_hit_reg ),
        .I2(\Area_Debug_Control.dbg_brki_hit_reg_0 ),
        .I3(\Area_Debug_Control.dbg_brki_hit_reg_1 ),
        .I4(\Area_Debug_Control.dbg_brki_hit_reg_2 ),
        .O(\Serial_Dbg_Intf.control_reg_reg[8] ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[21].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[21] ),
        .A1(\instr_EX_i_reg[21]_0 ),
        .A2(\instr_EX_i_reg[21]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_11 
       (.I0(\Using_FPGA.Native ),
        .I1(D[0]),
        .I2(D[1]),
        .I3(D[2]),
        .I4(D[4]),
        .I5(D[3]),
        .O(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__46 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .O(D_21));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_109
   (D,
    D_22,
    \Using_FPGA.Native ,
    CI,
    Y,
    \instr_EX_i_reg[22] ,
    \instr_EX_i_reg[22]_0 ,
    \instr_EX_i_reg[22]_1 ,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Area_Debug_Control.dbg_brki_hit_i_2 );
  output [0:0]D;
  output D_22;
  output \Using_FPGA.Native ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[22] ;
  input \instr_EX_i_reg[22]_0 ;
  input \instr_EX_i_reg[22]_1 ;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [2:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;

  wire [2:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_22;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[22] ;
  wire \instr_EX_i_reg[22]_0 ;
  wire \instr_EX_i_reg[22]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[22].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[22] ),
        .A1(\instr_EX_i_reg[22]_0 ),
        .A2(\instr_EX_i_reg[22]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__47 
       (.I0(D),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .O(D_22));
  LUT4 #(
    .INIT(16'h0100)) 
    \Using_FPGA.Native_i_9 
       (.I0(D),
        .I1(\Area_Debug_Control.dbg_brki_hit_i_2 [2]),
        .I2(\Area_Debug_Control.dbg_brki_hit_i_2 [1]),
        .I3(\Area_Debug_Control.dbg_brki_hit_i_2 [0]),
        .O(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_110
   (D,
    D_23,
    CI,
    Y,
    \instr_EX_i_reg[23] ,
    \instr_EX_i_reg[23]_0 ,
    \instr_EX_i_reg[23]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_23;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[23] ;
  input \instr_EX_i_reg[23]_0 ;
  input \instr_EX_i_reg[23]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_23;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[23] ;
  wire \instr_EX_i_reg[23]_0 ;
  wire \instr_EX_i_reg[23]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[23].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[23] ),
        .A1(\instr_EX_i_reg[23]_0 ),
        .A2(\instr_EX_i_reg[23]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__48 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_23));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_111
   (D,
    D_24,
    CI,
    Y,
    \instr_EX_i_reg[24] ,
    \instr_EX_i_reg[24]_0 ,
    \instr_EX_i_reg[24]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_24;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[24] ;
  input \instr_EX_i_reg[24]_0 ;
  input \instr_EX_i_reg[24]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_24;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[24] ;
  wire \instr_EX_i_reg[24]_0 ;
  wire \instr_EX_i_reg[24]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[24].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[24] ),
        .A1(\instr_EX_i_reg[24]_0 ),
        .A2(\instr_EX_i_reg[24]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__49 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_24));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_112
   (\Using_FPGA.Native ,
    D_25,
    CI,
    Y,
    \instr_EX_i_reg[25] ,
    \instr_EX_i_reg[25]_0 ,
    \instr_EX_i_reg[25]_1 ,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output D_25;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[25] ;
  input \instr_EX_i_reg[25]_0 ;
  input \instr_EX_i_reg[25]_1 ;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire CI;
  wire Clk;
  wire D_25;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[25] ;
  wire \instr_EX_i_reg[25]_0 ;
  wire \instr_EX_i_reg[25]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[25].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[25] ),
        .A1(\instr_EX_i_reg[25]_0 ),
        .A2(\instr_EX_i_reg[25]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__50 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .O(D_25));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_113
   (\Using_FPGA.Native ,
    Sext16_reg,
    \Using_FPGA.Native_0 ,
    D_26,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    CI,
    Y,
    \instr_EX_i_reg[26] ,
    \instr_EX_i_reg[26]_0 ,
    \instr_EX_i_reg[26]_1 ,
    Clk,
    sext16,
    Sext16_reg_0,
    write_Carry_I_reg,
    Sext16_reg_1,
    Sext16_reg_2,
    write_Carry_I_reg_0,
    write_Carry_I_reg_1,
    write_Carry_I_reg_2,
    write_Carry_I_reg_3,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Area_Debug_Control.dbg_brki_hit_i_2 ,
    \Area_Debug_Control.dbg_brki_hit_i_2_0 ,
    D);
  output \Using_FPGA.Native ;
  output Sext16_reg;
  output \Using_FPGA.Native_0 ;
  output D_26;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[26] ;
  input \instr_EX_i_reg[26]_0 ;
  input \instr_EX_i_reg[26]_1 ;
  input Clk;
  input sext16;
  input Sext16_reg_0;
  input write_Carry_I_reg;
  input Sext16_reg_1;
  input Sext16_reg_2;
  input write_Carry_I_reg_0;
  input write_Carry_I_reg_1;
  input write_Carry_I_reg_2;
  input write_Carry_I_reg_3;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  input \Area_Debug_Control.dbg_brki_hit_i_2_0 ;
  input [1:0]D;

  wire [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_2_0 ;
  wire CI;
  wire Clk;
  wire [1:0]D;
  wire D_26;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire Sext16_reg;
  wire Sext16_reg_0;
  wire Sext16_reg_1;
  wire Sext16_reg_2;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[26] ;
  wire \instr_EX_i_reg[26]_0 ;
  wire \instr_EX_i_reg[26]_1 ;
  wire sext16;
  wire write_Carry_I_reg;
  wire write_Carry_I_reg_0;
  wire write_Carry_I_reg_1;
  wire write_Carry_I_reg_2;
  wire write_Carry_I_reg_3;

  LUT6 #(
    .INIT(64'h00000000E2222222)) 
    Sext16_i_1
       (.I0(sext16),
        .I1(Sext16_reg_0),
        .I2(\Using_FPGA.Native ),
        .I3(write_Carry_I_reg),
        .I4(Sext16_reg_1),
        .I5(Sext16_reg_2),
        .O(Sext16_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[26].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[26] ),
        .A1(\instr_EX_i_reg[26]_0 ),
        .A2(\instr_EX_i_reg[26]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \Using_FPGA.Native_i_10 
       (.I0(\Area_Debug_Control.dbg_brki_hit_i_2 ),
        .I1(\Using_FPGA.Native ),
        .I2(write_Carry_I_reg),
        .I3(\Area_Debug_Control.dbg_brki_hit_i_2_0 ),
        .I4(D[0]),
        .I5(D[1]),
        .O(\Serial_Dbg_Intf.control_reg_reg[8] ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__51 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .O(D_26));
  LUT6 #(
    .INIT(64'h70707070707070FF)) 
    write_Carry_I_i_1
       (.I0(\Using_FPGA.Native ),
        .I1(write_Carry_I_reg),
        .I2(write_Carry_I_reg_0),
        .I3(write_Carry_I_reg_1),
        .I4(write_Carry_I_reg_2),
        .I5(write_Carry_I_reg_3),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_114
   (D,
    D_27,
    CI,
    Y,
    \instr_EX_i_reg[27] ,
    \instr_EX_i_reg[27]_0 ,
    \instr_EX_i_reg[27]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_27;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[27] ;
  input \instr_EX_i_reg[27]_0 ;
  input \instr_EX_i_reg[27]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_27;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[27] ;
  wire \instr_EX_i_reg[27]_0 ;
  wire \instr_EX_i_reg[27]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[27].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[27] ),
        .A1(\instr_EX_i_reg[27]_0 ),
        .A2(\instr_EX_i_reg[27]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__52 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_27));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_115
   (\Using_FPGA.Native ,
    D_28,
    CI,
    Y,
    \instr_EX_i_reg[28] ,
    \instr_EX_i_reg[28]_0 ,
    \instr_EX_i_reg[28]_1 ,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output D_28;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[28] ;
  input \instr_EX_i_reg[28]_0 ;
  input \instr_EX_i_reg[28]_1 ;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire CI;
  wire Clk;
  wire D_28;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[28] ;
  wire \instr_EX_i_reg[28]_0 ;
  wire \instr_EX_i_reg[28]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[28].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[28] ),
        .A1(\instr_EX_i_reg[28]_0 ),
        .A2(\instr_EX_i_reg[28]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__53 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .O(D_28));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_116
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    D_29,
    \Using_FPGA.Native_1 ,
    CI,
    Y,
    \instr_EX_i_reg[29] ,
    \instr_EX_i_reg[29]_0 ,
    \instr_EX_i_reg[29]_1 ,
    Clk,
    write_Reg_reg,
    write_Reg_reg_0,
    write_Reg_reg_1,
    write_Reg_reg_2,
    write_Reg_reg_3,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    D);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output D_29;
  output \Using_FPGA.Native_1 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[29] ;
  input \instr_EX_i_reg[29]_0 ;
  input \instr_EX_i_reg[29]_1 ;
  input Clk;
  input write_Reg_reg;
  input write_Reg_reg_0;
  input write_Reg_reg_1;
  input write_Reg_reg_2;
  input write_Reg_reg_3;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input [2:0]D;

  wire CI;
  wire Clk;
  wire [2:0]D;
  wire D_29;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[29] ;
  wire \instr_EX_i_reg[29]_0 ;
  wire \instr_EX_i_reg[29]_1 ;
  wire write_Reg_i_4_n_0;
  wire write_Reg_reg;
  wire write_Reg_reg_0;
  wire write_Reg_reg_1;
  wire write_Reg_reg_2;
  wire write_Reg_reg_3;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[29].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[29] ),
        .A1(\instr_EX_i_reg[29]_0 ),
        .A2(\instr_EX_i_reg[29]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__54 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_3 ),
        .O(D_29));
  LUT4 #(
    .INIT(16'h0004)) 
    \Using_FPGA.Native_i_8 
       (.I0(\Using_FPGA.Native ),
        .I1(D[2]),
        .I2(D[1]),
        .I3(D[0]),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h8888A888A888A888)) 
    write_Reg_i_2
       (.I0(write_Reg_i_4_n_0),
        .I1(write_Reg_reg),
        .I2(write_Reg_reg_0),
        .I3(write_Reg_reg_1),
        .I4(write_Reg_reg_2),
        .I5(write_Reg_reg_3),
        .O(\Using_FPGA.Native_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    write_Reg_i_4
       (.I0(\Using_FPGA.Native ),
        .I1(D[2]),
        .O(write_Reg_i_4_n_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_117
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    CI,
    Y,
    \instr_EX_i_reg[2] ,
    \instr_EX_i_reg[2]_0 ,
    \instr_EX_i_reg[2]_1 ,
    Clk,
    write_Reg_reg,
    write_Reg_reg_0,
    write_Reg_reg_1,
    write_Reg_reg_2,
    Compare_Instr_reg,
    Compare_Instr_reg_0,
    write_Carry_I_reg,
    write_Carry_I_reg_0,
    write_Carry_I_reg_1,
    take_Intr_Now_II,
    D);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[2] ;
  input \instr_EX_i_reg[2]_0 ;
  input \instr_EX_i_reg[2]_1 ;
  input Clk;
  input write_Reg_reg;
  input write_Reg_reg_0;
  input write_Reg_reg_1;
  input write_Reg_reg_2;
  input Compare_Instr_reg;
  input Compare_Instr_reg_0;
  input write_Carry_I_reg;
  input write_Carry_I_reg_0;
  input write_Carry_I_reg_1;
  input take_Intr_Now_II;
  input [0:0]D;

  wire CI;
  wire Clk;
  wire Compare_Instr_reg;
  wire Compare_Instr_reg_0;
  wire [0:0]D;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[2] ;
  wire \instr_EX_i_reg[2]_0 ;
  wire \instr_EX_i_reg[2]_1 ;
  wire take_Intr_Now_II;
  wire write_Carry_I_reg;
  wire write_Carry_I_reg_0;
  wire write_Carry_I_reg_1;
  wire write_Reg_reg;
  wire write_Reg_reg_0;
  wire write_Reg_reg_1;
  wire write_Reg_reg_2;

  LUT4 #(
    .INIT(16'h0004)) 
    Compare_Instr_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(D),
        .I2(Compare_Instr_reg_0),
        .I3(Compare_Instr_reg),
        .O(\Using_FPGA.Native_4 ));
  LUT6 #(
    .INIT(64'h0000000000000400)) 
    Sign_Extend_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(Compare_Instr_reg_0),
        .I2(Compare_Instr_reg),
        .I3(write_Carry_I_reg),
        .I4(write_Carry_I_reg_1),
        .I5(write_Carry_I_reg_0),
        .O(\Using_FPGA.Native_2 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[2].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[2] ),
        .A1(\instr_EX_i_reg[2]_0 ),
        .A2(\instr_EX_i_reg[2]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'hFFFFCFFFDFFFFFFF)) 
    \Using_FPGA.Native_i_2__0 
       (.I0(\Using_FPGA.Native ),
        .I1(Compare_Instr_reg),
        .I2(Compare_Instr_reg_0),
        .I3(write_Carry_I_reg),
        .I4(write_Carry_I_reg_0),
        .I5(write_Carry_I_reg_1),
        .O(\Using_FPGA.Native_1 ));
  LUT3 #(
    .INIT(8'h32)) 
    \Using_FPGA.Native_i_2__3 
       (.I0(\Using_FPGA.Native ),
        .I1(take_Intr_Now_II),
        .I2(write_Reg_reg_2),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h00000000AAEAEAEA)) 
    write_Reg_i_3
       (.I0(write_Reg_reg),
        .I1(write_Reg_reg_0),
        .I2(\Using_FPGA.Native_1 ),
        .I3(write_Reg_reg_1),
        .I4(write_Reg_reg_2),
        .I5(\Using_FPGA.Native_2 ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_118
   (D,
    D_30,
    CI,
    Y,
    \instr_EX_i_reg[30] ,
    \instr_EX_i_reg[30]_0 ,
    \instr_EX_i_reg[30]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_30;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[30] ;
  input \instr_EX_i_reg[30]_0 ;
  input \instr_EX_i_reg[30]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_30;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[30] ;
  wire \instr_EX_i_reg[30]_0 ;
  wire \instr_EX_i_reg[30]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[30].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[30] ),
        .A1(\instr_EX_i_reg[30]_0 ),
        .A2(\instr_EX_i_reg[30]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__55 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_30));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_119
   (D,
    Sext8_reg,
    D_31,
    CI,
    Y,
    \instr_EX_i_reg[31] ,
    \instr_EX_i_reg[31]_0 ,
    \instr_EX_i_reg[31]_1 ,
    Clk,
    Sext8_reg_0,
    Sext8_reg_1,
    Sext8_reg_2,
    Sext8_reg_3,
    Sext8_reg_4,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output Sext8_reg;
  output D_31;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[31] ;
  input \instr_EX_i_reg[31]_0 ;
  input \instr_EX_i_reg[31]_1 ;
  input Clk;
  input Sext8_reg_0;
  input Sext8_reg_1;
  input Sext8_reg_2;
  input Sext8_reg_3;
  input Sext8_reg_4;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_31;
  wire Sext8_reg;
  wire Sext8_reg_0;
  wire Sext8_reg_1;
  wire Sext8_reg_2;
  wire Sext8_reg_3;
  wire Sext8_reg_4;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[31] ;
  wire \instr_EX_i_reg[31]_0 ;
  wire \instr_EX_i_reg[31]_1 ;

  LUT6 #(
    .INIT(64'h000000002E222222)) 
    Sext8_i_1
       (.I0(Sext8_reg_0),
        .I1(Sext8_reg_1),
        .I2(D),
        .I3(Sext8_reg_2),
        .I4(Sext8_reg_3),
        .I5(Sext8_reg_4),
        .O(Sext8_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[31].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[31] ),
        .A1(\instr_EX_i_reg[31]_0 ),
        .A2(\instr_EX_i_reg[31]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__56 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_31));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_120
   (\Using_FPGA.Native ,
    \Use_Async_Reset.sync_reset_reg ,
    \Using_FPGA.Native_0 ,
    inHibit_EX_reg,
    mbar_first,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Area_Debug_Control.normal_stop_cmd_hold_reg ,
    CI,
    Y,
    \instr_EX_i_reg[3] ,
    \instr_EX_i_reg[3]_0 ,
    \instr_EX_i_reg[3]_1 ,
    Clk,
    take_Intr_Now_III,
    sync_reset,
    \Using_FPGA.set_BIP_I_reg ,
    \Using_FPGA.set_BIP_I_reg_0 ,
    \Using_FPGA.set_BIP_I_reg_1 ,
    \Using_FPGA.set_BIP_I_reg_2 ,
    \Using_FPGA.set_BIP_I_reg_3 ,
    inHibit_EX,
    jump2_I_reg,
    D,
    ok_To_Stop,
    mul_Executing_reg,
    mul_Executing_reg_0,
    \Using_FPGA.set_BIP_I_reg_4 ,
    \Using_FPGA.set_BIP_I_reg_5 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 );
  output \Using_FPGA.Native ;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Using_FPGA.Native_0 ;
  output inHibit_EX_reg;
  output mbar_first;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[3] ;
  input \instr_EX_i_reg[3]_0 ;
  input \instr_EX_i_reg[3]_1 ;
  input Clk;
  input take_Intr_Now_III;
  input sync_reset;
  input \Using_FPGA.set_BIP_I_reg ;
  input \Using_FPGA.set_BIP_I_reg_0 ;
  input \Using_FPGA.set_BIP_I_reg_1 ;
  input \Using_FPGA.set_BIP_I_reg_2 ;
  input \Using_FPGA.set_BIP_I_reg_3 ;
  input inHibit_EX;
  input jump2_I_reg;
  input [0:0]D;
  input ok_To_Stop;
  input mul_Executing_reg;
  input mul_Executing_reg_0;
  input \Using_FPGA.set_BIP_I_reg_4 ;
  input \Using_FPGA.set_BIP_I_reg_5 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;

  wire \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  wire CI;
  wire Clk;
  wire [0:0]D;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg_0 ;
  wire \Using_FPGA.set_BIP_I_reg_1 ;
  wire \Using_FPGA.set_BIP_I_reg_2 ;
  wire \Using_FPGA.set_BIP_I_reg_3 ;
  wire \Using_FPGA.set_BIP_I_reg_4 ;
  wire \Using_FPGA.set_BIP_I_reg_5 ;
  wire [0:0]Y;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire \instr_EX_i_reg[3] ;
  wire \instr_EX_i_reg[3]_0 ;
  wire \instr_EX_i_reg[3]_1 ;
  wire jump2_I_reg;
  wire mbar_first;
  wire mul_Executing_reg;
  wire mul_Executing_reg_0;
  wire ok_To_Stop;
  wire sync_reset;
  wire take_Intr_Now_III;

  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF7FF)) 
    \Size_17to32.imm_Reg[0]_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.set_BIP_I_reg_3 ),
        .I2(\Using_FPGA.set_BIP_I_reg_2 ),
        .I3(mul_Executing_reg_0),
        .I4(\Using_FPGA.set_BIP_I_reg_4 ),
        .I5(\Using_FPGA.set_BIP_I_reg_5 ),
        .O(\Using_FPGA.Native_2 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[3].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[3] ),
        .A1(\instr_EX_i_reg[3]_0 ),
        .A2(\instr_EX_i_reg[3]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'hFFFFDFFF)) 
    \Using_FPGA.Native_i_2__5 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.set_BIP_I_reg_2 ),
        .I2(\Using_FPGA.set_BIP_I_reg_3 ),
        .I3(\Using_FPGA.set_BIP_I_reg_4 ),
        .I4(\Using_FPGA.set_BIP_I_reg_5 ),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'hBAAAAAAAAAAAAAAA)) 
    \Using_FPGA.Native_i_6 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Using_FPGA.Native_5 ),
        .I4(\Using_FPGA.Native_6 ),
        .I5(\Using_FPGA.Native_7 ),
        .O(\Area_Debug_Control.normal_stop_cmd_hold_reg ));
  LUT6 #(
    .INIT(64'h00000F0001010F00)) 
    \Using_FPGA.set_BIP_I_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(take_Intr_Now_III),
        .I2(sync_reset),
        .I3(\Using_FPGA.set_BIP_I_reg ),
        .I4(\Using_FPGA.set_BIP_I_reg_0 ),
        .I5(\Using_FPGA.set_BIP_I_reg_1 ),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT5 #(
    .INIT(32'h00202020)) 
    jump2_I_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.set_BIP_I_reg_2 ),
        .I2(\Using_FPGA.set_BIP_I_reg_3 ),
        .I3(inHibit_EX),
        .I4(jump2_I_reg),
        .O(inHibit_EX_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFFF7FFFFFF)) 
    mbar_decode_I_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.set_BIP_I_reg_3 ),
        .I2(\Using_FPGA.set_BIP_I_reg_2 ),
        .I3(mul_Executing_reg_0),
        .I4(\Using_FPGA.set_BIP_I_reg_4 ),
        .I5(\Using_FPGA.set_BIP_I_reg_5 ),
        .O(\Using_FPGA.Native_1 ));
  LUT4 #(
    .INIT(16'h4F40)) 
    mbar_first_i_1
       (.I0(\Using_FPGA.Native_1 ),
        .I1(D),
        .I2(ok_To_Stop),
        .I3(mul_Executing_reg),
        .O(mbar_first));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_121
   (\Using_FPGA.Native ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    doublet_i_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Reg_Test_Equal_N_i7_out,
    \Using_FPGA.Native_4 ,
    CI,
    Y,
    \instr_EX_i_reg[4] ,
    \instr_EX_i_reg[4]_0 ,
    \instr_EX_i_reg[4]_1 ,
    Clk,
    inHibit_EX_reg,
    doublet_i_reg_0,
    inHibit_EX_reg_0,
    inHibit_EX_reg_1,
    inHibit_EX_reg_2,
    isdoublet,
    doublet_i_reg_1,
    sync_reset,
    byte_i13_out,
    mtsmsr_write_i_reg,
    mtsmsr_write_i_reg_0,
    mtsmsr_write_i_reg_1,
    mtsmsr_write_i_reg_2,
    \Using_FPGA.Native_i_1__17 ,
    take_Intr_Now_III,
    \Using_FPGA.Native_i_1__17_0 ,
    D,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    instr_OF);
  output \Using_FPGA.Native ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output doublet_i_reg;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output Reg_Test_Equal_N_i7_out;
  output \Using_FPGA.Native_4 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[4] ;
  input \instr_EX_i_reg[4]_0 ;
  input \instr_EX_i_reg[4]_1 ;
  input Clk;
  input inHibit_EX_reg;
  input doublet_i_reg_0;
  input inHibit_EX_reg_0;
  input inHibit_EX_reg_1;
  input inHibit_EX_reg_2;
  input isdoublet;
  input doublet_i_reg_1;
  input sync_reset;
  input byte_i13_out;
  input mtsmsr_write_i_reg;
  input mtsmsr_write_i_reg_0;
  input mtsmsr_write_i_reg_1;
  input mtsmsr_write_i_reg_2;
  input \Using_FPGA.Native_i_1__17 ;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_i_1__17_0 ;
  input [0:0]D;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input [0:0]instr_OF;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire Reg_Test_Equal_N_i7_out;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_i_1__17 ;
  wire \Using_FPGA.Native_i_1__17_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]Y;
  wire byte_i13_out;
  wire doublet_i_reg;
  wire doublet_i_reg_0;
  wire doublet_i_reg_1;
  wire inHibit_EX_reg;
  wire inHibit_EX_reg_0;
  wire inHibit_EX_reg_1;
  wire inHibit_EX_reg_2;
  wire \instr_EX_i_reg[4] ;
  wire \instr_EX_i_reg[4]_0 ;
  wire \instr_EX_i_reg[4]_1 ;
  wire [0:0]instr_OF;
  wire isdoublet;
  wire mtsmsr_write_i_reg;
  wire mtsmsr_write_i_reg_0;
  wire mtsmsr_write_i_reg_1;
  wire mtsmsr_write_i_reg_2;
  wire sync_reset;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[4].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[4] ),
        .A1(\instr_EX_i_reg[4]_0 ),
        .A2(\instr_EX_i_reg[4]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'h00010100)) 
    \Using_FPGA.Native_i_1__20 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native_5 ),
        .I3(\Using_FPGA.Native_6 ),
        .I4(instr_OF),
        .O(Reg_Test_Equal_N_i7_out));
  LUT6 #(
    .INIT(64'h0808080808080008)) 
    \Using_FPGA.Native_i_2__1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_FPGA.Native_i_1__17 ),
        .I2(take_Intr_Now_III),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_i_1__17_0 ),
        .I5(D),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT5 #(
    .INIT(32'hFF7FFFFF)) 
    \Using_FPGA.Native_i_3__0 
       (.I0(\Using_FPGA.Native ),
        .I1(doublet_i_reg_0),
        .I2(mtsmsr_write_i_reg),
        .I3(mtsmsr_write_i_reg_1),
        .I4(mtsmsr_write_i_reg_0),
        .O(\Using_FPGA.Native_2 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.Native_i_3__3 
       (.I0(\Using_FPGA.Native ),
        .I1(mtsmsr_write_i_reg_0),
        .I2(mtsmsr_write_i_reg_1),
        .O(\Using_FPGA.Native_4 ));
  LUT6 #(
    .INIT(64'h0000400000000000)) 
    \Using_FPGA.enable_Interrupts_I_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(doublet_i_reg_0),
        .I2(mtsmsr_write_i_reg),
        .I3(mtsmsr_write_i_reg_0),
        .I4(mtsmsr_write_i_reg_1),
        .I5(mtsmsr_write_i_reg_2),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h0000000000002E22)) 
    doublet_i_i_1
       (.I0(isdoublet),
        .I1(doublet_i_reg_1),
        .I2(\Using_FPGA.Native ),
        .I3(doublet_i_reg_0),
        .I4(sync_reset),
        .I5(byte_i13_out),
        .O(doublet_i_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFF02A20000)) 
    inHibit_EX_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(inHibit_EX_reg),
        .I2(doublet_i_reg_0),
        .I3(inHibit_EX_reg_0),
        .I4(inHibit_EX_reg_1),
        .I5(inHibit_EX_reg_2),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
  LUT6 #(
    .INIT(64'h0000040000000000)) 
    mtsmsr_write_i_i_3
       (.I0(\Using_FPGA.Native ),
        .I1(doublet_i_reg_0),
        .I2(mtsmsr_write_i_reg_2),
        .I3(mtsmsr_write_i_reg_0),
        .I4(mtsmsr_write_i_reg_1),
        .I5(mtsmsr_write_i_reg),
        .O(\Using_FPGA.Native_3 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_122
   (\Using_FPGA.Native ,
    byte_i_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    CI,
    Y,
    \instr_EX_i_reg[5] ,
    \instr_EX_i_reg[5]_0 ,
    \instr_EX_i_reg[5]_1 ,
    Clk,
    isbyte,
    byte_i_reg_0,
    byte_i_reg_1,
    sync_reset,
    byte_i13_out,
    write_Reg_i_2,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    take_Intr_Now_III,
    \Using_FPGA.Native_6 ,
    D);
  output \Using_FPGA.Native ;
  output byte_i_reg;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[5] ;
  input \instr_EX_i_reg[5]_0 ;
  input \instr_EX_i_reg[5]_1 ;
  input Clk;
  input isbyte;
  input byte_i_reg_0;
  input byte_i_reg_1;
  input sync_reset;
  input byte_i13_out;
  input write_Reg_i_2;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_6 ;
  input [0:0]D;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]Y;
  wire byte_i13_out;
  wire byte_i_reg;
  wire byte_i_reg_0;
  wire byte_i_reg_1;
  wire \instr_EX_i_reg[5] ;
  wire \instr_EX_i_reg[5]_0 ;
  wire \instr_EX_i_reg[5]_1 ;
  wire isbyte;
  wire sync_reset;
  wire take_Intr_Now_III;
  wire write_Reg_i_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[5].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[5] ),
        .A1(\instr_EX_i_reg[5]_0 ),
        .A2(\instr_EX_i_reg[5]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'hFFFFFFFF01005555)) 
    \Using_FPGA.Native_i_1__57 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native_3 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Using_FPGA.Native ),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Using_FPGA.Native_6 ),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
  LUT6 #(
    .INIT(64'hFFBFFFFFFFFFFFFF)) 
    \Using_FPGA.Native_i_2__4 
       (.I0(\Using_FPGA.Native ),
        .I1(byte_i_reg_1),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_5 ),
        .I5(D),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h000000000000222E)) 
    byte_i_i_1
       (.I0(isbyte),
        .I1(byte_i_reg_0),
        .I2(\Using_FPGA.Native ),
        .I3(byte_i_reg_1),
        .I4(sync_reset),
        .I5(byte_i13_out),
        .O(byte_i_reg));
  LUT2 #(
    .INIT(4'hB)) 
    quadlet_Read_i_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(byte_i_reg_1),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h0067FFFF00FFFFFF)) 
    write_Reg_i_6
       (.I0(\Using_FPGA.Native ),
        .I1(byte_i_reg_1),
        .I2(write_Reg_i_2),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_123
   (\Using_FPGA.Native ,
    mbar_is_sleep0,
    \Use_Async_Reset.sync_reset_reg ,
    CI,
    Y,
    \instr_EX_i_reg[6] ,
    \instr_EX_i_reg[6]_0 ,
    \instr_EX_i_reg[6]_1 ,
    Clk,
    instr_OF,
    sync_reset,
    take_Intr_Now_III);
  output \Using_FPGA.Native ;
  output mbar_is_sleep0;
  output [0:0]\Use_Async_Reset.sync_reset_reg ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[6] ;
  input \instr_EX_i_reg[6]_0 ;
  input \instr_EX_i_reg[6]_1 ;
  input Clk;
  input [0:0]instr_OF;
  input sync_reset;
  input take_Intr_Now_III;

  wire CI;
  wire Clk;
  wire [0:0]\Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[6] ;
  wire \instr_EX_i_reg[6]_0 ;
  wire \instr_EX_i_reg[6]_1 ;
  wire [0:0]instr_OF;
  wire mbar_is_sleep0;
  wire sync_reset;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[6].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[6] ),
        .A1(\instr_EX_i_reg[6]_0 ),
        .A2(\instr_EX_i_reg[6]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT2 #(
    .INIT(4'hE)) 
    mbar_is_sleep_i_1
       (.I0(\Using_FPGA.Native ),
        .I1(instr_OF),
        .O(mbar_is_sleep0));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \write_Addr_I[0]_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(sync_reset),
        .I2(take_Intr_Now_III),
        .O(\Use_Async_Reset.sync_reset_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_124
   (instr_OF,
    CI,
    Y,
    \instr_EX_i_reg[7] ,
    \instr_EX_i_reg[7]_0 ,
    \instr_EX_i_reg[7]_1 ,
    Clk);
  output [0:0]instr_OF;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[7] ;
  input \instr_EX_i_reg[7]_0 ;
  input \instr_EX_i_reg[7]_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]Y;
  wire \instr_EX_i_reg[7] ;
  wire \instr_EX_i_reg[7]_0 ;
  wire \instr_EX_i_reg[7]_1 ;
  wire [0:0]instr_OF;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[7].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[7] ),
        .A1(\instr_EX_i_reg[7]_0 ),
        .A2(\instr_EX_i_reg[7]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(instr_OF));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_125
   (\Using_FPGA.Native ,
    force1_i30_out,
    CI,
    Y,
    \instr_EX_i_reg[8] ,
    \instr_EX_i_reg[8]_0 ,
    \instr_EX_i_reg[8]_1 ,
    Clk,
    take_Intr_Now_III,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output force1_i30_out;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[8] ;
  input \instr_EX_i_reg[8]_0 ;
  input \instr_EX_i_reg[8]_1 ;
  input Clk;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]Y;
  wire force1_i30_out;
  wire \instr_EX_i_reg[8] ;
  wire \instr_EX_i_reg[8]_0 ;
  wire \instr_EX_i_reg[8]_1 ;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[8].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[8] ),
        .A1(\instr_EX_i_reg[8]_0 ),
        .A2(\instr_EX_i_reg[8]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT4 #(
    .INIT(16'h0001)) 
    \Using_FPGA.Native_i_2__2 
       (.I0(\Using_FPGA.Native ),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .O(force1_i30_out));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_126
   (\Using_FPGA.Native ,
    reset_BIP_I8_out,
    CI,
    Y,
    \instr_EX_i_reg[9] ,
    \instr_EX_i_reg[9]_0 ,
    \instr_EX_i_reg[9]_1 ,
    Clk,
    take_Intr_Now_III,
    \Using_FPGA.reset_BIP_I_reg );
  output \Using_FPGA.Native ;
  output reset_BIP_I8_out;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[9] ;
  input \instr_EX_i_reg[9]_0 ;
  input \instr_EX_i_reg[9]_1 ;
  input Clk;
  input take_Intr_Now_III;
  input \Using_FPGA.reset_BIP_I_reg ;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.reset_BIP_I_reg ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[9] ;
  wire \instr_EX_i_reg[9]_0 ;
  wire \instr_EX_i_reg[9]_1 ;
  wire reset_BIP_I8_out;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[9].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[9] ),
        .A1(\instr_EX_i_reg[9]_0 ),
        .A2(\instr_EX_i_reg[9]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'h40)) 
    \Using_FPGA.reset_BIP_I_i_1 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.reset_BIP_I_reg ),
        .O(reset_BIP_I8_out));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_491
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_496
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_502
   (Address,
    I3_2,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native );
  output [0:0]Address;
  output I3_2;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native ;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_2;
  wire IReady;
  wire \Using_FPGA.Native ;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[27].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__16 
       (.I0(Address),
        .I1(\Using_FPGA.Native ),
        .O(I3_2));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_508
   (Address,
    I3_1,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native );
  output [0:0]Address;
  output I3_1;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native ;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_1;
  wire IReady;
  wire \Using_FPGA.Native ;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[26].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__15 
       (.I0(Address),
        .I1(\Using_FPGA.Native ),
        .O(I3_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_514
   (Address,
    I3_0,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native );
  output [0:0]Address;
  output I3_0;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native ;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_0;
  wire IReady;
  wire \Using_FPGA.Native ;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[25].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__14 
       (.I0(Address),
        .I1(\Using_FPGA.Native ),
        .O(I3_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_520
   (Address,
    I3,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native );
  output [0:0]Address;
  output I3;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native ;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3;
  wire IReady;
  wire \Using_FPGA.Native ;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[24].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__13 
       (.I0(Address),
        .I1(\Using_FPGA.Native ),
        .O(I3));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_526
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[23].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_532
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[22].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_538
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[21].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_544
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[20].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_550
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[19].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_556
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[18].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_562
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[17].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_568
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[16].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_574
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[15].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_96
   (\Using_FPGA.Native ,
    enable_Interrupts_I,
    Reg_Test_Equal_i,
    \Use_Async_Reset.sync_reset_reg ,
    CI,
    Y,
    \instr_EX_i_reg[10] ,
    \instr_EX_i_reg[10]_0 ,
    \instr_EX_i_reg[10]_1 ,
    Clk,
    take_Intr_Now_III,
    \Using_FPGA.enable_Interrupts_I_reg ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    sync_reset);
  output \Using_FPGA.Native ;
  output enable_Interrupts_I;
  output Reg_Test_Equal_i;
  output [0:0]\Use_Async_Reset.sync_reset_reg ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[10] ;
  input \instr_EX_i_reg[10]_0 ;
  input \instr_EX_i_reg[10]_1 ;
  input Clk;
  input take_Intr_Now_III;
  input \Using_FPGA.enable_Interrupts_I_reg ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input sync_reset;

  wire CI;
  wire Clk;
  wire Reg_Test_Equal_i;
  wire [0:0]\Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.enable_Interrupts_I_reg ;
  wire [0:0]Y;
  wire enable_Interrupts_I;
  wire \instr_EX_i_reg[10] ;
  wire \instr_EX_i_reg[10]_0 ;
  wire \instr_EX_i_reg[10]_1 ;
  wire sync_reset;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[10].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[10] ),
        .A1(\instr_EX_i_reg[10]_0 ),
        .A2(\instr_EX_i_reg[10]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'hFFFFFFF9)) 
    \Using_FPGA.Native_i_1__19 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(take_Intr_Now_III),
        .I4(\Using_FPGA.Native_2 ),
        .O(Reg_Test_Equal_i));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Using_FPGA.enable_Interrupts_I_i_1 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.enable_Interrupts_I_reg ),
        .O(enable_Interrupts_I));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \write_Addr_I[4]_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(sync_reset),
        .I2(take_Intr_Now_III),
        .O(\Use_Async_Reset.sync_reset_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_97
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    CI,
    Y,
    \instr_EX_i_reg[11] ,
    \instr_EX_i_reg[11]_0 ,
    \instr_EX_i_reg[11]_1 ,
    Clk,
    jump2_I_reg,
    jump2_I_reg_0,
    jump2_I_reg_1,
    jump2_I_reg_2,
    jump2_I_reg_3);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[11] ;
  input \instr_EX_i_reg[11]_0 ;
  input \instr_EX_i_reg[11]_1 ;
  input Clk;
  input jump2_I_reg;
  input jump2_I_reg_0;
  input jump2_I_reg_1;
  input jump2_I_reg_2;
  input jump2_I_reg_3;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[11] ;
  wire \instr_EX_i_reg[11]_0 ;
  wire \instr_EX_i_reg[11]_1 ;
  wire jump2_I_reg;
  wire jump2_I_reg_0;
  wire jump2_I_reg_1;
  wire jump2_I_reg_2;
  wire jump2_I_reg_3;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[11].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[11] ),
        .A1(\instr_EX_i_reg[11]_0 ),
        .A2(\instr_EX_i_reg[11]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'hC808C808C0C00000)) 
    jump2_I_i_1
       (.I0(\Using_FPGA.Native ),
        .I1(jump2_I_reg),
        .I2(jump2_I_reg_0),
        .I3(jump2_I_reg_1),
        .I4(jump2_I_reg_2),
        .I5(jump2_I_reg_3),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_98
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    D_32,
    \Using_FPGA.Native_1 ,
    CI,
    Y,
    \instr_EX_i_reg[12] ,
    \instr_EX_i_reg[12]_0 ,
    \instr_EX_i_reg[12]_1 ,
    Clk,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    take_Intr_Now_III,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.set_BIP_I_reg ,
    \Using_FPGA.set_BIP_I_reg_0 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output D_32;
  output \Using_FPGA.Native_1 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[12] ;
  input \instr_EX_i_reg[12]_0 ;
  input \instr_EX_i_reg[12]_1 ;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.set_BIP_I_reg ;
  input \Using_FPGA.set_BIP_I_reg_0 ;

  wire CI;
  wire Clk;
  wire D_32;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[12] ;
  wire \instr_EX_i_reg[12]_0 ;
  wire \instr_EX_i_reg[12]_1 ;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[12].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[12] ),
        .A1(\instr_EX_i_reg[12]_0 ),
        .A2(\instr_EX_i_reg[12]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h000F000F08000000)) 
    \Using_FPGA.Native_i_1__58 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\Using_FPGA.Native_4 ),
        .I4(\Using_FPGA.Native_5 ),
        .I5(\Using_FPGA.Native_6 ),
        .O(\Using_FPGA.Native_0 ));
  LUT4 #(
    .INIT(16'h1101)) 
    \Using_FPGA.Native_i_1__59 
       (.I0(\Using_FPGA.Native_7 ),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native ),
        .I3(\Using_FPGA.Native_8 ),
        .O(D_32));
  LUT3 #(
    .INIT(8'hF7)) 
    \Using_FPGA.set_BIP_I_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.set_BIP_I_reg ),
        .I2(\Using_FPGA.set_BIP_I_reg_0 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E_99
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    CI,
    Y,
    \instr_EX_i_reg[13] ,
    \instr_EX_i_reg[13]_0 ,
    \instr_EX_i_reg[13]_1 ,
    Clk,
    write_Reg_i_2,
    write_Reg_i_2_0,
    write_Reg_i_2_1,
    write_Reg_i_2_2,
    write_Reg_i_2_3);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[13] ;
  input \instr_EX_i_reg[13]_0 ;
  input \instr_EX_i_reg[13]_1 ;
  input Clk;
  input write_Reg_i_2;
  input write_Reg_i_2_0;
  input write_Reg_i_2_1;
  input write_Reg_i_2_2;
  input write_Reg_i_2_3;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[13] ;
  wire \instr_EX_i_reg[13]_0 ;
  wire \instr_EX_i_reg[13]_1 ;
  wire write_Reg_i_2;
  wire write_Reg_i_2_0;
  wire write_Reg_i_2_1;
  wire write_Reg_i_2_2;
  wire write_Reg_i_2_3;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[13].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[13] ),
        .A1(\instr_EX_i_reg[13]_0 ),
        .A2(\instr_EX_i_reg[13]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    write_Reg_i_5
       (.I0(\Using_FPGA.Native ),
        .I1(write_Reg_i_2),
        .I2(write_Reg_i_2_0),
        .I3(write_Reg_i_2_1),
        .I4(write_Reg_i_2_2),
        .I5(write_Reg_i_2_3),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E__parameterized0
   (Q_0,
    Q,
    Dbg_Clk);
  output Q_0;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q_0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.SRL16E_1/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h001B),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E__parameterized2
   (Q6_out,
    Q,
    Dbg_Clk);
  output Q6_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q6_out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[1].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'hFFFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q6_out));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E__parameterized2_24
   (Q2_out,
    Q,
    Dbg_Clk);
  output Q2_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q2_out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[5].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'hFFFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q2_out));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E__parameterized3
   (\Serial_Dbg_Intf.shift_count_reg[6] ,
    Q,
    Dbg_Clk,
    Dbg_TDO_INST_0_i_5,
    Q6_out,
    Q11_in,
    Q_0);
  output \Serial_Dbg_Intf.shift_count_reg[6] ;
  input [6:0]Q;
  input Dbg_Clk;
  input Dbg_TDO_INST_0_i_5;
  input Q6_out;
  input Q11_in;
  input Q_0;

  wire Dbg_Clk;
  wire Dbg_TDO_INST_0_i_24_n_0;
  wire Dbg_TDO_INST_0_i_5;
  wire [6:0]Q;
  wire Q5_out;
  wire Q6_out;
  wire Q_0;
  wire \Serial_Dbg_Intf.shift_count_reg[6] ;

  MUXF7 Dbg_TDO_INST_0_i_13
       (.I0(Dbg_TDO_INST_0_i_24_n_0),
        .I1(Dbg_TDO_INST_0_i_5),
        .O(\Serial_Dbg_Intf.shift_count_reg[6] ),
        .S(Q[6]));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT5 #(
    .INIT(32'hA0CFA0C0)) 
    Dbg_TDO_INST_0_i_24
       (.I0(Q5_out),
        .I1(Q6_out),
        .I2(Q[5]),
        .I3(Q[4]),
        .I4(Q_0),
        .O(Dbg_TDO_INST_0_i_24_n_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h3FFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q5_out));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E__parameterized3_25
   (\Serial_Dbg_Intf.shift_count_reg[5] ,
    Q,
    Dbg_Clk,
    Q2_out,
    Q3_out,
    Q4_out);
  output \Serial_Dbg_Intf.shift_count_reg[5] ;
  input [5:0]Q;
  input Dbg_Clk;
  input Q2_out;
  input Q3_out;
  input Q4_out;

  wire Dbg_Clk;
  wire [5:0]Q;
  wire Q1_out;
  wire Q2_out;
  wire \Serial_Dbg_Intf.shift_count_reg[5] ;

  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'hA0C0)) 
    Dbg_TDO_INST_0_i_25
       (.I0(Q1_out),
        .I1(Q2_out),
        .I2(Q[5]),
        .I3(Q[4]),
        .O(\Serial_Dbg_Intf.shift_count_reg[5] ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h3FFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q1_out));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E__parameterized4
   (Q2_in,
    Q,
    Dbg_Clk);
  output Q2_in;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q2_in;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.SRL16E_3/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h1060),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q2_in));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_MB_SRL16E" *) 
module cpu_microblaze_v11_0_0_MB_SRL16E__parameterized5
   (Dbg_TDO,
    Q,
    Dbg_Clk,
    Data_Read_Reg_En,
    TDO_Data_Reg__31,
    Dbg_TDO_INST_0_i_2_0,
    Config_Reg_En,
    Instr_Insert_Reg_En,
    TDO_Instr_Reg__0,
    tdo_config_word1_0,
    Dbg_TDO_INST_0_i_5_0,
    Q2_in,
    Q3_in,
    Q0_out,
    Status_Reg_En,
    TDO_Status_Reg__17);
  output Dbg_TDO;
  input [7:0]Q;
  input Dbg_Clk;
  input Data_Read_Reg_En;
  input TDO_Data_Reg__31;
  input Dbg_TDO_INST_0_i_2_0;
  input Config_Reg_En;
  input Instr_Insert_Reg_En;
  input TDO_Instr_Reg__0;
  input tdo_config_word1_0;
  input Dbg_TDO_INST_0_i_5_0;
  input Q2_in;
  input Q3_in;
  input Q0_out;
  input Status_Reg_En;
  input TDO_Status_Reg__17;

  wire Config_Reg_En;
  wire Data_Read_Reg_En;
  wire Dbg_Clk;
  wire Dbg_TDO;
  wire Dbg_TDO_INST_0_i_12_n_0;
  wire Dbg_TDO_INST_0_i_23_n_0;
  wire Dbg_TDO_INST_0_i_2_0;
  wire Dbg_TDO_INST_0_i_2_n_0;
  wire Dbg_TDO_INST_0_i_5_n_0;
  wire Instr_Insert_Reg_En;
  wire [7:0]Q;
  wire Q1_in;
  wire Q2_in;
  wire Status_Reg_En;
  wire TDO_Data_Reg__31;
  wire TDO_Instr_Reg__0;
  wire TDO_Status_Reg__17;

  LUT3 #(
    .INIT(8'hE4)) 
    Dbg_TDO_INST_0
       (.I0(Status_Reg_En),
        .I1(Dbg_TDO_INST_0_i_2_n_0),
        .I2(TDO_Status_Reg__17),
        .O(Dbg_TDO));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT2 #(
    .INIT(4'h2)) 
    Dbg_TDO_INST_0_i_12
       (.I0(Dbg_TDO_INST_0_i_23_n_0),
        .I1(Q[6]),
        .O(Dbg_TDO_INST_0_i_12_n_0));
  MUXF7 Dbg_TDO_INST_0_i_2
       (.I0(Dbg_TDO_INST_0_i_5_n_0),
        .I1(TDO_Data_Reg__31),
        .O(Dbg_TDO_INST_0_i_2_n_0),
        .S(Data_Read_Reg_En));
  (* OPT_MODIFIED = "PROPCONST " *) 
  LUT4 #(
    .INIT(16'hA0C0)) 
    Dbg_TDO_INST_0_i_23
       (.I0(Q1_in),
        .I1(Q2_in),
        .I2(Q[5]),
        .I3(Q[4]),
        .O(Dbg_TDO_INST_0_i_23_n_0));
  LUT6 #(
    .INIT(64'hB8FFB800B800B800)) 
    Dbg_TDO_INST_0_i_5
       (.I0(Dbg_TDO_INST_0_i_12_n_0),
        .I1(Q[7]),
        .I2(Dbg_TDO_INST_0_i_2_0),
        .I3(Config_Reg_En),
        .I4(Instr_Insert_Reg_En),
        .I5(TDO_Instr_Reg__0),
        .O(Dbg_TDO_INST_0_i_5_n_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.SRL16E_4/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h2500),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q1_in));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit
   (out,
    reset_temp,
    Clk);
  output [0:0]out;
  input reset_temp;
  input Clk;

  wire Clk;
  wire reset_temp;
  (* async_reg = "true" *) wire [1:2]sync;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(reset_temp),
        .Q(sync[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit_1
   (out,
    SR,
    Wakeup,
    Clk);
  output [0:0]out;
  input [0:0]SR;
  input [0:0]Wakeup;
  input Clk;

  wire Clk;
  wire [0:0]SR;
  wire [0:0]Wakeup;
  (* async_reg = "true" *) wire [1:2]sync;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Wakeup),
        .Q(sync[1]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit_2
   (out,
    SR,
    Wakeup,
    Clk);
  output [0:0]out;
  input [0:0]SR;
  input [0:0]Wakeup;
  input Clk;

  wire Clk;
  wire [0:0]SR;
  wire [0:0]Wakeup;
  (* async_reg = "true" *) wire [1:2]sync;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Wakeup),
        .Q(sync[1]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit_49
   (sample_synced,
    p_84_out,
    Q,
    sync_reset,
    D,
    Clk);
  output [0:0]sample_synced;
  output p_84_out;
  input [0:0]Q;
  input sync_reset;
  input [0:0]D;
  input Clk;

  wire Clk;
  wire [0:0]D;
  wire [0:0]Q;
  wire p_84_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.normal_stop_cmd_i_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(p_84_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit_50
   (sample_synced,
    p_81_out,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output p_81_out;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire p_81_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.force_stop_cmd_i_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(p_81_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit_51
   (sample_synced,
    \Serial_Dbg_Intf.sample_synced_1_reg[8] ,
    p_78_out,
    Q,
    \Serial_Dbg_Intf.trig_in_1_reg ,
    Dbg_Trig_In,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  output p_78_out;
  input [2:0]Q;
  input [1:0]\Serial_Dbg_Intf.trig_in_1_reg ;
  input [0:0]Dbg_Trig_In;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [2:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire p_78_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.start_single_cmd_i_1 
       (.I0(sync[2]),
        .I1(Q[2]),
        .O(p_78_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit_52
   (sample_synced,
    p_76_out,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output p_76_out;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire p_76_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.read_register_MSR_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(p_76_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit_53
   (sample_synced,
    p_73_out,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output p_73_out;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire p_73_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.read_register_PC_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(p_73_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit_54
   (sample_synced,
    p_13_out,
    Q,
    \Serial_Dbg_Intf.continue_from_brk_reg ,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output p_13_out;
  input [1:0]Q;
  input [0:0]\Serial_Dbg_Intf.continue_from_brk_reg ;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Serial_Dbg_Intf.continue_from_brk_reg ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire p_13_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT4 #(
    .INIT(16'h4F44)) 
    \Serial_Dbg_Intf.continue_from_brk_i_1 
       (.I0(Q[1]),
        .I1(sync[2]),
        .I2(Q[0]),
        .I3(\Serial_Dbg_Intf.continue_from_brk_reg ),
        .O(p_13_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit_55
   (sample_synced,
    p_66_out,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output p_66_out;
  input \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire p_66_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.if_debug_ready_i_i_1 
       (.I0(sync[2]),
        .I1(\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .O(p_66_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit_56
   (sample_synced,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    Q,
    Dbg_Trig_Ack_Out,
    sync_reset,
    Dbg_Trig_Out,
    Clk);
  output [0:0]sample_synced;
  output \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input [0:0]Q;
  input [0:0]Dbg_Trig_Ack_Out;
  input sync_reset;
  input [0:0]Dbg_Trig_Out;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit__parameterized0
   (D,
    dbg_brki_hit,
    Dbg_Clk,
    config_with_scan_reset);
  output [0:0]D;
  input dbg_brki_hit;
  input Dbg_Clk;
  input config_with_scan_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire config_with_scan_reset;
  wire dbg_brki_hit;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(dbg_brki_hit),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit__parameterized0_28
   (D,
    config_with_scan_reset,
    Pause,
    Dbg_Clk,
    Scan_En,
    Scan_Reset_Sel,
    Scan_Reset);
  output [0:0]D;
  output config_with_scan_reset;
  input Pause;
  input Dbg_Clk;
  input Scan_En;
  input Scan_Reset_Sel;
  input Scan_Reset;

  wire ZERO;

  assign config_with_scan_reset = ZERO;
  (* OPT_MODIFIED = "PROPCONST " *) 
  GND GND
       (.G(ZERO));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit__parameterized0_29
   (D,
    running_clock,
    Dbg_Clk,
    config_with_scan_reset);
  output [0:0]D;
  input running_clock;
  input Dbg_Clk;
  input config_with_scan_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire config_with_scan_reset;
  wire running_clock;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(running_clock),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit__parameterized0_30
   (D,
    Sleep,
    Dbg_Clk,
    config_with_scan_reset,
    Sleep_Out,
    Sleep_Decode);
  output [0:0]D;
  output Sleep;
  input Dbg_Clk;
  input config_with_scan_reset;
  input Sleep_Out;
  input Sleep_Decode;

  wire [0:0]D;
  wire Dbg_Clk;
  wire \^Sleep ;
  wire Sleep_Decode;
  wire Sleep_Out;
  wire config_with_scan_reset;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\^Sleep ),
        .Q(D));
  LUT2 #(
    .INIT(4'hE)) 
    Sleep_INST_0
       (.I0(Sleep_Out),
        .I1(Sleep_Decode),
        .O(\^Sleep ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit__parameterized0_31
   (D,
    \Single_Synchronize.use_async_reset.sync_reg_0 ,
    Dbg_Clk,
    config_with_scan_reset);
  output [0:0]D;
  input \Single_Synchronize.use_async_reset.sync_reg_0 ;
  input Dbg_Clk;
  input config_with_scan_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire \Single_Synchronize.use_async_reset.sync_reg_0 ;
  wire config_with_scan_reset;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Single_Synchronize.use_async_reset.sync_reg_0 ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_bit" *) 
module cpu_microblaze_v11_0_0_mb_sync_bit__parameterized0_59
   (D,
    Raw,
    Dbg_Clk,
    config_with_scan_reset);
  output [0:0]D;
  input Raw;
  input Dbg_Clk;
  input config_with_scan_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Raw;
  wire config_with_scan_reset;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Raw),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_vec" *) 
module cpu_microblaze_v11_0_0_mb_sync_vec
   (D,
    Raw,
    Dbg_Clk,
    config_with_scan_reset);
  output [0:0]D;
  input Raw;
  input Dbg_Clk;
  input config_with_scan_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Raw;
  wire config_with_scan_reset;

  cpu_microblaze_v11_0_0_mb_sync_bit__parameterized0_59 \sync_bits[0].sync_bit 
       (.D(D),
        .Dbg_Clk(Dbg_Clk),
        .Raw(Raw),
        .config_with_scan_reset(config_with_scan_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_0_mb_sync_vec" *) 
module cpu_microblaze_v11_0_0_mb_sync_vec__parameterized0
   (sample_synced,
    p_84_out,
    p_81_out,
    p_76_out,
    p_73_out,
    \Serial_Dbg_Intf.sample_synced_1_reg[8] ,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    p_66_out,
    p_13_out,
    p_78_out,
    Q,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    sync_reset,
    D,
    Clk,
    \Synchronize.use_sync_reset.sync_reg[1] ,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    \Synchronize.use_sync_reset.sync_reg[1]_1 ,
    \Synchronize.use_sync_reset.sync_reg[1]_2 ,
    \Synchronize.use_sync_reset.sync_reg[1]_3 ,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_In,
    \Synchronize.use_sync_reset.sync_reg[1]_4 );
  output [0:9]sample_synced;
  output p_84_out;
  output p_81_out;
  output p_76_out;
  output p_73_out;
  output \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  output \Synchronize.use_sync_reset.sync_reg[2] ;
  output p_66_out;
  output p_13_out;
  output p_78_out;
  input [7:0]Q;
  input [0:0]Dbg_Trig_In;
  input [0:0]Dbg_Trig_Ack_Out;
  input \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input sync_reset;
  input [0:0]D;
  input Clk;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input [1:0]\Synchronize.use_sync_reset.sync_reg[1]_1 ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_2 ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_3 ;
  input [0:0]Dbg_Trig_Out;
  input [0:0]Dbg_Trig_Ack_In;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_4 ;

  wire Clk;
  wire [0:0]D;
  wire [0:0]Dbg_Trig_Out;
  wire [7:0]Q;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire [1:0]\Synchronize.use_sync_reset.sync_reg[1]_1 ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_2 ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_3 ;
  wire p_13_out;
  wire p_66_out;
  wire p_73_out;
  wire p_76_out;
  wire p_78_out;
  wire p_81_out;
  wire p_84_out;
  wire [0:9]sample_synced;
  wire sync_reset;
  wire \NLW_sync_bits[2].sync_bit_Serial_Dbg_Intf.sample_synced_1_reg[8]_UNCONNECTED ;
  wire [0:0]\NLW_sync_bits[2].sync_bit_Dbg_Trig_In_UNCONNECTED ;
  wire [1:0]\NLW_sync_bits[2].sync_bit_Q_UNCONNECTED ;
  wire [1:0]\NLW_sync_bits[2].sync_bit_Serial_Dbg_Intf.trig_in_1_reg_UNCONNECTED ;
  wire \NLW_sync_bits[7].sync_bit_Synchronize.use_sync_reset.sync_reg[2]_0_UNCONNECTED ;
  wire [0:0]\NLW_sync_bits[7].sync_bit_Dbg_Trig_Ack_Out_UNCONNECTED ;
  wire [0:0]\NLW_sync_bits[7].sync_bit_Q_UNCONNECTED ;

  cpu_microblaze_v11_0_0_mb_sync_bit_49 \sync_bits[0].sync_bit 
       (.Clk(Clk),
        .D(D),
        .Q(Q[7]),
        .p_84_out(p_84_out),
        .sample_synced(sample_synced[0]),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_mb_sync_bit_50 \sync_bits[1].sync_bit 
       (.Clk(Clk),
        .Q(Q[6]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] ),
        .p_81_out(p_81_out),
        .sample_synced(sample_synced[1]),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_mb_sync_bit_51 \sync_bits[2].sync_bit 
       (.Clk(Clk),
        .Dbg_Trig_In(\NLW_sync_bits[2].sync_bit_Dbg_Trig_In_UNCONNECTED [0]),
        .Q({Q[5],\NLW_sync_bits[2].sync_bit_Q_UNCONNECTED [1:0]}),
        .\Serial_Dbg_Intf.sample_synced_1_reg[8] (\NLW_sync_bits[2].sync_bit_Serial_Dbg_Intf.sample_synced_1_reg[8]_UNCONNECTED ),
        .\Serial_Dbg_Intf.trig_in_1_reg (\NLW_sync_bits[2].sync_bit_Serial_Dbg_Intf.trig_in_1_reg_UNCONNECTED [1:0]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .p_78_out(p_78_out),
        .sample_synced(sample_synced[2]),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_mb_sync_bit_52 \sync_bits[3].sync_bit 
       (.Clk(Clk),
        .Q(Q[4]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_1 [1]),
        .p_76_out(p_76_out),
        .sample_synced(sample_synced[3]),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_mb_sync_bit_53 \sync_bits[4].sync_bit 
       (.Clk(Clk),
        .Q(Q[3]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_1 [0]),
        .p_73_out(p_73_out),
        .sample_synced(sample_synced[4]),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_mb_sync_bit_54 \sync_bits[5].sync_bit 
       (.Clk(Clk),
        .Q(Q[2:1]),
        .\Serial_Dbg_Intf.continue_from_brk_reg (sample_synced[7]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_2 ),
        .p_13_out(p_13_out),
        .sample_synced(sample_synced[5]),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_mb_sync_bit_55 \sync_bits[6].sync_bit 
       (.Clk(Clk),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_3 ),
        .p_66_out(p_66_out),
        .sample_synced(sample_synced[6]),
        .sync_reset(sync_reset));
  cpu_microblaze_v11_0_0_mb_sync_bit_56 \sync_bits[7].sync_bit 
       (.Clk(Clk),
        .Dbg_Trig_Ack_Out(\NLW_sync_bits[7].sync_bit_Dbg_Trig_Ack_Out_UNCONNECTED [0]),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Q(\NLW_sync_bits[7].sync_bit_Q_UNCONNECTED [0]),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (\NLW_sync_bits[7].sync_bit_Synchronize.use_sync_reset.sync_reg[2]_0_UNCONNECTED ),
        .sample_synced(sample_synced[7]),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "mux4_8" *) 
module cpu_mux4_8
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ,
    sel_Write_Mux_MSB);
  output [15:0]D;
  input [0:31]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [0:31]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  wire [15:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  cpu_MB_LUT6_2__parameterized16_833 \GEN4_LOOP[0].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [0],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [8],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [16],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [24]}),
        .D({D[15],D[7]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  cpu_MB_LUT6_2__parameterized16_834 \GEN4_LOOP[1].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [1],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [9],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [17],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [25]}),
        .D({D[14],D[6]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  cpu_MB_LUT6_2__parameterized16_835 \GEN4_LOOP[2].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [2],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [10],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [18],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [26]}),
        .D({D[13],D[5]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  cpu_MB_LUT6_2__parameterized16_836 \GEN4_LOOP[3].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [3],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [11],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [19],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [27]}),
        .D({D[12],D[4]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  cpu_MB_LUT6_2__parameterized16_837 \GEN4_LOOP[4].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [4],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [12],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [20],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [28]}),
        .D({D[11],D[3]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  cpu_MB_LUT6_2__parameterized16_838 \GEN4_LOOP[5].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [5],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [13],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [21],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [29]}),
        .D({D[10],D[2]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  cpu_MB_LUT6_2__parameterized16_839 \GEN4_LOOP[6].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [6],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [14],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [22],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [30]}),
        .D({D[9],D[1]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  cpu_MB_LUT6_2__parameterized16_840 \GEN4_LOOP[7].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [7],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [15],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [23],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [31]}),
        .D({D[8],D[0]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
endmodule

(* ORIG_REF_NAME = "mux_bus" *) 
module cpu_mux_bus
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [0:31]Y;
  input [0:31]Instr;
  input [32:0]LOCKSTEP_Master_Out;

  wire [0:31]Instr;
  wire [32:0]LOCKSTEP_Master_Out;
  wire [0:31]Y;

  cpu_MB_LUT6_2__parameterized16 \Mux_Loop[0].I_MUX_LUT6 
       (.Instr({Instr[0],Instr[16]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32:31],LOCKSTEP_Master_Out[15]}),
        .Y({Y[0],Y[16]}));
  cpu_MB_LUT6_2__parameterized16_3 \Mux_Loop[10].I_MUX_LUT6 
       (.Instr({Instr[10],Instr[26]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[21],LOCKSTEP_Master_Out[5]}),
        .Y({Y[10],Y[26]}));
  cpu_MB_LUT6_2__parameterized16_4 \Mux_Loop[11].I_MUX_LUT6 
       (.Instr({Instr[11],Instr[27]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[20],LOCKSTEP_Master_Out[4]}),
        .Y({Y[11],Y[27]}));
  cpu_MB_LUT6_2__parameterized16_5 \Mux_Loop[12].I_MUX_LUT6 
       (.Instr({Instr[12],Instr[28]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[19],LOCKSTEP_Master_Out[3]}),
        .Y({Y[12],Y[28]}));
  cpu_MB_LUT6_2__parameterized16_6 \Mux_Loop[13].I_MUX_LUT6 
       (.Instr({Instr[13],Instr[29]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[18],LOCKSTEP_Master_Out[2]}),
        .Y({Y[13],Y[29]}));
  cpu_MB_LUT6_2__parameterized16_7 \Mux_Loop[14].I_MUX_LUT6 
       (.Instr({Instr[14],Instr[30]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[17],LOCKSTEP_Master_Out[1]}),
        .Y({Y[14],Y[30]}));
  cpu_MB_LUT6_2__parameterized16_8 \Mux_Loop[15].I_MUX_LUT6 
       (.Instr({Instr[15],Instr[31]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[16],LOCKSTEP_Master_Out[0]}),
        .Y({Y[15],Y[31]}));
  cpu_MB_LUT6_2__parameterized16_9 \Mux_Loop[1].I_MUX_LUT6 
       (.Instr({Instr[1],Instr[17]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[30],LOCKSTEP_Master_Out[14]}),
        .Y({Y[1],Y[17]}));
  cpu_MB_LUT6_2__parameterized16_10 \Mux_Loop[2].I_MUX_LUT6 
       (.Instr({Instr[2],Instr[18]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[29],LOCKSTEP_Master_Out[13]}),
        .Y({Y[2],Y[18]}));
  cpu_MB_LUT6_2__parameterized16_11 \Mux_Loop[3].I_MUX_LUT6 
       (.Instr({Instr[3],Instr[19]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[28],LOCKSTEP_Master_Out[12]}),
        .Y({Y[3],Y[19]}));
  cpu_MB_LUT6_2__parameterized16_12 \Mux_Loop[4].I_MUX_LUT6 
       (.Instr({Instr[4],Instr[20]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[27],LOCKSTEP_Master_Out[11]}),
        .Y({Y[4],Y[20]}));
  cpu_MB_LUT6_2__parameterized16_13 \Mux_Loop[5].I_MUX_LUT6 
       (.Instr({Instr[5],Instr[21]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[26],LOCKSTEP_Master_Out[10]}),
        .Y({Y[5],Y[21]}));
  cpu_MB_LUT6_2__parameterized16_14 \Mux_Loop[6].I_MUX_LUT6 
       (.Instr({Instr[6],Instr[22]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[25],LOCKSTEP_Master_Out[9]}),
        .Y({Y[6],Y[22]}));
  cpu_MB_LUT6_2__parameterized16_15 \Mux_Loop[7].I_MUX_LUT6 
       (.Instr({Instr[7],Instr[23]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[24],LOCKSTEP_Master_Out[8]}),
        .Y({Y[7],Y[23]}));
  cpu_MB_LUT6_2__parameterized16_16 \Mux_Loop[8].I_MUX_LUT6 
       (.Instr({Instr[8],Instr[24]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[23],LOCKSTEP_Master_Out[7]}),
        .Y({Y[8],Y[24]}));
  cpu_MB_LUT6_2__parameterized16_17 \Mux_Loop[9].I_MUX_LUT6 
       (.Instr({Instr[9],Instr[25]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[22],LOCKSTEP_Master_Out[6]}),
        .Y({Y[9],Y[25]}));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
